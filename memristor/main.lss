
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000016  00800100  00000bf0  00000c84  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000bf0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000044  00800116  00800116  00000c9a  2**0
                  ALLOC
  3 .debug_aranges 00000020  00000000  00000000  00000c9a  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 000002d2  00000000  00000000  00000cba  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000007e9  00000000  00000000  00000f8c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000001f4  00000000  00000000  00001775  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000a91  00000000  00000000  00001969  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000f0  00000000  00000000  000023fc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000002a1  00000000  00000000  000024ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000116  00000000  00000000  0000278d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 75 01 	jmp	0x2ea	; 0x2ea <__vector_9>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 ed 04 	jmp	0x9da	; 0x9da <__vector_18>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e0 ef       	ldi	r30, 0xF0	; 240
  7c:	fb e0       	ldi	r31, 0x0B	; 11
  7e:	02 c0       	rjmp	.+4      	; 0x84 <.do_copy_data_start>

00000080 <.do_copy_data_loop>:
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0

00000084 <.do_copy_data_start>:
  84:	a6 31       	cpi	r26, 0x16	; 22
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <.do_copy_data_loop>

0000008a <__do_clear_bss>:
  8a:	11 e0       	ldi	r17, 0x01	; 1
  8c:	a6 e1       	ldi	r26, 0x16	; 22
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	aa 35       	cpi	r26, 0x5A	; 90
  96:	b1 07       	cpc	r27, r17
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 1e 01 	call	0x23c	; 0x23c <main>
  9e:	0c 94 f6 05 	jmp	0xbec	; 0xbec <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <ADC_Init>:
uint8_t ADCH_, ADCL_, ADCH__, ADCL__;

//функция инициализаци АЦП
//АЦП используется для регистрации тока, проходящего через мемристор
void ADC_Init(){
 ADCSRA |= (1 << ADEN) // Включаем АЦП
  a6:	ea e7       	ldi	r30, 0x7A	; 122
  a8:	f0 e0       	ldi	r31, 0x00	; 0
  aa:	80 81       	ld	r24, Z
  ac:	83 68       	ori	r24, 0x83	; 131
  ae:	80 83       	st	Z, r24
 //ADCSRA&=~(1 << ADPS1)|(1 << ADPS0)|(1 << ADPS1);
 |(1 << ADPS1)|(1 << ADPS0)|(1 << ADPS1);    // устанавливаем предделитель преобразователя на 8
 ADMUX |= (0 << REFS1)|(1 << REFS0) //выставляем опорное напряжение, как внешний ИОН
  b0:	ec e7       	ldi	r30, 0x7C	; 124
  b2:	f0 e0       	ldi	r31, 0x00	; 0
  b4:	80 81       	ld	r24, Z
  b6:	80 64       	ori	r24, 0x40	; 64
  b8:	80 83       	st	Z, r24
 |(0 << MUX0)|(0 << MUX1)|(0 << MUX2)|(0 << MUX3); // снимать сигнал будем с  входа PC0 
}
  ba:	08 95       	ret

000000bc <timer_init>:

//функция инициализации таймера
// Таймер используется для формирования временной последовательности значений, формируемых с ЦАПа
void timer_init()
{
    TCCR2A = 0;        
  bc:	10 92 b0 00 	sts	0x00B0, r1
    TCCR2B = 0;
  c0:	e1 eb       	ldi	r30, 0xB1	; 177
  c2:	f0 e0       	ldi	r31, 0x00	; 0
  c4:	10 82       	st	Z, r1
    
    TCCR2B |= (1<<CS21) ;    
  c6:	80 81       	ld	r24, Z
  c8:	82 60       	ori	r24, 0x02	; 2
  ca:	80 83       	st	Z, r24
    TIMSK2 = (1 << TOIE2);
  cc:	81 e0       	ldi	r24, 0x01	; 1
  ce:	80 93 70 00 	sts	0x0070, r24
}
  d2:	08 95       	ret

000000d4 <uart_init>:

//функция инициализации UART-интерфейса
void uart_init(unsigned int ubrr)
{	
	UBRR0H = (unsigned char)(ubrr>>8);
  d4:	90 93 c5 00 	sts	0x00C5, r25
	UBRR0L = (unsigned char)ubrr;
  d8:	80 93 c4 00 	sts	0x00C4, r24
	UCSR0B = (1<<RXCIE0)|(1<<RXEN0)|(1<<TXEN0);
  dc:	88 e9       	ldi	r24, 0x98	; 152
  de:	80 93 c1 00 	sts	0x00C1, r24
	UCSR0C = (1<<USBS0)|(3<<UCSZ00);
  e2:	8e e0       	ldi	r24, 0x0E	; 14
  e4:	80 93 c2 00 	sts	0x00C2, r24
}
  e8:	08 95       	ret

000000ea <SPI_MasterInit>:

//функция инициализации SPI
void SPI_MasterInit()
{
	DDR_SPI = (1<<DD_MOSI)|(1<<DD_SCK)|(1<<SPI_SS);
  ea:	8c e2       	ldi	r24, 0x2C	; 44
  ec:	84 b9       	out	0x04, r24	; 4
	SPCR = (1<<SPE)|(0<<DORD)|(1<<MSTR)|(1<<CPOL)|(0<<CPHA);//|(1<<SPR1)|(0<<SPR0);
  ee:	88 e5       	ldi	r24, 0x58	; 88
  f0:	8c bd       	out	0x2c, r24	; 44
}
  f2:	08 95       	ret

000000f4 <gatherMult>:
}

			
void gatherMult()
{
	reset_BYTE(PORTD, 6);
  f4:	5e 98       	cbi	0x0b, 6	; 11
	reset_BYTE(PORTD, 7);				
  f6:	5f 98       	cbi	0x0b, 7	; 11
	reset_BYTE(PORTD, 5);
  f8:	5d 98       	cbi	0x0b, 5	; 11
	reset_BYTE(PORTC, 4);
  fa:	44 98       	cbi	0x08, 4	; 8
	
	
	SET_BYTE(PORTC, 1);				
  fc:	41 9a       	sbi	0x08, 1	; 8
	SET_BYTE(PORTB, 2);
  fe:	2a 9a       	sbi	0x05, 2	; 5
	SET_BYTE(PORTB, 1);
 100:	29 9a       	sbi	0x05, 1	; 5
	SET_BYTE(PORTB, 0);
 102:	28 9a       	sbi	0x05, 0	; 5
}
 104:	08 95       	ret

00000106 <separMult>:
void separMult()
{
	reset_BYTE(PORTB, 1);
 106:	29 98       	cbi	0x05, 1	; 5
	reset_BYTE(PORTB, 2);
 108:	2a 98       	cbi	0x05, 2	; 5
	reset_BYTE(PORTC, 1);
 10a:	41 98       	cbi	0x08, 1	; 8
	
	SET_BYTE(PORTC, 4);						
 10c:	44 9a       	sbi	0x08, 4	; 8
	SET_BYTE(PORTD, 6);
 10e:	5e 9a       	sbi	0x0b, 6	; 11
	SET_BYTE(PORTD, 7);
 110:	5f 9a       	sbi	0x0b, 7	; 11
	SET_BYTE(PORTB, 0);
 112:	28 9a       	sbi	0x05, 0	; 5
	SET_BYTE(PORTD, 5);
 114:	5d 9a       	sbi	0x0b, 5	; 11
}
 116:	08 95       	ret

00000118 <SPI_WriteByte>:



void SPI_WriteByte(uint8_t data)
{
   SPDR = data;
 118:	8e bd       	out	0x2e, r24	; 46
  while(!(SPSR & (1<<SPIF)));
 11a:	0d b4       	in	r0, 0x2d	; 45
 11c:	07 fe       	sbrs	r0, 7
 11e:	fd cf       	rjmp	.-6      	; 0x11a <SPI_WriteByte+0x2>
}
 120:	08 95       	ret

00000122 <prepareResetDAC>:

}


void prepareResetDAC(int8_t chan)//_____________bipolar!!! and <<4 larger
{
 122:	0f 93       	push	r16
 124:	1f 93       	push	r17
 126:	cf 93       	push	r28
 128:	df 93       	push	r29
	PORTD&=~(1<<SYNC_PINS[chan>>3]);
 12a:	9b b1       	in	r25, 0x0b	; 11
 12c:	28 2f       	mov	r18, r24
 12e:	25 95       	asr	r18
 130:	25 95       	asr	r18
 132:	25 95       	asr	r18
 134:	c2 2f       	mov	r28, r18
 136:	dd 27       	eor	r29, r29
 138:	c7 fd       	sbrc	r28, 7
 13a:	d0 95       	com	r29
 13c:	c0 50       	subi	r28, 0x00	; 0
 13e:	df 4f       	sbci	r29, 0xFF	; 255
 140:	01 e0       	ldi	r16, 0x01	; 1
 142:	10 e0       	ldi	r17, 0x00	; 0
 144:	98 01       	movw	r18, r16
 146:	08 80       	ld	r0, Y
 148:	02 c0       	rjmp	.+4      	; 0x14e <prepareResetDAC+0x2c>
 14a:	22 0f       	add	r18, r18
 14c:	33 1f       	adc	r19, r19
 14e:	0a 94       	dec	r0
 150:	e2 f7       	brpl	.-8      	; 0x14a <prepareResetDAC+0x28>
 152:	20 95       	com	r18
 154:	29 23       	and	r18, r25
 156:	2b b9       	out	0x0b, r18	; 11
	SPI_WriteByte(0b00001000|chan_addrs[chan%8]); // magic numbers, fuck
 158:	68 e0       	ldi	r22, 0x08	; 8
 15a:	0e 94 d5 05 	call	0xbaa	; 0xbaa <__divmodqi4>
 15e:	e9 2f       	mov	r30, r25
 160:	ff 27       	eor	r31, r31
 162:	e7 fd       	sbrc	r30, 7
 164:	f0 95       	com	r31
 166:	eb 5f       	subi	r30, 0xFB	; 251
 168:	fe 4f       	sbci	r31, 0xFE	; 254
 16a:	80 81       	ld	r24, Z
 16c:	88 60       	ori	r24, 0x08	; 8
 16e:	90 e0       	ldi	r25, 0x00	; 0
 170:	0e 94 8c 00 	call	0x118	; 0x118 <SPI_WriteByte>
	SPI_WriteByte(0);		
 174:	80 e0       	ldi	r24, 0x00	; 0
 176:	90 e0       	ldi	r25, 0x00	; 0
 178:	0e 94 8c 00 	call	0x118	; 0x118 <SPI_WriteByte>
	PORTD|=(1<<SYNC_PINS[chan>>3]);
 17c:	8b b1       	in	r24, 0x0b	; 11
 17e:	08 80       	ld	r0, Y
 180:	02 c0       	rjmp	.+4      	; 0x186 <prepareResetDAC+0x64>
 182:	00 0f       	add	r16, r16
 184:	11 1f       	adc	r17, r17
 186:	0a 94       	dec	r0
 188:	e2 f7       	brpl	.-8      	; 0x182 <prepareResetDAC+0x60>
 18a:	80 2b       	or	r24, r16
 18c:	8b b9       	out	0x0b, r24	; 11
}
 18e:	df 91       	pop	r29
 190:	cf 91       	pop	r28
 192:	1f 91       	pop	r17
 194:	0f 91       	pop	r16
 196:	08 95       	ret

00000198 <prepareSetDAC>:

//функция управления ЦАПом 
// при этом, управление регистром LDAC должно использоваться 
//вне функции в перспепктиве создания многоканальной схемы
void prepareSetDAC(int16_t x,uint8_t chan)//_____________bipolar!!! and <<4 larger
{
 198:	cf 92       	push	r12
 19a:	df 92       	push	r13
 19c:	ef 92       	push	r14
 19e:	ff 92       	push	r15
 1a0:	0f 93       	push	r16
 1a2:	1f 93       	push	r17
 1a4:	e6 2f       	mov	r30, r22
	x=-x;
 1a6:	00 27       	eor	r16, r16
 1a8:	11 27       	eor	r17, r17
 1aa:	08 1b       	sub	r16, r24
 1ac:	19 0b       	sbc	r17, r25
	x+=2048;
 1ae:	00 50       	subi	r16, 0x00	; 0
 1b0:	18 4f       	sbci	r17, 0xF8	; 248
	PORTD&=~(1<<SYNC_PINS[chan>>3]);
 1b2:	2b b1       	in	r18, 0x0b	; 11
 1b4:	86 2f       	mov	r24, r22
 1b6:	86 95       	lsr	r24
 1b8:	86 95       	lsr	r24
 1ba:	86 95       	lsr	r24
 1bc:	30 e0       	ldi	r19, 0x00	; 0
 1be:	c3 2e       	mov	r12, r19
 1c0:	31 e0       	ldi	r19, 0x01	; 1
 1c2:	d3 2e       	mov	r13, r19
 1c4:	c8 0e       	add	r12, r24
 1c6:	d1 1c       	adc	r13, r1
 1c8:	91 e0       	ldi	r25, 0x01	; 1
 1ca:	e9 2e       	mov	r14, r25
 1cc:	f1 2c       	mov	r15, r1
 1ce:	c7 01       	movw	r24, r14
 1d0:	d6 01       	movw	r26, r12
 1d2:	0c 90       	ld	r0, X
 1d4:	02 c0       	rjmp	.+4      	; 0x1da <prepareSetDAC+0x42>
 1d6:	88 0f       	add	r24, r24
 1d8:	99 1f       	adc	r25, r25
 1da:	0a 94       	dec	r0
 1dc:	e2 f7       	brpl	.-8      	; 0x1d6 <prepareSetDAC+0x3e>
 1de:	80 95       	com	r24
 1e0:	82 23       	and	r24, r18
 1e2:	8b b9       	out	0x0b, r24	; 11
	send8 = (x >> 8);
	send8 &= 0b00001111;
	send8|= (chan_addrs[chan%8]);
 1e4:	81 2f       	mov	r24, r17
 1e6:	99 27       	eor	r25, r25
 1e8:	87 fd       	sbrc	r24, 7
 1ea:	9a 95       	dec	r25
 1ec:	8f 70       	andi	r24, 0x0F	; 15
 1ee:	f0 e0       	ldi	r31, 0x00	; 0
 1f0:	e7 70       	andi	r30, 0x07	; 7
 1f2:	f0 70       	andi	r31, 0x00	; 0
 1f4:	eb 5f       	subi	r30, 0xFB	; 251
 1f6:	fe 4f       	sbci	r31, 0xFE	; 254
 1f8:	20 81       	ld	r18, Z
 1fa:	82 2b       	or	r24, r18
 1fc:	80 93 4b 01 	sts	0x014B, r24
	SPI_WriteByte(send8);
 200:	90 e0       	ldi	r25, 0x00	; 0
 202:	0e 94 8c 00 	call	0x118	; 0x118 <SPI_WriteByte>
	send8=x;
 206:	00 93 4b 01 	sts	0x014B, r16
	SPI_WriteByte(send8);		
 20a:	80 2f       	mov	r24, r16
 20c:	90 e0       	ldi	r25, 0x00	; 0
 20e:	0e 94 8c 00 	call	0x118	; 0x118 <SPI_WriteByte>
	PORTD|=(1<<SYNC_PINS[chan>>3]);
 212:	8b b1       	in	r24, 0x0b	; 11
 214:	f6 01       	movw	r30, r12
 216:	00 80       	ld	r0, Z
 218:	02 c0       	rjmp	.+4      	; 0x21e <prepareSetDAC+0x86>
 21a:	ee 0c       	add	r14, r14
 21c:	ff 1c       	adc	r15, r15
 21e:	0a 94       	dec	r0
 220:	e2 f7       	brpl	.-8      	; 0x21a <prepareSetDAC+0x82>
 222:	8e 29       	or	r24, r14
 224:	8b b9       	out	0x0b, r24	; 11

}
 226:	1f 91       	pop	r17
 228:	0f 91       	pop	r16
 22a:	ff 90       	pop	r15
 22c:	ef 90       	pop	r14
 22e:	df 90       	pop	r13
 230:	cf 90       	pop	r12
 232:	08 95       	ret

00000234 <set_reverser>:
		else
			PORTB&=~(1<<4);
		break;

	}
}
 234:	08 95       	ret

00000236 <setDAC>:

void setDAC(){
	PORTD&=~(1<<LDAC);
 236:	5a 98       	cbi	0x0b, 2	; 11
	PORTD|=(1<<LDAC);	
 238:	5a 9a       	sbi	0x0b, 2	; 11
}
 23a:	08 95       	ret

0000023c <main>:


void main(void)
{
 23c:	1f 93       	push	r17
	BIG_STAT_N = STAT_N*STAT_CYCLE;
 23e:	80 91 04 01 	lds	r24, 0x0104
 242:	90 91 03 01 	lds	r25, 0x0103
 246:	89 9f       	mul	r24, r25
 248:	80 2d       	mov	r24, r0
 24a:	11 24       	eor	r1, r1
 24c:	80 93 52 01 	sts	0x0152, r24
 250:	e5 e0       	ldi	r30, 0x05	; 5
 252:	f1 e0       	ldi	r31, 0x01	; 1
	
	for (uint8_t i=0; i< 8;i++)
		chan_addrs[i]=chan_addrs[i]<<4;
 254:	80 81       	ld	r24, Z
 256:	82 95       	swap	r24
 258:	80 7f       	andi	r24, 0xF0	; 240
 25a:	81 93       	st	Z+, r24

void main(void)
{
	BIG_STAT_N = STAT_N*STAT_CYCLE;
	
	for (uint8_t i=0; i< 8;i++)
 25c:	81 e0       	ldi	r24, 0x01	; 1
 25e:	ed 30       	cpi	r30, 0x0D	; 13
 260:	f8 07       	cpc	r31, r24
 262:	c1 f7       	brne	.-16     	; 0x254 <main+0x18>
		chan_addrs[i]=chan_addrs[i]<<4;
	
	PORTC|=0b00000000;
 264:	88 b1       	in	r24, 0x08	; 8
 266:	88 b9       	out	0x08, r24	; 8
	DDRC= 0b00011110;
 268:	8e e1       	ldi	r24, 0x1E	; 30
 26a:	87 b9       	out	0x07, r24	; 7
	DDRD =0b11111111;
 26c:	8f ef       	ldi	r24, 0xFF	; 255
 26e:	8a b9       	out	0x0a, r24	; 10
	//PORTD|=0b00100000;	
	DDRB= 0b00011111;
 270:	8f e1       	ldi	r24, 0x1F	; 31
 272:	84 b9       	out	0x04, r24	; 4
	sei();
 274:	78 94       	sei
}

//функция инициализации SPI
void SPI_MasterInit()
{
	DDR_SPI = (1<<DD_MOSI)|(1<<DD_SCK)|(1<<SPI_SS);
 276:	8c e2       	ldi	r24, 0x2C	; 44
 278:	84 b9       	out	0x04, r24	; 4
	SPCR = (1<<SPE)|(0<<DORD)|(1<<MSTR)|(1<<CPOL)|(0<<CPHA);//|(1<<SPR1)|(0<<SPR0);
 27a:	88 e5       	ldi	r24, 0x58	; 88
 27c:	8c bd       	out	0x2c, r24	; 44

//функция инициализации таймера
// Таймер используется для формирования временной последовательности значений, формируемых с ЦАПа
void timer_init()
{
    TCCR2A = 0;        
 27e:	10 92 b0 00 	sts	0x00B0, r1
    TCCR2B = 0;
 282:	10 92 b1 00 	sts	0x00B1, r1
    
    TCCR2B |= (1<<CS21) ;    
 286:	80 91 b1 00 	lds	r24, 0x00B1
 28a:	82 60       	ori	r24, 0x02	; 2
 28c:	80 93 b1 00 	sts	0x00B1, r24
    TIMSK2 = (1 << TOIE2);
 290:	81 e0       	ldi	r24, 0x01	; 1
 292:	80 93 70 00 	sts	0x0070, r24
}

//функция инициализации UART-интерфейса
void uart_init(unsigned int ubrr)
{	
	UBRR0H = (unsigned char)(ubrr>>8);
 296:	10 92 c5 00 	sts	0x00C5, r1
	UBRR0L = (unsigned char)ubrr;
 29a:	83 e3       	ldi	r24, 0x33	; 51
 29c:	80 93 c4 00 	sts	0x00C4, r24
	UCSR0B = (1<<RXCIE0)|(1<<RXEN0)|(1<<TXEN0);
 2a0:	88 e9       	ldi	r24, 0x98	; 152
 2a2:	80 93 c1 00 	sts	0x00C1, r24
	UCSR0C = (1<<USBS0)|(3<<UCSZ00);
 2a6:	8e e0       	ldi	r24, 0x0E	; 14
 2a8:	80 93 c2 00 	sts	0x00C2, r24
uint8_t ADCH_, ADCL_, ADCH__, ADCL__;

//функция инициализаци АЦП
//АЦП используется для регистрации тока, проходящего через мемристор
void ADC_Init(){
 ADCSRA |= (1 << ADEN) // Включаем АЦП
 2ac:	80 91 7a 00 	lds	r24, 0x007A
 2b0:	83 68       	ori	r24, 0x83	; 131
 2b2:	80 93 7a 00 	sts	0x007A, r24
 //ADCSRA&=~(1 << ADPS1)|(1 << ADPS0)|(1 << ADPS1);
 |(1 << ADPS1)|(1 << ADPS0)|(1 << ADPS1);    // устанавливаем предделитель преобразователя на 8
 ADMUX |= (0 << REFS1)|(1 << REFS0) //выставляем опорное напряжение, как внешний ИОН
 2b6:	80 91 7c 00 	lds	r24, 0x007C
 2ba:	80 64       	ori	r24, 0x40	; 64
 2bc:	80 93 7c 00 	sts	0x007C, r24
    //DDRD = 0b000001100;	
	
	uart_init(BAUDRATE);
	ADC_Init();
	
	ADCSRA |= (1 << ADSC); 
 2c0:	80 91 7a 00 	lds	r24, 0x007A
 2c4:	80 64       	ori	r24, 0x40	; 64
 2c6:	80 93 7a 00 	sts	0x007A, r24
	ADCL;
 2ca:	80 91 78 00 	lds	r24, 0x0078
	ADCL;
 2ce:	80 91 78 00 	lds	r24, 0x0078
 2d2:	10 e0       	ldi	r17, 0x00	; 0
		//set_reverser(i,1);
	
	//set_reverser(0,0);
	for (int i=0;i<CHAN_N;i++)
	{
		prepareSetDAC(0,i);
 2d4:	80 e0       	ldi	r24, 0x00	; 0
 2d6:	90 e0       	ldi	r25, 0x00	; 0
 2d8:	61 2f       	mov	r22, r17
 2da:	0e 94 cc 00 	call	0x198	; 0x198 <prepareSetDAC>
 2de:	1f 5f       	subi	r17, 0xFF	; 255

	//for(int i=0;i<8;i++)
		//set_reverser(i,1);
	
	//set_reverser(0,0);
	for (int i=0;i<CHAN_N;i++)
 2e0:	11 31       	cpi	r17, 0x11	; 17
 2e2:	c1 f7       	brne	.-16     	; 0x2d4 <main+0x98>

	}
}

void setDAC(){
	PORTD&=~(1<<LDAC);
 2e4:	5a 98       	cbi	0x0b, 2	; 11
	PORTD|=(1<<LDAC);	
 2e6:	5a 9a       	sbi	0x0b, 2	; 11
 2e8:	ff cf       	rjmp	.-2      	; 0x2e8 <main+0xac>

000002ea <__vector_9>:
//главный цикл работы контроллера
//Здесь устанавливаются значения ЦАП и передаются данные на компьютер
//через UART-интерфейс
//данный участок кода повторяется при переполнении TIMER2
ISR(TIMER2_OVF_vect)
{
 2ea:	1f 92       	push	r1
 2ec:	0f 92       	push	r0
 2ee:	0f b6       	in	r0, 0x3f	; 63
 2f0:	0f 92       	push	r0
 2f2:	11 24       	eor	r1, r1
 2f4:	2f 93       	push	r18
 2f6:	3f 93       	push	r19
 2f8:	4f 93       	push	r20
 2fa:	5f 93       	push	r21
 2fc:	6f 93       	push	r22
 2fe:	7f 93       	push	r23
 300:	8f 93       	push	r24
 302:	9f 93       	push	r25
 304:	af 93       	push	r26
 306:	bf 93       	push	r27
 308:	ef 93       	push	r30
 30a:	ff 93       	push	r31
	if(ctr>time_step)
 30c:	20 91 48 01 	lds	r18, 0x0148
 310:	30 91 49 01 	lds	r19, 0x0149
 314:	80 91 11 01 	lds	r24, 0x0111
 318:	90 91 12 01 	lds	r25, 0x0112
 31c:	82 17       	cp	r24, r18
 31e:	93 07       	cpc	r25, r19
 320:	0c f0       	brlt	.+2      	; 0x324 <__vector_9+0x3a>
 322:	41 c3       	rjmp	.+1666   	; 0x9a6 <__stack+0xa7>
	{
		if(MD==CUSTOM)
 324:	60 91 16 01 	lds	r22, 0x0116
 328:	66 23       	and	r22, r22
 32a:	09 f0       	breq	.+2      	; 0x32e <__vector_9+0x44>
 32c:	40 c0       	rjmp	.+128    	; 0x3ae <__vector_9+0xc4>
		{
			if(event_cnt==(1))
 32e:	20 91 44 01 	lds	r18, 0x0144
 332:	30 91 45 01 	lds	r19, 0x0145
 336:	21 30       	cpi	r18, 0x01	; 1
 338:	31 05       	cpc	r19, r1
 33a:	59 f4       	brne	.+22     	; 0x352 <__vector_9+0x68>
			{	
			ADCL_=ADCL;
 33c:	90 91 78 00 	lds	r25, 0x0078
 340:	90 93 4d 01 	sts	0x014D, r25
			ADCH_=ADCH;
 344:	80 91 79 00 	lds	r24, 0x0079
 348:	80 93 51 01 	sts	0x0151, r24
			UDR0=ADCL_;			
 34c:	90 93 c6 00 	sts	0x00C6, r25
 350:	0d c0       	rjmp	.+26     	; 0x36c <__vector_9+0x82>
			}
			
			if(event_cnt==(2))
 352:	22 30       	cpi	r18, 0x02	; 2
 354:	31 05       	cpc	r19, r1
 356:	29 f4       	brne	.+10     	; 0x362 <__vector_9+0x78>
			{	
			UDR0=ADCH_;				
 358:	80 91 51 01 	lds	r24, 0x0151
 35c:	80 93 c6 00 	sts	0x00C6, r24
 360:	05 c0       	rjmp	.+10     	; 0x36c <__vector_9+0x82>
			}
			
			
			
			if(event_cnt==0)
 362:	21 15       	cp	r18, r1
 364:	31 05       	cpc	r19, r1
 366:	11 f4       	brne	.+4      	; 0x36c <__vector_9+0x82>
			{
			UDR0=255;
 368:	8f ef       	ldi	r24, 0xFF	; 255
 36a:	b7 c2       	rjmp	.+1390   	; 0x8da <__vector_9+0x5f0>
			prepareSetDAC(0,chan);
			//prepareSetDAC(x16,2);
			setDAC();
			}
			
			else if(event_cnt==t1)
 36c:	80 91 0d 01 	lds	r24, 0x010D
 370:	90 e0       	ldi	r25, 0x00	; 0
 372:	28 17       	cp	r18, r24
 374:	39 07       	cpc	r19, r25
 376:	09 f4       	brne	.+2      	; 0x37a <__vector_9+0x90>
 378:	e2 c2       	rjmp	.+1476   	; 0x93e <__stack+0x3f>
			{
				
			//prepareSetDAC(0,chan);
			//setDAC();
			}
			else if(event_cnt==dT)
 37a:	80 91 47 01 	lds	r24, 0x0147
 37e:	90 e0       	ldi	r25, 0x00	; 0
 380:	28 17       	cp	r18, r24
 382:	39 07       	cpc	r19, r25
 384:	09 f4       	brne	.+2      	; 0x388 <__vector_9+0x9e>
 386:	db c2       	rjmp	.+1462   	; 0x93e <__stack+0x3f>
			{		
			//prepareSetDAC(0,chan);
			//setDAC();
		
			}
			else if(event_cnt==(dT+1))
 388:	01 96       	adiw	r24, 0x01	; 1
 38a:	28 17       	cp	r18, r24
 38c:	39 07       	cpc	r19, r25
 38e:	09 f4       	brne	.+2      	; 0x392 <__vector_9+0xa8>
 390:	b4 c2       	rjmp	.+1384   	; 0x8fa <__vector_9+0x610>
				ADCSRA |= (1 << ADSC); 

			else if(event_cnt==dTt2)
 392:	80 91 0f 01 	lds	r24, 0x010F
 396:	90 e0       	ldi	r25, 0x00	; 0
 398:	28 17       	cp	r18, r24
 39a:	39 07       	cpc	r19, r25
 39c:	09 f0       	breq	.+2      	; 0x3a0 <__vector_9+0xb6>
 39e:	cf c2       	rjmp	.+1438   	; 0x93e <__stack+0x3f>
			{
			if ( ( UCSR0A & (1<<UDRE0)) )			
 3a0:	80 91 c0 00 	lds	r24, 0x00C0
 3a4:	85 ff       	sbrs	r24, 5
 3a6:	cb c2       	rjmp	.+1430   	; 0x93e <__stack+0x3f>
				UDR0=_adc;			
 3a8:	80 91 53 01 	lds	r24, 0x0153
 3ac:	c6 c2       	rjmp	.+1420   	; 0x93a <__stack+0x3b>
			//setDAC();

			}		

		}
		else if(MD==VAC)
 3ae:	61 30       	cpi	r22, 0x01	; 1
 3b0:	09 f0       	breq	.+2      	; 0x3b4 <__vector_9+0xca>
 3b2:	86 c0       	rjmp	.+268    	; 0x4c0 <__vector_9+0x1d6>
		{			
			static int i=0;
			i++;						
 3b4:	80 91 42 01 	lds	r24, 0x0142
 3b8:	90 91 43 01 	lds	r25, 0x0143
 3bc:	01 96       	adiw	r24, 0x01	; 1
 3be:	90 93 43 01 	sts	0x0143, r25
 3c2:	80 93 42 01 	sts	0x0142, r24
			
			switch(UDP_cnt)
 3c6:	80 91 59 01 	lds	r24, 0x0159
 3ca:	82 30       	cpi	r24, 0x02	; 2
 3cc:	41 f1       	breq	.+80     	; 0x41e <__vector_9+0x134>
 3ce:	83 30       	cpi	r24, 0x03	; 3
 3d0:	30 f4       	brcc	.+12     	; 0x3de <__vector_9+0xf4>
 3d2:	88 23       	and	r24, r24
 3d4:	51 f0       	breq	.+20     	; 0x3ea <__vector_9+0x100>
 3d6:	81 30       	cpi	r24, 0x01	; 1
 3d8:	09 f0       	breq	.+2      	; 0x3dc <__vector_9+0xf2>
 3da:	69 c0       	rjmp	.+210    	; 0x4ae <__vector_9+0x1c4>
 3dc:	0d c0       	rjmp	.+26     	; 0x3f8 <__vector_9+0x10e>
 3de:	83 30       	cpi	r24, 0x03	; 3
 3e0:	19 f1       	breq	.+70     	; 0x428 <__vector_9+0x13e>
 3e2:	84 30       	cpi	r24, 0x04	; 4
 3e4:	09 f0       	breq	.+2      	; 0x3e8 <__vector_9+0xfe>
 3e6:	63 c0       	rjmp	.+198    	; 0x4ae <__vector_9+0x1c4>
 3e8:	60 c0       	rjmp	.+192    	; 0x4aa <__vector_9+0x1c0>
			{
				case 0:					
				 ADCSRA |= (1 << ADSC); 
 3ea:	80 91 7a 00 	lds	r24, 0x007A
 3ee:	80 64       	ori	r24, 0x40	; 64
 3f0:	80 93 7a 00 	sts	0x007A, r24
				UDR0=255;
 3f4:	8f ef       	ldi	r24, 0xFF	; 255
 3f6:	15 c0       	rjmp	.+42     	; 0x422 <__vector_9+0x138>
				break;
				
				
				
				case 1:	
				ADCL__=	ADCL_;
 3f8:	80 91 4d 01 	lds	r24, 0x014D
 3fc:	80 93 4a 01 	sts	0x014A, r24
				ADCH__ = ADCH_;
 400:	80 91 51 01 	lds	r24, 0x0151
 404:	80 93 46 01 	sts	0x0146, r24
				ADCL_=ADCL;
 408:	90 91 78 00 	lds	r25, 0x0078
 40c:	90 93 4d 01 	sts	0x014D, r25
				ADCH_=ADCH;
 410:	80 91 79 00 	lds	r24, 0x0079
 414:	80 93 51 01 	sts	0x0151, r24
				
				UDR0=ADCL_;
 418:	90 93 c6 00 	sts	0x00C6, r25
 41c:	48 c0       	rjmp	.+144    	; 0x4ae <__vector_9+0x1c4>
				break;
				
				case 2:
				UDR0=ADCH_;
 41e:	80 91 51 01 	lds	r24, 0x0151
 422:	80 93 c6 00 	sts	0x00C6, r24
 426:	43 c0       	rjmp	.+134    	; 0x4ae <__vector_9+0x1c4>
				
				
				case 3:
								
					//VAC16_HH=VAC16_H;
					VAC16_H=VAC16;
 428:	20 91 17 01 	lds	r18, 0x0117
 42c:	30 91 18 01 	lds	r19, 0x0118
 430:	30 93 1a 01 	sts	0x011A, r19
 434:	20 93 19 01 	sts	0x0119, r18
					
					if(pos_phase)
 438:	80 91 10 01 	lds	r24, 0x0110
 43c:	88 23       	and	r24, r24
 43e:	81 f0       	breq	.+32     	; 0x460 <__vector_9+0x176>
					{
								//PORTC=0b00000010;
			//PORTB=0b00011111;
			//PORTD=0b11101100;
						VAC16+=32;
 440:	20 5e       	subi	r18, 0xE0	; 224
 442:	3f 4f       	sbci	r19, 0xFF	; 255
 444:	30 93 18 01 	sts	0x0118, r19
 448:	20 93 17 01 	sts	0x0117, r18
						if(VAC16>(ref16-1))
 44c:	80 91 21 01 	lds	r24, 0x0121
 450:	90 91 22 01 	lds	r25, 0x0122
 454:	28 17       	cp	r18, r24
 456:	39 07       	cpc	r19, r25
 458:	b4 f0       	brlt	.+44     	; 0x486 <__vector_9+0x19c>
						{
						pos_phase=0;				
 45a:	10 92 10 01 	sts	0x0110, r1
 45e:	13 c0       	rjmp	.+38     	; 0x486 <__vector_9+0x19c>
					else
					{
						//PORTB=0;
			//PORTC=0;
			//PORTD=0;
						VAC16-=32;
 460:	c9 01       	movw	r24, r18
 462:	80 97       	sbiw	r24, 0x20	; 32
 464:	90 93 18 01 	sts	0x0118, r25
 468:	80 93 17 01 	sts	0x0117, r24
						if(VAC16<(-x16+1))
 46c:	21 e0       	ldi	r18, 0x01	; 1
 46e:	30 e0       	ldi	r19, 0x00	; 0
 470:	40 91 1f 01 	lds	r20, 0x011F
 474:	50 91 20 01 	lds	r21, 0x0120
 478:	24 1b       	sub	r18, r20
 47a:	35 0b       	sbc	r19, r21
 47c:	82 17       	cp	r24, r18
 47e:	93 07       	cpc	r25, r19
 480:	14 f4       	brge	.+4      	; 0x486 <__vector_9+0x19c>
						{
						pos_phase=1;									
 482:	60 93 10 01 	sts	0x0110, r22
						}
					}	
					
					
					
					UDR0=VAC16>>4;
 486:	80 91 17 01 	lds	r24, 0x0117
 48a:	90 91 18 01 	lds	r25, 0x0118
 48e:	9c 01       	movw	r18, r24
 490:	44 e0       	ldi	r20, 0x04	; 4
 492:	35 95       	asr	r19
 494:	27 95       	ror	r18
 496:	4a 95       	dec	r20
 498:	e1 f7       	brne	.-8      	; 0x492 <__vector_9+0x1a8>
 49a:	20 93 c6 00 	sts	0x00C6, r18
					prepareSetDAC(VAC16,chan);
 49e:	60 91 2a 01 	lds	r22, 0x012A
 4a2:	0e 94 cc 00 	call	0x198	; 0x198 <prepareSetDAC>

	}
}

void setDAC(){
	PORTD&=~(1<<LDAC);
 4a6:	5a 98       	cbi	0x0b, 2	; 11
	PORTD|=(1<<LDAC);	
 4a8:	5a 9a       	sbi	0x0b, 2	; 11
					//prepareSetDAC(VAC16,5);
					//prepareSetDAC(VAC16,6);
					//prepareSetDAC(VAC16,7);				
					setDAC();
				case 4:
					UDR0=DUMMY_BYTE;	
 4aa:	10 92 c6 00 	sts	0x00C6, r1
				
			}
						
			
			UDP_cnt++;
			UDP_cnt%=5;
 4ae:	80 91 59 01 	lds	r24, 0x0159
 4b2:	8f 5f       	subi	r24, 0xFF	; 255
 4b4:	65 e0       	ldi	r22, 0x05	; 5
 4b6:	0e 94 c9 05 	call	0xb92	; 0xb92 <__udivmodqi4>
 4ba:	90 93 59 01 	sts	0x0159, r25
 4be:	3f c2       	rjmp	.+1150   	; 0x93e <__stack+0x3f>
		}
		else if(MD==PROGRAM)
 4c0:	62 30       	cpi	r22, 0x02	; 2
 4c2:	09 f0       	breq	.+2      	; 0x4c6 <__vector_9+0x1dc>
 4c4:	a1 c0       	rjmp	.+322    	; 0x608 <__vector_9+0x31e>
		{
			T=16;
 4c6:	80 e1       	ldi	r24, 0x10	; 16
 4c8:	80 93 4c 01 	sts	0x014C, r24
			static uint16_t adc_h;
			

			if(event_cnt==0)//dT
 4cc:	80 91 44 01 	lds	r24, 0x0144
 4d0:	90 91 45 01 	lds	r25, 0x0145
 4d4:	00 97       	sbiw	r24, 0x00	; 0
 4d6:	21 f4       	brne	.+8      	; 0x4e0 <__vector_9+0x1f6>
			{		
				UDR0=255;
 4d8:	8f ef       	ldi	r24, 0xFF	; 255
 4da:	80 93 c6 00 	sts	0x00C6, r24
 4de:	03 c2       	rjmp	.+1030   	; 0x8e6 <__vector_9+0x5fc>
			
				prepareSetDAC(ref16,chan);
				setDAC();
				ADCSRA |= (1 << ADSC); 
			}
			else if(event_cnt == 1)
 4e0:	81 30       	cpi	r24, 0x01	; 1
 4e2:	91 05       	cpc	r25, r1
 4e4:	19 f4       	brne	.+6      	; 0x4ec <__vector_9+0x202>
			{
				UDR0 =PROGRAM_done;
 4e6:	80 91 29 01 	lds	r24, 0x0129
 4ea:	27 c2       	rjmp	.+1102   	; 0x93a <__stack+0x3b>
			}	

			else
			if(event_cnt==2)//ADC GET 
 4ec:	82 30       	cpi	r24, 0x02	; 2
 4ee:	91 05       	cpc	r25, r1
 4f0:	09 f4       	brne	.+2      	; 0x4f4 <__vector_9+0x20a>
 4f2:	14 c2       	rjmp	.+1064   	; 0x91c <__stack+0x1d>
			}
			
			//ADC make CONTINUE
			//make decision
			else
			if(event_cnt==3)
 4f4:	83 30       	cpi	r24, 0x03	; 3
 4f6:	91 05       	cpc	r25, r1
 4f8:	f1 f5       	brne	.+124    	; 0x576 <__vector_9+0x28c>
			{	
				
				UDR0=ADCH_; //3
 4fa:	80 91 51 01 	lds	r24, 0x0151
 4fe:	80 93 c6 00 	sts	0x00C6, r24
				
				_adc=(ADCL_|(ADCH_ <<8));
 502:	38 2f       	mov	r19, r24
 504:	20 e0       	ldi	r18, 0x00	; 0
 506:	80 91 4d 01 	lds	r24, 0x014D
 50a:	90 e0       	ldi	r25, 0x00	; 0
 50c:	82 2b       	or	r24, r18
 50e:	93 2b       	or	r25, r19
 510:	90 93 54 01 	sts	0x0154, r25
 514:	80 93 53 01 	sts	0x0153, r24
				adc_h=((uint16_t)(512)-_adc);
 518:	40 e0       	ldi	r20, 0x00	; 0
 51a:	52 e0       	ldi	r21, 0x02	; 2
 51c:	48 1b       	sub	r20, r24
 51e:	59 0b       	sbc	r21, r25
 520:	50 93 41 01 	sts	0x0141, r21
 524:	40 93 40 01 	sts	0x0140, r20
				
				//optimization
				//put some window val here maybe?
				//be  carefull with -
				if((adc_h)<(uint16_t)(t1-1))
 528:	80 91 0d 01 	lds	r24, 0x010D
 52c:	28 2f       	mov	r18, r24
 52e:	30 e0       	ldi	r19, 0x00	; 0
 530:	c9 01       	movw	r24, r18
 532:	01 97       	sbiw	r24, 0x01	; 1
 534:	48 17       	cp	r20, r24
 536:	59 07       	cpc	r21, r25
 538:	60 f4       	brcc	.+24     	; 0x552 <__vector_9+0x268>
				{
					proging_val = -x16;  //set!
 53a:	80 91 1f 01 	lds	r24, 0x011F
 53e:	90 91 20 01 	lds	r25, 0x0120
 542:	90 95       	com	r25
 544:	81 95       	neg	r24
 546:	9f 4f       	sbci	r25, 0xFF	; 255
 548:	90 93 1e 01 	sts	0x011E, r25
 54c:	80 93 1d 01 	sts	0x011D, r24
 550:	f6 c1       	rjmp	.+1004   	; 0x93e <__stack+0x3f>
				}
				else if((adc_h)<(uint16_t)(t1+2)) //done!
 552:	2e 5f       	subi	r18, 0xFE	; 254
 554:	3f 4f       	sbci	r19, 0xFF	; 255
 556:	42 17       	cp	r20, r18
 558:	53 07       	cpc	r21, r19
 55a:	08 f0       	brcs	.+2      	; 0x55e <__vector_9+0x274>
 55c:	f0 c1       	rjmp	.+992    	; 0x93e <__stack+0x3f>
				{

					PROGRAM_done=1;
 55e:	81 e0       	ldi	r24, 0x01	; 1
 560:	80 93 29 01 	sts	0x0129, r24
					proging_val=0;
 564:	10 92 1e 01 	sts	0x011E, r1
 568:	10 92 1d 01 	sts	0x011D, r1
					prepareSetDAC(ref16,chan);
 56c:	80 91 21 01 	lds	r24, 0x0121
 570:	90 91 22 01 	lds	r25, 0x0122
 574:	db c0       	rjmp	.+438    	; 0x72c <__vector_9+0x442>
					setDAC();
				}
				
			}
			//DACset proging val
			else if(event_cnt==4)
 576:	84 30       	cpi	r24, 0x04	; 4
 578:	91 05       	cpc	r25, r1
 57a:	09 f0       	breq	.+2      	; 0x57e <__vector_9+0x294>
 57c:	3f c0       	rjmp	.+126    	; 0x5fc <__vector_9+0x312>
			{
				UDR0 =DUMMY_BYTE;		
 57e:	10 92 c6 00 	sts	0x00C6, r1
				if(PROGRAM_done)
 582:	80 91 29 01 	lds	r24, 0x0129
 586:	88 23       	and	r24, r24
 588:	21 f0       	breq	.+8      	; 0x592 <__vector_9+0x2a8>
					proging_val=0;	
 58a:	10 92 1e 01 	sts	0x011E, r1
 58e:	10 92 1d 01 	sts	0x011D, r1
				
				prepareSetDAC(proging_val,chan);
 592:	80 91 1d 01 	lds	r24, 0x011D
 596:	90 91 1e 01 	lds	r25, 0x011E
 59a:	60 91 2a 01 	lds	r22, 0x012A
 59e:	0e 94 cc 00 	call	0x198	; 0x198 <prepareSetDAC>

	}
}

void setDAC(){
	PORTD&=~(1<<LDAC);
 5a2:	5a 98       	cbi	0x0b, 2	; 11
	PORTD|=(1<<LDAC);	
 5a4:	5a 9a       	sbi	0x0b, 2	; 11
					proging_val=0;	
				
				prepareSetDAC(proging_val,chan);
				setDAC();
							
				if(proging_val == -x16)
 5a6:	20 91 1d 01 	lds	r18, 0x011D
 5aa:	30 91 1e 01 	lds	r19, 0x011E
 5ae:	80 91 1f 01 	lds	r24, 0x011F
 5b2:	90 91 20 01 	lds	r25, 0x0120
 5b6:	44 27       	eor	r20, r20
 5b8:	55 27       	eor	r21, r21
 5ba:	48 1b       	sub	r20, r24
 5bc:	59 0b       	sbc	r21, r25
 5be:	24 17       	cp	r18, r20
 5c0:	35 07       	cpc	r19, r21
 5c2:	29 f4       	brne	.+10     	; 0x5ce <__vector_9+0x2e4>
				{
					proging_val=0;
 5c4:	10 92 1e 01 	sts	0x011E, r1
 5c8:	10 92 1d 01 	sts	0x011D, r1
 5cc:	b8 c1       	rjmp	.+880    	; 0x93e <__stack+0x3f>
				}					
				else
				if(proging_val>(t2<<4))
 5ce:	80 91 0e 01 	lds	r24, 0x010E
 5d2:	90 e0       	ldi	r25, 0x00	; 0
 5d4:	b4 e0       	ldi	r27, 0x04	; 4
 5d6:	88 0f       	add	r24, r24
 5d8:	99 1f       	adc	r25, r25
 5da:	ba 95       	dec	r27
 5dc:	e1 f7       	brne	.-8      	; 0x5d6 <__vector_9+0x2ec>
 5de:	82 17       	cp	r24, r18
 5e0:	93 07       	cpc	r25, r19
 5e2:	2c f4       	brge	.+10     	; 0x5ee <__vector_9+0x304>
				{
					proging_val= -x16;
 5e4:	50 93 1e 01 	sts	0x011E, r21
 5e8:	40 93 1d 01 	sts	0x011D, r20
 5ec:	a8 c1       	rjmp	.+848    	; 0x93e <__stack+0x3f>
				}	
				else
				{
					proging_val+=32;
 5ee:	20 5e       	subi	r18, 0xE0	; 224
 5f0:	3f 4f       	sbci	r19, 0xFF	; 255
 5f2:	30 93 1e 01 	sts	0x011E, r19
 5f6:	20 93 1d 01 	sts	0x011D, r18
 5fa:	a1 c1       	rjmp	.+834    	; 0x93e <__stack+0x3f>
				}	
			}
			else if(event_cnt==5)//
 5fc:	05 97       	sbiw	r24, 0x05	; 5
 5fe:	09 f0       	breq	.+2      	; 0x602 <__vector_9+0x318>
 600:	9e c1       	rjmp	.+828    	; 0x93e <__stack+0x3f>
			{	
				UDR0 =DUMMY_BYTE;			
 602:	10 92 c6 00 	sts	0x00C6, r1
 606:	90 c0       	rjmp	.+288    	; 0x728 <__vector_9+0x43e>
			}
			
			

		}
		else if(MD == ONE_SHOT)
 608:	65 30       	cpi	r22, 0x05	; 5
 60a:	09 f0       	breq	.+2      	; 0x60e <__vector_9+0x324>
 60c:	75 c0       	rjmp	.+234    	; 0x6f8 <__vector_9+0x40e>
		{
			//готовим reset
				if(event_cnt==1){
 60e:	80 91 44 01 	lds	r24, 0x0144
 612:	90 91 45 01 	lds	r25, 0x0145
 616:	81 30       	cpi	r24, 0x01	; 1
 618:	91 05       	cpc	r25, r1
 61a:	b1 f1       	breq	.+108    	; 0x688 <__vector_9+0x39e>
				separMult();
			}//reseting
			else if(event_cnt==2)
 61c:	82 30       	cpi	r24, 0x02	; 2
 61e:	91 05       	cpc	r25, r1
 620:	61 f4       	brne	.+24     	; 0x63a <__vector_9+0x350>
			{
				prepareSetDAC(reset16,CHAN_4);
 622:	80 91 23 01 	lds	r24, 0x0123
 626:	90 91 24 01 	lds	r25, 0x0124
 62a:	63 e0       	ldi	r22, 0x03	; 3
 62c:	0e 94 cc 00 	call	0x198	; 0x198 <prepareSetDAC>
				prepareSetDAC(reset16,CHAN_3);
 630:	80 91 23 01 	lds	r24, 0x0123
 634:	90 91 24 01 	lds	r25, 0x0124
 638:	0a c0       	rjmp	.+20     	; 0x64e <__vector_9+0x364>
				setDAC();
			}
			else if(event_cnt==3)
 63a:	83 30       	cpi	r24, 0x03	; 3
 63c:	91 05       	cpc	r25, r1
 63e:	49 f4       	brne	.+18     	; 0x652 <__vector_9+0x368>
			{
				prepareSetDAC(0,CHAN_4);
 640:	80 e0       	ldi	r24, 0x00	; 0
 642:	90 e0       	ldi	r25, 0x00	; 0
 644:	63 e0       	ldi	r22, 0x03	; 3
 646:	0e 94 cc 00 	call	0x198	; 0x198 <prepareSetDAC>
				prepareSetDAC(0,CHAN_3);
 64a:	80 e0       	ldi	r24, 0x00	; 0
 64c:	90 e0       	ldi	r25, 0x00	; 0
 64e:	62 e0       	ldi	r22, 0x02	; 2
 650:	6f c0       	rjmp	.+222    	; 0x730 <__vector_9+0x446>
				setDAC();
			}		//is reset		
			else if(event_cnt==4)
 652:	84 30       	cpi	r24, 0x04	; 4
 654:	91 05       	cpc	r25, r1
 656:	19 f4       	brne	.+6      	; 0x65e <__vector_9+0x374>
			{
				gatherMult();
 658:	0e 94 7a 00 	call	0xf4	; 0xf4 <gatherMult>
 65c:	70 c1       	rjmp	.+736    	; 0x93e <__stack+0x3f>
			}
			else if(event_cnt==5)
 65e:	85 30       	cpi	r24, 0x05	; 5
 660:	91 05       	cpc	r25, r1
 662:	29 f4       	brne	.+10     	; 0x66e <__vector_9+0x384>
			{
				prepareSetDAC(x16,CHAN_4);				
 664:	80 91 1f 01 	lds	r24, 0x011F
 668:	90 91 20 01 	lds	r25, 0x0120
 66c:	05 c0       	rjmp	.+10     	; 0x678 <__vector_9+0x38e>
				setDAC();
			}		
			else if(event_cnt==6)
 66e:	86 30       	cpi	r24, 0x06	; 6
 670:	91 05       	cpc	r25, r1
 672:	21 f4       	brne	.+8      	; 0x67c <__vector_9+0x392>
			{
				prepareSetDAC(0,CHAN_4);				
 674:	80 e0       	ldi	r24, 0x00	; 0
 676:	90 e0       	ldi	r25, 0x00	; 0
 678:	63 e0       	ldi	r22, 0x03	; 3
 67a:	5a c0       	rjmp	.+180    	; 0x730 <__vector_9+0x446>
				setDAC();
			}	
			
			//пнули		
			//посмотрим, что вышло
			else if(event_cnt==7)
 67c:	87 30       	cpi	r24, 0x07	; 7
 67e:	91 05       	cpc	r25, r1
 680:	31 f4       	brne	.+12     	; 0x68e <__vector_9+0x3a4>
			{
				UDR0=255;//1
 682:	8f ef       	ldi	r24, 0xFF	; 255
 684:	80 93 c6 00 	sts	0x00C6, r24
				separMult();				
 688:	0e 94 83 00 	call	0x106	; 0x106 <separMult>
 68c:	58 c1       	rjmp	.+688    	; 0x93e <__stack+0x3f>
			}			
			else if(event_cnt==8)
 68e:	88 30       	cpi	r24, 0x08	; 8
 690:	91 05       	cpc	r25, r1
 692:	31 f4       	brne	.+12     	; 0x6a0 <__vector_9+0x3b6>
			{
				prepareSetDAC(ref16,CHAN_4);
 694:	80 91 21 01 	lds	r24, 0x0121
 698:	90 91 22 01 	lds	r25, 0x0122
 69c:	63 e0       	ldi	r22, 0x03	; 3
 69e:	29 c1       	rjmp	.+594    	; 0x8f2 <__vector_9+0x608>
				setDAC();				
				ADCSRA |= (1 << ADSC); 
			}	
			else if(event_cnt==9)
 6a0:	89 30       	cpi	r24, 0x09	; 9
 6a2:	91 05       	cpc	r25, r1
 6a4:	09 f4       	brne	.+2      	; 0x6a8 <__vector_9+0x3be>
 6a6:	3a c1       	rjmp	.+628    	; 0x91c <__stack+0x1d>
				//prepareSetDAC(ref16,3);
				ADCL_=ADCL;	
				ADCH_=ADCH;
				UDR0=ADCL_;//2
			}
			else if(event_cnt==10)
 6a8:	8a 30       	cpi	r24, 0x0A	; 10
 6aa:	91 05       	cpc	r25, r1
 6ac:	29 f4       	brne	.+10     	; 0x6b8 <__vector_9+0x3ce>
			{
				UDR0=ADCH_; //3 1st chan
 6ae:	80 91 51 01 	lds	r24, 0x0151
 6b2:	80 93 c6 00 	sts	0x00C6, r24
 6b6:	de cf       	rjmp	.-68     	; 0x674 <__vector_9+0x38a>
				
				prepareSetDAC(0,CHAN_4);
				setDAC();
			}		
			//4й просмотрен
			else if(event_cnt==11)
 6b8:	8b 30       	cpi	r24, 0x0B	; 11
 6ba:	91 05       	cpc	r25, r1
 6bc:	31 f4       	brne	.+12     	; 0x6ca <__vector_9+0x3e0>
			{				 
				prepareSetDAC(ref16,CHAN_3);
 6be:	80 91 21 01 	lds	r24, 0x0121
 6c2:	90 91 22 01 	lds	r25, 0x0122
 6c6:	62 e0       	ldi	r22, 0x02	; 2
 6c8:	14 c1       	rjmp	.+552    	; 0x8f2 <__vector_9+0x608>
				setDAC();
				
				ADCSRA |= (1 << ADSC); 
			}
			else if(event_cnt==12)
 6ca:	8c 30       	cpi	r24, 0x0C	; 12
 6cc:	91 05       	cpc	r25, r1
 6ce:	09 f4       	brne	.+2      	; 0x6d2 <__vector_9+0x3e8>
 6d0:	25 c1       	rjmp	.+586    	; 0x91c <__stack+0x1d>
			{		
				ADCL_=ADCL;	
				ADCH_=ADCH;
				UDR0=ADCL_; //4
			}
			else if(event_cnt == 13)
 6d2:	0d 97       	sbiw	r24, 0x0d	; 13
 6d4:	09 f0       	breq	.+2      	; 0x6d8 <__vector_9+0x3ee>
 6d6:	33 c1       	rjmp	.+614    	; 0x93e <__stack+0x3f>
			{
				UDR0=ADCH_; // 5
 6d8:	80 91 51 01 	lds	r24, 0x0151
 6dc:	80 93 c6 00 	sts	0x00C6, r24
				
				prepareSetDAC(0,CHAN_3);
 6e0:	80 e0       	ldi	r24, 0x00	; 0
 6e2:	90 e0       	ldi	r25, 0x00	; 0
 6e4:	62 e0       	ldi	r22, 0x02	; 2
 6e6:	0e 94 cc 00 	call	0x198	; 0x198 <prepareSetDAC>

	}
}

void setDAC(){
	PORTD&=~(1<<LDAC);
 6ea:	5a 98       	cbi	0x0b, 2	; 11
	PORTD|=(1<<LDAC);	
 6ec:	5a 9a       	sbi	0x0b, 2	; 11
			{
				UDR0=ADCH_; // 5
				
				prepareSetDAC(0,CHAN_3);
				setDAC();
				event_cnt=0;	
 6ee:	10 92 45 01 	sts	0x0145, r1
 6f2:	10 92 44 01 	sts	0x0144, r1
 6f6:	23 c1       	rjmp	.+582    	; 0x93e <__stack+0x3f>
			}
			
		}
		
		
		else if(MD == ANALYZE)//5 by 5
 6f8:	66 30       	cpi	r22, 0x06	; 6
 6fa:	09 f0       	breq	.+2      	; 0x6fe <__vector_9+0x414>
 6fc:	20 c1       	rjmp	.+576    	; 0x93e <__stack+0x3f>
		{
			//reset
			if(event_cnt==0)
 6fe:	80 91 44 01 	lds	r24, 0x0144
 702:	90 91 45 01 	lds	r25, 0x0145
 706:	00 97       	sbiw	r24, 0x00	; 0
 708:	61 f4       	brne	.+24     	; 0x722 <__vector_9+0x438>
			{
				prepareSetDAC(reset16, chan);
 70a:	80 91 23 01 	lds	r24, 0x0123
 70e:	90 91 24 01 	lds	r25, 0x0124
 712:	60 91 2a 01 	lds	r22, 0x012A
 716:	0e 94 cc 00 	call	0x198	; 0x198 <prepareSetDAC>

	}
}

void setDAC(){
	PORTD&=~(1<<LDAC);
 71a:	5a 98       	cbi	0x0b, 2	; 11
	PORTD|=(1<<LDAC);	
 71c:	5a 9a       	sbi	0x0b, 2	; 11
			//reset
			if(event_cnt==0)
			{
				prepareSetDAC(reset16, chan);
				setDAC();
				UDR0=255;
 71e:	8f ef       	ldi	r24, 0xFF	; 255
 720:	0c c1       	rjmp	.+536    	; 0x93a <__stack+0x3b>
			}
			else if(event_cnt==1)
 722:	81 30       	cpi	r24, 0x01	; 1
 724:	91 05       	cpc	r25, r1
 726:	49 f4       	brne	.+18     	; 0x73a <__vector_9+0x450>
			{
				prepareSetDAC(0, chan);				
 728:	80 e0       	ldi	r24, 0x00	; 0
 72a:	90 e0       	ldi	r25, 0x00	; 0
 72c:	60 91 2a 01 	lds	r22, 0x012A
 730:	0e 94 cc 00 	call	0x198	; 0x198 <prepareSetDAC>

	}
}

void setDAC(){
	PORTD&=~(1<<LDAC);
 734:	5a 98       	cbi	0x0b, 2	; 11
	PORTD|=(1<<LDAC);	
 736:	5a 9a       	sbi	0x0b, 2	; 11
 738:	02 c1       	rjmp	.+516    	; 0x93e <__stack+0x3f>
			{
				prepareSetDAC(0, chan);				
				setDAC();
			}
			//create set impulse
			else if(event_cnt==3)
 73a:	83 30       	cpi	r24, 0x03	; 3
 73c:	91 05       	cpc	r25, r1
 73e:	09 f0       	breq	.+2      	; 0x742 <__vector_9+0x458>
 740:	c7 c0       	rjmp	.+398    	; 0x8d0 <__vector_9+0x5e6>
			{
				if(an_cnt<(BIG_STAT_N))
 742:	40 91 2b 01 	lds	r20, 0x012B
 746:	50 91 2c 01 	lds	r21, 0x012C
 74a:	20 91 52 01 	lds	r18, 0x0152
 74e:	82 2f       	mov	r24, r18
 750:	90 e0       	ldi	r25, 0x00	; 0
 752:	48 17       	cp	r20, r24
 754:	59 07       	cpc	r21, r25
 756:	18 f4       	brcc	.+6      	; 0x75e <__vector_9+0x474>
				{
					STAT_V_step=0;					 
 758:	10 92 27 01 	sts	0x0127, r1
 75c:	23 c0       	rjmp	.+70     	; 0x7a4 <__vector_9+0x4ba>
				}
				else if(an_cnt<(BIG_STAT_N*2))
 75e:	82 2f       	mov	r24, r18
 760:	90 e0       	ldi	r25, 0x00	; 0
 762:	9c 01       	movw	r18, r24
 764:	22 0f       	add	r18, r18
 766:	33 1f       	adc	r19, r19
 768:	42 17       	cp	r20, r18
 76a:	53 07       	cpc	r21, r19
 76c:	10 f4       	brcc	.+4      	; 0x772 <__vector_9+0x488>
				{
					STAT_V_step=1;
 76e:	81 e0       	ldi	r24, 0x01	; 1
 770:	17 c0       	rjmp	.+46     	; 0x7a0 <__vector_9+0x4b6>
				}
				else if(an_cnt<(BIG_STAT_N*3))
 772:	28 0f       	add	r18, r24
 774:	39 1f       	adc	r19, r25
 776:	42 17       	cp	r20, r18
 778:	53 07       	cpc	r21, r19
 77a:	10 f4       	brcc	.+4      	; 0x780 <__vector_9+0x496>
				{
					STAT_V_step=2;
 77c:	82 e0       	ldi	r24, 0x02	; 2
 77e:	10 c0       	rjmp	.+32     	; 0x7a0 <__vector_9+0x4b6>
				}
				else if(an_cnt<(BIG_STAT_N*4))
 780:	9c 01       	movw	r18, r24
 782:	22 0f       	add	r18, r18
 784:	33 1f       	adc	r19, r19
 786:	22 0f       	add	r18, r18
 788:	33 1f       	adc	r19, r19
 78a:	42 17       	cp	r20, r18
 78c:	53 07       	cpc	r21, r19
 78e:	10 f4       	brcc	.+4      	; 0x794 <__vector_9+0x4aa>
				{
					STAT_V_step=3;
 790:	83 e0       	ldi	r24, 0x03	; 3
 792:	06 c0       	rjmp	.+12     	; 0x7a0 <__vector_9+0x4b6>
				}
				else if(an_cnt<(BIG_STAT_N*5))
 794:	28 0f       	add	r18, r24
 796:	39 1f       	adc	r19, r25
 798:	42 17       	cp	r20, r18
 79a:	53 07       	cpc	r21, r19
 79c:	18 f4       	brcc	.+6      	; 0x7a4 <__vector_9+0x4ba>
				{
					STAT_V_step=4;
 79e:	84 e0       	ldi	r24, 0x04	; 4
 7a0:	80 93 27 01 	sts	0x0127, r24
				}////////////						
				//prepareSetDAC(x16, chan);
				UDR0=STAT_V_step;
 7a4:	80 91 27 01 	lds	r24, 0x0127
 7a8:	80 93 c6 00 	sts	0x00C6, r24
				x16_grad = (-(STAT_V_step+1)*8 )<<4;//16
 7ac:	90 e0       	ldi	r25, 0x00	; 0
 7ae:	80 95       	com	r24
 7b0:	90 95       	com	r25
 7b2:	96 95       	lsr	r25
 7b4:	98 2f       	mov	r25, r24
 7b6:	88 27       	eor	r24, r24
 7b8:	97 95       	ror	r25
 7ba:	87 95       	ror	r24
 7bc:	90 93 56 01 	sts	0x0156, r25
 7c0:	80 93 55 01 	sts	0x0155, r24
				prepareSetDAC(x16_grad, chan);
 7c4:	60 91 2a 01 	lds	r22, 0x012A
 7c8:	0e 94 cc 00 	call	0x198	; 0x198 <prepareSetDAC>

	}
}

void setDAC(){
	PORTD&=~(1<<LDAC);
 7cc:	5a 98       	cbi	0x0b, 2	; 11
	PORTD|=(1<<LDAC);	
 7ce:	5a 9a       	sbi	0x0b, 2	; 11
				x16_grad = (-(STAT_V_step+1)*8 )<<4;//16
				prepareSetDAC(x16_grad, chan);
				setDAC();
				
				
				if(an_cnt_fast<(STAT_N))//20 us
 7d0:	40 91 2d 01 	lds	r20, 0x012D
 7d4:	50 91 2e 01 	lds	r21, 0x012E
 7d8:	80 91 03 01 	lds	r24, 0x0103
 7dc:	90 e0       	ldi	r25, 0x00	; 0
 7de:	48 17       	cp	r20, r24
 7e0:	59 07       	cpc	r21, r25
 7e2:	18 f4       	brcc	.+6      	; 0x7ea <__vector_9+0x500>
				{
					STAT_dt_step=0;									
 7e4:	10 92 26 01 	sts	0x0126, r1
 7e8:	49 c0       	rjmp	.+146    	; 0x87c <__vector_9+0x592>
				}
				else if(an_cnt_fast<(STAT_N*2))//80 us
 7ea:	9c 01       	movw	r18, r24
 7ec:	22 0f       	add	r18, r18
 7ee:	33 1f       	adc	r19, r19
 7f0:	42 17       	cp	r20, r18
 7f2:	53 07       	cpc	r21, r19
 7f4:	60 f4       	brcc	.+24     	; 0x80e <__vector_9+0x524>
				{
					STAT_dt_step=1;
 7f6:	81 e0       	ldi	r24, 0x01	; 1
 7f8:	80 93 26 01 	sts	0x0126, r24
 7fc:	80 e0       	ldi	r24, 0x00	; 0
 7fe:	90 e0       	ldi	r25, 0x00	; 0

	}
}

void setDAC(){
	PORTD&=~(1<<LDAC);
 800:	5a 98       	cbi	0x0b, 2	; 11
	PORTD|=(1<<LDAC);	
 802:	5a 9a       	sbi	0x0b, 2	; 11
					STAT_dt_step=0;									
				}
				else if(an_cnt_fast<(STAT_N*2))//80 us
				{
					STAT_dt_step=1;
					for(int i=0;i<40;i++)//28
 804:	01 96       	adiw	r24, 0x01	; 1
 806:	88 32       	cpi	r24, 0x28	; 40
 808:	91 05       	cpc	r25, r1
 80a:	d1 f7       	brne	.-12     	; 0x800 <__vector_9+0x516>
 80c:	37 c0       	rjmp	.+110    	; 0x87c <__vector_9+0x592>
					{
					setDAC();
					}
				}
				else if(an_cnt_fast<(STAT_N*3))//220 us
 80e:	28 0f       	add	r18, r24
 810:	39 1f       	adc	r19, r25
 812:	42 17       	cp	r20, r18
 814:	53 07       	cpc	r21, r19
 816:	60 f4       	brcc	.+24     	; 0x830 <__vector_9+0x546>
				{
					STAT_dt_step=2;
 818:	82 e0       	ldi	r24, 0x02	; 2
 81a:	80 93 26 01 	sts	0x0126, r24
 81e:	80 e0       	ldi	r24, 0x00	; 0
 820:	90 e0       	ldi	r25, 0x00	; 0

	}
}

void setDAC(){
	PORTD&=~(1<<LDAC);
 822:	5a 98       	cbi	0x0b, 2	; 11
	PORTD|=(1<<LDAC);	
 824:	5a 9a       	sbi	0x0b, 2	; 11
					}
				}
				else if(an_cnt_fast<(STAT_N*3))//220 us
				{
					STAT_dt_step=2;
					for(int i=0;i<160;i++)
 826:	01 96       	adiw	r24, 0x01	; 1
 828:	80 3a       	cpi	r24, 0xA0	; 160
 82a:	91 05       	cpc	r25, r1
 82c:	d1 f7       	brne	.-12     	; 0x822 <__vector_9+0x538>
 82e:	26 c0       	rjmp	.+76     	; 0x87c <__vector_9+0x592>
					{
					setDAC();
					}
				}
				else if(an_cnt_fast<(STAT_N*4))//900 us
 830:	88 0f       	add	r24, r24
 832:	99 1f       	adc	r25, r25
 834:	88 0f       	add	r24, r24
 836:	99 1f       	adc	r25, r25
 838:	48 17       	cp	r20, r24
 83a:	59 07       	cpc	r21, r25
 83c:	68 f4       	brcc	.+26     	; 0x858 <__vector_9+0x56e>
				{
					STAT_dt_step=3;
 83e:	83 e0       	ldi	r24, 0x03	; 3
 840:	80 93 26 01 	sts	0x0126, r24
 844:	80 e0       	ldi	r24, 0x00	; 0
 846:	90 e0       	ldi	r25, 0x00	; 0

	}
}

void setDAC(){
	PORTD&=~(1<<LDAC);
 848:	5a 98       	cbi	0x0b, 2	; 11
	PORTD|=(1<<LDAC);	
 84a:	5a 9a       	sbi	0x0b, 2	; 11
					}
				}
				else if(an_cnt_fast<(STAT_N*4))//900 us
				{
					STAT_dt_step=3;
					for(int i=0;i<640;i++)
 84c:	01 96       	adiw	r24, 0x01	; 1
 84e:	22 e0       	ldi	r18, 0x02	; 2
 850:	80 38       	cpi	r24, 0x80	; 128
 852:	92 07       	cpc	r25, r18
 854:	c9 f7       	brne	.-14     	; 0x848 <__vector_9+0x55e>
 856:	12 c0       	rjmp	.+36     	; 0x87c <__vector_9+0x592>
					{
					setDAC();
					}
				}
				else if(an_cnt_fast<(BIG_STAT_N))//3.5 ms
 858:	80 91 52 01 	lds	r24, 0x0152
 85c:	90 e0       	ldi	r25, 0x00	; 0
 85e:	48 17       	cp	r20, r24
 860:	59 07       	cpc	r21, r25
 862:	60 f4       	brcc	.+24     	; 0x87c <__vector_9+0x592>
				{
					STAT_dt_step=4;
 864:	84 e0       	ldi	r24, 0x04	; 4
 866:	80 93 26 01 	sts	0x0126, r24
 86a:	80 e0       	ldi	r24, 0x00	; 0
 86c:	90 e0       	ldi	r25, 0x00	; 0

	}
}

void setDAC(){
	PORTD&=~(1<<LDAC);
 86e:	5a 98       	cbi	0x0b, 2	; 11
	PORTD|=(1<<LDAC);	
 870:	5a 9a       	sbi	0x0b, 2	; 11
					}
				}
				else if(an_cnt_fast<(BIG_STAT_N))//3.5 ms
				{
					STAT_dt_step=4;
					for(int i=0;i<2560;i++)
 872:	01 96       	adiw	r24, 0x01	; 1
 874:	2a e0       	ldi	r18, 0x0A	; 10
 876:	80 30       	cpi	r24, 0x00	; 0
 878:	92 07       	cpc	r25, r18
 87a:	c9 f7       	brne	.-14     	; 0x86e <__vector_9+0x584>
					setDAC();
					}
				}////////////////
									
				
				prepareResetDAC(chan);
 87c:	80 91 2a 01 	lds	r24, 0x012A
 880:	0e 94 91 00 	call	0x122	; 0x122 <prepareResetDAC>

	}
}

void setDAC(){
	PORTD&=~(1<<LDAC);
 884:	5a 98       	cbi	0x0b, 2	; 11
	PORTD|=(1<<LDAC);	
 886:	5a 9a       	sbi	0x0b, 2	; 11
									
				
				prepareResetDAC(chan);
				setDAC();			
				
				an_cnt++; // upper				
 888:	80 91 2b 01 	lds	r24, 0x012B
 88c:	90 91 2c 01 	lds	r25, 0x012C
 890:	01 96       	adiw	r24, 0x01	; 1
 892:	90 93 2c 01 	sts	0x012C, r25
 896:	80 93 2b 01 	sts	0x012B, r24
				if(an_cnt>(BIG_STAT_N*5)) an_cnt=0; // lower
 89a:	20 91 52 01 	lds	r18, 0x0152
 89e:	45 e0       	ldi	r20, 0x05	; 5
 8a0:	24 9f       	mul	r18, r20
 8a2:	90 01       	movw	r18, r0
 8a4:	11 24       	eor	r1, r1
 8a6:	28 17       	cp	r18, r24
 8a8:	39 07       	cpc	r19, r25
 8aa:	20 f4       	brcc	.+8      	; 0x8b4 <__vector_9+0x5ca>
 8ac:	10 92 2c 01 	sts	0x012C, r1
 8b0:	10 92 2b 01 	sts	0x012B, r1
				
				an_cnt_fast = an_cnt%BIG_STAT_N;
 8b4:	60 91 52 01 	lds	r22, 0x0152
 8b8:	80 91 2b 01 	lds	r24, 0x012B
 8bc:	90 91 2c 01 	lds	r25, 0x012C
 8c0:	70 e0       	ldi	r23, 0x00	; 0
 8c2:	0e 94 e2 05 	call	0xbc4	; 0xbc4 <__udivmodhi4>
 8c6:	90 93 2e 01 	sts	0x012E, r25
 8ca:	80 93 2d 01 	sts	0x012D, r24
 8ce:	37 c0       	rjmp	.+110    	; 0x93e <__stack+0x3f>
			}
			else if(event_cnt==4)
 8d0:	84 30       	cpi	r24, 0x04	; 4
 8d2:	91 05       	cpc	r25, r1
 8d4:	29 f4       	brne	.+10     	; 0x8e0 <__vector_9+0x5f6>
			{
				UDR0=STAT_dt_step;
 8d6:	80 91 26 01 	lds	r24, 0x0126
 8da:	80 93 c6 00 	sts	0x00C6, r24
 8de:	24 cf       	rjmp	.-440    	; 0x728 <__vector_9+0x43e>
				prepareSetDAC(0, chan);
				setDAC();
			}
			else if(event_cnt==6)//start measure
 8e0:	86 30       	cpi	r24, 0x06	; 6
 8e2:	91 05       	cpc	r25, r1
 8e4:	81 f4       	brne	.+32     	; 0x906 <__stack+0x7>
			{
				prepareSetDAC(ref16, chan);
 8e6:	80 91 21 01 	lds	r24, 0x0121
 8ea:	90 91 22 01 	lds	r25, 0x0122
 8ee:	60 91 2a 01 	lds	r22, 0x012A
 8f2:	0e 94 cc 00 	call	0x198	; 0x198 <prepareSetDAC>

	}
}

void setDAC(){
	PORTD&=~(1<<LDAC);
 8f6:	5a 98       	cbi	0x0b, 2	; 11
	PORTD|=(1<<LDAC);	
 8f8:	5a 9a       	sbi	0x0b, 2	; 11
			}
			else if(event_cnt==6)//start measure
			{
				prepareSetDAC(ref16, chan);
				setDAC();
				ADCSRA |= (1 << ADSC); 
 8fa:	80 91 7a 00 	lds	r24, 0x007A
 8fe:	80 64       	ori	r24, 0x40	; 64
 900:	80 93 7a 00 	sts	0x007A, r24
 904:	1c c0       	rjmp	.+56     	; 0x93e <__stack+0x3f>
				
			}
			else if(event_cnt==7)
 906:	87 30       	cpi	r24, 0x07	; 7
 908:	91 05       	cpc	r25, r1
 90a:	99 f4       	brne	.+38     	; 0x932 <__stack+0x33>
			{
				prepareSetDAC(0, chan);
 90c:	80 e0       	ldi	r24, 0x00	; 0
 90e:	90 e0       	ldi	r25, 0x00	; 0
 910:	60 91 2a 01 	lds	r22, 0x012A
 914:	0e 94 cc 00 	call	0x198	; 0x198 <prepareSetDAC>

	}
}

void setDAC(){
	PORTD&=~(1<<LDAC);
 918:	5a 98       	cbi	0x0b, 2	; 11
	PORTD|=(1<<LDAC);	
 91a:	5a 9a       	sbi	0x0b, 2	; 11
			else if(event_cnt==7)
			{
				prepareSetDAC(0, chan);
				setDAC();
				
				ADCL_=ADCL;	
 91c:	90 91 78 00 	lds	r25, 0x0078
 920:	90 93 4d 01 	sts	0x014D, r25
				ADCH_=ADCH;
 924:	80 91 79 00 	lds	r24, 0x0079
 928:	80 93 51 01 	sts	0x0151, r24
				UDR0=ADCL_;
 92c:	90 93 c6 00 	sts	0x00C6, r25
 930:	06 c0       	rjmp	.+12     	; 0x93e <__stack+0x3f>
			}
			else if(event_cnt==8)
 932:	08 97       	sbiw	r24, 0x08	; 8
 934:	21 f4       	brne	.+8      	; 0x93e <__stack+0x3f>
			{
				UDR0=ADCH_;
 936:	80 91 51 01 	lds	r24, 0x0151
 93a:	80 93 c6 00 	sts	0x00C6, r24
		}
		
		
		
		
		ctr=0;
 93e:	10 92 49 01 	sts	0x0149, r1
 942:	10 92 48 01 	sts	0x0148, r1
		
		
		if(MD == ONE_SHOT)
 946:	80 91 16 01 	lds	r24, 0x0116
 94a:	85 30       	cpi	r24, 0x05	; 5
 94c:	69 f4       	brne	.+26     	; 0x968 <__stack+0x69>
		{
			if(event_cnt<16)
 94e:	80 91 44 01 	lds	r24, 0x0144
 952:	90 91 45 01 	lds	r25, 0x0145
 956:	80 31       	cpi	r24, 0x10	; 16
 958:	91 05       	cpc	r25, r1
 95a:	2c f5       	brge	.+74     	; 0x9a6 <__stack+0xa7>
				event_cnt++;
 95c:	01 96       	adiw	r24, 0x01	; 1
 95e:	90 93 45 01 	sts	0x0145, r25
 962:	80 93 44 01 	sts	0x0144, r24
 966:	1f c0       	rjmp	.+62     	; 0x9a6 <__stack+0xa7>
 968:	20 91 44 01 	lds	r18, 0x0144
 96c:	30 91 45 01 	lds	r19, 0x0145
		}
		else if(MD == PROGRAM)
 970:	82 30       	cpi	r24, 0x02	; 2
 972:	49 f4       	brne	.+18     	; 0x986 <__stack+0x87>
		{
			event_cnt++;
 974:	c9 01       	movw	r24, r18
 976:	01 96       	adiw	r24, 0x01	; 1
 978:	90 93 45 01 	sts	0x0145, r25
 97c:	80 93 44 01 	sts	0x0144, r24
			if(event_cnt>8)
 980:	09 97       	sbiw	r24, 0x09	; 9
 982:	8c f0       	brlt	.+34     	; 0x9a6 <__stack+0xa7>
 984:	0c c0       	rjmp	.+24     	; 0x99e <__stack+0x9f>
				event_cnt = 0;
		}
		else{
			event_cnt++;
 986:	2f 5f       	subi	r18, 0xFF	; 255
 988:	3f 4f       	sbci	r19, 0xFF	; 255
 98a:	30 93 45 01 	sts	0x0145, r19
 98e:	20 93 44 01 	sts	0x0144, r18
			if(event_cnt>T)
 992:	80 91 4c 01 	lds	r24, 0x014C
 996:	90 e0       	ldi	r25, 0x00	; 0
 998:	82 17       	cp	r24, r18
 99a:	93 07       	cpc	r25, r19
 99c:	24 f4       	brge	.+8      	; 0x9a6 <__stack+0xa7>
				event_cnt=0;
 99e:	10 92 45 01 	sts	0x0145, r1
 9a2:	10 92 44 01 	sts	0x0144, r1
		//{
		//	if(event_cnt<16)
		//		event_cnt++;			
		//}
	}
	ctr++;
 9a6:	80 91 48 01 	lds	r24, 0x0148
 9aa:	90 91 49 01 	lds	r25, 0x0149
 9ae:	01 96       	adiw	r24, 0x01	; 1
 9b0:	90 93 49 01 	sts	0x0149, r25
 9b4:	80 93 48 01 	sts	0x0148, r24
}
 9b8:	ff 91       	pop	r31
 9ba:	ef 91       	pop	r30
 9bc:	bf 91       	pop	r27
 9be:	af 91       	pop	r26
 9c0:	9f 91       	pop	r25
 9c2:	8f 91       	pop	r24
 9c4:	7f 91       	pop	r23
 9c6:	6f 91       	pop	r22
 9c8:	5f 91       	pop	r21
 9ca:	4f 91       	pop	r20
 9cc:	3f 91       	pop	r19
 9ce:	2f 91       	pop	r18
 9d0:	0f 90       	pop	r0
 9d2:	0f be       	out	0x3f, r0	; 63
 9d4:	0f 90       	pop	r0
 9d6:	1f 90       	pop	r1
 9d8:	18 95       	reti

000009da <__vector_18>:

//прием команд от компьютера по UART в зависимости от режима
ISR(USART_RX_vect)
{
 9da:	1f 92       	push	r1
 9dc:	0f 92       	push	r0
 9de:	0f b6       	in	r0, 0x3f	; 63
 9e0:	0f 92       	push	r0
 9e2:	11 24       	eor	r1, r1
 9e4:	2f 93       	push	r18
 9e6:	3f 93       	push	r19
 9e8:	4f 93       	push	r20
 9ea:	5f 93       	push	r21
 9ec:	6f 93       	push	r22
 9ee:	7f 93       	push	r23
 9f0:	8f 93       	push	r24
 9f2:	9f 93       	push	r25
 9f4:	af 93       	push	r26
 9f6:	bf 93       	push	r27
 9f8:	ef 93       	push	r30
 9fa:	ff 93       	push	r31
	switch(ptr)
 9fc:	80 91 28 01 	lds	r24, 0x0128
 a00:	84 30       	cpi	r24, 0x04	; 4
 a02:	09 f4       	brne	.+2      	; 0xa06 <__vector_18+0x2c>
 a04:	69 c0       	rjmp	.+210    	; 0xad8 <__vector_18+0xfe>
 a06:	85 30       	cpi	r24, 0x05	; 5
 a08:	58 f4       	brcc	.+22     	; 0xa20 <__vector_18+0x46>
 a0a:	81 30       	cpi	r24, 0x01	; 1
 a0c:	51 f1       	breq	.+84     	; 0xa62 <__vector_18+0x88>
 a0e:	81 30       	cpi	r24, 0x01	; 1
 a10:	d0 f0       	brcs	.+52     	; 0xa46 <__vector_18+0x6c>
 a12:	82 30       	cpi	r24, 0x02	; 2
 a14:	09 f4       	brne	.+2      	; 0xa18 <__vector_18+0x3e>
 a16:	42 c0       	rjmp	.+132    	; 0xa9c <__vector_18+0xc2>
 a18:	83 30       	cpi	r24, 0x03	; 3
 a1a:	09 f0       	breq	.+2      	; 0xa1e <__vector_18+0x44>
 a1c:	9a c0       	rjmp	.+308    	; 0xb52 <__vector_18+0x178>
 a1e:	4f c0       	rjmp	.+158    	; 0xabe <__vector_18+0xe4>
 a20:	87 30       	cpi	r24, 0x07	; 7
 a22:	09 f4       	brne	.+2      	; 0xa26 <__vector_18+0x4c>
 a24:	79 c0       	rjmp	.+242    	; 0xb18 <__vector_18+0x13e>
 a26:	88 30       	cpi	r24, 0x08	; 8
 a28:	38 f4       	brcc	.+14     	; 0xa38 <__vector_18+0x5e>
 a2a:	85 30       	cpi	r24, 0x05	; 5
 a2c:	09 f4       	brne	.+2      	; 0xa30 <__vector_18+0x56>
 a2e:	6a c0       	rjmp	.+212    	; 0xb04 <__vector_18+0x12a>
 a30:	86 30       	cpi	r24, 0x06	; 6
 a32:	09 f0       	breq	.+2      	; 0xa36 <__vector_18+0x5c>
 a34:	8e c0       	rjmp	.+284    	; 0xb52 <__vector_18+0x178>
 a36:	6b c0       	rjmp	.+214    	; 0xb0e <__vector_18+0x134>
 a38:	88 30       	cpi	r24, 0x08	; 8
 a3a:	09 f4       	brne	.+2      	; 0xa3e <__vector_18+0x64>
 a3c:	72 c0       	rjmp	.+228    	; 0xb22 <__vector_18+0x148>
 a3e:	89 30       	cpi	r24, 0x09	; 9
 a40:	09 f0       	breq	.+2      	; 0xa44 <__vector_18+0x6a>
 a42:	87 c0       	rjmp	.+270    	; 0xb52 <__vector_18+0x178>
 a44:	73 c0       	rjmp	.+230    	; 0xb2c <__vector_18+0x152>
	{
		case 0:
		if(UDR0!=255)//байт 255 является синхронизирующим
 a46:	80 91 c6 00 	lds	r24, 0x00C6
 a4a:	8f 3f       	cpi	r24, 0xFF	; 255
 a4c:	31 f0       	breq	.+12     	; 0xa5a <__vector_18+0x80>
		{
			sync=0;
 a4e:	10 92 25 01 	sts	0x0125, r1
			ptr--;
			ptr%=7;
 a52:	83 e0       	ldi	r24, 0x03	; 3
 a54:	80 93 28 01 	sts	0x0128, r24
 a58:	7c c0       	rjmp	.+248    	; 0xb52 <__vector_18+0x178>
		}
		else
			sync=1;
 a5a:	81 e0       	ldi	r24, 0x01	; 1
 a5c:	80 93 25 01 	sts	0x0125, r24
 a60:	78 c0       	rjmp	.+240    	; 0xb52 <__vector_18+0x178>
		break;
		
		
		case 1:
		MD=UDR0;
 a62:	20 91 c6 00 	lds	r18, 0x00C6
 a66:	20 93 16 01 	sts	0x0116, r18
		if(MD==VAC)
 a6a:	21 30       	cpi	r18, 0x01	; 1
 a6c:	39 f4       	brne	.+14     	; 0xa7c <__vector_18+0xa2>
			time_step=4;//5
 a6e:	84 e0       	ldi	r24, 0x04	; 4
 a70:	90 e0       	ldi	r25, 0x00	; 0
 a72:	90 93 12 01 	sts	0x0112, r25
 a76:	80 93 11 01 	sts	0x0111, r24
 a7a:	6b c0       	rjmp	.+214    	; 0xb52 <__vector_18+0x178>
		else
			time_step=6;//4		
 a7c:	86 e0       	ldi	r24, 0x06	; 6
 a7e:	90 e0       	ldi	r25, 0x00	; 0
 a80:	90 93 12 01 	sts	0x0112, r25
 a84:	80 93 11 01 	sts	0x0111, r24
		if(MD==PROGRAM)
 a88:	22 30       	cpi	r18, 0x02	; 2
 a8a:	09 f0       	breq	.+2      	; 0xa8e <__vector_18+0xb4>
 a8c:	62 c0       	rjmp	.+196    	; 0xb52 <__vector_18+0x178>
		{
			//PROGRAM_start=1;
			PROGRAM_done=0;
 a8e:	10 92 29 01 	sts	0x0129, r1
			proging_val=0;
 a92:	10 92 1e 01 	sts	0x011E, r1
 a96:	10 92 1d 01 	sts	0x011D, r1
 a9a:	5b c0       	rjmp	.+182    	; 0xb52 <__vector_18+0x178>
		}
		break;
		
		
		case 2:		
		x16_simple = UDR0;
 a9c:	80 91 c6 00 	lds	r24, 0x00C6
 aa0:	90 e0       	ldi	r25, 0x00	; 0
 aa2:	90 93 4f 01 	sts	0x014F, r25
 aa6:	80 93 4e 01 	sts	0x014E, r24
		x16 = x16_simple<<4;
 aaa:	74 e0       	ldi	r23, 0x04	; 4
 aac:	88 0f       	add	r24, r24
 aae:	99 1f       	adc	r25, r25
 ab0:	7a 95       	dec	r23
 ab2:	e1 f7       	brne	.-8      	; 0xaac <__vector_18+0xd2>
 ab4:	90 93 20 01 	sts	0x0120, r25
 ab8:	80 93 1f 01 	sts	0x011F, r24
 abc:	4a c0       	rjmp	.+148    	; 0xb52 <__vector_18+0x178>
		break;
		case 3:	
		ref16=UDR0<<4;
 abe:	80 91 c6 00 	lds	r24, 0x00C6
 ac2:	90 e0       	ldi	r25, 0x00	; 0
 ac4:	64 e0       	ldi	r22, 0x04	; 4
 ac6:	88 0f       	add	r24, r24
 ac8:	99 1f       	adc	r25, r25
 aca:	6a 95       	dec	r22
 acc:	e1 f7       	brne	.-8      	; 0xac6 <__vector_18+0xec>
 ace:	90 93 22 01 	sts	0x0122, r25
 ad2:	80 93 21 01 	sts	0x0121, r24
 ad6:	3d c0       	rjmp	.+122    	; 0xb52 <__vector_18+0x178>
		break;
		case 4:
		if(MD==PROGRAM)
 ad8:	80 91 16 01 	lds	r24, 0x0116
 adc:	82 30       	cpi	r24, 0x02	; 2
 ade:	29 f4       	brne	.+10     	; 0xaea <__vector_18+0x110>
			t1=UDR0;
 ae0:	80 91 c6 00 	lds	r24, 0x00C6
 ae4:	80 93 0d 01 	sts	0x010D, r24
 ae8:	34 c0       	rjmp	.+104    	; 0xb52 <__vector_18+0x178>
		else
			reset16=UDR0<<4;
 aea:	80 91 c6 00 	lds	r24, 0x00C6
 aee:	90 e0       	ldi	r25, 0x00	; 0
 af0:	54 e0       	ldi	r21, 0x04	; 4
 af2:	88 0f       	add	r24, r24
 af4:	99 1f       	adc	r25, r25
 af6:	5a 95       	dec	r21
 af8:	e1 f7       	brne	.-8      	; 0xaf2 <__vector_18+0x118>
 afa:	90 93 24 01 	sts	0x0124, r25
 afe:	80 93 23 01 	sts	0x0123, r24
 b02:	27 c0       	rjmp	.+78     	; 0xb52 <__vector_18+0x178>
		break;		
		case 5:
		
		t2=UDR0;
 b04:	80 91 c6 00 	lds	r24, 0x00C6
 b08:	80 93 0e 01 	sts	0x010E, r24
 b0c:	22 c0       	rjmp	.+68     	; 0xb52 <__vector_18+0x178>
	
		
		break;	
		case 6:
		dT=UDR0;
 b0e:	80 91 c6 00 	lds	r24, 0x00C6
 b12:	80 93 47 01 	sts	0x0147, r24
 b16:	1d c0       	rjmp	.+58     	; 0xb52 <__vector_18+0x178>
		break;
		case 7:
		T=UDR0;
 b18:	80 91 c6 00 	lds	r24, 0x00C6
 b1c:	80 93 4c 01 	sts	0x014C, r24
 b20:	18 c0       	rjmp	.+48     	; 0xb52 <__vector_18+0x178>
		break;
		case 8:
		chan=UDR0;
 b22:	80 91 c6 00 	lds	r24, 0x00C6
 b26:	80 93 2a 01 	sts	0x012A, r24
 b2a:	13 c0       	rjmp	.+38     	; 0xb52 <__vector_18+0x178>
		break;
		
		case 9:
			reverted[chan]=UDR0;
 b2c:	80 91 c6 00 	lds	r24, 0x00C6
 b30:	e0 91 2a 01 	lds	r30, 0x012A
 b34:	f0 e0       	ldi	r31, 0x00	; 0
 b36:	e1 5d       	subi	r30, 0xD1	; 209
 b38:	fe 4f       	sbci	r31, 0xFE	; 254
 b3a:	80 83       	st	Z, r24
		
			//event_cnt=0;			
			
			if(MD==GATHER_MULT)
 b3c:	80 91 16 01 	lds	r24, 0x0116
 b40:	83 30       	cpi	r24, 0x03	; 3
 b42:	19 f4       	brne	.+6      	; 0xb4a <__vector_18+0x170>
			{
			//	PORTD=0b00100000;
			//static int ff=1<<5;
			//if(x16>>4)
			gatherMult();
 b44:	0e 94 7a 00 	call	0xf4	; 0xf4 <gatherMult>
 b48:	04 c0       	rjmp	.+8      	; 0xb52 <__vector_18+0x178>
			//PORTD=(1<<5)^PORTD;
			//PORTD=ff;
			}
			else if(MD==SEPAR_MULT)	
 b4a:	84 30       	cpi	r24, 0x04	; 4
 b4c:	11 f4       	brne	.+4      	; 0xb52 <__vector_18+0x178>
			{
			separMult();	
 b4e:	0e 94 83 00 	call	0x106	; 0x106 <separMult>
		break;
	}
	

	
	dTt2=dT+t2;
 b52:	80 91 0e 01 	lds	r24, 0x010E
 b56:	90 91 47 01 	lds	r25, 0x0147
 b5a:	89 0f       	add	r24, r25
 b5c:	80 93 0f 01 	sts	0x010F, r24
	//UDR0=x16/16;
	ptr++;
	ptr%=10;
 b60:	80 91 28 01 	lds	r24, 0x0128
 b64:	8f 5f       	subi	r24, 0xFF	; 255
 b66:	6a e0       	ldi	r22, 0x0A	; 10
 b68:	0e 94 c9 05 	call	0xb92	; 0xb92 <__udivmodqi4>
 b6c:	90 93 28 01 	sts	0x0128, r25
 b70:	ff 91       	pop	r31
 b72:	ef 91       	pop	r30
 b74:	bf 91       	pop	r27
 b76:	af 91       	pop	r26
 b78:	9f 91       	pop	r25
 b7a:	8f 91       	pop	r24
 b7c:	7f 91       	pop	r23
 b7e:	6f 91       	pop	r22
 b80:	5f 91       	pop	r21
 b82:	4f 91       	pop	r20
 b84:	3f 91       	pop	r19
 b86:	2f 91       	pop	r18
 b88:	0f 90       	pop	r0
 b8a:	0f be       	out	0x3f, r0	; 63
 b8c:	0f 90       	pop	r0
 b8e:	1f 90       	pop	r1
 b90:	18 95       	reti

00000b92 <__udivmodqi4>:
 b92:	99 1b       	sub	r25, r25
 b94:	79 e0       	ldi	r23, 0x09	; 9
 b96:	04 c0       	rjmp	.+8      	; 0xba0 <__udivmodqi4_ep>

00000b98 <__udivmodqi4_loop>:
 b98:	99 1f       	adc	r25, r25
 b9a:	96 17       	cp	r25, r22
 b9c:	08 f0       	brcs	.+2      	; 0xba0 <__udivmodqi4_ep>
 b9e:	96 1b       	sub	r25, r22

00000ba0 <__udivmodqi4_ep>:
 ba0:	88 1f       	adc	r24, r24
 ba2:	7a 95       	dec	r23
 ba4:	c9 f7       	brne	.-14     	; 0xb98 <__udivmodqi4_loop>
 ba6:	80 95       	com	r24
 ba8:	08 95       	ret

00000baa <__divmodqi4>:
 baa:	87 fb       	bst	r24, 7
 bac:	08 2e       	mov	r0, r24
 bae:	06 26       	eor	r0, r22
 bb0:	87 fd       	sbrc	r24, 7
 bb2:	81 95       	neg	r24
 bb4:	67 fd       	sbrc	r22, 7
 bb6:	61 95       	neg	r22
 bb8:	ec df       	rcall	.-40     	; 0xb92 <__udivmodqi4>
 bba:	0e f4       	brtc	.+2      	; 0xbbe <__divmodqi4_1>
 bbc:	91 95       	neg	r25

00000bbe <__divmodqi4_1>:
 bbe:	07 fc       	sbrc	r0, 7
 bc0:	81 95       	neg	r24

00000bc2 <__divmodqi4_exit>:
 bc2:	08 95       	ret

00000bc4 <__udivmodhi4>:
 bc4:	aa 1b       	sub	r26, r26
 bc6:	bb 1b       	sub	r27, r27
 bc8:	51 e1       	ldi	r21, 0x11	; 17
 bca:	07 c0       	rjmp	.+14     	; 0xbda <__udivmodhi4_ep>

00000bcc <__udivmodhi4_loop>:
 bcc:	aa 1f       	adc	r26, r26
 bce:	bb 1f       	adc	r27, r27
 bd0:	a6 17       	cp	r26, r22
 bd2:	b7 07       	cpc	r27, r23
 bd4:	10 f0       	brcs	.+4      	; 0xbda <__udivmodhi4_ep>
 bd6:	a6 1b       	sub	r26, r22
 bd8:	b7 0b       	sbc	r27, r23

00000bda <__udivmodhi4_ep>:
 bda:	88 1f       	adc	r24, r24
 bdc:	99 1f       	adc	r25, r25
 bde:	5a 95       	dec	r21
 be0:	a9 f7       	brne	.-22     	; 0xbcc <__udivmodhi4_loop>
 be2:	80 95       	com	r24
 be4:	90 95       	com	r25
 be6:	bc 01       	movw	r22, r24
 be8:	cd 01       	movw	r24, r26
 bea:	08 95       	ret

00000bec <_exit>:
 bec:	f8 94       	cli

00000bee <__stop_program>:
 bee:	ff cf       	rjmp	.-2      	; 0xbee <__stop_program>
