
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000032  00800100  00000e66  00000efa  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000e66  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000007a  00800132  00800132  00000f2c  2**0
                  ALLOC
  3 .debug_aranges 00000020  00000000  00000000  00000f2c  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 0000033a  00000000  00000000  00000f4c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000a39  00000000  00000000  00001286  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000249  00000000  00000000  00001cbf  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000c13  00000000  00000000  00001f08  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000110  00000000  00000000  00002b1c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000002ff  00000000  00000000  00002c2c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000124  00000000  00000000  00002f2b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 56 02 	jmp	0x4ac	; 0x4ac <__vector_9>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 26 06 	jmp	0xc4c	; 0xc4c <__vector_18>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e6 e6       	ldi	r30, 0x66	; 102
  7c:	fe e0       	ldi	r31, 0x0E	; 14
  7e:	02 c0       	rjmp	.+4      	; 0x84 <.do_copy_data_start>

00000080 <.do_copy_data_loop>:
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0

00000084 <.do_copy_data_start>:
  84:	a2 33       	cpi	r26, 0x32	; 50
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <.do_copy_data_loop>

0000008a <__do_clear_bss>:
  8a:	11 e0       	ldi	r17, 0x01	; 1
  8c:	a2 e3       	ldi	r26, 0x32	; 50
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	ac 3a       	cpi	r26, 0xAC	; 172
  96:	b1 07       	cpc	r27, r17
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 00 02 	call	0x400	; 0x400 <main>
  9e:	0c 94 31 07 	jmp	0xe62	; 0xe62 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <set_pin>:
					
struct Pin_t SYNC_PINS[] = {	{&PORTD, PD3}, {&PORTD, PD6}, {&PORTD, PD7}, {&PORTB, PB0}, 		//pd3 for multiplexing or pd5 for 64
								{&PORTB, PB1}, {&PORTC, PC2}, {&PORTC, PC3}, {&PORTC, PC4} };
						
						
void set_pin(struct Pin_t pin) {
  a6:	df 93       	push	r29
  a8:	cf 93       	push	r28
  aa:	00 d0       	rcall	.+0      	; 0xac <set_pin+0x6>
  ac:	0f 92       	push	r0
  ae:	cd b7       	in	r28, 0x3d	; 61
  b0:	de b7       	in	r29, 0x3e	; 62
  b2:	69 83       	std	Y+1, r22	; 0x01
  b4:	7a 83       	std	Y+2, r23	; 0x02
  b6:	8b 83       	std	Y+3, r24	; 0x03
  b8:	e9 81       	ldd	r30, Y+1	; 0x01
  ba:	fa 81       	ldd	r31, Y+2	; 0x02
	SET_PIN(*pin.reg_out, pin.pin);
  bc:	21 e0       	ldi	r18, 0x01	; 1
  be:	30 e0       	ldi	r19, 0x00	; 0
  c0:	02 c0       	rjmp	.+4      	; 0xc6 <set_pin+0x20>
  c2:	22 0f       	add	r18, r18
  c4:	33 1f       	adc	r19, r19
  c6:	8a 95       	dec	r24
  c8:	e2 f7       	brpl	.-8      	; 0xc2 <set_pin+0x1c>
  ca:	80 81       	ld	r24, Z
  cc:	82 2b       	or	r24, r18
  ce:	80 83       	st	Z, r24
}
  d0:	0f 90       	pop	r0
  d2:	0f 90       	pop	r0
  d4:	0f 90       	pop	r0
  d6:	cf 91       	pop	r28
  d8:	df 91       	pop	r29
  da:	08 95       	ret

000000dc <reset_pin>:

void reset_pin(struct Pin_t pin) {
  dc:	df 93       	push	r29
  de:	cf 93       	push	r28
  e0:	00 d0       	rcall	.+0      	; 0xe2 <reset_pin+0x6>
  e2:	0f 92       	push	r0
  e4:	cd b7       	in	r28, 0x3d	; 61
  e6:	de b7       	in	r29, 0x3e	; 62
  e8:	69 83       	std	Y+1, r22	; 0x01
  ea:	7a 83       	std	Y+2, r23	; 0x02
  ec:	8b 83       	std	Y+3, r24	; 0x03
  ee:	e9 81       	ldd	r30, Y+1	; 0x01
  f0:	fa 81       	ldd	r31, Y+2	; 0x02
	RESET_PIN(*pin.reg_out, pin.pin);
  f2:	21 e0       	ldi	r18, 0x01	; 1
  f4:	30 e0       	ldi	r19, 0x00	; 0
  f6:	02 c0       	rjmp	.+4      	; 0xfc <reset_pin+0x20>
  f8:	22 0f       	add	r18, r18
  fa:	33 1f       	adc	r19, r19
  fc:	8a 95       	dec	r24
  fe:	e2 f7       	brpl	.-8      	; 0xf8 <reset_pin+0x1c>
 100:	20 95       	com	r18
 102:	80 81       	ld	r24, Z
 104:	82 23       	and	r24, r18
 106:	80 83       	st	Z, r24
}
 108:	0f 90       	pop	r0
 10a:	0f 90       	pop	r0
 10c:	0f 90       	pop	r0
 10e:	cf 91       	pop	r28
 110:	df 91       	pop	r29
 112:	08 95       	ret

00000114 <gatherMult>:
struct Pin_t sep4_pin = {&PORTB, 0};
struct Pin_t resister_pin = {&PORTC, 4};
		
void gatherMult()
{
	reset_pin(sep2_pin);
 114:	e0 91 1b 01 	lds	r30, 0x011B
 118:	f0 91 1c 01 	lds	r31, 0x011C
void set_pin(struct Pin_t pin) {
	SET_PIN(*pin.reg_out, pin.pin);
}

void reset_pin(struct Pin_t pin) {
	RESET_PIN(*pin.reg_out, pin.pin);
 11c:	41 e0       	ldi	r20, 0x01	; 1
 11e:	50 e0       	ldi	r21, 0x00	; 0
 120:	ca 01       	movw	r24, r20
 122:	00 90 1d 01 	lds	r0, 0x011D
 126:	02 c0       	rjmp	.+4      	; 0x12c <gatherMult+0x18>
 128:	88 0f       	add	r24, r24
 12a:	99 1f       	adc	r25, r25
 12c:	0a 94       	dec	r0
 12e:	e2 f7       	brpl	.-8      	; 0x128 <gatherMult+0x14>
 130:	80 95       	com	r24
 132:	20 81       	ld	r18, Z
 134:	28 23       	and	r18, r24
 136:	20 83       	st	Z, r18
struct Pin_t resister_pin = {&PORTC, 4};
		
void gatherMult()
{
	reset_pin(sep2_pin);
	reset_pin(sep3_pin);
 138:	e0 91 1e 01 	lds	r30, 0x011E
 13c:	f0 91 1f 01 	lds	r31, 0x011F
void set_pin(struct Pin_t pin) {
	SET_PIN(*pin.reg_out, pin.pin);
}

void reset_pin(struct Pin_t pin) {
	RESET_PIN(*pin.reg_out, pin.pin);
 140:	ca 01       	movw	r24, r20
 142:	00 90 20 01 	lds	r0, 0x0120
 146:	02 c0       	rjmp	.+4      	; 0x14c <gatherMult+0x38>
 148:	88 0f       	add	r24, r24
 14a:	99 1f       	adc	r25, r25
 14c:	0a 94       	dec	r0
 14e:	e2 f7       	brpl	.-8      	; 0x148 <gatherMult+0x34>
 150:	80 95       	com	r24
 152:	20 81       	ld	r18, Z
 154:	28 23       	and	r18, r24
 156:	20 83       	st	Z, r18
		
void gatherMult()
{
	reset_pin(sep2_pin);
	reset_pin(sep3_pin);
	reset_pin(sep1_pin);
 158:	e0 91 18 01 	lds	r30, 0x0118
 15c:	f0 91 19 01 	lds	r31, 0x0119
void set_pin(struct Pin_t pin) {
	SET_PIN(*pin.reg_out, pin.pin);
}

void reset_pin(struct Pin_t pin) {
	RESET_PIN(*pin.reg_out, pin.pin);
 160:	ca 01       	movw	r24, r20
 162:	00 90 1a 01 	lds	r0, 0x011A
 166:	02 c0       	rjmp	.+4      	; 0x16c <gatherMult+0x58>
 168:	88 0f       	add	r24, r24
 16a:	99 1f       	adc	r25, r25
 16c:	0a 94       	dec	r0
 16e:	e2 f7       	brpl	.-8      	; 0x168 <gatherMult+0x54>
 170:	80 95       	com	r24
 172:	20 81       	ld	r18, Z
 174:	28 23       	and	r18, r24
 176:	20 83       	st	Z, r18
	reset_pin(sep2_pin);
	reset_pin(sep3_pin);
	reset_pin(sep1_pin);
	
	// 3-4
	RESET_PIN(PORTC, 1);	
 178:	41 98       	cbi	0x08, 1	; 8
	// 2-3	
	RESET_PIN(PORTB, 2);
 17a:	2a 98       	cbi	0x05, 2	; 5
	// 1-2
	RESET_PIN(PORTB, 1);
 17c:	29 98       	cbi	0x05, 1	; 5
	
	reset_pin(sep4_pin);
 17e:	e0 91 21 01 	lds	r30, 0x0121
 182:	f0 91 22 01 	lds	r31, 0x0122
void set_pin(struct Pin_t pin) {
	SET_PIN(*pin.reg_out, pin.pin);
}

void reset_pin(struct Pin_t pin) {
	RESET_PIN(*pin.reg_out, pin.pin);
 186:	ca 01       	movw	r24, r20
 188:	00 90 23 01 	lds	r0, 0x0123
 18c:	02 c0       	rjmp	.+4      	; 0x192 <gatherMult+0x7e>
 18e:	88 0f       	add	r24, r24
 190:	99 1f       	adc	r25, r25
 192:	0a 94       	dec	r0
 194:	e2 f7       	brpl	.-8      	; 0x18e <gatherMult+0x7a>
 196:	80 95       	com	r24
 198:	20 81       	ld	r18, Z
 19a:	28 23       	and	r18, r24
 19c:	20 83       	st	Z, r18
	// 1-2
	RESET_PIN(PORTB, 1);
	
	reset_pin(sep4_pin);
	
	set_pin(resister_pin);
 19e:	e0 91 24 01 	lds	r30, 0x0124
 1a2:	f0 91 25 01 	lds	r31, 0x0125
struct Pin_t SYNC_PINS[] = {	{&PORTD, PD3}, {&PORTD, PD6}, {&PORTD, PD7}, {&PORTB, PB0}, 		//pd3 for multiplexing or pd5 for 64
								{&PORTB, PB1}, {&PORTC, PC2}, {&PORTC, PC3}, {&PORTC, PC4} };
						
						
void set_pin(struct Pin_t pin) {
	SET_PIN(*pin.reg_out, pin.pin);
 1a6:	00 90 26 01 	lds	r0, 0x0126
 1aa:	02 c0       	rjmp	.+4      	; 0x1b0 <gatherMult+0x9c>
 1ac:	44 0f       	add	r20, r20
 1ae:	55 1f       	adc	r21, r21
 1b0:	0a 94       	dec	r0
 1b2:	e2 f7       	brpl	.-8      	; 0x1ac <gatherMult+0x98>
 1b4:	80 81       	ld	r24, Z
 1b6:	84 2b       	or	r24, r20
 1b8:	80 83       	st	Z, r24
	RESET_PIN(PORTB, 1);
	
	reset_pin(sep4_pin);
	
	set_pin(resister_pin);
}
 1ba:	08 95       	ret

000001bc <usualMult>:

void usualMult()
{
	RESET_PIN(PORTB, 1);
 1bc:	29 98       	cbi	0x05, 1	; 5
	RESET_PIN(PORTB, 2);
 1be:	2a 98       	cbi	0x05, 2	; 5
	RESET_PIN(PORTC, 1);
 1c0:	41 98       	cbi	0x08, 1	; 8
	
	set_pin(resister_pin);
 1c2:	e0 91 24 01 	lds	r30, 0x0124
 1c6:	f0 91 25 01 	lds	r31, 0x0125
struct Pin_t SYNC_PINS[] = {	{&PORTD, PD3}, {&PORTD, PD6}, {&PORTD, PD7}, {&PORTB, PB0}, 		//pd3 for multiplexing or pd5 for 64
								{&PORTB, PB1}, {&PORTC, PC2}, {&PORTC, PC3}, {&PORTC, PC4} };
						
						
void set_pin(struct Pin_t pin) {
	SET_PIN(*pin.reg_out, pin.pin);
 1ca:	21 e0       	ldi	r18, 0x01	; 1
 1cc:	30 e0       	ldi	r19, 0x00	; 0
 1ce:	a9 01       	movw	r20, r18
 1d0:	00 90 26 01 	lds	r0, 0x0126
 1d4:	02 c0       	rjmp	.+4      	; 0x1da <usualMult+0x1e>
 1d6:	44 0f       	add	r20, r20
 1d8:	55 1f       	adc	r21, r21
 1da:	0a 94       	dec	r0
 1dc:	e2 f7       	brpl	.-8      	; 0x1d6 <usualMult+0x1a>
 1de:	80 81       	ld	r24, Z
 1e0:	84 2b       	or	r24, r20
 1e2:	80 83       	st	Z, r24
	RESET_PIN(PORTB, 1);
	RESET_PIN(PORTB, 2);
	RESET_PIN(PORTC, 1);
	
	set_pin(resister_pin);
	set_pin(sep2_pin);
 1e4:	e0 91 1b 01 	lds	r30, 0x011B
 1e8:	f0 91 1c 01 	lds	r31, 0x011C
struct Pin_t SYNC_PINS[] = {	{&PORTD, PD3}, {&PORTD, PD6}, {&PORTD, PD7}, {&PORTB, PB0}, 		//pd3 for multiplexing or pd5 for 64
								{&PORTB, PB1}, {&PORTC, PC2}, {&PORTC, PC3}, {&PORTC, PC4} };
						
						
void set_pin(struct Pin_t pin) {
	SET_PIN(*pin.reg_out, pin.pin);
 1ec:	a9 01       	movw	r20, r18
 1ee:	00 90 1d 01 	lds	r0, 0x011D
 1f2:	02 c0       	rjmp	.+4      	; 0x1f8 <usualMult+0x3c>
 1f4:	44 0f       	add	r20, r20
 1f6:	55 1f       	adc	r21, r21
 1f8:	0a 94       	dec	r0
 1fa:	e2 f7       	brpl	.-8      	; 0x1f4 <usualMult+0x38>
 1fc:	80 81       	ld	r24, Z
 1fe:	84 2b       	or	r24, r20
 200:	80 83       	st	Z, r24
	RESET_PIN(PORTB, 2);
	RESET_PIN(PORTC, 1);
	
	set_pin(resister_pin);
	set_pin(sep2_pin);
	set_pin(sep3_pin);
 202:	e0 91 1e 01 	lds	r30, 0x011E
 206:	f0 91 1f 01 	lds	r31, 0x011F
struct Pin_t SYNC_PINS[] = {	{&PORTD, PD3}, {&PORTD, PD6}, {&PORTD, PD7}, {&PORTB, PB0}, 		//pd3 for multiplexing or pd5 for 64
								{&PORTB, PB1}, {&PORTC, PC2}, {&PORTC, PC3}, {&PORTC, PC4} };
						
						
void set_pin(struct Pin_t pin) {
	SET_PIN(*pin.reg_out, pin.pin);
 20a:	a9 01       	movw	r20, r18
 20c:	00 90 20 01 	lds	r0, 0x0120
 210:	02 c0       	rjmp	.+4      	; 0x216 <usualMult+0x5a>
 212:	44 0f       	add	r20, r20
 214:	55 1f       	adc	r21, r21
 216:	0a 94       	dec	r0
 218:	e2 f7       	brpl	.-8      	; 0x212 <usualMult+0x56>
 21a:	80 81       	ld	r24, Z
 21c:	84 2b       	or	r24, r20
 21e:	80 83       	st	Z, r24
	RESET_PIN(PORTC, 1);
	
	set_pin(resister_pin);
	set_pin(sep2_pin);
	set_pin(sep3_pin);
	set_pin(sep4_pin);
 220:	e0 91 21 01 	lds	r30, 0x0121
 224:	f0 91 22 01 	lds	r31, 0x0122
struct Pin_t SYNC_PINS[] = {	{&PORTD, PD3}, {&PORTD, PD6}, {&PORTD, PD7}, {&PORTB, PB0}, 		//pd3 for multiplexing or pd5 for 64
								{&PORTB, PB1}, {&PORTC, PC2}, {&PORTC, PC3}, {&PORTC, PC4} };
						
						
void set_pin(struct Pin_t pin) {
	SET_PIN(*pin.reg_out, pin.pin);
 228:	a9 01       	movw	r20, r18
 22a:	00 90 23 01 	lds	r0, 0x0123
 22e:	02 c0       	rjmp	.+4      	; 0x234 <usualMult+0x78>
 230:	44 0f       	add	r20, r20
 232:	55 1f       	adc	r21, r21
 234:	0a 94       	dec	r0
 236:	e2 f7       	brpl	.-8      	; 0x230 <usualMult+0x74>
 238:	80 81       	ld	r24, Z
 23a:	84 2b       	or	r24, r20
 23c:	80 83       	st	Z, r24
	
	set_pin(resister_pin);
	set_pin(sep2_pin);
	set_pin(sep3_pin);
	set_pin(sep4_pin);
	set_pin(sep1_pin);
 23e:	e0 91 18 01 	lds	r30, 0x0118
 242:	f0 91 19 01 	lds	r31, 0x0119
struct Pin_t SYNC_PINS[] = {	{&PORTD, PD3}, {&PORTD, PD6}, {&PORTD, PD7}, {&PORTB, PB0}, 		//pd3 for multiplexing or pd5 for 64
								{&PORTB, PB1}, {&PORTC, PC2}, {&PORTC, PC3}, {&PORTC, PC4} };
						
						
void set_pin(struct Pin_t pin) {
	SET_PIN(*pin.reg_out, pin.pin);
 246:	00 90 1a 01 	lds	r0, 0x011A
 24a:	02 c0       	rjmp	.+4      	; 0x250 <usualMult+0x94>
 24c:	22 0f       	add	r18, r18
 24e:	33 1f       	adc	r19, r19
 250:	0a 94       	dec	r0
 252:	e2 f7       	brpl	.-8      	; 0x24c <usualMult+0x90>
 254:	80 81       	ld	r24, Z
 256:	82 2b       	or	r24, r18
 258:	80 83       	st	Z, r24
	set_pin(resister_pin);
	set_pin(sep2_pin);
	set_pin(sep3_pin);
	set_pin(sep4_pin);
	set_pin(sep1_pin);
}
 25a:	08 95       	ret

0000025c <set_reverser>:
		else
			PORTB&=~(1<<4);
		break;

	}
}
 25c:	08 95       	ret

0000025e <ADC_Init>:
}

//функция инициализаци АЦП
//АЦП используется для регистрации тока, проходящего через мемристор
void ADC_Init(){
 ADCSRA |= (1 << ADEN) // Включаем АЦП
 25e:	ea e7       	ldi	r30, 0x7A	; 122
 260:	f0 e0       	ldi	r31, 0x00	; 0
 262:	80 81       	ld	r24, Z
 264:	83 68       	ori	r24, 0x83	; 131
 266:	80 83       	st	Z, r24
 //ADCSRA&=~(1 << ADPS1)|(1 << ADPS0)|(1 << ADPS1);
 |(1 << ADPS1)|(1 << ADPS0)|(1 << ADPS1);    // устанавливаем предделитель преобразователя на 8
 ADMUX |= (0 << REFS1)|(1 << REFS0) //выставляем опорное напряжение, как внешний ИОН
 268:	ec e7       	ldi	r30, 0x7C	; 124
 26a:	f0 e0       	ldi	r31, 0x00	; 0
 26c:	80 81       	ld	r24, Z
 26e:	80 64       	ori	r24, 0x40	; 64
 270:	80 83       	st	Z, r24
 |(0 << MUX0)|(0 << MUX1)|(0 << MUX2)|(0 << MUX3); // снимать сигнал будем с  входа PC0 
}
 272:	08 95       	ret

00000274 <timer_init>:

//функция инициализации таймера
// Таймер используется для формирования временной последовательности значений, формируемых с ЦАПа
void timer_init()
{
    TCCR2A = 0;        
 274:	10 92 b0 00 	sts	0x00B0, r1
    TCCR2B = 0;
 278:	e1 eb       	ldi	r30, 0xB1	; 177
 27a:	f0 e0       	ldi	r31, 0x00	; 0
 27c:	10 82       	st	Z, r1
    
    TCCR2B |= (1<<CS21) ;    
 27e:	80 81       	ld	r24, Z
 280:	82 60       	ori	r24, 0x02	; 2
 282:	80 83       	st	Z, r24
    TIMSK2 = (1 << TOIE2);
 284:	81 e0       	ldi	r24, 0x01	; 1
 286:	80 93 70 00 	sts	0x0070, r24
}
 28a:	08 95       	ret

0000028c <uart_init>:

//функция инициализации UART-интерфейса
void uart_init(unsigned int ubrr)
{	
	UBRR0H = (unsigned char)(ubrr>>8);
 28c:	90 93 c5 00 	sts	0x00C5, r25
	UBRR0L = (unsigned char)ubrr;
 290:	80 93 c4 00 	sts	0x00C4, r24
	UCSR0B = (1<<RXCIE0)|(1<<RXEN0)|(1<<TXEN0);
 294:	88 e9       	ldi	r24, 0x98	; 152
 296:	80 93 c1 00 	sts	0x00C1, r24
	UCSR0C = (1<<USBS0)|(3<<UCSZ00);
 29a:	8e e0       	ldi	r24, 0x0E	; 14
 29c:	80 93 c2 00 	sts	0x00C2, r24
}
 2a0:	08 95       	ret

000002a2 <SPI_MasterInit>:

//функция инициализации SPI
void SPI_MasterInit()
{
	DDR_SPI |= (1<<DD_MOSI)|(1<<DD_SCK)|(1<<SPI_SS);
 2a2:	84 b1       	in	r24, 0x04	; 4
 2a4:	8c 62       	ori	r24, 0x2C	; 44
 2a6:	84 b9       	out	0x04, r24	; 4
	SPCR = (1<<SPE)|(0<<DORD)|(1<<MSTR)|(1<<CPOL)|(0<<CPHA);//|(1<<SPR1)|(0<<SPR0);
 2a8:	88 e5       	ldi	r24, 0x58	; 88
 2aa:	8c bd       	out	0x2c, r24	; 44
}
 2ac:	08 95       	ret

000002ae <SPI_WriteByte>:



void SPI_WriteByte(uint8_t data)
{
   SPDR = data;
 2ae:	8e bd       	out	0x2e, r24	; 46
  while(!(SPSR & (1<<SPIF)));
 2b0:	0d b4       	in	r0, 0x2d	; 45
 2b2:	07 fe       	sbrs	r0, 7
 2b4:	fd cf       	rjmp	.-6      	; 0x2b0 <SPI_WriteByte+0x2>
}
 2b6:	08 95       	ret

000002b8 <prepareResetDAC>:




void prepareResetDAC(int8_t chan)//_____________bipolar!!! and <<4 larger
{
 2b8:	ef 92       	push	r14
 2ba:	ff 92       	push	r15
 2bc:	0f 93       	push	r16
 2be:	1f 93       	push	r17
	reset_pin(SYNC_PINS[chan>>3]);
 2c0:	28 2f       	mov	r18, r24
 2c2:	25 95       	asr	r18
 2c4:	25 95       	asr	r18
 2c6:	25 95       	asr	r18
 2c8:	33 27       	eor	r19, r19
 2ca:	27 fd       	sbrc	r18, 7
 2cc:	30 95       	com	r19
 2ce:	89 01       	movw	r16, r18
 2d0:	00 0f       	add	r16, r16
 2d2:	11 1f       	adc	r17, r17
 2d4:	02 0f       	add	r16, r18
 2d6:	13 1f       	adc	r17, r19
 2d8:	00 50       	subi	r16, 0x00	; 0
 2da:	1f 4f       	sbci	r17, 0xFF	; 255
 2dc:	d8 01       	movw	r26, r16
 2de:	ed 91       	ld	r30, X+
 2e0:	fc 91       	ld	r31, X
 2e2:	11 97       	sbiw	r26, 0x01	; 1
void set_pin(struct Pin_t pin) {
	SET_PIN(*pin.reg_out, pin.pin);
}

void reset_pin(struct Pin_t pin) {
	RESET_PIN(*pin.reg_out, pin.pin);
 2e4:	91 e0       	ldi	r25, 0x01	; 1
 2e6:	e9 2e       	mov	r14, r25
 2e8:	f1 2c       	mov	r15, r1
 2ea:	97 01       	movw	r18, r14
 2ec:	12 96       	adiw	r26, 0x02	; 2
 2ee:	0c 90       	ld	r0, X
 2f0:	02 c0       	rjmp	.+4      	; 0x2f6 <prepareResetDAC+0x3e>
 2f2:	22 0f       	add	r18, r18
 2f4:	33 1f       	adc	r19, r19
 2f6:	0a 94       	dec	r0
 2f8:	e2 f7       	brpl	.-8      	; 0x2f2 <prepareResetDAC+0x3a>
 2fa:	20 95       	com	r18
 2fc:	90 81       	ld	r25, Z
 2fe:	92 23       	and	r25, r18
 300:	90 83       	st	Z, r25
	SPI_WriteByte(0b00001000|chan_addrs[chan%8]); // magic numbers, fuck
 302:	68 e0       	ldi	r22, 0x08	; 8
 304:	0e 94 10 07 	call	0xe20	; 0xe20 <__divmodqi4>
 308:	e9 2f       	mov	r30, r25
 30a:	ff 27       	eor	r31, r31
 30c:	e7 fd       	sbrc	r30, 7
 30e:	f0 95       	com	r31
 310:	ec 55       	subi	r30, 0x5C	; 92
 312:	fe 4f       	sbci	r31, 0xFE	; 254
 314:	80 81       	ld	r24, Z
 316:	88 60       	ori	r24, 0x08	; 8
 318:	90 e0       	ldi	r25, 0x00	; 0
 31a:	0e 94 57 01 	call	0x2ae	; 0x2ae <SPI_WriteByte>
	SPI_WriteByte(0);		
 31e:	80 e0       	ldi	r24, 0x00	; 0
 320:	90 e0       	ldi	r25, 0x00	; 0
 322:	0e 94 57 01 	call	0x2ae	; 0x2ae <SPI_WriteByte>
	set_pin(SYNC_PINS[chan>>3]);
 326:	d8 01       	movw	r26, r16
 328:	ed 91       	ld	r30, X+
 32a:	fc 91       	ld	r31, X
 32c:	11 97       	sbiw	r26, 0x01	; 1
struct Pin_t SYNC_PINS[] = {	{&PORTD, PD3}, {&PORTD, PD6}, {&PORTD, PD7}, {&PORTB, PB0}, 		//pd3 for multiplexing or pd5 for 64
								{&PORTB, PB1}, {&PORTC, PC2}, {&PORTC, PC3}, {&PORTC, PC4} };
						
						
void set_pin(struct Pin_t pin) {
	SET_PIN(*pin.reg_out, pin.pin);
 32e:	12 96       	adiw	r26, 0x02	; 2
 330:	0c 90       	ld	r0, X
 332:	02 c0       	rjmp	.+4      	; 0x338 <prepareResetDAC+0x80>
 334:	ee 0c       	add	r14, r14
 336:	ff 1c       	adc	r15, r15
 338:	0a 94       	dec	r0
 33a:	e2 f7       	brpl	.-8      	; 0x334 <prepareResetDAC+0x7c>
 33c:	80 81       	ld	r24, Z
 33e:	8e 29       	or	r24, r14
 340:	80 83       	st	Z, r24
}
 342:	1f 91       	pop	r17
 344:	0f 91       	pop	r16
 346:	ff 90       	pop	r15
 348:	ef 90       	pop	r14
 34a:	08 95       	ret

0000034c <prepareSetDAC>:

//функция управления ЦАПом 
// при этом, управление регистром LDAC должно использоваться 
//вне функции в перспепктиве создания многоканальной схемы
void prepareSetDAC(int16_t x,uint8_t chan)//_____________bipolar!!! and <<4 larger
{
 34c:	cf 92       	push	r12
 34e:	df 92       	push	r13
 350:	ef 92       	push	r14
 352:	ff 92       	push	r15
 354:	0f 93       	push	r16
 356:	1f 93       	push	r17
 358:	cf 93       	push	r28
 35a:	df 93       	push	r29
 35c:	e6 2f       	mov	r30, r22
	static uint8_t send8;
	
	x=-x;
 35e:	ee 24       	eor	r14, r14
 360:	ff 24       	eor	r15, r15
 362:	e8 1a       	sub	r14, r24
 364:	f9 0a       	sbc	r15, r25
	x+=2048;
 366:	80 e0       	ldi	r24, 0x00	; 0
 368:	98 e0       	ldi	r25, 0x08	; 8
 36a:	e8 0e       	add	r14, r24
 36c:	f9 1e       	adc	r15, r25
	uint8_t DAC = chan>>3;
	reset_pin(SYNC_PINS[DAC]);
 36e:	86 2f       	mov	r24, r22
 370:	86 95       	lsr	r24
 372:	86 95       	lsr	r24
 374:	86 95       	lsr	r24
 376:	90 e0       	ldi	r25, 0x00	; 0
 378:	8c 01       	movw	r16, r24
 37a:	00 0f       	add	r16, r16
 37c:	11 1f       	adc	r17, r17
 37e:	08 0f       	add	r16, r24
 380:	19 1f       	adc	r17, r25
 382:	00 50       	subi	r16, 0x00	; 0
 384:	1f 4f       	sbci	r17, 0xFF	; 255
 386:	e8 01       	movw	r28, r16
 388:	a8 81       	ld	r26, Y
 38a:	b9 81       	ldd	r27, Y+1	; 0x01
}

void reset_pin(struct Pin_t pin) {
	RESET_PIN(*pin.reg_out, pin.pin);
 38c:	61 e0       	ldi	r22, 0x01	; 1
 38e:	c6 2e       	mov	r12, r22
 390:	d1 2c       	mov	r13, r1
 392:	c6 01       	movw	r24, r12
 394:	0a 80       	ldd	r0, Y+2	; 0x02
 396:	02 c0       	rjmp	.+4      	; 0x39c <prepareSetDAC+0x50>
 398:	88 0f       	add	r24, r24
 39a:	99 1f       	adc	r25, r25
 39c:	0a 94       	dec	r0
 39e:	e2 f7       	brpl	.-8      	; 0x398 <prepareSetDAC+0x4c>
 3a0:	80 95       	com	r24
 3a2:	2c 91       	ld	r18, X
 3a4:	28 23       	and	r18, r24
 3a6:	2c 93       	st	X, r18
	send8 = (x >> 8);
	send8 &= 0b00001111;
	send8|= (chan_addrs[chan%8]);
	SPI_WriteByte(send8);
 3a8:	8f 2d       	mov	r24, r15
 3aa:	99 27       	eor	r25, r25
 3ac:	87 fd       	sbrc	r24, 7
 3ae:	9a 95       	dec	r25
 3b0:	8f 70       	andi	r24, 0x0F	; 15
 3b2:	f0 e0       	ldi	r31, 0x00	; 0
 3b4:	e7 70       	andi	r30, 0x07	; 7
 3b6:	f0 70       	andi	r31, 0x00	; 0
 3b8:	ec 55       	subi	r30, 0x5C	; 92
 3ba:	fe 4f       	sbci	r31, 0xFE	; 254
 3bc:	20 81       	ld	r18, Z
 3be:	82 2b       	or	r24, r18
 3c0:	90 e0       	ldi	r25, 0x00	; 0
 3c2:	0e 94 57 01 	call	0x2ae	; 0x2ae <SPI_WriteByte>
	send8=x;
 3c6:	e0 92 8d 01 	sts	0x018D, r14
	SPI_WriteByte(send8);		
 3ca:	8e 2d       	mov	r24, r14
 3cc:	90 e0       	ldi	r25, 0x00	; 0
 3ce:	0e 94 57 01 	call	0x2ae	; 0x2ae <SPI_WriteByte>
	set_pin(SYNC_PINS[DAC]);
 3d2:	e8 81       	ld	r30, Y
 3d4:	f9 81       	ldd	r31, Y+1	; 0x01
struct Pin_t SYNC_PINS[] = {	{&PORTD, PD3}, {&PORTD, PD6}, {&PORTD, PD7}, {&PORTB, PB0}, 		//pd3 for multiplexing or pd5 for 64
								{&PORTB, PB1}, {&PORTC, PC2}, {&PORTC, PC3}, {&PORTC, PC4} };
						
						
void set_pin(struct Pin_t pin) {
	SET_PIN(*pin.reg_out, pin.pin);
 3d6:	0a 80       	ldd	r0, Y+2	; 0x02
 3d8:	02 c0       	rjmp	.+4      	; 0x3de <prepareSetDAC+0x92>
 3da:	cc 0c       	add	r12, r12
 3dc:	dd 1c       	adc	r13, r13
 3de:	0a 94       	dec	r0
 3e0:	e2 f7       	brpl	.-8      	; 0x3da <prepareSetDAC+0x8e>
 3e2:	80 81       	ld	r24, Z
 3e4:	8c 29       	or	r24, r12
 3e6:	80 83       	st	Z, r24
}
 3e8:	df 91       	pop	r29
 3ea:	cf 91       	pop	r28
 3ec:	1f 91       	pop	r17
 3ee:	0f 91       	pop	r16
 3f0:	ff 90       	pop	r15
 3f2:	ef 90       	pop	r14
 3f4:	df 90       	pop	r13
 3f6:	cf 90       	pop	r12
 3f8:	08 95       	ret

000003fa <setDAC>:
  while(!(SPSR & (1<<SPIF)));
}


void setDAC(){
	PORTD&=~(1<<LDAC);
 3fa:	5a 98       	cbi	0x0b, 2	; 11
	PORTD|=(1<<LDAC);	
 3fc:	5a 9a       	sbi	0x0b, 2	; 11
}
 3fe:	08 95       	ret

00000400 <main>:


void main(void)
{
 400:	1f 93       	push	r17
	BIG_STAT_N = STAT_N*STAT_CYCLE;
 402:	80 91 28 01 	lds	r24, 0x0128
 406:	90 91 27 01 	lds	r25, 0x0127
 40a:	89 9f       	mul	r24, r25
 40c:	80 2d       	mov	r24, r0
 40e:	11 24       	eor	r1, r1
 410:	80 93 9c 01 	sts	0x019C, r24
 414:	e4 ea       	ldi	r30, 0xA4	; 164
 416:	f1 e0       	ldi	r31, 0x01	; 1
 418:	90 e0       	ldi	r25, 0x00	; 0
	
	for (uint8_t i=0; i< 8;i++)
		chan_addrs[i] = i<<4;
 41a:	89 2f       	mov	r24, r25
 41c:	82 95       	swap	r24
 41e:	80 7f       	andi	r24, 0xF0	; 240
 420:	81 93       	st	Z+, r24

void main(void)
{
	BIG_STAT_N = STAT_N*STAT_CYCLE;
	
	for (uint8_t i=0; i< 8;i++)
 422:	9f 5f       	subi	r25, 0xFF	; 255
 424:	98 30       	cpi	r25, 0x08	; 8
 426:	c9 f7       	brne	.-14     	; 0x41a <main+0x1a>
		chan_addrs[i] = i<<4;
	
	DDRC= 0b00011110;
 428:	8e e1       	ldi	r24, 0x1E	; 30
 42a:	87 b9       	out	0x07, r24	; 7
	DDRD =0b11111111;	
 42c:	8f ef       	ldi	r24, 0xFF	; 255
 42e:	8a b9       	out	0x0a, r24	; 10
	DDRB= 0b00011111;
 430:	8f e1       	ldi	r24, 0x1F	; 31
 432:	84 b9       	out	0x04, r24	; 4
	sei();
 434:	78 94       	sei
}

//функция инициализации SPI
void SPI_MasterInit()
{
	DDR_SPI |= (1<<DD_MOSI)|(1<<DD_SCK)|(1<<SPI_SS);
 436:	84 b1       	in	r24, 0x04	; 4
 438:	8c 62       	ori	r24, 0x2C	; 44
 43a:	84 b9       	out	0x04, r24	; 4
	SPCR = (1<<SPE)|(0<<DORD)|(1<<MSTR)|(1<<CPOL)|(0<<CPHA);//|(1<<SPR1)|(0<<SPR0);
 43c:	88 e5       	ldi	r24, 0x58	; 88
 43e:	8c bd       	out	0x2c, r24	; 44

//функция инициализации таймера
// Таймер используется для формирования временной последовательности значений, формируемых с ЦАПа
void timer_init()
{
    TCCR2A = 0;        
 440:	10 92 b0 00 	sts	0x00B0, r1
    TCCR2B = 0;
 444:	10 92 b1 00 	sts	0x00B1, r1
    
    TCCR2B |= (1<<CS21) ;    
 448:	80 91 b1 00 	lds	r24, 0x00B1
 44c:	82 60       	ori	r24, 0x02	; 2
 44e:	80 93 b1 00 	sts	0x00B1, r24
    TIMSK2 = (1 << TOIE2);
 452:	81 e0       	ldi	r24, 0x01	; 1
 454:	80 93 70 00 	sts	0x0070, r24
}

//функция инициализации UART-интерфейса
void uart_init(unsigned int ubrr)
{	
	UBRR0H = (unsigned char)(ubrr>>8);
 458:	10 92 c5 00 	sts	0x00C5, r1
	UBRR0L = (unsigned char)ubrr;
 45c:	83 e3       	ldi	r24, 0x33	; 51
 45e:	80 93 c4 00 	sts	0x00C4, r24
	UCSR0B = (1<<RXCIE0)|(1<<RXEN0)|(1<<TXEN0);
 462:	88 e9       	ldi	r24, 0x98	; 152
 464:	80 93 c1 00 	sts	0x00C1, r24
	UCSR0C = (1<<USBS0)|(3<<UCSZ00);
 468:	8e e0       	ldi	r24, 0x0E	; 14
 46a:	80 93 c2 00 	sts	0x00C2, r24
}

//функция инициализаци АЦП
//АЦП используется для регистрации тока, проходящего через мемристор
void ADC_Init(){
 ADCSRA |= (1 << ADEN) // Включаем АЦП
 46e:	80 91 7a 00 	lds	r24, 0x007A
 472:	83 68       	ori	r24, 0x83	; 131
 474:	80 93 7a 00 	sts	0x007A, r24
 //ADCSRA&=~(1 << ADPS1)|(1 << ADPS0)|(1 << ADPS1);
 |(1 << ADPS1)|(1 << ADPS0)|(1 << ADPS1);    // устанавливаем предделитель преобразователя на 8
 ADMUX |= (0 << REFS1)|(1 << REFS0) //выставляем опорное напряжение, как внешний ИОН
 478:	80 91 7c 00 	lds	r24, 0x007C
 47c:	80 64       	ori	r24, 0x40	; 64
 47e:	80 93 7c 00 	sts	0x007C, r24
	timer_init();
	
	uart_init(BAUDRATE);
	ADC_Init();
	
	ADCSRA |= (1 << ADSC); 
 482:	80 91 7a 00 	lds	r24, 0x007A
 486:	80 64       	ori	r24, 0x40	; 64
 488:	80 93 7a 00 	sts	0x007A, r24
	ADCL;
 48c:	80 91 78 00 	lds	r24, 0x0078
	ADCL;
 490:	80 91 78 00 	lds	r24, 0x0078
 494:	10 e0       	ldi	r17, 0x00	; 0
		//set_reverser(i,1);
	
	//set_reverser(0,0);
	for (int i=0;i<CHAN_N;i++)
	{
		prepareSetDAC(0,i);
 496:	80 e0       	ldi	r24, 0x00	; 0
 498:	90 e0       	ldi	r25, 0x00	; 0
 49a:	61 2f       	mov	r22, r17
 49c:	0e 94 a6 01 	call	0x34c	; 0x34c <prepareSetDAC>
 4a0:	1f 5f       	subi	r17, 0xFF	; 255

	//for(int i=0;i<8;i++)
		//set_reverser(i,1);
	
	//set_reverser(0,0);
	for (int i=0;i<CHAN_N;i++)
 4a2:	10 34       	cpi	r17, 0x40	; 64
 4a4:	c1 f7       	brne	.-16     	; 0x496 <main+0x96>
  while(!(SPSR & (1<<SPIF)));
}


void setDAC(){
	PORTD&=~(1<<LDAC);
 4a6:	5a 98       	cbi	0x0b, 2	; 11
	PORTD|=(1<<LDAC);	
 4a8:	5a 9a       	sbi	0x0b, 2	; 11
 4aa:	ff cf       	rjmp	.-2      	; 0x4aa <main+0xaa>

000004ac <__vector_9>:
//главный цикл работы контроллера
//Здесь устанавливаются значения ЦАП и передаются данные на компьютер
//через UART-интерфейс
//данный участок кода повторяется при переполнении TIMER2
ISR(TIMER2_OVF_vect)
{
 4ac:	1f 92       	push	r1
 4ae:	0f 92       	push	r0
 4b0:	0f b6       	in	r0, 0x3f	; 63
 4b2:	0f 92       	push	r0
 4b4:	11 24       	eor	r1, r1
 4b6:	2f 93       	push	r18
 4b8:	3f 93       	push	r19
 4ba:	4f 93       	push	r20
 4bc:	5f 93       	push	r21
 4be:	6f 93       	push	r22
 4c0:	7f 93       	push	r23
 4c2:	8f 93       	push	r24
 4c4:	9f 93       	push	r25
 4c6:	af 93       	push	r26
 4c8:	bf 93       	push	r27
 4ca:	ef 93       	push	r30
 4cc:	ff 93       	push	r31
	if(ctr>time_step)
 4ce:	20 91 93 01 	lds	r18, 0x0193
 4d2:	30 91 94 01 	lds	r19, 0x0194
 4d6:	80 91 2d 01 	lds	r24, 0x012D
 4da:	90 91 2e 01 	lds	r25, 0x012E
 4de:	82 17       	cp	r24, r18
 4e0:	93 07       	cpc	r25, r19
 4e2:	0c f0       	brlt	.+2      	; 0x4e6 <__vector_9+0x3a>
 4e4:	99 c3       	rjmp	.+1842   	; 0xc18 <__stack+0x319>
	{
		if(MD==CUSTOM)
 4e6:	60 91 32 01 	lds	r22, 0x0132
 4ea:	66 23       	and	r22, r22
 4ec:	91 f5       	brne	.+100    	; 0x552 <__vector_9+0xa6>
		{

			if(event_cnt==0)
 4ee:	20 91 8e 01 	lds	r18, 0x018E
 4f2:	30 91 8f 01 	lds	r19, 0x018F
 4f6:	21 15       	cp	r18, r1
 4f8:	31 05       	cpc	r19, r1
 4fa:	11 f4       	brne	.+4      	; 0x500 <__vector_9+0x54>
			{
			UDR0=255;
 4fc:	8f ef       	ldi	r24, 0xFF	; 255
 4fe:	35 c3       	rjmp	.+1642   	; 0xb6a <__stack+0x26b>
			prepareSetDAC(0,chan);
			//prepareSetDAC(x16,2);
			setDAC();
			}
			else if(event_cnt==(1))
 500:	21 30       	cpi	r18, 0x01	; 1
 502:	31 05       	cpc	r19, r1
 504:	09 f4       	brne	.+2      	; 0x508 <__vector_9+0x5c>
 506:	43 c3       	rjmp	.+1670   	; 0xb8e <__stack+0x28f>
			{	
			ADCL_=ADCL;
			ADCH_=ADCH;
			UDR0=ADCL_;			
			}			
			else if(event_cnt==(2))
 508:	22 30       	cpi	r18, 0x02	; 2
 50a:	31 05       	cpc	r19, r1
 50c:	09 f4       	brne	.+2      	; 0x510 <__vector_9+0x64>
 50e:	4c c3       	rjmp	.+1688   	; 0xba8 <__stack+0x2a9>
			{	
			UDR0=ADCH_;				
			}
			else if(event_cnt==t1)
 510:	80 91 29 01 	lds	r24, 0x0129
 514:	90 e0       	ldi	r25, 0x00	; 0
 516:	28 17       	cp	r18, r24
 518:	39 07       	cpc	r19, r25
 51a:	09 f4       	brne	.+2      	; 0x51e <__vector_9+0x72>
 51c:	49 c3       	rjmp	.+1682   	; 0xbb0 <__stack+0x2b1>
			{
				
			//prepareSetDAC(0,chan);
			//setDAC();
			}
			else if(event_cnt==dT)
 51e:	80 91 92 01 	lds	r24, 0x0192
 522:	90 e0       	ldi	r25, 0x00	; 0
 524:	28 17       	cp	r18, r24
 526:	39 07       	cpc	r19, r25
 528:	09 f4       	brne	.+2      	; 0x52c <__vector_9+0x80>
 52a:	42 c3       	rjmp	.+1668   	; 0xbb0 <__stack+0x2b1>
			{		
			//prepareSetDAC(0,chan);
			//setDAC();
		
			}
			else if(event_cnt==(dT+1))
 52c:	01 96       	adiw	r24, 0x01	; 1
 52e:	28 17       	cp	r18, r24
 530:	39 07       	cpc	r19, r25
 532:	09 f4       	brne	.+2      	; 0x536 <__vector_9+0x8a>
 534:	d4 c0       	rjmp	.+424    	; 0x6de <__vector_9+0x232>
				ADCSRA |= (1 << ADSC); 

			else if(event_cnt==dTt2)
 536:	80 91 2b 01 	lds	r24, 0x012B
 53a:	90 e0       	ldi	r25, 0x00	; 0
 53c:	28 17       	cp	r18, r24
 53e:	39 07       	cpc	r19, r25
 540:	09 f0       	breq	.+2      	; 0x544 <__vector_9+0x98>
 542:	36 c3       	rjmp	.+1644   	; 0xbb0 <__stack+0x2b1>
			{
			if ( ( UCSR0A & (1<<UDRE0)) )			
 544:	80 91 c0 00 	lds	r24, 0x00C0
 548:	85 ff       	sbrs	r24, 5
 54a:	32 c3       	rjmp	.+1636   	; 0xbb0 <__stack+0x2b1>
				UDR0=_adc;			
 54c:	80 91 9d 01 	lds	r24, 0x019D
 550:	2d c3       	rjmp	.+1626   	; 0xbac <__stack+0x2ad>
			//setDAC();

			}		

		}
		else if(MD == MODE_SET) {
 552:	67 30       	cpi	r22, 0x07	; 7
 554:	59 f5       	brne	.+86     	; 0x5ac <__vector_9+0x100>
			T=7;			
 556:	60 93 96 01 	sts	0x0196, r22

			if(event_cnt==0)//dT
 55a:	80 91 8e 01 	lds	r24, 0x018E
 55e:	90 91 8f 01 	lds	r25, 0x018F
 562:	00 97       	sbiw	r24, 0x00	; 0
 564:	91 f4       	brne	.+36     	; 0x58a <__vector_9+0xde>
			{		
				UDR0=255;
 566:	8f ef       	ldi	r24, 0xFF	; 255
 568:	80 93 c6 00 	sts	0x00C6, r24
				x16 = x8;
				x16 = x16<<4;
 56c:	80 91 90 01 	lds	r24, 0x0190
 570:	99 27       	eor	r25, r25
 572:	87 fd       	sbrc	r24, 7
 574:	90 95       	com	r25
 576:	f4 e0       	ldi	r31, 0x04	; 4
 578:	88 0f       	add	r24, r24
 57a:	99 1f       	adc	r25, r25
 57c:	fa 95       	dec	r31
 57e:	e1 f7       	brne	.-8      	; 0x578 <__vector_9+0xcc>
 580:	90 93 3c 01 	sts	0x013C, r25
 584:	80 93 3b 01 	sts	0x013B, r24
 588:	a4 c0       	rjmp	.+328    	; 0x6d2 <__vector_9+0x226>
				prepareSetDAC(x16,chan);
				setDAC();				

				ADCSRA |= (1 << ADSC); 
			}
			else if(event_cnt == 1)
 58a:	81 30       	cpi	r24, 0x01	; 1
 58c:	91 05       	cpc	r25, r1
 58e:	59 f0       	breq	.+22     	; 0x5a6 <__vector_9+0xfa>
			{
				UDR0 =DUMMY_BYTE;
			}	
			else
			if(event_cnt==2)//ADC GET 
 590:	82 30       	cpi	r24, 0x02	; 2
 592:	91 05       	cpc	r25, r1
 594:	09 f4       	brne	.+2      	; 0x598 <__vector_9+0xec>
 596:	fb c2       	rjmp	.+1526   	; 0xb8e <__stack+0x28f>
				ADCL_=ADCL;	
				ADCH_=ADCH;
				UDR0=ADCL_;   //2				
			}	
			else
			if(event_cnt==3)
 598:	83 30       	cpi	r24, 0x03	; 3
 59a:	91 05       	cpc	r25, r1
 59c:	09 f4       	brne	.+2      	; 0x5a0 <__vector_9+0xf4>
 59e:	04 c3       	rjmp	.+1544   	; 0xba8 <__stack+0x2a9>
			{	
				UDR0=ADCH_; //3
			}
			//DACset proging val
			else if(event_cnt==4)
 5a0:	04 97       	sbiw	r24, 0x04	; 4
 5a2:	09 f0       	breq	.+2      	; 0x5a6 <__vector_9+0xfa>
 5a4:	05 c3       	rjmp	.+1546   	; 0xbb0 <__stack+0x2b1>
			{
				UDR0 =DUMMY_BYTE;	
 5a6:	10 92 c6 00 	sts	0x00C6, r1
 5aa:	02 c3       	rjmp	.+1540   	; 0xbb0 <__stack+0x2b1>
			}
		}
		else if(MD==VAC)
 5ac:	61 30       	cpi	r22, 0x01	; 1
 5ae:	09 f0       	breq	.+2      	; 0x5b2 <__vector_9+0x106>
 5b0:	7d c0       	rjmp	.+250    	; 0x6ac <__vector_9+0x200>
		{			
			//static int i=0;
			//i++;						
			
			switch(VAC_cnt)
 5b2:	80 91 9f 01 	lds	r24, 0x019F
 5b6:	82 30       	cpi	r24, 0x02	; 2
 5b8:	41 f1       	breq	.+80     	; 0x60a <__vector_9+0x15e>
 5ba:	83 30       	cpi	r24, 0x03	; 3
 5bc:	30 f4       	brcc	.+12     	; 0x5ca <__vector_9+0x11e>
 5be:	88 23       	and	r24, r24
 5c0:	51 f0       	breq	.+20     	; 0x5d6 <__vector_9+0x12a>
 5c2:	81 30       	cpi	r24, 0x01	; 1
 5c4:	09 f0       	breq	.+2      	; 0x5c8 <__vector_9+0x11c>
 5c6:	69 c0       	rjmp	.+210    	; 0x69a <__vector_9+0x1ee>
 5c8:	0d c0       	rjmp	.+26     	; 0x5e4 <__vector_9+0x138>
 5ca:	83 30       	cpi	r24, 0x03	; 3
 5cc:	19 f1       	breq	.+70     	; 0x614 <__vector_9+0x168>
 5ce:	84 30       	cpi	r24, 0x04	; 4
 5d0:	09 f0       	breq	.+2      	; 0x5d4 <__vector_9+0x128>
 5d2:	63 c0       	rjmp	.+198    	; 0x69a <__vector_9+0x1ee>
 5d4:	60 c0       	rjmp	.+192    	; 0x696 <__vector_9+0x1ea>
			{
				case 0:					
				 ADCSRA |= (1 << ADSC); 
 5d6:	80 91 7a 00 	lds	r24, 0x007A
 5da:	80 64       	ori	r24, 0x40	; 64
 5dc:	80 93 7a 00 	sts	0x007A, r24
				UDR0=255;
 5e0:	8f ef       	ldi	r24, 0xFF	; 255
 5e2:	15 c0       	rjmp	.+42     	; 0x60e <__vector_9+0x162>
				break;
				
				
				
				case 1:	
				ADCL__=	ADCL_;
 5e4:	80 91 97 01 	lds	r24, 0x0197
 5e8:	80 93 95 01 	sts	0x0195, r24
				ADCH__ = ADCH_;
 5ec:	80 91 9b 01 	lds	r24, 0x019B
 5f0:	80 93 91 01 	sts	0x0191, r24
				ADCL_=ADCL;
 5f4:	90 91 78 00 	lds	r25, 0x0078
 5f8:	90 93 97 01 	sts	0x0197, r25
				ADCH_=ADCH;
 5fc:	80 91 79 00 	lds	r24, 0x0079
 600:	80 93 9b 01 	sts	0x019B, r24
				
				UDR0=ADCL_;
 604:	90 93 c6 00 	sts	0x00C6, r25
 608:	48 c0       	rjmp	.+144    	; 0x69a <__vector_9+0x1ee>
				break;
				
				case 2:
				UDR0=ADCH_;				
 60a:	80 91 9b 01 	lds	r24, 0x019B
 60e:	80 93 c6 00 	sts	0x00C6, r24
 612:	43 c0       	rjmp	.+134    	; 0x69a <__vector_9+0x1ee>
				break;				
				
				case 3:								
					
					voltage16_h=voltage16;
 614:	20 91 33 01 	lds	r18, 0x0133
 618:	30 91 34 01 	lds	r19, 0x0134
 61c:	30 93 36 01 	sts	0x0136, r19
 620:	20 93 35 01 	sts	0x0135, r18
					
					if(pos_phase)
 624:	80 91 2c 01 	lds	r24, 0x012C
 628:	88 23       	and	r24, r24
 62a:	81 f0       	breq	.+32     	; 0x64c <__vector_9+0x1a0>
					{
								//PORTC=0b00000010;
			//PORTB=0b00011111;
			//PORTD=0b11101100;
						voltage16+=32;
 62c:	20 5e       	subi	r18, 0xE0	; 224
 62e:	3f 4f       	sbci	r19, 0xFF	; 255
 630:	30 93 34 01 	sts	0x0134, r19
 634:	20 93 33 01 	sts	0x0133, r18
						if(voltage16>(ref16-1))
 638:	80 91 3d 01 	lds	r24, 0x013D
 63c:	90 91 3e 01 	lds	r25, 0x013E
 640:	28 17       	cp	r18, r24
 642:	39 07       	cpc	r19, r25
 644:	b4 f0       	brlt	.+44     	; 0x672 <__vector_9+0x1c6>
						{
						pos_phase=0;				
 646:	10 92 2c 01 	sts	0x012C, r1
 64a:	13 c0       	rjmp	.+38     	; 0x672 <__vector_9+0x1c6>
					else
					{
						//PORTB=0;
			//PORTC=0;
			//PORTD=0;
						voltage16-=32;
 64c:	c9 01       	movw	r24, r18
 64e:	80 97       	sbiw	r24, 0x20	; 32
 650:	90 93 34 01 	sts	0x0134, r25
 654:	80 93 33 01 	sts	0x0133, r24
						if(voltage16<(-x16+1))
 658:	21 e0       	ldi	r18, 0x01	; 1
 65a:	30 e0       	ldi	r19, 0x00	; 0
 65c:	40 91 3b 01 	lds	r20, 0x013B
 660:	50 91 3c 01 	lds	r21, 0x013C
 664:	24 1b       	sub	r18, r20
 666:	35 0b       	sbc	r19, r21
 668:	82 17       	cp	r24, r18
 66a:	93 07       	cpc	r25, r19
 66c:	14 f4       	brge	.+4      	; 0x672 <__vector_9+0x1c6>
						{
						pos_phase=1;									
 66e:	60 93 2c 01 	sts	0x012C, r22
						}
					}	
					
					
					
					UDR0=voltage16>>4;
 672:	80 91 33 01 	lds	r24, 0x0133
 676:	90 91 34 01 	lds	r25, 0x0134
 67a:	9c 01       	movw	r18, r24
 67c:	e4 e0       	ldi	r30, 0x04	; 4
 67e:	35 95       	asr	r19
 680:	27 95       	ror	r18
 682:	ea 95       	dec	r30
 684:	e1 f7       	brne	.-8      	; 0x67e <__vector_9+0x1d2>
 686:	20 93 c6 00 	sts	0x00C6, r18
					prepareSetDAC(voltage16,chan);
 68a:	60 91 46 01 	lds	r22, 0x0146
 68e:	0e 94 a6 01 	call	0x34c	; 0x34c <prepareSetDAC>
  while(!(SPSR & (1<<SPIF)));
}


void setDAC(){
	PORTD&=~(1<<LDAC);
 692:	5a 98       	cbi	0x0b, 2	; 11
	PORTD|=(1<<LDAC);	
 694:	5a 9a       	sbi	0x0b, 2	; 11
					//prepareSetDAC(voltage16,5);
					//prepareSetDAC(voltage16,6);
					//prepareSetDAC(voltage16,7);				
					setDAC();
				case 4:
					UDR0=DUMMY_BYTE;	
 696:	10 92 c6 00 	sts	0x00C6, r1
				
			}
						
			
			VAC_cnt++;
			VAC_cnt%=5;
 69a:	80 91 9f 01 	lds	r24, 0x019F
 69e:	8f 5f       	subi	r24, 0xFF	; 255
 6a0:	65 e0       	ldi	r22, 0x05	; 5
 6a2:	0e 94 04 07 	call	0xe08	; 0xe08 <__udivmodqi4>
 6a6:	90 93 9f 01 	sts	0x019F, r25
 6aa:	82 c2       	rjmp	.+1284   	; 0xbb0 <__stack+0x2b1>
		}
		else if(MD==PROGRAM)
 6ac:	62 30       	cpi	r22, 0x02	; 2
 6ae:	09 f0       	breq	.+2      	; 0x6b2 <__vector_9+0x206>
 6b0:	ad c0       	rjmp	.+346    	; 0x80c <__vector_9+0x360>
		{
			T=16;
 6b2:	80 e1       	ldi	r24, 0x10	; 16
 6b4:	80 93 96 01 	sts	0x0196, r24
			static uint16_t adc_h;
			

			if(event_cnt==0)//dT
 6b8:	80 91 8e 01 	lds	r24, 0x018E
 6bc:	90 91 8f 01 	lds	r25, 0x018F
 6c0:	00 97       	sbiw	r24, 0x00	; 0
 6c2:	99 f4       	brne	.+38     	; 0x6ea <__vector_9+0x23e>
			{		
				UDR0=255;
 6c4:	8f ef       	ldi	r24, 0xFF	; 255
 6c6:	80 93 c6 00 	sts	0x00C6, r24
			
				prepareSetDAC(ref16,chan);
 6ca:	80 91 3d 01 	lds	r24, 0x013D
 6ce:	90 91 3e 01 	lds	r25, 0x013E
 6d2:	60 91 46 01 	lds	r22, 0x0146
 6d6:	0e 94 a6 01 	call	0x34c	; 0x34c <prepareSetDAC>
  while(!(SPSR & (1<<SPIF)));
}


void setDAC(){
	PORTD&=~(1<<LDAC);
 6da:	5a 98       	cbi	0x0b, 2	; 11
	PORTD|=(1<<LDAC);	
 6dc:	5a 9a       	sbi	0x0b, 2	; 11
			{		
				UDR0=255;
			
				prepareSetDAC(ref16,chan);
				setDAC();
				ADCSRA |= (1 << ADSC); 
 6de:	80 91 7a 00 	lds	r24, 0x007A
 6e2:	80 64       	ori	r24, 0x40	; 64
 6e4:	80 93 7a 00 	sts	0x007A, r24
 6e8:	63 c2       	rjmp	.+1222   	; 0xbb0 <__stack+0x2b1>
			}
			else if(event_cnt == 1)
 6ea:	81 30       	cpi	r24, 0x01	; 1
 6ec:	91 05       	cpc	r25, r1
 6ee:	19 f4       	brne	.+6      	; 0x6f6 <__vector_9+0x24a>
			{
				UDR0 =PROGRAM_done;
 6f0:	80 91 45 01 	lds	r24, 0x0145
 6f4:	5b c2       	rjmp	.+1206   	; 0xbac <__stack+0x2ad>
			}	

			else
			if(event_cnt==2)//ADC GET 
 6f6:	82 30       	cpi	r24, 0x02	; 2
 6f8:	91 05       	cpc	r25, r1
 6fa:	09 f4       	brne	.+2      	; 0x6fe <__vector_9+0x252>
 6fc:	48 c2       	rjmp	.+1168   	; 0xb8e <__stack+0x28f>
			}
			
			//ADC make CONTINUE
			//make decision
			else
			if(event_cnt==3)
 6fe:	83 30       	cpi	r24, 0x03	; 3
 700:	91 05       	cpc	r25, r1
 702:	e9 f5       	brne	.+122    	; 0x77e <__vector_9+0x2d2>
			{	
				
				UDR0=ADCH_; //3
 704:	80 91 9b 01 	lds	r24, 0x019B
 708:	80 93 c6 00 	sts	0x00C6, r24
				
				_adc=(ADCL_|(ADCH_ <<8));
 70c:	38 2f       	mov	r19, r24
 70e:	20 e0       	ldi	r18, 0x00	; 0
 710:	80 91 97 01 	lds	r24, 0x0197
 714:	90 e0       	ldi	r25, 0x00	; 0
 716:	82 2b       	or	r24, r18
 718:	93 2b       	or	r25, r19
 71a:	90 93 9e 01 	sts	0x019E, r25
 71e:	80 93 9d 01 	sts	0x019D, r24
				adc_h=((uint16_t)(512)-_adc);
 722:	20 e0       	ldi	r18, 0x00	; 0
 724:	32 e0       	ldi	r19, 0x02	; 2
 726:	28 1b       	sub	r18, r24
 728:	39 0b       	sbc	r19, r25
 72a:	30 93 8c 01 	sts	0x018C, r19
 72e:	20 93 8b 01 	sts	0x018B, r18
				
				//optimization
				//put some window val here maybe?
				//be  carefull with -
				if((adc_h)<(uint16_t)(t1))
 732:	40 91 29 01 	lds	r20, 0x0129
 736:	84 2f       	mov	r24, r20
 738:	90 e0       	ldi	r25, 0x00	; 0
 73a:	28 17       	cp	r18, r24
 73c:	39 07       	cpc	r19, r25
 73e:	60 f4       	brcc	.+24     	; 0x758 <__vector_9+0x2ac>
				{
					proging_val = -x16;  //set!
 740:	80 91 3b 01 	lds	r24, 0x013B
 744:	90 91 3c 01 	lds	r25, 0x013C
 748:	90 95       	com	r25
 74a:	81 95       	neg	r24
 74c:	9f 4f       	sbci	r25, 0xFF	; 255
 74e:	90 93 3a 01 	sts	0x013A, r25
 752:	80 93 39 01 	sts	0x0139, r24
 756:	2c c2       	rjmp	.+1112   	; 0xbb0 <__stack+0x2b1>
				}
				else if((adc_h)<(uint16_t)(t1+1)) //done!
 758:	84 2f       	mov	r24, r20
 75a:	90 e0       	ldi	r25, 0x00	; 0
 75c:	01 96       	adiw	r24, 0x01	; 1
 75e:	28 17       	cp	r18, r24
 760:	39 07       	cpc	r19, r25
 762:	08 f0       	brcs	.+2      	; 0x766 <__vector_9+0x2ba>
 764:	25 c2       	rjmp	.+1098   	; 0xbb0 <__stack+0x2b1>
				{

					PROGRAM_done=1;
 766:	81 e0       	ldi	r24, 0x01	; 1
 768:	80 93 45 01 	sts	0x0145, r24
					proging_val=0;
 76c:	10 92 3a 01 	sts	0x013A, r1
 770:	10 92 39 01 	sts	0x0139, r1
					prepareSetDAC(ref16,chan);
 774:	80 91 3d 01 	lds	r24, 0x013D
 778:	90 91 3e 01 	lds	r25, 0x013E
 77c:	22 c1       	rjmp	.+580    	; 0x9c2 <__stack+0xc3>
					setDAC();
				}
				
			}
			//DACset proging val
			else if(event_cnt==4)
 77e:	84 30       	cpi	r24, 0x04	; 4
 780:	91 05       	cpc	r25, r1
 782:	09 f0       	breq	.+2      	; 0x786 <__vector_9+0x2da>
 784:	3f c0       	rjmp	.+126    	; 0x804 <__vector_9+0x358>
			{
				UDR0 =DUMMY_BYTE;		
 786:	10 92 c6 00 	sts	0x00C6, r1
				if(PROGRAM_done)
 78a:	80 91 45 01 	lds	r24, 0x0145
 78e:	88 23       	and	r24, r24
 790:	21 f0       	breq	.+8      	; 0x79a <__vector_9+0x2ee>
					proging_val=0;	
 792:	10 92 3a 01 	sts	0x013A, r1
 796:	10 92 39 01 	sts	0x0139, r1
				
				prepareSetDAC(proging_val,chan);
 79a:	80 91 39 01 	lds	r24, 0x0139
 79e:	90 91 3a 01 	lds	r25, 0x013A
 7a2:	60 91 46 01 	lds	r22, 0x0146
 7a6:	0e 94 a6 01 	call	0x34c	; 0x34c <prepareSetDAC>
  while(!(SPSR & (1<<SPIF)));
}


void setDAC(){
	PORTD&=~(1<<LDAC);
 7aa:	5a 98       	cbi	0x0b, 2	; 11
	PORTD|=(1<<LDAC);	
 7ac:	5a 9a       	sbi	0x0b, 2	; 11
					proging_val=0;	
				
				prepareSetDAC(proging_val,chan);
				setDAC();
							
				if(proging_val == -x16)
 7ae:	20 91 39 01 	lds	r18, 0x0139
 7b2:	30 91 3a 01 	lds	r19, 0x013A
 7b6:	80 91 3b 01 	lds	r24, 0x013B
 7ba:	90 91 3c 01 	lds	r25, 0x013C
 7be:	44 27       	eor	r20, r20
 7c0:	55 27       	eor	r21, r21
 7c2:	48 1b       	sub	r20, r24
 7c4:	59 0b       	sbc	r21, r25
 7c6:	24 17       	cp	r18, r20
 7c8:	35 07       	cpc	r19, r21
 7ca:	29 f4       	brne	.+10     	; 0x7d6 <__vector_9+0x32a>
				{
					proging_val=0;
 7cc:	10 92 3a 01 	sts	0x013A, r1
 7d0:	10 92 39 01 	sts	0x0139, r1
 7d4:	ed c1       	rjmp	.+986    	; 0xbb0 <__stack+0x2b1>
				}					
				else
				if(proging_val>(t2<<4))
 7d6:	80 91 2a 01 	lds	r24, 0x012A
 7da:	90 e0       	ldi	r25, 0x00	; 0
 7dc:	74 e0       	ldi	r23, 0x04	; 4
 7de:	88 0f       	add	r24, r24
 7e0:	99 1f       	adc	r25, r25
 7e2:	7a 95       	dec	r23
 7e4:	e1 f7       	brne	.-8      	; 0x7de <__vector_9+0x332>
 7e6:	82 17       	cp	r24, r18
 7e8:	93 07       	cpc	r25, r19
 7ea:	2c f4       	brge	.+10     	; 0x7f6 <__vector_9+0x34a>
				{
					proging_val= -x16;
 7ec:	50 93 3a 01 	sts	0x013A, r21
 7f0:	40 93 39 01 	sts	0x0139, r20
 7f4:	dd c1       	rjmp	.+954    	; 0xbb0 <__stack+0x2b1>
				}	
				else
				{
					proging_val+=32;
 7f6:	20 5e       	subi	r18, 0xE0	; 224
 7f8:	3f 4f       	sbci	r19, 0xFF	; 255
 7fa:	30 93 3a 01 	sts	0x013A, r19
 7fe:	20 93 39 01 	sts	0x0139, r18
 802:	d6 c1       	rjmp	.+940    	; 0xbb0 <__stack+0x2b1>
				}	
			}
			else if(event_cnt==5)//
 804:	05 97       	sbiw	r24, 0x05	; 5
 806:	09 f0       	breq	.+2      	; 0x80a <__vector_9+0x35e>
 808:	d3 c1       	rjmp	.+934    	; 0xbb0 <__stack+0x2b1>
 80a:	d9 c0       	rjmp	.+434    	; 0x9be <__stack+0xbf>
			}
			
			

		}
		else if(MD == ONE_SHOT)
 80c:	65 30       	cpi	r22, 0x05	; 5
 80e:	09 f0       	breq	.+2      	; 0x812 <__vector_9+0x366>
 810:	be c0       	rjmp	.+380    	; 0x98e <__stack+0x8f>
		{
			//готовим reset
				if(event_cnt==1){
 812:	80 91 8e 01 	lds	r24, 0x018E
 816:	90 91 8f 01 	lds	r25, 0x018F
 81a:	81 30       	cpi	r24, 0x01	; 1
 81c:	91 05       	cpc	r25, r1
 81e:	09 f4       	brne	.+2      	; 0x822 <__vector_9+0x376>
 820:	4b c0       	rjmp	.+150    	; 0x8b8 <__vector_9+0x40c>
				usualMult();
			}//reseting
			else if(event_cnt==2)
 822:	82 30       	cpi	r24, 0x02	; 2
 824:	91 05       	cpc	r25, r1
 826:	d1 f4       	brne	.+52     	; 0x85c <__vector_9+0x3b0>
			{
				prepareSetDAC(reset16,CHAN_1);
 828:	80 91 3f 01 	lds	r24, 0x013F
 82c:	90 91 40 01 	lds	r25, 0x0140
 830:	60 e0       	ldi	r22, 0x00	; 0
 832:	0e 94 a6 01 	call	0x34c	; 0x34c <prepareSetDAC>
				prepareSetDAC(reset16,CHAN_2);
 836:	80 91 3f 01 	lds	r24, 0x013F
 83a:	90 91 40 01 	lds	r25, 0x0140
 83e:	61 e0       	ldi	r22, 0x01	; 1
 840:	0e 94 a6 01 	call	0x34c	; 0x34c <prepareSetDAC>
				prepareSetDAC(reset16,CHAN_3);
 844:	80 91 3f 01 	lds	r24, 0x013F
 848:	90 91 40 01 	lds	r25, 0x0140
 84c:	62 e0       	ldi	r22, 0x02	; 2
 84e:	0e 94 a6 01 	call	0x34c	; 0x34c <prepareSetDAC>
				prepareSetDAC(reset16,CHAN_4);
 852:	80 91 3f 01 	lds	r24, 0x013F
 856:	90 91 40 01 	lds	r25, 0x0140
 85a:	20 c0       	rjmp	.+64     	; 0x89c <__vector_9+0x3f0>
				setDAC();
			}
			else if(event_cnt==3)
 85c:	83 30       	cpi	r24, 0x03	; 3
 85e:	91 05       	cpc	r25, r1
 860:	81 f4       	brne	.+32     	; 0x882 <__vector_9+0x3d6>
			{
				prepareSetDAC(0,CHAN_1);
 862:	80 e0       	ldi	r24, 0x00	; 0
 864:	90 e0       	ldi	r25, 0x00	; 0
 866:	60 e0       	ldi	r22, 0x00	; 0
 868:	0e 94 a6 01 	call	0x34c	; 0x34c <prepareSetDAC>
				prepareSetDAC(0,CHAN_2);
 86c:	80 e0       	ldi	r24, 0x00	; 0
 86e:	90 e0       	ldi	r25, 0x00	; 0
 870:	61 e0       	ldi	r22, 0x01	; 1
 872:	0e 94 a6 01 	call	0x34c	; 0x34c <prepareSetDAC>
				prepareSetDAC(0,CHAN_3);
 876:	80 e0       	ldi	r24, 0x00	; 0
 878:	90 e0       	ldi	r25, 0x00	; 0
 87a:	62 e0       	ldi	r22, 0x02	; 2
 87c:	0e 94 a6 01 	call	0x34c	; 0x34c <prepareSetDAC>
 880:	12 c0       	rjmp	.+36     	; 0x8a6 <__vector_9+0x3fa>
				prepareSetDAC(0,CHAN_4);
				setDAC();
			}		//is reset		
			else if(event_cnt==4)
 882:	84 30       	cpi	r24, 0x04	; 4
 884:	91 05       	cpc	r25, r1
 886:	19 f4       	brne	.+6      	; 0x88e <__vector_9+0x3e2>
			{
				gatherMult();
 888:	0e 94 8a 00 	call	0x114	; 0x114 <gatherMult>
 88c:	91 c1       	rjmp	.+802    	; 0xbb0 <__stack+0x2b1>
			}
			else if(event_cnt==5)
 88e:	85 30       	cpi	r24, 0x05	; 5
 890:	91 05       	cpc	r25, r1
 892:	31 f4       	brne	.+12     	; 0x8a0 <__vector_9+0x3f4>
			{
				prepareSetDAC(x16,CHAN_4);				
 894:	80 91 3b 01 	lds	r24, 0x013B
 898:	90 91 3c 01 	lds	r25, 0x013C
 89c:	63 e0       	ldi	r22, 0x03	; 3
 89e:	93 c0       	rjmp	.+294    	; 0x9c6 <__stack+0xc7>
				setDAC();
			}		
			else if(event_cnt==6)
 8a0:	86 30       	cpi	r24, 0x06	; 6
 8a2:	91 05       	cpc	r25, r1
 8a4:	19 f4       	brne	.+6      	; 0x8ac <__vector_9+0x400>
			{
				prepareSetDAC(0,CHAN_4);				
 8a6:	80 e0       	ldi	r24, 0x00	; 0
 8a8:	90 e0       	ldi	r25, 0x00	; 0
 8aa:	f8 cf       	rjmp	.-16     	; 0x89c <__vector_9+0x3f0>
				setDAC();
			}	
			
			//пнули		
			//посмотрим, что вышло
			else if(event_cnt==7)
 8ac:	87 30       	cpi	r24, 0x07	; 7
 8ae:	91 05       	cpc	r25, r1
 8b0:	31 f4       	brne	.+12     	; 0x8be <__vector_9+0x412>
			{
				UDR0=255;//1
 8b2:	8f ef       	ldi	r24, 0xFF	; 255
 8b4:	80 93 c6 00 	sts	0x00C6, r24
				usualMult();				
 8b8:	0e 94 de 00 	call	0x1bc	; 0x1bc <usualMult>
 8bc:	79 c1       	rjmp	.+754    	; 0xbb0 <__stack+0x2b1>
			}			
			else if(event_cnt==8)
 8be:	88 30       	cpi	r24, 0x08	; 8
 8c0:	91 05       	cpc	r25, r1
 8c2:	31 f4       	brne	.+12     	; 0x8d0 <__vector_9+0x424>
			{
				prepareSetDAC(ref16,CHAN_1);
 8c4:	80 91 3d 01 	lds	r24, 0x013D
 8c8:	90 91 3e 01 	lds	r25, 0x013E
 8cc:	60 e0       	ldi	r22, 0x00	; 0
 8ce:	03 cf       	rjmp	.-506    	; 0x6d6 <__vector_9+0x22a>
				setDAC();				
				ADCSRA |= (1 << ADSC); 
			}	
			else if(event_cnt==9)
 8d0:	89 30       	cpi	r24, 0x09	; 9
 8d2:	91 05       	cpc	r25, r1
 8d4:	09 f4       	brne	.+2      	; 0x8d8 <__vector_9+0x42c>
 8d6:	5b c1       	rjmp	.+694    	; 0xb8e <__stack+0x28f>
				//prepareSetDAC(ref16,3);
				ADCL_=ADCL;	
				ADCH_=ADCH;
				UDR0=ADCL_;//2
			}
			else if(event_cnt==10)
 8d8:	8a 30       	cpi	r24, 0x0A	; 10
 8da:	91 05       	cpc	r25, r1
 8dc:	41 f4       	brne	.+16     	; 0x8ee <__vector_9+0x442>
			{
				UDR0=ADCH_; //3 1st chan
 8de:	80 91 9b 01 	lds	r24, 0x019B
 8e2:	80 93 c6 00 	sts	0x00C6, r24
				
				prepareSetDAC(0,CHAN_1);
 8e6:	80 e0       	ldi	r24, 0x00	; 0
 8e8:	90 e0       	ldi	r25, 0x00	; 0
 8ea:	60 e0       	ldi	r22, 0x00	; 0
 8ec:	6c c0       	rjmp	.+216    	; 0x9c6 <__stack+0xc7>
				setDAC();
			}		
			//1й просмотрен
			else if(event_cnt==11)
 8ee:	8b 30       	cpi	r24, 0x0B	; 11
 8f0:	91 05       	cpc	r25, r1
 8f2:	31 f4       	brne	.+12     	; 0x900 <__stack+0x1>
			{				 
				prepareSetDAC(ref16,CHAN_2);
 8f4:	80 91 3d 01 	lds	r24, 0x013D
 8f8:	90 91 3e 01 	lds	r25, 0x013E
 8fc:	61 e0       	ldi	r22, 0x01	; 1
 8fe:	eb ce       	rjmp	.-554    	; 0x6d6 <__vector_9+0x22a>
				setDAC();
				
				ADCSRA |= (1 << ADSC); 
			}
			else if(event_cnt==12)
 900:	8c 30       	cpi	r24, 0x0C	; 12
 902:	91 05       	cpc	r25, r1
 904:	09 f4       	brne	.+2      	; 0x908 <__stack+0x9>
 906:	43 c1       	rjmp	.+646    	; 0xb8e <__stack+0x28f>
			{		
				ADCL_=ADCL;	
				ADCH_=ADCH;
				UDR0=ADCL_; //4
			}
			else if(event_cnt == 13)
 908:	8d 30       	cpi	r24, 0x0D	; 13
 90a:	91 05       	cpc	r25, r1
 90c:	41 f4       	brne	.+16     	; 0x91e <__stack+0x1f>
			{
				UDR0=ADCH_; // 5
 90e:	80 91 9b 01 	lds	r24, 0x019B
 912:	80 93 c6 00 	sts	0x00C6, r24
				
				prepareSetDAC(0,CHAN_2);
 916:	80 e0       	ldi	r24, 0x00	; 0
 918:	90 e0       	ldi	r25, 0x00	; 0
 91a:	61 e0       	ldi	r22, 0x01	; 1
 91c:	2f c0       	rjmp	.+94     	; 0x97c <__stack+0x7d>
				setDAC();
				event_cnt=0;	
			}
			
			else if(event_cnt==14)
 91e:	8e 30       	cpi	r24, 0x0E	; 14
 920:	91 05       	cpc	r25, r1
 922:	31 f4       	brne	.+12     	; 0x930 <__stack+0x31>
			{				 
				prepareSetDAC(ref16,CHAN_3);
 924:	80 91 3d 01 	lds	r24, 0x013D
 928:	90 91 3e 01 	lds	r25, 0x013E
 92c:	62 e0       	ldi	r22, 0x02	; 2
 92e:	d3 ce       	rjmp	.-602    	; 0x6d6 <__vector_9+0x22a>
				setDAC();
				
				ADCSRA |= (1 << ADSC); 
			}
			else if(event_cnt==15)
 930:	8f 30       	cpi	r24, 0x0F	; 15
 932:	91 05       	cpc	r25, r1
 934:	09 f4       	brne	.+2      	; 0x938 <__stack+0x39>
 936:	2b c1       	rjmp	.+598    	; 0xb8e <__stack+0x28f>
			{		
				ADCL_=ADCL;	
				ADCH_=ADCH;
				UDR0=ADCL_; //4
			}
			else if(event_cnt == 16)
 938:	80 31       	cpi	r24, 0x10	; 16
 93a:	91 05       	cpc	r25, r1
 93c:	41 f4       	brne	.+16     	; 0x94e <__stack+0x4f>
			{
				UDR0=ADCH_; // 5
 93e:	80 91 9b 01 	lds	r24, 0x019B
 942:	80 93 c6 00 	sts	0x00C6, r24
				
				prepareSetDAC(0,CHAN_3);
 946:	80 e0       	ldi	r24, 0x00	; 0
 948:	90 e0       	ldi	r25, 0x00	; 0
 94a:	62 e0       	ldi	r22, 0x02	; 2
 94c:	17 c0       	rjmp	.+46     	; 0x97c <__stack+0x7d>
				setDAC();
				event_cnt=0;	
			}
			
			else if(event_cnt==17)
 94e:	81 31       	cpi	r24, 0x11	; 17
 950:	91 05       	cpc	r25, r1
 952:	31 f4       	brne	.+12     	; 0x960 <__stack+0x61>
			{				 
				prepareSetDAC(ref16,CHAN_4);
 954:	80 91 3d 01 	lds	r24, 0x013D
 958:	90 91 3e 01 	lds	r25, 0x013E
 95c:	63 e0       	ldi	r22, 0x03	; 3
 95e:	bb ce       	rjmp	.-650    	; 0x6d6 <__vector_9+0x22a>
				setDAC();
				
				ADCSRA |= (1 << ADSC); 
			}
			else if(event_cnt==18)
 960:	82 31       	cpi	r24, 0x12	; 18
 962:	91 05       	cpc	r25, r1
 964:	09 f4       	brne	.+2      	; 0x968 <__stack+0x69>
 966:	13 c1       	rjmp	.+550    	; 0xb8e <__stack+0x28f>
			{		
				ADCL_=ADCL;	
				ADCH_=ADCH;
				UDR0=ADCL_; //4
			}
			else if(event_cnt == 19)
 968:	43 97       	sbiw	r24, 0x13	; 19
 96a:	09 f0       	breq	.+2      	; 0x96e <__stack+0x6f>
 96c:	21 c1       	rjmp	.+578    	; 0xbb0 <__stack+0x2b1>
			{
				UDR0=ADCH_; // 5
 96e:	80 91 9b 01 	lds	r24, 0x019B
 972:	80 93 c6 00 	sts	0x00C6, r24
				
				prepareSetDAC(0,CHAN_4);
 976:	80 e0       	ldi	r24, 0x00	; 0
 978:	90 e0       	ldi	r25, 0x00	; 0
 97a:	63 e0       	ldi	r22, 0x03	; 3
 97c:	0e 94 a6 01 	call	0x34c	; 0x34c <prepareSetDAC>
  while(!(SPSR & (1<<SPIF)));
}


void setDAC(){
	PORTD&=~(1<<LDAC);
 980:	5a 98       	cbi	0x0b, 2	; 11
	PORTD|=(1<<LDAC);	
 982:	5a 9a       	sbi	0x0b, 2	; 11
			{
				UDR0=ADCH_; // 5
				
				prepareSetDAC(0,CHAN_4);
				setDAC();
				event_cnt=0;	
 984:	10 92 8f 01 	sts	0x018F, r1
 988:	10 92 8e 01 	sts	0x018E, r1
 98c:	11 c1       	rjmp	.+546    	; 0xbb0 <__stack+0x2b1>
			}
			
		}
		
		
		else if(MD == ANALYZE)//5 by 5
 98e:	66 30       	cpi	r22, 0x06	; 6
 990:	09 f0       	breq	.+2      	; 0x994 <__stack+0x95>
 992:	0e c1       	rjmp	.+540    	; 0xbb0 <__stack+0x2b1>
		{
			//reset
			if(event_cnt==0)
 994:	80 91 8e 01 	lds	r24, 0x018E
 998:	90 91 8f 01 	lds	r25, 0x018F
 99c:	00 97       	sbiw	r24, 0x00	; 0
 99e:	61 f4       	brne	.+24     	; 0x9b8 <__stack+0xb9>
			{
				prepareSetDAC(reset16, chan);
 9a0:	80 91 3f 01 	lds	r24, 0x013F
 9a4:	90 91 40 01 	lds	r25, 0x0140
 9a8:	60 91 46 01 	lds	r22, 0x0146
 9ac:	0e 94 a6 01 	call	0x34c	; 0x34c <prepareSetDAC>
  while(!(SPSR & (1<<SPIF)));
}


void setDAC(){
	PORTD&=~(1<<LDAC);
 9b0:	5a 98       	cbi	0x0b, 2	; 11
	PORTD|=(1<<LDAC);	
 9b2:	5a 9a       	sbi	0x0b, 2	; 11
			//reset
			if(event_cnt==0)
			{
				prepareSetDAC(reset16, chan);
				setDAC();
				UDR0=255;
 9b4:	8f ef       	ldi	r24, 0xFF	; 255
 9b6:	fa c0       	rjmp	.+500    	; 0xbac <__stack+0x2ad>
			}
			else if(event_cnt==1)
 9b8:	81 30       	cpi	r24, 0x01	; 1
 9ba:	91 05       	cpc	r25, r1
 9bc:	49 f4       	brne	.+18     	; 0x9d0 <__stack+0xd1>
			{
				prepareSetDAC(0, chan);				
 9be:	80 e0       	ldi	r24, 0x00	; 0
 9c0:	90 e0       	ldi	r25, 0x00	; 0
 9c2:	60 91 46 01 	lds	r22, 0x0146
 9c6:	0e 94 a6 01 	call	0x34c	; 0x34c <prepareSetDAC>
  while(!(SPSR & (1<<SPIF)));
}


void setDAC(){
	PORTD&=~(1<<LDAC);
 9ca:	5a 98       	cbi	0x0b, 2	; 11
	PORTD|=(1<<LDAC);	
 9cc:	5a 9a       	sbi	0x0b, 2	; 11
 9ce:	f0 c0       	rjmp	.+480    	; 0xbb0 <__stack+0x2b1>
			{
				prepareSetDAC(0, chan);				
				setDAC();
			}
			//create set impulse
			else if(event_cnt==3)
 9d0:	83 30       	cpi	r24, 0x03	; 3
 9d2:	91 05       	cpc	r25, r1
 9d4:	09 f0       	breq	.+2      	; 0x9d8 <__stack+0xd9>
 9d6:	c4 c0       	rjmp	.+392    	; 0xb60 <__stack+0x261>
			{
				if(an_cnt<(BIG_STAT_N))
 9d8:	40 91 47 01 	lds	r20, 0x0147
 9dc:	50 91 48 01 	lds	r21, 0x0148
 9e0:	80 91 9c 01 	lds	r24, 0x019C
 9e4:	90 e0       	ldi	r25, 0x00	; 0
 9e6:	48 17       	cp	r20, r24
 9e8:	59 07       	cpc	r21, r25
 9ea:	18 f4       	brcc	.+6      	; 0x9f2 <__stack+0xf3>
				{
					STAT_V_step=0;					 
 9ec:	10 92 43 01 	sts	0x0143, r1
 9f0:	21 c0       	rjmp	.+66     	; 0xa34 <__stack+0x135>
				}
				else if(an_cnt<(BIG_STAT_N*2))
 9f2:	9c 01       	movw	r18, r24
 9f4:	22 0f       	add	r18, r18
 9f6:	33 1f       	adc	r19, r19
 9f8:	42 17       	cp	r20, r18
 9fa:	53 07       	cpc	r21, r19
 9fc:	10 f4       	brcc	.+4      	; 0xa02 <__stack+0x103>
				{
					STAT_V_step=1;
 9fe:	81 e0       	ldi	r24, 0x01	; 1
 a00:	17 c0       	rjmp	.+46     	; 0xa30 <__stack+0x131>
				}
				else if(an_cnt<(BIG_STAT_N*3))
 a02:	28 0f       	add	r18, r24
 a04:	39 1f       	adc	r19, r25
 a06:	42 17       	cp	r20, r18
 a08:	53 07       	cpc	r21, r19
 a0a:	10 f4       	brcc	.+4      	; 0xa10 <__stack+0x111>
				{
					STAT_V_step=2;
 a0c:	82 e0       	ldi	r24, 0x02	; 2
 a0e:	10 c0       	rjmp	.+32     	; 0xa30 <__stack+0x131>
				}
				else if(an_cnt<(BIG_STAT_N*4))
 a10:	9c 01       	movw	r18, r24
 a12:	22 0f       	add	r18, r18
 a14:	33 1f       	adc	r19, r19
 a16:	22 0f       	add	r18, r18
 a18:	33 1f       	adc	r19, r19
 a1a:	42 17       	cp	r20, r18
 a1c:	53 07       	cpc	r21, r19
 a1e:	10 f4       	brcc	.+4      	; 0xa24 <__stack+0x125>
				{
					STAT_V_step=3;
 a20:	83 e0       	ldi	r24, 0x03	; 3
 a22:	06 c0       	rjmp	.+12     	; 0xa30 <__stack+0x131>
				}
				else if(an_cnt<(BIG_STAT_N*5))
 a24:	28 0f       	add	r18, r24
 a26:	39 1f       	adc	r19, r25
 a28:	42 17       	cp	r20, r18
 a2a:	53 07       	cpc	r21, r19
 a2c:	18 f4       	brcc	.+6      	; 0xa34 <__stack+0x135>
				{
					STAT_V_step=4;
 a2e:	84 e0       	ldi	r24, 0x04	; 4
 a30:	80 93 43 01 	sts	0x0143, r24
				}////////////						
				//prepareSetDAC(x16, chan);
				UDR0=STAT_V_step;
 a34:	80 91 43 01 	lds	r24, 0x0143
 a38:	80 93 c6 00 	sts	0x00C6, r24
				x16_grad = (-(STAT_V_step+1)*8 )<<4;//16
 a3c:	90 e0       	ldi	r25, 0x00	; 0
 a3e:	80 95       	com	r24
 a40:	90 95       	com	r25
 a42:	96 95       	lsr	r25
 a44:	98 2f       	mov	r25, r24
 a46:	88 27       	eor	r24, r24
 a48:	97 95       	ror	r25
 a4a:	87 95       	ror	r24
 a4c:	90 93 a1 01 	sts	0x01A1, r25
 a50:	80 93 a0 01 	sts	0x01A0, r24
				prepareSetDAC(x16_grad, chan);
 a54:	60 91 46 01 	lds	r22, 0x0146
 a58:	0e 94 a6 01 	call	0x34c	; 0x34c <prepareSetDAC>
  while(!(SPSR & (1<<SPIF)));
}


void setDAC(){
	PORTD&=~(1<<LDAC);
 a5c:	5a 98       	cbi	0x0b, 2	; 11
	PORTD|=(1<<LDAC);	
 a5e:	5a 9a       	sbi	0x0b, 2	; 11
				x16_grad = (-(STAT_V_step+1)*8 )<<4;//16
				prepareSetDAC(x16_grad, chan);
				setDAC();
				
				
				if(an_cnt_fast<(STAT_N))//20 us
 a60:	40 91 49 01 	lds	r20, 0x0149
 a64:	50 91 4a 01 	lds	r21, 0x014A
 a68:	80 91 27 01 	lds	r24, 0x0127
 a6c:	90 e0       	ldi	r25, 0x00	; 0
 a6e:	48 17       	cp	r20, r24
 a70:	59 07       	cpc	r21, r25
 a72:	18 f4       	brcc	.+6      	; 0xa7a <__stack+0x17b>
				{
					STAT_dt_step=0;									
 a74:	10 92 42 01 	sts	0x0142, r1
 a78:	49 c0       	rjmp	.+146    	; 0xb0c <__stack+0x20d>
				}
				else if(an_cnt_fast<(STAT_N*2))//80 us
 a7a:	9c 01       	movw	r18, r24
 a7c:	22 0f       	add	r18, r18
 a7e:	33 1f       	adc	r19, r19
 a80:	42 17       	cp	r20, r18
 a82:	53 07       	cpc	r21, r19
 a84:	60 f4       	brcc	.+24     	; 0xa9e <__stack+0x19f>
				{
					STAT_dt_step=1;
 a86:	81 e0       	ldi	r24, 0x01	; 1
 a88:	80 93 42 01 	sts	0x0142, r24
 a8c:	80 e0       	ldi	r24, 0x00	; 0
 a8e:	90 e0       	ldi	r25, 0x00	; 0
  while(!(SPSR & (1<<SPIF)));
}


void setDAC(){
	PORTD&=~(1<<LDAC);
 a90:	5a 98       	cbi	0x0b, 2	; 11
	PORTD|=(1<<LDAC);	
 a92:	5a 9a       	sbi	0x0b, 2	; 11
					STAT_dt_step=0;									
				}
				else if(an_cnt_fast<(STAT_N*2))//80 us
				{
					STAT_dt_step=1;
					for(int i=0;i<40;i++)//28
 a94:	01 96       	adiw	r24, 0x01	; 1
 a96:	88 32       	cpi	r24, 0x28	; 40
 a98:	91 05       	cpc	r25, r1
 a9a:	d1 f7       	brne	.-12     	; 0xa90 <__stack+0x191>
 a9c:	37 c0       	rjmp	.+110    	; 0xb0c <__stack+0x20d>
					{
					setDAC();
					}
				}
				else if(an_cnt_fast<(STAT_N*3))//220 us
 a9e:	28 0f       	add	r18, r24
 aa0:	39 1f       	adc	r19, r25
 aa2:	42 17       	cp	r20, r18
 aa4:	53 07       	cpc	r21, r19
 aa6:	60 f4       	brcc	.+24     	; 0xac0 <__stack+0x1c1>
				{
					STAT_dt_step=2;
 aa8:	82 e0       	ldi	r24, 0x02	; 2
 aaa:	80 93 42 01 	sts	0x0142, r24
 aae:	80 e0       	ldi	r24, 0x00	; 0
 ab0:	90 e0       	ldi	r25, 0x00	; 0
  while(!(SPSR & (1<<SPIF)));
}


void setDAC(){
	PORTD&=~(1<<LDAC);
 ab2:	5a 98       	cbi	0x0b, 2	; 11
	PORTD|=(1<<LDAC);	
 ab4:	5a 9a       	sbi	0x0b, 2	; 11
					}
				}
				else if(an_cnt_fast<(STAT_N*3))//220 us
				{
					STAT_dt_step=2;
					for(int i=0;i<160;i++)
 ab6:	01 96       	adiw	r24, 0x01	; 1
 ab8:	80 3a       	cpi	r24, 0xA0	; 160
 aba:	91 05       	cpc	r25, r1
 abc:	d1 f7       	brne	.-12     	; 0xab2 <__stack+0x1b3>
 abe:	26 c0       	rjmp	.+76     	; 0xb0c <__stack+0x20d>
					{
					setDAC();
					}
				}
				else if(an_cnt_fast<(STAT_N*4))//900 us
 ac0:	88 0f       	add	r24, r24
 ac2:	99 1f       	adc	r25, r25
 ac4:	88 0f       	add	r24, r24
 ac6:	99 1f       	adc	r25, r25
 ac8:	48 17       	cp	r20, r24
 aca:	59 07       	cpc	r21, r25
 acc:	68 f4       	brcc	.+26     	; 0xae8 <__stack+0x1e9>
				{
					STAT_dt_step=3;
 ace:	83 e0       	ldi	r24, 0x03	; 3
 ad0:	80 93 42 01 	sts	0x0142, r24
 ad4:	80 e0       	ldi	r24, 0x00	; 0
 ad6:	90 e0       	ldi	r25, 0x00	; 0
  while(!(SPSR & (1<<SPIF)));
}


void setDAC(){
	PORTD&=~(1<<LDAC);
 ad8:	5a 98       	cbi	0x0b, 2	; 11
	PORTD|=(1<<LDAC);	
 ada:	5a 9a       	sbi	0x0b, 2	; 11
					}
				}
				else if(an_cnt_fast<(STAT_N*4))//900 us
				{
					STAT_dt_step=3;
					for(int i=0;i<640;i++)
 adc:	01 96       	adiw	r24, 0x01	; 1
 ade:	22 e0       	ldi	r18, 0x02	; 2
 ae0:	80 38       	cpi	r24, 0x80	; 128
 ae2:	92 07       	cpc	r25, r18
 ae4:	c9 f7       	brne	.-14     	; 0xad8 <__stack+0x1d9>
 ae6:	12 c0       	rjmp	.+36     	; 0xb0c <__stack+0x20d>
					{
					setDAC();
					}
				}
				else if(an_cnt_fast<(BIG_STAT_N))//3.5 ms
 ae8:	80 91 9c 01 	lds	r24, 0x019C
 aec:	90 e0       	ldi	r25, 0x00	; 0
 aee:	48 17       	cp	r20, r24
 af0:	59 07       	cpc	r21, r25
 af2:	60 f4       	brcc	.+24     	; 0xb0c <__stack+0x20d>
				{
					STAT_dt_step=4;
 af4:	84 e0       	ldi	r24, 0x04	; 4
 af6:	80 93 42 01 	sts	0x0142, r24
 afa:	80 e0       	ldi	r24, 0x00	; 0
 afc:	90 e0       	ldi	r25, 0x00	; 0
  while(!(SPSR & (1<<SPIF)));
}


void setDAC(){
	PORTD&=~(1<<LDAC);
 afe:	5a 98       	cbi	0x0b, 2	; 11
	PORTD|=(1<<LDAC);	
 b00:	5a 9a       	sbi	0x0b, 2	; 11
					}
				}
				else if(an_cnt_fast<(BIG_STAT_N))//3.5 ms
				{
					STAT_dt_step=4;
					for(int i=0;i<2560;i++)
 b02:	01 96       	adiw	r24, 0x01	; 1
 b04:	2a e0       	ldi	r18, 0x0A	; 10
 b06:	80 30       	cpi	r24, 0x00	; 0
 b08:	92 07       	cpc	r25, r18
 b0a:	c9 f7       	brne	.-14     	; 0xafe <__stack+0x1ff>
					setDAC();
					}
				}////////////////
									
				
				prepareResetDAC(chan);
 b0c:	80 91 46 01 	lds	r24, 0x0146
 b10:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <prepareResetDAC>
  while(!(SPSR & (1<<SPIF)));
}


void setDAC(){
	PORTD&=~(1<<LDAC);
 b14:	5a 98       	cbi	0x0b, 2	; 11
	PORTD|=(1<<LDAC);	
 b16:	5a 9a       	sbi	0x0b, 2	; 11
									
				
				prepareResetDAC(chan);
				setDAC();			
				
				an_cnt++; // upper				
 b18:	80 91 47 01 	lds	r24, 0x0147
 b1c:	90 91 48 01 	lds	r25, 0x0148
 b20:	01 96       	adiw	r24, 0x01	; 1
 b22:	90 93 48 01 	sts	0x0148, r25
 b26:	80 93 47 01 	sts	0x0147, r24
				if(an_cnt>(BIG_STAT_N*5)) an_cnt=0; // lower
 b2a:	20 91 9c 01 	lds	r18, 0x019C
 b2e:	45 e0       	ldi	r20, 0x05	; 5
 b30:	24 9f       	mul	r18, r20
 b32:	90 01       	movw	r18, r0
 b34:	11 24       	eor	r1, r1
 b36:	28 17       	cp	r18, r24
 b38:	39 07       	cpc	r19, r25
 b3a:	20 f4       	brcc	.+8      	; 0xb44 <__stack+0x245>
 b3c:	10 92 48 01 	sts	0x0148, r1
 b40:	10 92 47 01 	sts	0x0147, r1
				
				an_cnt_fast = an_cnt%BIG_STAT_N;
 b44:	60 91 9c 01 	lds	r22, 0x019C
 b48:	80 91 47 01 	lds	r24, 0x0147
 b4c:	90 91 48 01 	lds	r25, 0x0148
 b50:	70 e0       	ldi	r23, 0x00	; 0
 b52:	0e 94 1d 07 	call	0xe3a	; 0xe3a <__udivmodhi4>
 b56:	90 93 4a 01 	sts	0x014A, r25
 b5a:	80 93 49 01 	sts	0x0149, r24
 b5e:	28 c0       	rjmp	.+80     	; 0xbb0 <__stack+0x2b1>
			}
			else if(event_cnt==4)
 b60:	84 30       	cpi	r24, 0x04	; 4
 b62:	91 05       	cpc	r25, r1
 b64:	29 f4       	brne	.+10     	; 0xb70 <__stack+0x271>
			{
				UDR0=STAT_dt_step;
 b66:	80 91 42 01 	lds	r24, 0x0142
 b6a:	80 93 c6 00 	sts	0x00C6, r24
 b6e:	27 cf       	rjmp	.-434    	; 0x9be <__stack+0xbf>
				prepareSetDAC(0, chan);
				setDAC();
			}
			else if(event_cnt==6)//start measure
 b70:	86 30       	cpi	r24, 0x06	; 6
 b72:	91 05       	cpc	r25, r1
 b74:	09 f4       	brne	.+2      	; 0xb78 <__stack+0x279>
 b76:	a9 cd       	rjmp	.-1198   	; 0x6ca <__vector_9+0x21e>
				prepareSetDAC(ref16, chan);
				setDAC();
				ADCSRA |= (1 << ADSC); 
				
			}
			else if(event_cnt==7)
 b78:	87 30       	cpi	r24, 0x07	; 7
 b7a:	91 05       	cpc	r25, r1
 b7c:	99 f4       	brne	.+38     	; 0xba4 <__stack+0x2a5>
			{
				prepareSetDAC(0, chan);
 b7e:	80 e0       	ldi	r24, 0x00	; 0
 b80:	90 e0       	ldi	r25, 0x00	; 0
 b82:	60 91 46 01 	lds	r22, 0x0146
 b86:	0e 94 a6 01 	call	0x34c	; 0x34c <prepareSetDAC>
  while(!(SPSR & (1<<SPIF)));
}


void setDAC(){
	PORTD&=~(1<<LDAC);
 b8a:	5a 98       	cbi	0x0b, 2	; 11
	PORTD|=(1<<LDAC);	
 b8c:	5a 9a       	sbi	0x0b, 2	; 11
			else if(event_cnt==7)
			{
				prepareSetDAC(0, chan);
				setDAC();
				
				ADCL_=ADCL;	
 b8e:	90 91 78 00 	lds	r25, 0x0078
 b92:	90 93 97 01 	sts	0x0197, r25
				ADCH_=ADCH;
 b96:	80 91 79 00 	lds	r24, 0x0079
 b9a:	80 93 9b 01 	sts	0x019B, r24
				UDR0=ADCL_;
 b9e:	90 93 c6 00 	sts	0x00C6, r25
 ba2:	06 c0       	rjmp	.+12     	; 0xbb0 <__stack+0x2b1>
			}
			else if(event_cnt==8)
 ba4:	08 97       	sbiw	r24, 0x08	; 8
 ba6:	21 f4       	brne	.+8      	; 0xbb0 <__stack+0x2b1>
			{
				UDR0=ADCH_;
 ba8:	80 91 9b 01 	lds	r24, 0x019B
 bac:	80 93 c6 00 	sts	0x00C6, r24
		}
		
		
		
		
		ctr=0;
 bb0:	10 92 94 01 	sts	0x0194, r1
 bb4:	10 92 93 01 	sts	0x0193, r1
		
		
		if(MD == ONE_SHOT)
 bb8:	80 91 32 01 	lds	r24, 0x0132
 bbc:	85 30       	cpi	r24, 0x05	; 5
 bbe:	69 f4       	brne	.+26     	; 0xbda <__stack+0x2db>
		{
			if(event_cnt<19)
 bc0:	80 91 8e 01 	lds	r24, 0x018E
 bc4:	90 91 8f 01 	lds	r25, 0x018F
 bc8:	83 31       	cpi	r24, 0x13	; 19
 bca:	91 05       	cpc	r25, r1
 bcc:	2c f5       	brge	.+74     	; 0xc18 <__stack+0x319>
				event_cnt++;
 bce:	01 96       	adiw	r24, 0x01	; 1
 bd0:	90 93 8f 01 	sts	0x018F, r25
 bd4:	80 93 8e 01 	sts	0x018E, r24
 bd8:	1f c0       	rjmp	.+62     	; 0xc18 <__stack+0x319>
 bda:	20 91 8e 01 	lds	r18, 0x018E
 bde:	30 91 8f 01 	lds	r19, 0x018F
		}
		else if(MD == PROGRAM)
 be2:	82 30       	cpi	r24, 0x02	; 2
 be4:	49 f4       	brne	.+18     	; 0xbf8 <__stack+0x2f9>
		{
			event_cnt++;
 be6:	c9 01       	movw	r24, r18
 be8:	01 96       	adiw	r24, 0x01	; 1
 bea:	90 93 8f 01 	sts	0x018F, r25
 bee:	80 93 8e 01 	sts	0x018E, r24
			if(event_cnt>7)
 bf2:	08 97       	sbiw	r24, 0x08	; 8
 bf4:	8c f0       	brlt	.+34     	; 0xc18 <__stack+0x319>
 bf6:	0c c0       	rjmp	.+24     	; 0xc10 <__stack+0x311>
				event_cnt = 0;
		}
		else{
			event_cnt++;
 bf8:	2f 5f       	subi	r18, 0xFF	; 255
 bfa:	3f 4f       	sbci	r19, 0xFF	; 255
 bfc:	30 93 8f 01 	sts	0x018F, r19
 c00:	20 93 8e 01 	sts	0x018E, r18
			if(event_cnt>T)
 c04:	80 91 96 01 	lds	r24, 0x0196
 c08:	90 e0       	ldi	r25, 0x00	; 0
 c0a:	82 17       	cp	r24, r18
 c0c:	93 07       	cpc	r25, r19
 c0e:	24 f4       	brge	.+8      	; 0xc18 <__stack+0x319>
				event_cnt=0;
 c10:	10 92 8f 01 	sts	0x018F, r1
 c14:	10 92 8e 01 	sts	0x018E, r1
		//{
		//	if(event_cnt<16)
		//		event_cnt++;			
		//}
	}
	ctr++;
 c18:	80 91 93 01 	lds	r24, 0x0193
 c1c:	90 91 94 01 	lds	r25, 0x0194
 c20:	01 96       	adiw	r24, 0x01	; 1
 c22:	90 93 94 01 	sts	0x0194, r25
 c26:	80 93 93 01 	sts	0x0193, r24
}
 c2a:	ff 91       	pop	r31
 c2c:	ef 91       	pop	r30
 c2e:	bf 91       	pop	r27
 c30:	af 91       	pop	r26
 c32:	9f 91       	pop	r25
 c34:	8f 91       	pop	r24
 c36:	7f 91       	pop	r23
 c38:	6f 91       	pop	r22
 c3a:	5f 91       	pop	r21
 c3c:	4f 91       	pop	r20
 c3e:	3f 91       	pop	r19
 c40:	2f 91       	pop	r18
 c42:	0f 90       	pop	r0
 c44:	0f be       	out	0x3f, r0	; 63
 c46:	0f 90       	pop	r0
 c48:	1f 90       	pop	r1
 c4a:	18 95       	reti

00000c4c <__vector_18>:

//прием команд от компьютера по UART в зависимости от режима
ISR(USART_RX_vect)
{
 c4c:	1f 92       	push	r1
 c4e:	0f 92       	push	r0
 c50:	0f b6       	in	r0, 0x3f	; 63
 c52:	0f 92       	push	r0
 c54:	11 24       	eor	r1, r1
 c56:	2f 93       	push	r18
 c58:	3f 93       	push	r19
 c5a:	4f 93       	push	r20
 c5c:	5f 93       	push	r21
 c5e:	6f 93       	push	r22
 c60:	7f 93       	push	r23
 c62:	8f 93       	push	r24
 c64:	9f 93       	push	r25
 c66:	af 93       	push	r26
 c68:	bf 93       	push	r27
 c6a:	ef 93       	push	r30
 c6c:	ff 93       	push	r31
	switch(ptr)
 c6e:	80 91 44 01 	lds	r24, 0x0144
 c72:	84 30       	cpi	r24, 0x04	; 4
 c74:	09 f4       	brne	.+2      	; 0xc78 <__vector_18+0x2c>
 c76:	6b c0       	rjmp	.+214    	; 0xd4e <__vector_18+0x102>
 c78:	85 30       	cpi	r24, 0x05	; 5
 c7a:	58 f4       	brcc	.+22     	; 0xc92 <__vector_18+0x46>
 c7c:	81 30       	cpi	r24, 0x01	; 1
 c7e:	51 f1       	breq	.+84     	; 0xcd4 <__vector_18+0x88>
 c80:	81 30       	cpi	r24, 0x01	; 1
 c82:	d0 f0       	brcs	.+52     	; 0xcb8 <__vector_18+0x6c>
 c84:	82 30       	cpi	r24, 0x02	; 2
 c86:	09 f4       	brne	.+2      	; 0xc8a <__vector_18+0x3e>
 c88:	42 c0       	rjmp	.+132    	; 0xd0e <__vector_18+0xc2>
 c8a:	83 30       	cpi	r24, 0x03	; 3
 c8c:	09 f0       	breq	.+2      	; 0xc90 <__vector_18+0x44>
 c8e:	9c c0       	rjmp	.+312    	; 0xdc8 <__vector_18+0x17c>
 c90:	51 c0       	rjmp	.+162    	; 0xd34 <__vector_18+0xe8>
 c92:	87 30       	cpi	r24, 0x07	; 7
 c94:	09 f4       	brne	.+2      	; 0xc98 <__vector_18+0x4c>
 c96:	7b c0       	rjmp	.+246    	; 0xd8e <__vector_18+0x142>
 c98:	88 30       	cpi	r24, 0x08	; 8
 c9a:	38 f4       	brcc	.+14     	; 0xcaa <__vector_18+0x5e>
 c9c:	85 30       	cpi	r24, 0x05	; 5
 c9e:	09 f4       	brne	.+2      	; 0xca2 <__vector_18+0x56>
 ca0:	6c c0       	rjmp	.+216    	; 0xd7a <__vector_18+0x12e>
 ca2:	86 30       	cpi	r24, 0x06	; 6
 ca4:	09 f0       	breq	.+2      	; 0xca8 <__vector_18+0x5c>
 ca6:	90 c0       	rjmp	.+288    	; 0xdc8 <__vector_18+0x17c>
 ca8:	6d c0       	rjmp	.+218    	; 0xd84 <__vector_18+0x138>
 caa:	88 30       	cpi	r24, 0x08	; 8
 cac:	09 f4       	brne	.+2      	; 0xcb0 <__vector_18+0x64>
 cae:	74 c0       	rjmp	.+232    	; 0xd98 <__vector_18+0x14c>
 cb0:	89 30       	cpi	r24, 0x09	; 9
 cb2:	09 f0       	breq	.+2      	; 0xcb6 <__vector_18+0x6a>
 cb4:	89 c0       	rjmp	.+274    	; 0xdc8 <__vector_18+0x17c>
 cb6:	75 c0       	rjmp	.+234    	; 0xda2 <__vector_18+0x156>
	{
		case 0:
		if(UDR0!=255)//байт 255 является синхронизирующим
 cb8:	80 91 c6 00 	lds	r24, 0x00C6
 cbc:	8f 3f       	cpi	r24, 0xFF	; 255
 cbe:	31 f0       	breq	.+12     	; 0xccc <__vector_18+0x80>
		{
			sync=0;
 cc0:	10 92 41 01 	sts	0x0141, r1
			ptr--;
			ptr%=7;
 cc4:	83 e0       	ldi	r24, 0x03	; 3
 cc6:	80 93 44 01 	sts	0x0144, r24
 cca:	7e c0       	rjmp	.+252    	; 0xdc8 <__vector_18+0x17c>
		}
		else
			sync=1;
 ccc:	81 e0       	ldi	r24, 0x01	; 1
 cce:	80 93 41 01 	sts	0x0141, r24
 cd2:	7a c0       	rjmp	.+244    	; 0xdc8 <__vector_18+0x17c>
		break;
		
		
		case 1:
		MD=UDR0;
 cd4:	20 91 c6 00 	lds	r18, 0x00C6
 cd8:	20 93 32 01 	sts	0x0132, r18
		if(MD==VAC)
 cdc:	21 30       	cpi	r18, 0x01	; 1
 cde:	39 f4       	brne	.+14     	; 0xcee <__vector_18+0xa2>
			time_step=4;//5
 ce0:	84 e0       	ldi	r24, 0x04	; 4
 ce2:	90 e0       	ldi	r25, 0x00	; 0
 ce4:	90 93 2e 01 	sts	0x012E, r25
 ce8:	80 93 2d 01 	sts	0x012D, r24
 cec:	6d c0       	rjmp	.+218    	; 0xdc8 <__vector_18+0x17c>
		else
			time_step=6;//4		
 cee:	86 e0       	ldi	r24, 0x06	; 6
 cf0:	90 e0       	ldi	r25, 0x00	; 0
 cf2:	90 93 2e 01 	sts	0x012E, r25
 cf6:	80 93 2d 01 	sts	0x012D, r24
		if(MD==PROGRAM)
 cfa:	22 30       	cpi	r18, 0x02	; 2
 cfc:	09 f0       	breq	.+2      	; 0xd00 <__vector_18+0xb4>
 cfe:	64 c0       	rjmp	.+200    	; 0xdc8 <__vector_18+0x17c>
		{
			//PROGRAM_start=1;
			PROGRAM_done=0;
 d00:	10 92 45 01 	sts	0x0145, r1
			proging_val=0;
 d04:	10 92 3a 01 	sts	0x013A, r1
 d08:	10 92 39 01 	sts	0x0139, r1
 d0c:	5d c0       	rjmp	.+186    	; 0xdc8 <__vector_18+0x17c>
		}
		break;
		
		
		case 2:	
		x8 = UDR0;		
 d0e:	80 91 c6 00 	lds	r24, 0x00C6
 d12:	80 93 90 01 	sts	0x0190, r24
		x16_simple = (uint8_t)x8;
 d16:	90 e0       	ldi	r25, 0x00	; 0
 d18:	90 93 99 01 	sts	0x0199, r25
 d1c:	80 93 98 01 	sts	0x0198, r24
		x16 = x16_simple<<4;
 d20:	24 e0       	ldi	r18, 0x04	; 4
 d22:	88 0f       	add	r24, r24
 d24:	99 1f       	adc	r25, r25
 d26:	2a 95       	dec	r18
 d28:	e1 f7       	brne	.-8      	; 0xd22 <__vector_18+0xd6>
 d2a:	90 93 3c 01 	sts	0x013C, r25
 d2e:	80 93 3b 01 	sts	0x013B, r24
 d32:	4a c0       	rjmp	.+148    	; 0xdc8 <__vector_18+0x17c>
		break;
		case 3:	
		ref16=UDR0<<4;
 d34:	80 91 c6 00 	lds	r24, 0x00C6
 d38:	90 e0       	ldi	r25, 0x00	; 0
 d3a:	b4 e0       	ldi	r27, 0x04	; 4
 d3c:	88 0f       	add	r24, r24
 d3e:	99 1f       	adc	r25, r25
 d40:	ba 95       	dec	r27
 d42:	e1 f7       	brne	.-8      	; 0xd3c <__vector_18+0xf0>
 d44:	90 93 3e 01 	sts	0x013E, r25
 d48:	80 93 3d 01 	sts	0x013D, r24
 d4c:	3d c0       	rjmp	.+122    	; 0xdc8 <__vector_18+0x17c>
		break;
		case 4:
		if(MD==PROGRAM)
 d4e:	80 91 32 01 	lds	r24, 0x0132
 d52:	82 30       	cpi	r24, 0x02	; 2
 d54:	29 f4       	brne	.+10     	; 0xd60 <__vector_18+0x114>
			t1=UDR0;
 d56:	80 91 c6 00 	lds	r24, 0x00C6
 d5a:	80 93 29 01 	sts	0x0129, r24
 d5e:	34 c0       	rjmp	.+104    	; 0xdc8 <__vector_18+0x17c>
		else
			reset16=UDR0<<4;
 d60:	80 91 c6 00 	lds	r24, 0x00C6
 d64:	90 e0       	ldi	r25, 0x00	; 0
 d66:	a4 e0       	ldi	r26, 0x04	; 4
 d68:	88 0f       	add	r24, r24
 d6a:	99 1f       	adc	r25, r25
 d6c:	aa 95       	dec	r26
 d6e:	e1 f7       	brne	.-8      	; 0xd68 <__vector_18+0x11c>
 d70:	90 93 40 01 	sts	0x0140, r25
 d74:	80 93 3f 01 	sts	0x013F, r24
 d78:	27 c0       	rjmp	.+78     	; 0xdc8 <__vector_18+0x17c>
		break;		
		case 5:
		
		t2=UDR0;
 d7a:	80 91 c6 00 	lds	r24, 0x00C6
 d7e:	80 93 2a 01 	sts	0x012A, r24
 d82:	22 c0       	rjmp	.+68     	; 0xdc8 <__vector_18+0x17c>
	
		
		break;	
		case 6:
		dT=UDR0;
 d84:	80 91 c6 00 	lds	r24, 0x00C6
 d88:	80 93 92 01 	sts	0x0192, r24
 d8c:	1d c0       	rjmp	.+58     	; 0xdc8 <__vector_18+0x17c>
		break;
		case 7:
		T=UDR0;
 d8e:	80 91 c6 00 	lds	r24, 0x00C6
 d92:	80 93 96 01 	sts	0x0196, r24
 d96:	18 c0       	rjmp	.+48     	; 0xdc8 <__vector_18+0x17c>
		break;
		case 8:
		chan=UDR0;
 d98:	80 91 c6 00 	lds	r24, 0x00C6
 d9c:	80 93 46 01 	sts	0x0146, r24
 da0:	13 c0       	rjmp	.+38     	; 0xdc8 <__vector_18+0x17c>
		break;
		
		case 9:
			reverted[chan]=UDR0;
 da2:	80 91 c6 00 	lds	r24, 0x00C6
 da6:	e0 91 46 01 	lds	r30, 0x0146
 daa:	f0 e0       	ldi	r31, 0x00	; 0
 dac:	e5 5b       	subi	r30, 0xB5	; 181
 dae:	fe 4f       	sbci	r31, 0xFE	; 254
 db0:	80 83       	st	Z, r24
		
			//event_cnt=0;			
			
			if(MD==GATHER_MULT)
 db2:	80 91 32 01 	lds	r24, 0x0132
 db6:	83 30       	cpi	r24, 0x03	; 3
 db8:	19 f4       	brne	.+6      	; 0xdc0 <__vector_18+0x174>
			{
			//	PORTD=0b00100000;
			//static int ff=1<<5;
			//if(x16>>4)
			gatherMult();
 dba:	0e 94 8a 00 	call	0x114	; 0x114 <gatherMult>
 dbe:	04 c0       	rjmp	.+8      	; 0xdc8 <__vector_18+0x17c>
			//PORTD=(1<<5)^PORTD;
			//PORTD=ff;
			}
			else if(MD==SEPAR_MULT)	
 dc0:	84 30       	cpi	r24, 0x04	; 4
 dc2:	11 f4       	brne	.+4      	; 0xdc8 <__vector_18+0x17c>
			{
			usualMult();	
 dc4:	0e 94 de 00 	call	0x1bc	; 0x1bc <usualMult>
		break;
	}
	

	
	dTt2=dT+t2;
 dc8:	80 91 2a 01 	lds	r24, 0x012A
 dcc:	90 91 92 01 	lds	r25, 0x0192
 dd0:	89 0f       	add	r24, r25
 dd2:	80 93 2b 01 	sts	0x012B, r24
	//UDR0=x16/16;
	ptr++;
	ptr%=10;
 dd6:	80 91 44 01 	lds	r24, 0x0144
 dda:	8f 5f       	subi	r24, 0xFF	; 255
 ddc:	6a e0       	ldi	r22, 0x0A	; 10
 dde:	0e 94 04 07 	call	0xe08	; 0xe08 <__udivmodqi4>
 de2:	90 93 44 01 	sts	0x0144, r25
 de6:	ff 91       	pop	r31
 de8:	ef 91       	pop	r30
 dea:	bf 91       	pop	r27
 dec:	af 91       	pop	r26
 dee:	9f 91       	pop	r25
 df0:	8f 91       	pop	r24
 df2:	7f 91       	pop	r23
 df4:	6f 91       	pop	r22
 df6:	5f 91       	pop	r21
 df8:	4f 91       	pop	r20
 dfa:	3f 91       	pop	r19
 dfc:	2f 91       	pop	r18
 dfe:	0f 90       	pop	r0
 e00:	0f be       	out	0x3f, r0	; 63
 e02:	0f 90       	pop	r0
 e04:	1f 90       	pop	r1
 e06:	18 95       	reti

00000e08 <__udivmodqi4>:
 e08:	99 1b       	sub	r25, r25
 e0a:	79 e0       	ldi	r23, 0x09	; 9
 e0c:	04 c0       	rjmp	.+8      	; 0xe16 <__udivmodqi4_ep>

00000e0e <__udivmodqi4_loop>:
 e0e:	99 1f       	adc	r25, r25
 e10:	96 17       	cp	r25, r22
 e12:	08 f0       	brcs	.+2      	; 0xe16 <__udivmodqi4_ep>
 e14:	96 1b       	sub	r25, r22

00000e16 <__udivmodqi4_ep>:
 e16:	88 1f       	adc	r24, r24
 e18:	7a 95       	dec	r23
 e1a:	c9 f7       	brne	.-14     	; 0xe0e <__udivmodqi4_loop>
 e1c:	80 95       	com	r24
 e1e:	08 95       	ret

00000e20 <__divmodqi4>:
 e20:	87 fb       	bst	r24, 7
 e22:	08 2e       	mov	r0, r24
 e24:	06 26       	eor	r0, r22
 e26:	87 fd       	sbrc	r24, 7
 e28:	81 95       	neg	r24
 e2a:	67 fd       	sbrc	r22, 7
 e2c:	61 95       	neg	r22
 e2e:	ec df       	rcall	.-40     	; 0xe08 <__udivmodqi4>
 e30:	0e f4       	brtc	.+2      	; 0xe34 <__divmodqi4_1>
 e32:	91 95       	neg	r25

00000e34 <__divmodqi4_1>:
 e34:	07 fc       	sbrc	r0, 7
 e36:	81 95       	neg	r24

00000e38 <__divmodqi4_exit>:
 e38:	08 95       	ret

00000e3a <__udivmodhi4>:
 e3a:	aa 1b       	sub	r26, r26
 e3c:	bb 1b       	sub	r27, r27
 e3e:	51 e1       	ldi	r21, 0x11	; 17
 e40:	07 c0       	rjmp	.+14     	; 0xe50 <__udivmodhi4_ep>

00000e42 <__udivmodhi4_loop>:
 e42:	aa 1f       	adc	r26, r26
 e44:	bb 1f       	adc	r27, r27
 e46:	a6 17       	cp	r26, r22
 e48:	b7 07       	cpc	r27, r23
 e4a:	10 f0       	brcs	.+4      	; 0xe50 <__udivmodhi4_ep>
 e4c:	a6 1b       	sub	r26, r22
 e4e:	b7 0b       	sbc	r27, r23

00000e50 <__udivmodhi4_ep>:
 e50:	88 1f       	adc	r24, r24
 e52:	99 1f       	adc	r25, r25
 e54:	5a 95       	dec	r21
 e56:	a9 f7       	brne	.-22     	; 0xe42 <__udivmodhi4_loop>
 e58:	80 95       	com	r24
 e5a:	90 95       	com	r25
 e5c:	bc 01       	movw	r22, r24
 e5e:	cd 01       	movw	r24, r26
 e60:	08 95       	ret

00000e62 <_exit>:
 e62:	f8 94       	cli

00000e64 <__stop_program>:
 e64:	ff cf       	rjmp	.-2      	; 0xe64 <__stop_program>
