
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000012  00800100  00000b00  00000b94  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000b00  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000003d  00800112  00800112  00000ba6  2**0
                  ALLOC
  3 .debug_aranges 00000020  00000000  00000000  00000ba6  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 000002b6  00000000  00000000  00000bc6  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000006b1  00000000  00000000  00000e7c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000001f7  00000000  00000000  0000152d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000a1c  00000000  00000000  00001724  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000e0  00000000  00000000  00002140  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000261  00000000  00000000  00002220  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000010c  00000000  00000000  00002481  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 22 01 	jmp	0x244	; 0x244 <__vector_9>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 8b 04 	jmp	0x916	; 0x916 <__vector_18>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e0 e0       	ldi	r30, 0x00	; 0
  7c:	fb e0       	ldi	r31, 0x0B	; 11
  7e:	02 c0       	rjmp	.+4      	; 0x84 <.do_copy_data_start>

00000080 <.do_copy_data_loop>:
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0

00000084 <.do_copy_data_start>:
  84:	a2 31       	cpi	r26, 0x12	; 18
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <.do_copy_data_loop>

0000008a <__do_clear_bss>:
  8a:	11 e0       	ldi	r17, 0x01	; 1
  8c:	a2 e1       	ldi	r26, 0x12	; 18
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	af 34       	cpi	r26, 0x4F	; 79
  96:	b1 07       	cpc	r27, r17
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 c9 00 	call	0x192	; 0x192 <main>
  9e:	0c 94 7e 05 	jmp	0xafc	; 0xafc <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <ADC_Init>:
uint8_t accum_cnt;

//функция инициализаци АЦП
//АЦП используется для регистрации тока, проходящего через мемристор
void ADC_Init(){
 ADCSRA |= (1 << ADEN) // Включаем АЦП
  a6:	ea e7       	ldi	r30, 0x7A	; 122
  a8:	f0 e0       	ldi	r31, 0x00	; 0
  aa:	80 81       	ld	r24, Z
  ac:	83 68       	ori	r24, 0x83	; 131
  ae:	80 83       	st	Z, r24
 //ADCSRA&=~(1 << ADPS1)|(1 << ADPS0)|(1 << ADPS1);
 |(1 << ADPS1)|(1 << ADPS0)|(1 << ADPS1);    // устанавливаем предделитель преобразователя на 8
 ADMUX |= (0 << REFS1)|(1 << REFS0) //выставляем опорное напряжение, как внешний ИОН
  b0:	ec e7       	ldi	r30, 0x7C	; 124
  b2:	f0 e0       	ldi	r31, 0x00	; 0
  b4:	80 81       	ld	r24, Z
  b6:	80 64       	ori	r24, 0x40	; 64
  b8:	80 83       	st	Z, r24
 |(0 << MUX0)|(0 << MUX1)|(0 << MUX2)|(0 << MUX3); // снимать сигнал будем с  входа PC0 
}
  ba:	08 95       	ret

000000bc <timer_init>:

//функция инициализации таймера
// Таймер используется для формирования временной последовательности значений, формируемых с ЦАПа
void timer_init()
{
    TCCR2A = 0;        
  bc:	10 92 b0 00 	sts	0x00B0, r1
    TCCR2B = 0;
  c0:	e1 eb       	ldi	r30, 0xB1	; 177
  c2:	f0 e0       	ldi	r31, 0x00	; 0
  c4:	10 82       	st	Z, r1
    
    TCCR2B |= (1<<CS21) ;    
  c6:	80 81       	ld	r24, Z
  c8:	82 60       	ori	r24, 0x02	; 2
  ca:	80 83       	st	Z, r24
    TIMSK2 = (1 << TOIE2);
  cc:	81 e0       	ldi	r24, 0x01	; 1
  ce:	80 93 70 00 	sts	0x0070, r24
}
  d2:	08 95       	ret

000000d4 <uart_init>:

//функция инициализации UART-интерфейса
void uart_init(unsigned int ubrr)
{	
	UBRR0H = (unsigned char)(ubrr>>8);
  d4:	90 93 c5 00 	sts	0x00C5, r25
	UBRR0L = (unsigned char)ubrr;
  d8:	80 93 c4 00 	sts	0x00C4, r24
	UCSR0B = (1<<RXCIE0)|(1<<RXEN0)|(1<<TXEN0);
  dc:	88 e9       	ldi	r24, 0x98	; 152
  de:	80 93 c1 00 	sts	0x00C1, r24
	UCSR0C = (1<<USBS0)|(3<<UCSZ00);
  e2:	8e e0       	ldi	r24, 0x0E	; 14
  e4:	80 93 c2 00 	sts	0x00C2, r24
}
  e8:	08 95       	ret

000000ea <SPI_MasterInit>:

//функция инициализации SPI
void SPI_MasterInit()
{
	DDR_SPI = (1<<DD_MOSI)|(1<<DD_SCK)|(1<<SPI_SS);
  ea:	8c e2       	ldi	r24, 0x2C	; 44
  ec:	84 b9       	out	0x04, r24	; 4
	SPCR = (1<<SPE)|(0<<DORD)|(1<<MSTR)|(1<<CPOL)|(0<<CPHA);//|(1<<SPR1)|(0<<SPR0);
  ee:	88 e5       	ldi	r24, 0x58	; 88
  f0:	8c bd       	out	0x2c, r24	; 44
}
  f2:	08 95       	ret

000000f4 <gatherMult>:
}

			
void gatherMult()
{
	UNSET_BYTE(PORTD, 6);
  f4:	5e 98       	cbi	0x0b, 6	; 11
	UNSET_BYTE(PORTD, 7);				
  f6:	5f 98       	cbi	0x0b, 7	; 11
	UNSET_BYTE(PORTD, 5);
  f8:	5d 98       	cbi	0x0b, 5	; 11
	UNSET_BYTE(PORTC, 4);
  fa:	44 98       	cbi	0x08, 4	; 8
	
	
	SET_BYTE(PORTC, 1);				
  fc:	41 9a       	sbi	0x08, 1	; 8
	SET_BYTE(PORTB, 2);
  fe:	2a 9a       	sbi	0x05, 2	; 5
	SET_BYTE(PORTB, 1);
 100:	29 9a       	sbi	0x05, 1	; 5
	SET_BYTE(PORTB, 0);
 102:	28 9a       	sbi	0x05, 0	; 5
}
 104:	08 95       	ret

00000106 <separMult>:
void separMult()
{
	UNSET_BYTE(PORTB, 1);
 106:	29 98       	cbi	0x05, 1	; 5
	UNSET_BYTE(PORTB, 2);
 108:	2a 98       	cbi	0x05, 2	; 5
	UNSET_BYTE(PORTC, 1);
 10a:	41 98       	cbi	0x08, 1	; 8
	
	SET_BYTE(PORTC, 4);						
 10c:	44 9a       	sbi	0x08, 4	; 8
	SET_BYTE(PORTD, 6);
 10e:	5e 9a       	sbi	0x0b, 6	; 11
	SET_BYTE(PORTD, 7);
 110:	5f 9a       	sbi	0x0b, 7	; 11
	SET_BYTE(PORTB, 0);
 112:	28 9a       	sbi	0x05, 0	; 5
	SET_BYTE(PORTD, 5);
 114:	5d 9a       	sbi	0x0b, 5	; 11
}
 116:	08 95       	ret

00000118 <SPI_WriteByte>:



void SPI_WriteByte(uint8_t data)
{
   SPDR = data;
 118:	8e bd       	out	0x2e, r24	; 46
  while(!(SPSR & (1<<SPIF)));
 11a:	0d b4       	in	r0, 0x2d	; 45
 11c:	07 fe       	sbrs	r0, 7
 11e:	fd cf       	rjmp	.-6      	; 0x11a <SPI_WriteByte+0x2>
}
 120:	08 95       	ret

00000122 <resetDAC>:

void resetDAC(int8_t chan)//_____________bipolar!!! and <<4 larger
{
    // static int16_t x;
	//x+=2048;
	PORTD&=~(1<<SYNC);
 122:	5b 98       	cbi	0x0b, 3	; 11
	//send8 = (x >> 8);
	// send8 = 0b00001000;
	// send8|=(chan_addrs[chan]);
	SPI_WriteByte(0b00001000|chan_addrs[chan]);
 124:	e8 2f       	mov	r30, r24
 126:	ff 27       	eor	r31, r31
 128:	e7 fd       	sbrc	r30, 7
 12a:	f0 95       	com	r31
 12c:	ee 5f       	subi	r30, 0xFE	; 254
 12e:	fe 4f       	sbci	r31, 0xFE	; 254
 130:	80 81       	ld	r24, Z
 132:	88 60       	ori	r24, 0x08	; 8
 134:	90 e0       	ldi	r25, 0x00	; 0
 136:	0e 94 8c 00 	call	0x118	; 0x118 <SPI_WriteByte>
	// send8=x;
	SPI_WriteByte(0);		
 13a:	80 e0       	ldi	r24, 0x00	; 0
 13c:	90 e0       	ldi	r25, 0x00	; 0
 13e:	0e 94 8c 00 	call	0x118	; 0x118 <SPI_WriteByte>
	PORTD|=(1<<SYNC);
 142:	5b 9a       	sbi	0x0b, 3	; 11
}
 144:	08 95       	ret

00000146 <setDAC>:

//функция управления ЦАПом 
// при этом, управление регистром LDAC должно использоваться 
//вне функции в перспепктиве создания многоканальной схемы
void setDAC(int16_t x,int8_t chan)//_____________bipolar!!! and <<4 larger
{
 146:	0f 93       	push	r16
 148:	1f 93       	push	r17
 14a:	e6 2f       	mov	r30, r22


	x=-x;
 14c:	00 27       	eor	r16, r16
 14e:	11 27       	eor	r17, r17
 150:	08 1b       	sub	r16, r24
 152:	19 0b       	sbc	r17, r25
	x+=2048;
 154:	00 50       	subi	r16, 0x00	; 0
 156:	18 4f       	sbci	r17, 0xF8	; 248
	PORTD&=~(1<<SYNC);
 158:	5b 98       	cbi	0x0b, 3	; 11
	send8 = (x >> 8);
	send8 &= 0b00001111;
	send8|=(chan_addrs[chan]);
 15a:	81 2f       	mov	r24, r17
 15c:	99 27       	eor	r25, r25
 15e:	87 fd       	sbrc	r24, 7
 160:	9a 95       	dec	r25
 162:	8f 70       	andi	r24, 0x0F	; 15
 164:	ff 27       	eor	r31, r31
 166:	e7 fd       	sbrc	r30, 7
 168:	f0 95       	com	r31
 16a:	ee 5f       	subi	r30, 0xFE	; 254
 16c:	fe 4f       	sbci	r31, 0xFE	; 254
 16e:	20 81       	ld	r18, Z
 170:	82 2b       	or	r24, r18
 172:	80 93 40 01 	sts	0x0140, r24
	SPI_WriteByte(send8);
 176:	90 e0       	ldi	r25, 0x00	; 0
 178:	0e 94 8c 00 	call	0x118	; 0x118 <SPI_WriteByte>
	send8=x;
 17c:	00 93 40 01 	sts	0x0140, r16
	SPI_WriteByte(send8);		
 180:	80 2f       	mov	r24, r16
 182:	90 e0       	ldi	r25, 0x00	; 0
 184:	0e 94 8c 00 	call	0x118	; 0x118 <SPI_WriteByte>
	PORTD|=(1<<SYNC);
 188:	5b 9a       	sbi	0x0b, 3	; 11

}
 18a:	1f 91       	pop	r17
 18c:	0f 91       	pop	r16
 18e:	08 95       	ret

00000190 <set_reverser>:
		else
			PORTB&=~(1<<4);
		break;

	}
}
 190:	08 95       	ret

00000192 <main>:



void main(void)
{
 192:	1f 93       	push	r17
	BIG_STAT_N = STAT_N*STAT_CYCLE;
 194:	80 91 01 01 	lds	r24, 0x0101
 198:	90 91 00 01 	lds	r25, 0x0100
 19c:	89 9f       	mul	r24, r25
 19e:	80 2d       	mov	r24, r0
 1a0:	11 24       	eor	r1, r1
 1a2:	80 93 47 01 	sts	0x0147, r24
 1a6:	e2 e0       	ldi	r30, 0x02	; 2
 1a8:	f1 e0       	ldi	r31, 0x01	; 1
	
	for (uint8_t i=0; i<8;i++)
		chan_addrs[i]=chan_addrs[i]<<4;
 1aa:	80 81       	ld	r24, Z
 1ac:	82 95       	swap	r24
 1ae:	80 7f       	andi	r24, 0xF0	; 240
 1b0:	81 93       	st	Z+, r24

void main(void)
{
	BIG_STAT_N = STAT_N*STAT_CYCLE;
	
	for (uint8_t i=0; i<8;i++)
 1b2:	81 e0       	ldi	r24, 0x01	; 1
 1b4:	ea 30       	cpi	r30, 0x0A	; 10
 1b6:	f8 07       	cpc	r31, r24
 1b8:	c1 f7       	brne	.-16     	; 0x1aa <main+0x18>
		chan_addrs[i]=chan_addrs[i]<<4;
	
	PORTC|=0b00000000;
 1ba:	88 b1       	in	r24, 0x08	; 8
 1bc:	88 b9       	out	0x08, r24	; 8
	DDRC= 0b00011110;
 1be:	8e e1       	ldi	r24, 0x1E	; 30
 1c0:	87 b9       	out	0x07, r24	; 7
	DDRD =0b11111110;
 1c2:	8e ef       	ldi	r24, 0xFE	; 254
 1c4:	8a b9       	out	0x0a, r24	; 10
	//PORTD|=0b00100000;	
	DDRB= 0b00011111;
 1c6:	8f e1       	ldi	r24, 0x1F	; 31
 1c8:	84 b9       	out	0x04, r24	; 4
	sei();
 1ca:	78 94       	sei
}

//функция инициализации SPI
void SPI_MasterInit()
{
	DDR_SPI = (1<<DD_MOSI)|(1<<DD_SCK)|(1<<SPI_SS);
 1cc:	8c e2       	ldi	r24, 0x2C	; 44
 1ce:	84 b9       	out	0x04, r24	; 4
	SPCR = (1<<SPE)|(0<<DORD)|(1<<MSTR)|(1<<CPOL)|(0<<CPHA);//|(1<<SPR1)|(0<<SPR0);
 1d0:	88 e5       	ldi	r24, 0x58	; 88
 1d2:	8c bd       	out	0x2c, r24	; 44

//функция инициализации таймера
// Таймер используется для формирования временной последовательности значений, формируемых с ЦАПа
void timer_init()
{
    TCCR2A = 0;        
 1d4:	10 92 b0 00 	sts	0x00B0, r1
    TCCR2B = 0;
 1d8:	10 92 b1 00 	sts	0x00B1, r1
    
    TCCR2B |= (1<<CS21) ;    
 1dc:	80 91 b1 00 	lds	r24, 0x00B1
 1e0:	82 60       	ori	r24, 0x02	; 2
 1e2:	80 93 b1 00 	sts	0x00B1, r24
    TIMSK2 = (1 << TOIE2);
 1e6:	81 e0       	ldi	r24, 0x01	; 1
 1e8:	80 93 70 00 	sts	0x0070, r24
}

//функция инициализации UART-интерфейса
void uart_init(unsigned int ubrr)
{	
	UBRR0H = (unsigned char)(ubrr>>8);
 1ec:	10 92 c5 00 	sts	0x00C5, r1
	UBRR0L = (unsigned char)ubrr;
 1f0:	83 e3       	ldi	r24, 0x33	; 51
 1f2:	80 93 c4 00 	sts	0x00C4, r24
	UCSR0B = (1<<RXCIE0)|(1<<RXEN0)|(1<<TXEN0);
 1f6:	88 e9       	ldi	r24, 0x98	; 152
 1f8:	80 93 c1 00 	sts	0x00C1, r24
	UCSR0C = (1<<USBS0)|(3<<UCSZ00);
 1fc:	8e e0       	ldi	r24, 0x0E	; 14
 1fe:	80 93 c2 00 	sts	0x00C2, r24
uint8_t accum_cnt;

//функция инициализаци АЦП
//АЦП используется для регистрации тока, проходящего через мемристор
void ADC_Init(){
 ADCSRA |= (1 << ADEN) // Включаем АЦП
 202:	80 91 7a 00 	lds	r24, 0x007A
 206:	83 68       	ori	r24, 0x83	; 131
 208:	80 93 7a 00 	sts	0x007A, r24
 //ADCSRA&=~(1 << ADPS1)|(1 << ADPS0)|(1 << ADPS1);
 |(1 << ADPS1)|(1 << ADPS0)|(1 << ADPS1);    // устанавливаем предделитель преобразователя на 8
 ADMUX |= (0 << REFS1)|(1 << REFS0) //выставляем опорное напряжение, как внешний ИОН
 20c:	80 91 7c 00 	lds	r24, 0x007C
 210:	80 64       	ori	r24, 0x40	; 64
 212:	80 93 7c 00 	sts	0x007C, r24
    //DDRD = 0b000001100;	
	
	uart_init(BAUDRATE);
	ADC_Init();
	
	ADCSRA |= (1 << ADSC); 
 216:	80 91 7a 00 	lds	r24, 0x007A
 21a:	80 64       	ori	r24, 0x40	; 64
 21c:	80 93 7a 00 	sts	0x007A, r24
	ADCL;
 220:	80 91 78 00 	lds	r24, 0x0078
	ADCL;
 224:	80 91 78 00 	lds	r24, 0x0078
 228:	10 e0       	ldi	r17, 0x00	; 0
		//set_reverser(i,1);
	
	//set_reverser(0,0);
	for (int i=0;i<8;i++)
	{
		setDAC(0,i);
 22a:	80 e0       	ldi	r24, 0x00	; 0
 22c:	90 e0       	ldi	r25, 0x00	; 0
 22e:	61 2f       	mov	r22, r17
 230:	0e 94 a3 00 	call	0x146	; 0x146 <setDAC>
 234:	1f 5f       	subi	r17, 0xFF	; 255

	//for(int i=0;i<8;i++)
		//set_reverser(i,1);
	
	//set_reverser(0,0);
	for (int i=0;i<8;i++)
 236:	18 30       	cpi	r17, 0x08	; 8
 238:	c1 f7       	brne	.-16     	; 0x22a <main+0x98>
	{
		setDAC(0,i);
	}
	PORTD&=~(1<<LDAC);
 23a:	5a 98       	cbi	0x0b, 2	; 11
	PORTD|=(1<<LDAC);
 23c:	5a 9a       	sbi	0x0b, 2	; 11
	
	separMult();
 23e:	0e 94 83 00 	call	0x106	; 0x106 <separMult>
 242:	ff cf       	rjmp	.-2      	; 0x242 <main+0xb0>

00000244 <__vector_9>:
//главный цикл работы контроллера
//Здесь устанавливаются значения ЦАП и передаются данные на компьютер
//через UART-интерфейс
//данный участок кода повторяется при переполнении TIMER2
ISR(TIMER2_OVF_vect)
{
 244:	1f 92       	push	r1
 246:	0f 92       	push	r0
 248:	0f b6       	in	r0, 0x3f	; 63
 24a:	0f 92       	push	r0
 24c:	11 24       	eor	r1, r1
 24e:	2f 93       	push	r18
 250:	3f 93       	push	r19
 252:	4f 93       	push	r20
 254:	5f 93       	push	r21
 256:	6f 93       	push	r22
 258:	7f 93       	push	r23
 25a:	8f 93       	push	r24
 25c:	9f 93       	push	r25
 25e:	af 93       	push	r26
 260:	bf 93       	push	r27
 262:	ef 93       	push	r30
 264:	ff 93       	push	r31
	if(ctr>time_step)
 266:	20 91 3c 01 	lds	r18, 0x013C
 26a:	30 91 3d 01 	lds	r19, 0x013D
 26e:	80 91 0e 01 	lds	r24, 0x010E
 272:	90 91 0f 01 	lds	r25, 0x010F
 276:	82 17       	cp	r24, r18
 278:	93 07       	cpc	r25, r19
 27a:	0c f0       	brlt	.+2      	; 0x27e <__vector_9+0x3a>
 27c:	32 c3       	rjmp	.+1636   	; 0x8e2 <__vector_9+0x69e>
	{
		if(MD==CUSTOM)
 27e:	60 91 12 01 	lds	r22, 0x0112
 282:	66 23       	and	r22, r22
 284:	09 f0       	breq	.+2      	; 0x288 <__vector_9+0x44>
 286:	65 c0       	rjmp	.+202    	; 0x352 <__vector_9+0x10e>
		{
			if(event_cnt==(1))
 288:	20 91 38 01 	lds	r18, 0x0138
 28c:	30 91 39 01 	lds	r19, 0x0139
 290:	21 30       	cpi	r18, 0x01	; 1
 292:	31 05       	cpc	r19, r1
 294:	59 f4       	brne	.+22     	; 0x2ac <__vector_9+0x68>
			{	
			ADCL_=ADCL;
 296:	90 91 78 00 	lds	r25, 0x0078
 29a:	90 93 42 01 	sts	0x0142, r25
			ADCH_=ADCH;
 29e:	80 91 79 00 	lds	r24, 0x0079
 2a2:	80 93 44 01 	sts	0x0144, r24
			UDR0=ADCL_;			
 2a6:	90 93 c6 00 	sts	0x00C6, r25
 2aa:	1b c0       	rjmp	.+54     	; 0x2e2 <__vector_9+0x9e>
			}
			
			if(event_cnt==(2))
 2ac:	22 30       	cpi	r18, 0x02	; 2
 2ae:	31 05       	cpc	r19, r1
 2b0:	29 f4       	brne	.+10     	; 0x2bc <__vector_9+0x78>
			{	
			UDR0=ADCH_;				
 2b2:	80 91 44 01 	lds	r24, 0x0144
 2b6:	80 93 c6 00 	sts	0x00C6, r24
 2ba:	13 c0       	rjmp	.+38     	; 0x2e2 <__vector_9+0x9e>
			}
			
			
			
			if(event_cnt==0)
 2bc:	21 15       	cp	r18, r1
 2be:	31 05       	cpc	r19, r1
 2c0:	81 f4       	brne	.+32     	; 0x2e2 <__vector_9+0x9e>
			{
			UDR0=255;
 2c2:	8f ef       	ldi	r24, 0xFF	; 255
 2c4:	80 93 c6 00 	sts	0x00C6, r24
			setDAC(x16,chan);
 2c8:	80 91 1b 01 	lds	r24, 0x011B
 2cc:	90 91 1c 01 	lds	r25, 0x011C
 2d0:	60 91 26 01 	lds	r22, 0x0126
 2d4:	0e 94 a3 00 	call	0x146	; 0x146 <setDAC>
			setDAC(x16,2);
 2d8:	80 91 1b 01 	lds	r24, 0x011B
 2dc:	90 91 1c 01 	lds	r25, 0x011C
 2e0:	32 c0       	rjmp	.+100    	; 0x346 <__vector_9+0x102>
			PORTD&=~(1<<LDAC);
			PORTD|=(1<<LDAC);
			}
			
			else if(event_cnt==t1)
 2e2:	80 91 0a 01 	lds	r24, 0x010A
 2e6:	90 e0       	ldi	r25, 0x00	; 0
 2e8:	28 17       	cp	r18, r24
 2ea:	39 07       	cpc	r19, r25
 2ec:	09 f4       	brne	.+2      	; 0x2f0 <__vector_9+0xac>
 2ee:	54 c1       	rjmp	.+680    	; 0x598 <__vector_9+0x354>
				
			setDAC(0,chan);
			PORTD&=~(1<<LDAC);
			PORTD|=(1<<LDAC);
			}
			else if(event_cnt==dT)
 2f0:	80 91 3b 01 	lds	r24, 0x013B
 2f4:	90 e0       	ldi	r25, 0x00	; 0
 2f6:	28 17       	cp	r18, r24
 2f8:	39 07       	cpc	r19, r25
 2fa:	09 f4       	brne	.+2      	; 0x2fe <__vector_9+0xba>
 2fc:	38 c1       	rjmp	.+624    	; 0x56e <__vector_9+0x32a>
			setDAC(y16,chan);
			PORTD&=~(1<<LDAC);
			PORTD|=(1<<LDAC);
		
			}
			else if(event_cnt==(dT+1))
 2fe:	01 96       	adiw	r24, 0x01	; 1
 300:	28 17       	cp	r18, r24
 302:	39 07       	cpc	r19, r25
 304:	09 f4       	brne	.+2      	; 0x308 <__vector_9+0xc4>
 306:	a5 c2       	rjmp	.+1354   	; 0x852 <__vector_9+0x60e>
				ADCSRA |= (1 << ADSC); 

			else if(event_cnt==dTt2)
 308:	80 91 0c 01 	lds	r24, 0x010C
 30c:	90 e0       	ldi	r25, 0x00	; 0
 30e:	28 17       	cp	r18, r24
 310:	39 07       	cpc	r19, r25
 312:	09 f0       	breq	.+2      	; 0x316 <__vector_9+0xd2>
 314:	c0 c2       	rjmp	.+1408   	; 0x896 <__vector_9+0x652>
			{
			if ( ( UCSR0A & (1<<UDRE0)) )			
 316:	80 91 c0 00 	lds	r24, 0x00C0
 31a:	85 ff       	sbrs	r24, 5
 31c:	04 c0       	rjmp	.+8      	; 0x326 <__vector_9+0xe2>
				UDR0=_adc;	
 31e:	80 91 48 01 	lds	r24, 0x0148
 322:	80 93 c6 00 	sts	0x00C6, r24
			accum=0;
 326:	10 92 46 01 	sts	0x0146, r1
 32a:	10 92 45 01 	sts	0x0145, r1
			ADC_on=0;
 32e:	10 92 37 01 	sts	0x0137, r1
			accum_cnt=0;			
 332:	10 92 3e 01 	sts	0x013E, r1
			setDAC(0,chan);
 336:	80 e0       	ldi	r24, 0x00	; 0
 338:	90 e0       	ldi	r25, 0x00	; 0
 33a:	60 91 26 01 	lds	r22, 0x0126
 33e:	0e 94 a3 00 	call	0x146	; 0x146 <setDAC>
			setDAC(0,2);
 342:	80 e0       	ldi	r24, 0x00	; 0
 344:	90 e0       	ldi	r25, 0x00	; 0
 346:	62 e0       	ldi	r22, 0x02	; 2
 348:	0e 94 a3 00 	call	0x146	; 0x146 <setDAC>
			PORTD&=~(1<<LDAC);
 34c:	5a 98       	cbi	0x0b, 2	; 11
			PORTD|=(1<<LDAC);
 34e:	5a 9a       	sbi	0x0b, 2	; 11
 350:	a2 c2       	rjmp	.+1348   	; 0x896 <__vector_9+0x652>

			}		

		}
		else if(MD==VAC)
 352:	61 30       	cpi	r22, 0x01	; 1
 354:	09 f0       	breq	.+2      	; 0x358 <__vector_9+0x114>
 356:	7c c0       	rjmp	.+248    	; 0x450 <__vector_9+0x20c>
		{			
			static int i=0;
			i++;						
 358:	80 91 35 01 	lds	r24, 0x0135
 35c:	90 91 36 01 	lds	r25, 0x0136
 360:	01 96       	adiw	r24, 0x01	; 1
 362:	90 93 36 01 	sts	0x0136, r25
 366:	80 93 35 01 	sts	0x0135, r24
			
			switch(UDP_cnt)
 36a:	80 91 4e 01 	lds	r24, 0x014E
 36e:	81 30       	cpi	r24, 0x01	; 1
 370:	79 f0       	breq	.+30     	; 0x390 <__vector_9+0x14c>
 372:	81 30       	cpi	r24, 0x01	; 1
 374:	30 f0       	brcs	.+12     	; 0x382 <__vector_9+0x13e>
 376:	82 30       	cpi	r24, 0x02	; 2
 378:	f1 f0       	breq	.+60     	; 0x3b6 <__vector_9+0x172>
 37a:	83 30       	cpi	r24, 0x03	; 3
 37c:	09 f0       	breq	.+2      	; 0x380 <__vector_9+0x13c>
 37e:	61 c0       	rjmp	.+194    	; 0x442 <__vector_9+0x1fe>
 380:	1f c0       	rjmp	.+62     	; 0x3c0 <__vector_9+0x17c>
			{
				case 0:					
				 ADCSRA |= (1 << ADSC); 
 382:	80 91 7a 00 	lds	r24, 0x007A
 386:	80 64       	ori	r24, 0x40	; 64
 388:	80 93 7a 00 	sts	0x007A, r24
				UDR0=255;
 38c:	8f ef       	ldi	r24, 0xFF	; 255
 38e:	15 c0       	rjmp	.+42     	; 0x3ba <__vector_9+0x176>
				break;
				
				
				
				case 1:	
				ADCL__=	ADCL_;
 390:	80 91 42 01 	lds	r24, 0x0142
 394:	80 93 3f 01 	sts	0x013F, r24
				ADCH__ = ADCH_;
 398:	80 91 44 01 	lds	r24, 0x0144
 39c:	80 93 3a 01 	sts	0x013A, r24
				ADCL_=ADCL;
 3a0:	90 91 78 00 	lds	r25, 0x0078
 3a4:	90 93 42 01 	sts	0x0142, r25
				ADCH_=ADCH;
 3a8:	80 91 79 00 	lds	r24, 0x0079
 3ac:	80 93 44 01 	sts	0x0144, r24
				
				UDR0=ADCL_;
 3b0:	90 93 c6 00 	sts	0x00C6, r25
 3b4:	46 c0       	rjmp	.+140    	; 0x442 <__vector_9+0x1fe>
				break;
				
				case 2:
				UDR0=ADCH_;
 3b6:	80 91 44 01 	lds	r24, 0x0144
 3ba:	80 93 c6 00 	sts	0x00C6, r24
 3be:	41 c0       	rjmp	.+130    	; 0x442 <__vector_9+0x1fe>
				
				
				case 3:
								
				//VAC16_HH=VAC16_H;
				VAC16_H=VAC16;
 3c0:	20 91 13 01 	lds	r18, 0x0113
 3c4:	30 91 14 01 	lds	r19, 0x0114
 3c8:	30 93 16 01 	sts	0x0116, r19
 3cc:	20 93 15 01 	sts	0x0115, r18
				
				if(pos_phase)
 3d0:	80 91 0d 01 	lds	r24, 0x010D
 3d4:	88 23       	and	r24, r24
 3d6:	81 f0       	breq	.+32     	; 0x3f8 <__vector_9+0x1b4>
				{
							//PORTC=0b00000010;
		//PORTB=0b00011111;
		//PORTD=0b11101100;
					VAC16+=32;
 3d8:	20 5e       	subi	r18, 0xE0	; 224
 3da:	3f 4f       	sbci	r19, 0xFF	; 255
 3dc:	30 93 14 01 	sts	0x0114, r19
 3e0:	20 93 13 01 	sts	0x0113, r18
					if(VAC16>(y16-1))
 3e4:	80 91 1d 01 	lds	r24, 0x011D
 3e8:	90 91 1e 01 	lds	r25, 0x011E
 3ec:	28 17       	cp	r18, r24
 3ee:	39 07       	cpc	r19, r25
 3f0:	b4 f0       	brlt	.+44     	; 0x41e <__vector_9+0x1da>
					{
					pos_phase=0;				
 3f2:	10 92 0d 01 	sts	0x010D, r1
 3f6:	13 c0       	rjmp	.+38     	; 0x41e <__vector_9+0x1da>
				else
				{
					//PORTB=0;
		//PORTC=0;
		//PORTD=0;
					VAC16-=32;
 3f8:	c9 01       	movw	r24, r18
 3fa:	80 97       	sbiw	r24, 0x20	; 32
 3fc:	90 93 14 01 	sts	0x0114, r25
 400:	80 93 13 01 	sts	0x0113, r24
					if(VAC16<(-x16+1))
 404:	21 e0       	ldi	r18, 0x01	; 1
 406:	30 e0       	ldi	r19, 0x00	; 0
 408:	40 91 1b 01 	lds	r20, 0x011B
 40c:	50 91 1c 01 	lds	r21, 0x011C
 410:	24 1b       	sub	r18, r20
 412:	35 0b       	sbc	r19, r21
 414:	82 17       	cp	r24, r18
 416:	93 07       	cpc	r25, r19
 418:	14 f4       	brge	.+4      	; 0x41e <__vector_9+0x1da>
					{
					pos_phase=1;									
 41a:	60 93 0d 01 	sts	0x010D, r22
					}
				}	
				
				
				
				UDR0=VAC16>>4;
 41e:	80 91 13 01 	lds	r24, 0x0113
 422:	90 91 14 01 	lds	r25, 0x0114
 426:	9c 01       	movw	r18, r24
 428:	a4 e0       	ldi	r26, 0x04	; 4
 42a:	35 95       	asr	r19
 42c:	27 95       	ror	r18
 42e:	aa 95       	dec	r26
 430:	e1 f7       	brne	.-8      	; 0x42a <__vector_9+0x1e6>
 432:	20 93 c6 00 	sts	0x00C6, r18
				setDAC(VAC16,chan);
 436:	60 91 26 01 	lds	r22, 0x0126
 43a:	0e 94 a3 00 	call	0x146	; 0x146 <setDAC>
				//setDAC(VAC16,3);
				//setDAC(VAC16,4);
				//setDAC(VAC16,5);
				//setDAC(VAC16,6);
				//setDAC(VAC16,7);				
				PORTD&=~(1<<LDAC);
 43e:	5a 98       	cbi	0x0b, 2	; 11
				PORTD|=(1<<LDAC);
 440:	5a 9a       	sbi	0x0b, 2	; 11
				
			}
						
			
			UDP_cnt++;
			UDP_cnt%=4;
 442:	80 91 4e 01 	lds	r24, 0x014E
 446:	8f 5f       	subi	r24, 0xFF	; 255
 448:	83 70       	andi	r24, 0x03	; 3
 44a:	80 93 4e 01 	sts	0x014E, r24
 44e:	23 c2       	rjmp	.+1094   	; 0x896 <__vector_9+0x652>

			
		}
		else if(MD==PROGRAM)
 450:	62 30       	cpi	r22, 0x02	; 2
 452:	09 f0       	breq	.+2      	; 0x456 <__vector_9+0x212>
 454:	a6 c0       	rjmp	.+332    	; 0x5a2 <__vector_9+0x35e>
		{
			T=16;
 456:	80 e1       	ldi	r24, 0x10	; 16
 458:	80 93 41 01 	sts	0x0141, r24
			static uint16_t adc_h;
			
			if(event_cnt==(1))
 45c:	40 91 38 01 	lds	r20, 0x0138
 460:	50 91 39 01 	lds	r21, 0x0139
 464:	41 30       	cpi	r20, 0x01	; 1
 466:	51 05       	cpc	r21, r1
 468:	29 f4       	brne	.+10     	; 0x474 <__vector_9+0x230>
			{	
				UDR0=PROGRAM_done;
 46a:	80 91 25 01 	lds	r24, 0x0125
 46e:	80 93 c6 00 	sts	0x00C6, r24
 472:	77 c0       	rjmp	.+238    	; 0x562 <__vector_9+0x31e>
			}

			if(event_cnt==(2))//ADC GET 
 474:	42 30       	cpi	r20, 0x02	; 2
 476:	51 05       	cpc	r21, r1
 478:	59 f4       	brne	.+22     	; 0x490 <__vector_9+0x24c>
			{	
				ADCL_=ADCL;	
 47a:	90 91 78 00 	lds	r25, 0x0078
 47e:	90 93 42 01 	sts	0x0142, r25
				ADCH_=ADCH;
 482:	80 91 79 00 	lds	r24, 0x0079
 486:	80 93 44 01 	sts	0x0144, r24
				UDR0=ADCL_;
 48a:	90 93 c6 00 	sts	0x00C6, r25
 48e:	6c c0       	rjmp	.+216    	; 0x568 <__vector_9+0x324>
			}
			
			if(event_cnt==(3))//ADC GET CONTINUE
 490:	43 30       	cpi	r20, 0x03	; 3
 492:	51 05       	cpc	r21, r1
 494:	31 f5       	brne	.+76     	; 0x4e2 <__vector_9+0x29e>
			{	
				
				UDR0=ADCH_;
 496:	80 91 44 01 	lds	r24, 0x0144
 49a:	80 93 c6 00 	sts	0x00C6, r24
				
				_adc=(ADCL_|(ADCH_ <<8));
 49e:	38 2f       	mov	r19, r24
 4a0:	20 e0       	ldi	r18, 0x00	; 0
 4a2:	80 91 42 01 	lds	r24, 0x0142
 4a6:	90 e0       	ldi	r25, 0x00	; 0
 4a8:	82 2b       	or	r24, r18
 4aa:	93 2b       	or	r25, r19
 4ac:	90 93 49 01 	sts	0x0149, r25
 4b0:	80 93 48 01 	sts	0x0148, r24
				adc_h=((uint16_t)(512)-_adc);
 4b4:	20 e0       	ldi	r18, 0x00	; 0
 4b6:	32 e0       	ldi	r19, 0x02	; 2
 4b8:	28 1b       	sub	r18, r24
 4ba:	39 0b       	sbc	r19, r25
 4bc:	30 93 34 01 	sts	0x0134, r19
 4c0:	20 93 33 01 	sts	0x0133, r18
				
				if((adc_h)==(uint16_t)(t1))
 4c4:	80 91 0a 01 	lds	r24, 0x010A
 4c8:	90 e0       	ldi	r25, 0x00	; 0
 4ca:	28 17       	cp	r18, r24
 4cc:	39 07       	cpc	r19, r25
 4ce:	09 f0       	breq	.+2      	; 0x4d2 <__vector_9+0x28e>
 4d0:	48 c0       	rjmp	.+144    	; 0x562 <__vector_9+0x31e>
				{
					PROGRAM_done=1;
 4d2:	81 e0       	ldi	r24, 0x01	; 1
 4d4:	80 93 25 01 	sts	0x0125, r24
					prog_val=0;
 4d8:	10 92 1a 01 	sts	0x011A, r1
 4dc:	10 92 19 01 	sts	0x0119, r1
 4e0:	4b c0       	rjmp	.+150    	; 0x578 <__vector_9+0x334>
				}
			}
			
			if(event_cnt==0)
 4e2:	41 15       	cp	r20, r1
 4e4:	51 05       	cpc	r21, r1
 4e6:	e9 f5       	brne	.+122    	; 0x562 <__vector_9+0x31e>
			{
				UDR0=255;
 4e8:	8f ef       	ldi	r24, 0xFF	; 255
 4ea:	80 93 c6 00 	sts	0x00C6, r24
				
				
				prog_val+=32;
 4ee:	20 91 19 01 	lds	r18, 0x0119
 4f2:	30 91 1a 01 	lds	r19, 0x011A
 4f6:	20 5e       	subi	r18, 0xE0	; 224
 4f8:	3f 4f       	sbci	r19, 0xFF	; 255
 4fa:	30 93 1a 01 	sts	0x011A, r19
 4fe:	20 93 19 01 	sts	0x0119, r18
				
				if(prog_val==(-x16+32))
 502:	40 91 1b 01 	lds	r20, 0x011B
 506:	50 91 1c 01 	lds	r21, 0x011C
 50a:	80 e2       	ldi	r24, 0x20	; 32
 50c:	90 e0       	ldi	r25, 0x00	; 0
 50e:	84 1b       	sub	r24, r20
 510:	95 0b       	sbc	r25, r21
 512:	28 17       	cp	r18, r24
 514:	39 07       	cpc	r19, r25
 516:	29 f4       	brne	.+10     	; 0x522 <__vector_9+0x2de>
					prog_val=0;
 518:	10 92 1a 01 	sts	0x011A, r1
 51c:	10 92 19 01 	sts	0x0119, r1
 520:	13 c0       	rjmp	.+38     	; 0x548 <__vector_9+0x304>
				else
				if(prog_val>(t2<<4))
 522:	80 91 0b 01 	lds	r24, 0x010B
 526:	90 e0       	ldi	r25, 0x00	; 0
 528:	f4 e0       	ldi	r31, 0x04	; 4
 52a:	88 0f       	add	r24, r24
 52c:	99 1f       	adc	r25, r25
 52e:	fa 95       	dec	r31
 530:	e1 f7       	brne	.-8      	; 0x52a <__vector_9+0x2e6>
 532:	82 17       	cp	r24, r18
 534:	93 07       	cpc	r25, r19
 536:	44 f4       	brge	.+16     	; 0x548 <__vector_9+0x304>
					prog_val=-x16;
 538:	88 27       	eor	r24, r24
 53a:	99 27       	eor	r25, r25
 53c:	84 1b       	sub	r24, r20
 53e:	95 0b       	sbc	r25, r21
 540:	90 93 1a 01 	sts	0x011A, r25
 544:	80 93 19 01 	sts	0x0119, r24
				
				if(PROGRAM_done)
 548:	80 91 25 01 	lds	r24, 0x0125
 54c:	88 23       	and	r24, r24
 54e:	21 f0       	breq	.+8      	; 0x558 <__vector_9+0x314>
					prog_val=0;
 550:	10 92 1a 01 	sts	0x011A, r1
 554:	10 92 19 01 	sts	0x0119, r1
				
				setDAC(prog_val,chan);
 558:	80 91 19 01 	lds	r24, 0x0119
 55c:	90 91 1a 01 	lds	r25, 0x011A
 560:	1d c0       	rjmp	.+58     	; 0x59c <__vector_9+0x358>
				PORTD&=~(1<<LDAC);
				PORTD|=(1<<LDAC);
			}			
			else if(event_cnt==7)//t1
 562:	47 30       	cpi	r20, 0x07	; 7
 564:	51 05       	cpc	r21, r1
 566:	c1 f0       	breq	.+48     	; 0x598 <__vector_9+0x354>
			{
				setDAC(0,chan);
				PORTD&=~(1<<LDAC);
				PORTD|=(1<<LDAC);
			}
			else if(event_cnt==9)//dT
 568:	49 30       	cpi	r20, 0x09	; 9
 56a:	51 05       	cpc	r21, r1
 56c:	29 f4       	brne	.+10     	; 0x578 <__vector_9+0x334>
			{		
				setDAC(y16,chan);
 56e:	80 91 1d 01 	lds	r24, 0x011D
 572:	90 91 1e 01 	lds	r25, 0x011E
 576:	12 c0       	rjmp	.+36     	; 0x59c <__vector_9+0x358>
				PORTD&=~(1<<LDAC);
				PORTD|=(1<<LDAC);
			}
			else if(event_cnt==(9+1))
 578:	4a 30       	cpi	r20, 0x0A	; 10
 57a:	51 05       	cpc	r21, r1
 57c:	09 f4       	brne	.+2      	; 0x580 <__vector_9+0x33c>
 57e:	69 c1       	rjmp	.+722    	; 0x852 <__vector_9+0x60e>
				ADCSRA |= (1 << ADSC); 

			else if(event_cnt==14)//
 580:	4e 30       	cpi	r20, 0x0E	; 14
 582:	51 05       	cpc	r21, r1
 584:	09 f0       	breq	.+2      	; 0x588 <__vector_9+0x344>
 586:	87 c1       	rjmp	.+782    	; 0x896 <__vector_9+0x652>
			{
				accum=0;
 588:	10 92 46 01 	sts	0x0146, r1
 58c:	10 92 45 01 	sts	0x0145, r1
				ADC_on=0;
 590:	10 92 37 01 	sts	0x0137, r1
				accum_cnt=0;
 594:	10 92 3e 01 	sts	0x013E, r1
				
				setDAC(0,chan);
 598:	80 e0       	ldi	r24, 0x00	; 0
 59a:	90 e0       	ldi	r25, 0x00	; 0
 59c:	60 91 26 01 	lds	r22, 0x0126
 5a0:	d3 ce       	rjmp	.-602    	; 0x348 <__vector_9+0x104>
				PORTD&=~(1<<LDAC);
				PORTD|=(1<<LDAC);
			}
		}
		else if(MD == ONE_SHOT)
 5a2:	65 30       	cpi	r22, 0x05	; 5
 5a4:	09 f0       	breq	.+2      	; 0x5a8 <__vector_9+0x364>
 5a6:	5f c0       	rjmp	.+190    	; 0x666 <__vector_9+0x422>
		{
			//готовим сброс
			if(event_cnt==0)
 5a8:	80 91 38 01 	lds	r24, 0x0138
 5ac:	90 91 39 01 	lds	r25, 0x0139
 5b0:	00 97       	sbiw	r24, 0x00	; 0
 5b2:	49 f1       	breq	.+82     	; 0x606 <__vector_9+0x3c2>
			{
				separMult();
			}//сброс
			else if(event_cnt==1)
 5b4:	81 30       	cpi	r24, 0x01	; 1
 5b6:	91 05       	cpc	r25, r1
 5b8:	41 f4       	brne	.+16     	; 0x5ca <__vector_9+0x386>
			{
				setDAC(120<<4,3);
 5ba:	80 e8       	ldi	r24, 0x80	; 128
 5bc:	97 e0       	ldi	r25, 0x07	; 7
 5be:	63 e0       	ldi	r22, 0x03	; 3
 5c0:	0e 94 a3 00 	call	0x146	; 0x146 <setDAC>
				setDAC(120<<4,2);
 5c4:	80 e8       	ldi	r24, 0x80	; 128
 5c6:	97 e0       	ldi	r25, 0x07	; 7
 5c8:	be ce       	rjmp	.-644    	; 0x346 <__vector_9+0x102>
				PORTD&=~(1<<LDAC);
				PORTD|=(1<<LDAC);
			}
			else if(event_cnt==2)
 5ca:	82 30       	cpi	r24, 0x02	; 2
 5cc:	91 05       	cpc	r25, r1
 5ce:	21 f4       	brne	.+8      	; 0x5d8 <__vector_9+0x394>
			{
				setDAC(0,3);
 5d0:	80 e0       	ldi	r24, 0x00	; 0
 5d2:	90 e0       	ldi	r25, 0x00	; 0
 5d4:	63 e0       	ldi	r22, 0x03	; 3
 5d6:	b3 ce       	rjmp	.-666    	; 0x33e <__vector_9+0xfa>
				setDAC(0,2);
				PORTD&=~(1<<LDAC);
				PORTD|=(1<<LDAC);
			}		//reseted		
			else if(event_cnt==3)
 5d8:	83 30       	cpi	r24, 0x03	; 3
 5da:	91 05       	cpc	r25, r1
 5dc:	19 f4       	brne	.+6      	; 0x5e4 <__vector_9+0x3a0>
			{
				gatherMult();
 5de:	0e 94 7a 00 	call	0xf4	; 0xf4 <gatherMult>
 5e2:	59 c1       	rjmp	.+690    	; 0x896 <__vector_9+0x652>
			}
			else if(event_cnt==4)
 5e4:	84 30       	cpi	r24, 0x04	; 4
 5e6:	91 05       	cpc	r25, r1
 5e8:	29 f4       	brne	.+10     	; 0x5f4 <__vector_9+0x3b0>
			{
				setDAC(x16,3);				
 5ea:	80 91 1b 01 	lds	r24, 0x011B
 5ee:	90 91 1c 01 	lds	r25, 0x011C
 5f2:	22 c0       	rjmp	.+68     	; 0x638 <__vector_9+0x3f4>
				PORTD&=~(1<<LDAC);
				PORTD|=(1<<LDAC);
			}		
			else if(event_cnt==5)
 5f4:	85 30       	cpi	r24, 0x05	; 5
 5f6:	91 05       	cpc	r25, r1
 5f8:	e9 f0       	breq	.+58     	; 0x634 <__vector_9+0x3f0>
				setDAC(0,3);				
				PORTD&=~(1<<LDAC);
				PORTD|=(1<<LDAC);
			}	//пнули		
				//посмотрим, что вышло
			else if(event_cnt==6)
 5fa:	86 30       	cpi	r24, 0x06	; 6
 5fc:	91 05       	cpc	r25, r1
 5fe:	31 f4       	brne	.+12     	; 0x60c <__vector_9+0x3c8>
			{
				UDR0=255;
 600:	8f ef       	ldi	r24, 0xFF	; 255
 602:	80 93 c6 00 	sts	0x00C6, r24
				separMult();				
 606:	0e 94 83 00 	call	0x106	; 0x106 <separMult>
 60a:	45 c1       	rjmp	.+650    	; 0x896 <__vector_9+0x652>
			}			
			else if(event_cnt==7)
 60c:	87 30       	cpi	r24, 0x07	; 7
 60e:	91 05       	cpc	r25, r1
 610:	31 f4       	brne	.+12     	; 0x61e <__vector_9+0x3da>
			{
				setDAC(y16,3);
 612:	80 91 1d 01 	lds	r24, 0x011D
 616:	90 91 1e 01 	lds	r25, 0x011E
 61a:	63 e0       	ldi	r22, 0x03	; 3
 61c:	16 c1       	rjmp	.+556    	; 0x84a <__vector_9+0x606>
				PORTD&=~(1<<LDAC);
				PORTD|=(1<<LDAC);
				
				ADCSRA |= (1 << ADSC); 
			}	
			else if(event_cnt==9)
 61e:	89 30       	cpi	r24, 0x09	; 9
 620:	91 05       	cpc	r25, r1
 622:	09 f4       	brne	.+2      	; 0x626 <__vector_9+0x3e2>
 624:	27 c1       	rjmp	.+590    	; 0x874 <__vector_9+0x630>
				//setDAC(y16,3);
				ADCL_=ADCL;	
				ADCH_=ADCH;
				UDR0=ADCL_;
			}
			else if(event_cnt==10)
 626:	8a 30       	cpi	r24, 0x0A	; 10
 628:	91 05       	cpc	r25, r1
 62a:	41 f4       	brne	.+16     	; 0x63c <__vector_9+0x3f8>
			{
				UDR0=ADCH_; 
 62c:	80 91 44 01 	lds	r24, 0x0144
 630:	80 93 c6 00 	sts	0x00C6, r24
				
				setDAC(0,3);
 634:	80 e0       	ldi	r24, 0x00	; 0
 636:	90 e0       	ldi	r25, 0x00	; 0
 638:	63 e0       	ldi	r22, 0x03	; 3
 63a:	86 ce       	rjmp	.-756    	; 0x348 <__vector_9+0x104>
				PORTD&=~(1<<LDAC);
				PORTD|=(1<<LDAC);
			}		
			//3й просмотрен
			else if(event_cnt==11)
 63c:	8b 30       	cpi	r24, 0x0B	; 11
 63e:	91 05       	cpc	r25, r1
 640:	31 f4       	brne	.+12     	; 0x64e <__vector_9+0x40a>
			{				 
				setDAC(y16,2);
 642:	80 91 1d 01 	lds	r24, 0x011D
 646:	90 91 1e 01 	lds	r25, 0x011E
 64a:	62 e0       	ldi	r22, 0x02	; 2
 64c:	fe c0       	rjmp	.+508    	; 0x84a <__vector_9+0x606>
				PORTD&=~(1<<LDAC);
				PORTD|=(1<<LDAC);
				
				ADCSRA |= (1 << ADSC); 
			}
			else if(event_cnt==13)
 64e:	8d 30       	cpi	r24, 0x0D	; 13
 650:	91 05       	cpc	r25, r1
 652:	09 f4       	brne	.+2      	; 0x656 <__vector_9+0x412>
 654:	0f c1       	rjmp	.+542    	; 0x874 <__vector_9+0x630>
			{		
				ADCL_=ADCL;	
				ADCH_=ADCH;
				UDR0=ADCL_;
			}
			else if(event_cnt == 14)
 656:	0e 97       	sbiw	r24, 0x0e	; 14
 658:	09 f0       	breq	.+2      	; 0x65c <__vector_9+0x418>
 65a:	1d c1       	rjmp	.+570    	; 0x896 <__vector_9+0x652>
			{
				UDR0=ADCH_; 
 65c:	80 91 44 01 	lds	r24, 0x0144
 660:	80 93 c6 00 	sts	0x00C6, r24
 664:	6e ce       	rjmp	.-804    	; 0x342 <__vector_9+0xfe>
			}
			
		}
		
		
		else if(MD == ANALYZE)//5 by 5
 666:	66 30       	cpi	r22, 0x06	; 6
 668:	09 f0       	breq	.+2      	; 0x66c <__vector_9+0x428>
 66a:	15 c1       	rjmp	.+554    	; 0x896 <__vector_9+0x652>
		{
			//unset
			if(event_cnt==0)
 66c:	80 91 38 01 	lds	r24, 0x0138
 670:	90 91 39 01 	lds	r25, 0x0139
 674:	00 97       	sbiw	r24, 0x00	; 0
 676:	61 f4       	brne	.+24     	; 0x690 <__vector_9+0x44c>
			{
				setDAC(z16, chan);
 678:	80 91 1f 01 	lds	r24, 0x011F
 67c:	90 91 20 01 	lds	r25, 0x0120
 680:	60 91 26 01 	lds	r22, 0x0126
 684:	0e 94 a3 00 	call	0x146	; 0x146 <setDAC>
				PORTD&=~(1<<LDAC);
 688:	5a 98       	cbi	0x0b, 2	; 11
				PORTD|=(1<<LDAC);
 68a:	5a 9a       	sbi	0x0b, 2	; 11
				UDR0=255;
 68c:	8f ef       	ldi	r24, 0xFF	; 255
 68e:	01 c1       	rjmp	.+514    	; 0x892 <__vector_9+0x64e>
			}
			else if(event_cnt==1)
 690:	81 30       	cpi	r24, 0x01	; 1
 692:	91 05       	cpc	r25, r1
 694:	09 f4       	brne	.+2      	; 0x698 <__vector_9+0x454>
 696:	80 cf       	rjmp	.-256    	; 0x598 <__vector_9+0x354>
				setDAC(0, chan);				
				PORTD&=~(1<<LDAC);
				PORTD|=(1<<LDAC);
			}
			//create set impulse
			else if(event_cnt==3)
 698:	83 30       	cpi	r24, 0x03	; 3
 69a:	91 05       	cpc	r25, r1
 69c:	09 f0       	breq	.+2      	; 0x6a0 <__vector_9+0x45c>
 69e:	c4 c0       	rjmp	.+392    	; 0x828 <__vector_9+0x5e4>
			{
				if(an_cnt<(BIG_STAT_N))
 6a0:	40 91 27 01 	lds	r20, 0x0127
 6a4:	50 91 28 01 	lds	r21, 0x0128
 6a8:	20 91 47 01 	lds	r18, 0x0147
 6ac:	82 2f       	mov	r24, r18
 6ae:	90 e0       	ldi	r25, 0x00	; 0
 6b0:	48 17       	cp	r20, r24
 6b2:	59 07       	cpc	r21, r25
 6b4:	18 f4       	brcc	.+6      	; 0x6bc <__vector_9+0x478>
				{
					STAT_V_step=0;					 
 6b6:	10 92 23 01 	sts	0x0123, r1
 6ba:	23 c0       	rjmp	.+70     	; 0x702 <__vector_9+0x4be>
				}
				else if(an_cnt<(BIG_STAT_N*2))
 6bc:	82 2f       	mov	r24, r18
 6be:	90 e0       	ldi	r25, 0x00	; 0
 6c0:	9c 01       	movw	r18, r24
 6c2:	22 0f       	add	r18, r18
 6c4:	33 1f       	adc	r19, r19
 6c6:	42 17       	cp	r20, r18
 6c8:	53 07       	cpc	r21, r19
 6ca:	10 f4       	brcc	.+4      	; 0x6d0 <__vector_9+0x48c>
				{
					STAT_V_step=1;
 6cc:	81 e0       	ldi	r24, 0x01	; 1
 6ce:	17 c0       	rjmp	.+46     	; 0x6fe <__vector_9+0x4ba>
				}
				else if(an_cnt<(BIG_STAT_N*3))
 6d0:	28 0f       	add	r18, r24
 6d2:	39 1f       	adc	r19, r25
 6d4:	42 17       	cp	r20, r18
 6d6:	53 07       	cpc	r21, r19
 6d8:	10 f4       	brcc	.+4      	; 0x6de <__vector_9+0x49a>
				{
					STAT_V_step=2;
 6da:	82 e0       	ldi	r24, 0x02	; 2
 6dc:	10 c0       	rjmp	.+32     	; 0x6fe <__vector_9+0x4ba>
				}
				else if(an_cnt<(BIG_STAT_N*4))
 6de:	9c 01       	movw	r18, r24
 6e0:	22 0f       	add	r18, r18
 6e2:	33 1f       	adc	r19, r19
 6e4:	22 0f       	add	r18, r18
 6e6:	33 1f       	adc	r19, r19
 6e8:	42 17       	cp	r20, r18
 6ea:	53 07       	cpc	r21, r19
 6ec:	10 f4       	brcc	.+4      	; 0x6f2 <__vector_9+0x4ae>
				{
					STAT_V_step=3;
 6ee:	83 e0       	ldi	r24, 0x03	; 3
 6f0:	06 c0       	rjmp	.+12     	; 0x6fe <__vector_9+0x4ba>
				}
				else if(an_cnt<(BIG_STAT_N*5))
 6f2:	28 0f       	add	r18, r24
 6f4:	39 1f       	adc	r19, r25
 6f6:	42 17       	cp	r20, r18
 6f8:	53 07       	cpc	r21, r19
 6fa:	18 f4       	brcc	.+6      	; 0x702 <__vector_9+0x4be>
				{
					STAT_V_step=4;
 6fc:	84 e0       	ldi	r24, 0x04	; 4
 6fe:	80 93 23 01 	sts	0x0123, r24
				}////////////						
				//setDAC(x16, chan);
				UDR0=STAT_V_step;
 702:	20 91 23 01 	lds	r18, 0x0123
 706:	20 93 c6 00 	sts	0x00C6, r18
				x16_grad = (-(STAT_V_step+1)*16 )<<4;
 70a:	30 e0       	ldi	r19, 0x00	; 0
 70c:	20 95       	com	r18
 70e:	30 95       	com	r19
 710:	80 e0       	ldi	r24, 0x00	; 0
 712:	80 93 4a 01 	sts	0x014A, r24
 716:	20 93 4b 01 	sts	0x014B, r18
				setDAC(x16_grad, chan);
 71a:	92 2f       	mov	r25, r18
 71c:	60 91 26 01 	lds	r22, 0x0126
 720:	0e 94 a3 00 	call	0x146	; 0x146 <setDAC>
				PORTD&=~(1<<LDAC);
 724:	5a 98       	cbi	0x0b, 2	; 11
				PORTD|=(1<<LDAC);
 726:	5a 9a       	sbi	0x0b, 2	; 11
				
				
				if(an_cnt_fast<(STAT_N))
 728:	40 91 29 01 	lds	r20, 0x0129
 72c:	50 91 2a 01 	lds	r21, 0x012A
 730:	80 91 00 01 	lds	r24, 0x0100
 734:	90 e0       	ldi	r25, 0x00	; 0
 736:	48 17       	cp	r20, r24
 738:	59 07       	cpc	r21, r25
 73a:	18 f4       	brcc	.+6      	; 0x742 <__vector_9+0x4fe>
				{
					STAT_dt_step=0;									
 73c:	10 92 22 01 	sts	0x0122, r1
 740:	49 c0       	rjmp	.+146    	; 0x7d4 <__vector_9+0x590>
				}
				else if(an_cnt_fast<(STAT_N*2))
 742:	9c 01       	movw	r18, r24
 744:	22 0f       	add	r18, r18
 746:	33 1f       	adc	r19, r19
 748:	42 17       	cp	r20, r18
 74a:	53 07       	cpc	r21, r19
 74c:	60 f4       	brcc	.+24     	; 0x766 <__vector_9+0x522>
				{
					STAT_dt_step=1;
 74e:	81 e0       	ldi	r24, 0x01	; 1
 750:	80 93 22 01 	sts	0x0122, r24
 754:	80 e0       	ldi	r24, 0x00	; 0
 756:	90 e0       	ldi	r25, 0x00	; 0
					for(int i=0;i<40;i++)//28
					{
					PORTD&=~(1<<LDAC);
 758:	5a 98       	cbi	0x0b, 2	; 11
					PORTD|=(1<<LDAC);
 75a:	5a 9a       	sbi	0x0b, 2	; 11
					STAT_dt_step=0;									
				}
				else if(an_cnt_fast<(STAT_N*2))
				{
					STAT_dt_step=1;
					for(int i=0;i<40;i++)//28
 75c:	01 96       	adiw	r24, 0x01	; 1
 75e:	88 32       	cpi	r24, 0x28	; 40
 760:	91 05       	cpc	r25, r1
 762:	d1 f7       	brne	.-12     	; 0x758 <__vector_9+0x514>
 764:	37 c0       	rjmp	.+110    	; 0x7d4 <__vector_9+0x590>
					{
					PORTD&=~(1<<LDAC);
					PORTD|=(1<<LDAC);
					}
				}
				else if(an_cnt_fast<(STAT_N*3))
 766:	28 0f       	add	r18, r24
 768:	39 1f       	adc	r19, r25
 76a:	42 17       	cp	r20, r18
 76c:	53 07       	cpc	r21, r19
 76e:	60 f4       	brcc	.+24     	; 0x788 <__vector_9+0x544>
				{
					STAT_dt_step=2;
 770:	82 e0       	ldi	r24, 0x02	; 2
 772:	80 93 22 01 	sts	0x0122, r24
 776:	80 e0       	ldi	r24, 0x00	; 0
 778:	90 e0       	ldi	r25, 0x00	; 0
					for(int i=0;i<160;i++)
					{
					PORTD&=~(1<<LDAC);
 77a:	5a 98       	cbi	0x0b, 2	; 11
					PORTD|=(1<<LDAC);
 77c:	5a 9a       	sbi	0x0b, 2	; 11
					}
				}
				else if(an_cnt_fast<(STAT_N*3))
				{
					STAT_dt_step=2;
					for(int i=0;i<160;i++)
 77e:	01 96       	adiw	r24, 0x01	; 1
 780:	80 3a       	cpi	r24, 0xA0	; 160
 782:	91 05       	cpc	r25, r1
 784:	d1 f7       	brne	.-12     	; 0x77a <__vector_9+0x536>
 786:	26 c0       	rjmp	.+76     	; 0x7d4 <__vector_9+0x590>
					{
					PORTD&=~(1<<LDAC);
					PORTD|=(1<<LDAC);
					}
				}
				else if(an_cnt_fast<(STAT_N*4))
 788:	88 0f       	add	r24, r24
 78a:	99 1f       	adc	r25, r25
 78c:	88 0f       	add	r24, r24
 78e:	99 1f       	adc	r25, r25
 790:	48 17       	cp	r20, r24
 792:	59 07       	cpc	r21, r25
 794:	68 f4       	brcc	.+26     	; 0x7b0 <__vector_9+0x56c>
				{
					STAT_dt_step=3;
 796:	83 e0       	ldi	r24, 0x03	; 3
 798:	80 93 22 01 	sts	0x0122, r24
 79c:	80 e0       	ldi	r24, 0x00	; 0
 79e:	90 e0       	ldi	r25, 0x00	; 0
					for(int i=0;i<640;i++)
					{
					PORTD&=~(1<<LDAC);
 7a0:	5a 98       	cbi	0x0b, 2	; 11
					PORTD|=(1<<LDAC);
 7a2:	5a 9a       	sbi	0x0b, 2	; 11
					}
				}
				else if(an_cnt_fast<(STAT_N*4))
				{
					STAT_dt_step=3;
					for(int i=0;i<640;i++)
 7a4:	01 96       	adiw	r24, 0x01	; 1
 7a6:	22 e0       	ldi	r18, 0x02	; 2
 7a8:	80 38       	cpi	r24, 0x80	; 128
 7aa:	92 07       	cpc	r25, r18
 7ac:	c9 f7       	brne	.-14     	; 0x7a0 <__vector_9+0x55c>
 7ae:	12 c0       	rjmp	.+36     	; 0x7d4 <__vector_9+0x590>
					{
					PORTD&=~(1<<LDAC);
					PORTD|=(1<<LDAC);
					}
				}
				else if(an_cnt_fast<(BIG_STAT_N))
 7b0:	80 91 47 01 	lds	r24, 0x0147
 7b4:	90 e0       	ldi	r25, 0x00	; 0
 7b6:	48 17       	cp	r20, r24
 7b8:	59 07       	cpc	r21, r25
 7ba:	60 f4       	brcc	.+24     	; 0x7d4 <__vector_9+0x590>
				{
					STAT_dt_step=4;
 7bc:	84 e0       	ldi	r24, 0x04	; 4
 7be:	80 93 22 01 	sts	0x0122, r24
 7c2:	80 e0       	ldi	r24, 0x00	; 0
 7c4:	90 e0       	ldi	r25, 0x00	; 0
					for(int i=0;i<2560;i++)
					{
					PORTD&=~(1<<LDAC);
 7c6:	5a 98       	cbi	0x0b, 2	; 11
					PORTD|=(1<<LDAC);
 7c8:	5a 9a       	sbi	0x0b, 2	; 11
					}
				}
				else if(an_cnt_fast<(BIG_STAT_N))
				{
					STAT_dt_step=4;
					for(int i=0;i<2560;i++)
 7ca:	01 96       	adiw	r24, 0x01	; 1
 7cc:	2a e0       	ldi	r18, 0x0A	; 10
 7ce:	80 30       	cpi	r24, 0x00	; 0
 7d0:	92 07       	cpc	r25, r18
 7d2:	c9 f7       	brne	.-14     	; 0x7c6 <__vector_9+0x582>
					PORTD|=(1<<LDAC);
					}
				}////////////////
									
				
				resetDAC(chan);
 7d4:	80 91 26 01 	lds	r24, 0x0126
 7d8:	0e 94 91 00 	call	0x122	; 0x122 <resetDAC>
				PORTD&=~(1<<LDAC);
 7dc:	5a 98       	cbi	0x0b, 2	; 11
				PORTD|=(1<<LDAC);				
 7de:	5a 9a       	sbi	0x0b, 2	; 11
				
				an_cnt++; // upper				
 7e0:	80 91 27 01 	lds	r24, 0x0127
 7e4:	90 91 28 01 	lds	r25, 0x0128
 7e8:	01 96       	adiw	r24, 0x01	; 1
 7ea:	90 93 28 01 	sts	0x0128, r25
 7ee:	80 93 27 01 	sts	0x0127, r24
				if(an_cnt>(BIG_STAT_N*5)) an_cnt=0; // lower
 7f2:	20 91 47 01 	lds	r18, 0x0147
 7f6:	45 e0       	ldi	r20, 0x05	; 5
 7f8:	24 9f       	mul	r18, r20
 7fa:	90 01       	movw	r18, r0
 7fc:	11 24       	eor	r1, r1
 7fe:	28 17       	cp	r18, r24
 800:	39 07       	cpc	r19, r25
 802:	20 f4       	brcc	.+8      	; 0x80c <__vector_9+0x5c8>
 804:	10 92 28 01 	sts	0x0128, r1
 808:	10 92 27 01 	sts	0x0127, r1
				
				an_cnt_fast = an_cnt%BIG_STAT_N;
 80c:	60 91 47 01 	lds	r22, 0x0147
 810:	80 91 27 01 	lds	r24, 0x0127
 814:	90 91 28 01 	lds	r25, 0x0128
 818:	70 e0       	ldi	r23, 0x00	; 0
 81a:	0e 94 6a 05 	call	0xad4	; 0xad4 <__udivmodhi4>
 81e:	90 93 2a 01 	sts	0x012A, r25
 822:	80 93 29 01 	sts	0x0129, r24
 826:	37 c0       	rjmp	.+110    	; 0x896 <__vector_9+0x652>
			}
			else if(event_cnt==4)
 828:	84 30       	cpi	r24, 0x04	; 4
 82a:	91 05       	cpc	r25, r1
 82c:	29 f4       	brne	.+10     	; 0x838 <__vector_9+0x5f4>
			{
				UDR0=STAT_dt_step;
 82e:	80 91 22 01 	lds	r24, 0x0122
 832:	80 93 c6 00 	sts	0x00C6, r24
 836:	b0 ce       	rjmp	.-672    	; 0x598 <__vector_9+0x354>
				setDAC(0, chan);
				PORTD&=~(1<<LDAC);
				PORTD|=(1<<LDAC);
			}
			else if(event_cnt==6)//start measure
 838:	86 30       	cpi	r24, 0x06	; 6
 83a:	91 05       	cpc	r25, r1
 83c:	81 f4       	brne	.+32     	; 0x85e <__vector_9+0x61a>
			{
				setDAC(y16, chan);
 83e:	80 91 1d 01 	lds	r24, 0x011D
 842:	90 91 1e 01 	lds	r25, 0x011E
 846:	60 91 26 01 	lds	r22, 0x0126
 84a:	0e 94 a3 00 	call	0x146	; 0x146 <setDAC>
				PORTD&=~(1<<LDAC);
 84e:	5a 98       	cbi	0x0b, 2	; 11
				PORTD|=(1<<LDAC);
 850:	5a 9a       	sbi	0x0b, 2	; 11
				ADCSRA |= (1 << ADSC); 
 852:	80 91 7a 00 	lds	r24, 0x007A
 856:	80 64       	ori	r24, 0x40	; 64
 858:	80 93 7a 00 	sts	0x007A, r24
 85c:	1c c0       	rjmp	.+56     	; 0x896 <__vector_9+0x652>
				
			}
			else if(event_cnt==7)
 85e:	87 30       	cpi	r24, 0x07	; 7
 860:	91 05       	cpc	r25, r1
 862:	99 f4       	brne	.+38     	; 0x88a <__vector_9+0x646>
			{
				setDAC(0, chan);
 864:	80 e0       	ldi	r24, 0x00	; 0
 866:	90 e0       	ldi	r25, 0x00	; 0
 868:	60 91 26 01 	lds	r22, 0x0126
 86c:	0e 94 a3 00 	call	0x146	; 0x146 <setDAC>
				PORTD&=~(1<<LDAC);
 870:	5a 98       	cbi	0x0b, 2	; 11
				PORTD|=(1<<LDAC);
 872:	5a 9a       	sbi	0x0b, 2	; 11
				
				ADCL_=ADCL;	
 874:	90 91 78 00 	lds	r25, 0x0078
 878:	90 93 42 01 	sts	0x0142, r25
				ADCH_=ADCH;
 87c:	80 91 79 00 	lds	r24, 0x0079
 880:	80 93 44 01 	sts	0x0144, r24
				UDR0=ADCL_;
 884:	90 93 c6 00 	sts	0x00C6, r25
 888:	06 c0       	rjmp	.+12     	; 0x896 <__vector_9+0x652>
			}
			else if(event_cnt==8)
 88a:	08 97       	sbiw	r24, 0x08	; 8
 88c:	21 f4       	brne	.+8      	; 0x896 <__vector_9+0x652>
			{
				UDR0=ADCH_;
 88e:	80 91 44 01 	lds	r24, 0x0144
 892:	80 93 c6 00 	sts	0x00C6, r24
		}
		
		
		
		
		ctr=0;
 896:	10 92 3d 01 	sts	0x013D, r1
 89a:	10 92 3c 01 	sts	0x013C, r1
		
		
		if(MD!=ONE_SHOT)
 89e:	80 91 12 01 	lds	r24, 0x0112
 8a2:	20 91 38 01 	lds	r18, 0x0138
 8a6:	30 91 39 01 	lds	r19, 0x0139
 8aa:	85 30       	cpi	r24, 0x05	; 5
 8ac:	89 f0       	breq	.+34     	; 0x8d0 <__vector_9+0x68c>
		{
		event_cnt++;
 8ae:	2f 5f       	subi	r18, 0xFF	; 255
 8b0:	3f 4f       	sbci	r19, 0xFF	; 255
 8b2:	30 93 39 01 	sts	0x0139, r19
 8b6:	20 93 38 01 	sts	0x0138, r18
		if(event_cnt>T)
 8ba:	80 91 41 01 	lds	r24, 0x0141
 8be:	90 e0       	ldi	r25, 0x00	; 0
 8c0:	82 17       	cp	r24, r18
 8c2:	93 07       	cpc	r25, r19
 8c4:	74 f4       	brge	.+28     	; 0x8e2 <__vector_9+0x69e>
			event_cnt=0;
 8c6:	10 92 39 01 	sts	0x0139, r1
 8ca:	10 92 38 01 	sts	0x0138, r1
 8ce:	09 c0       	rjmp	.+18     	; 0x8e2 <__vector_9+0x69e>
		}
		else
		{
			if(event_cnt<30)
 8d0:	2e 31       	cpi	r18, 0x1E	; 30
 8d2:	31 05       	cpc	r19, r1
 8d4:	34 f4       	brge	.+12     	; 0x8e2 <__vector_9+0x69e>
				event_cnt++;			
 8d6:	2f 5f       	subi	r18, 0xFF	; 255
 8d8:	3f 4f       	sbci	r19, 0xFF	; 255
 8da:	30 93 39 01 	sts	0x0139, r19
 8de:	20 93 38 01 	sts	0x0138, r18
		}
	}
	ctr++;
 8e2:	80 91 3c 01 	lds	r24, 0x013C
 8e6:	90 91 3d 01 	lds	r25, 0x013D
 8ea:	01 96       	adiw	r24, 0x01	; 1
 8ec:	90 93 3d 01 	sts	0x013D, r25
 8f0:	80 93 3c 01 	sts	0x013C, r24
}
 8f4:	ff 91       	pop	r31
 8f6:	ef 91       	pop	r30
 8f8:	bf 91       	pop	r27
 8fa:	af 91       	pop	r26
 8fc:	9f 91       	pop	r25
 8fe:	8f 91       	pop	r24
 900:	7f 91       	pop	r23
 902:	6f 91       	pop	r22
 904:	5f 91       	pop	r21
 906:	4f 91       	pop	r20
 908:	3f 91       	pop	r19
 90a:	2f 91       	pop	r18
 90c:	0f 90       	pop	r0
 90e:	0f be       	out	0x3f, r0	; 63
 910:	0f 90       	pop	r0
 912:	1f 90       	pop	r1
 914:	18 95       	reti

00000916 <__vector_18>:

//прием команд от компьютера по UART в зависимости от режима
ISR(USART_RX_vect)
{
 916:	1f 92       	push	r1
 918:	0f 92       	push	r0
 91a:	0f b6       	in	r0, 0x3f	; 63
 91c:	0f 92       	push	r0
 91e:	11 24       	eor	r1, r1
 920:	2f 93       	push	r18
 922:	3f 93       	push	r19
 924:	4f 93       	push	r20
 926:	5f 93       	push	r21
 928:	6f 93       	push	r22
 92a:	7f 93       	push	r23
 92c:	8f 93       	push	r24
 92e:	9f 93       	push	r25
 930:	af 93       	push	r26
 932:	bf 93       	push	r27
 934:	ef 93       	push	r30
 936:	ff 93       	push	r31
	switch(ptr)
 938:	80 91 24 01 	lds	r24, 0x0124
 93c:	84 30       	cpi	r24, 0x04	; 4
 93e:	09 f4       	brne	.+2      	; 0x942 <__vector_18+0x2c>
 940:	65 c0       	rjmp	.+202    	; 0xa0c <__vector_18+0xf6>
 942:	85 30       	cpi	r24, 0x05	; 5
 944:	58 f4       	brcc	.+22     	; 0x95c <__vector_18+0x46>
 946:	81 30       	cpi	r24, 0x01	; 1
 948:	51 f1       	breq	.+84     	; 0x99e <__vector_18+0x88>
 94a:	81 30       	cpi	r24, 0x01	; 1
 94c:	d0 f0       	brcs	.+52     	; 0x982 <__vector_18+0x6c>
 94e:	82 30       	cpi	r24, 0x02	; 2
 950:	09 f4       	brne	.+2      	; 0x954 <__vector_18+0x3e>
 952:	42 c0       	rjmp	.+132    	; 0x9d8 <__vector_18+0xc2>
 954:	83 30       	cpi	r24, 0x03	; 3
 956:	09 f0       	breq	.+2      	; 0x95a <__vector_18+0x44>
 958:	91 c0       	rjmp	.+290    	; 0xa7c <__vector_18+0x166>
 95a:	4b c0       	rjmp	.+150    	; 0x9f2 <__vector_18+0xdc>
 95c:	87 30       	cpi	r24, 0x07	; 7
 95e:	09 f4       	brne	.+2      	; 0x962 <__vector_18+0x4c>
 960:	6c c0       	rjmp	.+216    	; 0xa3a <__vector_18+0x124>
 962:	88 30       	cpi	r24, 0x08	; 8
 964:	38 f4       	brcc	.+14     	; 0x974 <__vector_18+0x5e>
 966:	85 30       	cpi	r24, 0x05	; 5
 968:	09 f4       	brne	.+2      	; 0x96c <__vector_18+0x56>
 96a:	5d c0       	rjmp	.+186    	; 0xa26 <__vector_18+0x110>
 96c:	86 30       	cpi	r24, 0x06	; 6
 96e:	09 f0       	breq	.+2      	; 0x972 <__vector_18+0x5c>
 970:	85 c0       	rjmp	.+266    	; 0xa7c <__vector_18+0x166>
 972:	5e c0       	rjmp	.+188    	; 0xa30 <__vector_18+0x11a>
 974:	88 30       	cpi	r24, 0x08	; 8
 976:	09 f4       	brne	.+2      	; 0x97a <__vector_18+0x64>
 978:	65 c0       	rjmp	.+202    	; 0xa44 <__vector_18+0x12e>
 97a:	89 30       	cpi	r24, 0x09	; 9
 97c:	09 f0       	breq	.+2      	; 0x980 <__vector_18+0x6a>
 97e:	7e c0       	rjmp	.+252    	; 0xa7c <__vector_18+0x166>
 980:	66 c0       	rjmp	.+204    	; 0xa4e <__vector_18+0x138>
	{
		case 0:
		if(UDR0!=255)//байт 255 является синхронизирующим
 982:	80 91 c6 00 	lds	r24, 0x00C6
 986:	8f 3f       	cpi	r24, 0xFF	; 255
 988:	31 f0       	breq	.+12     	; 0x996 <__vector_18+0x80>
		{
			sync=0;
 98a:	10 92 21 01 	sts	0x0121, r1
			ptr--;
			ptr%=7;
 98e:	83 e0       	ldi	r24, 0x03	; 3
 990:	80 93 24 01 	sts	0x0124, r24
 994:	73 c0       	rjmp	.+230    	; 0xa7c <__vector_18+0x166>
		}
		else
			sync=1;
 996:	81 e0       	ldi	r24, 0x01	; 1
 998:	80 93 21 01 	sts	0x0121, r24
 99c:	6f c0       	rjmp	.+222    	; 0xa7c <__vector_18+0x166>
		break;
		case 1:
		MD=UDR0;
 99e:	20 91 c6 00 	lds	r18, 0x00C6
 9a2:	20 93 12 01 	sts	0x0112, r18
		if(MD==VAC)
 9a6:	21 30       	cpi	r18, 0x01	; 1
 9a8:	39 f4       	brne	.+14     	; 0x9b8 <__vector_18+0xa2>
			time_step=4;//5
 9aa:	84 e0       	ldi	r24, 0x04	; 4
 9ac:	90 e0       	ldi	r25, 0x00	; 0
 9ae:	90 93 0f 01 	sts	0x010F, r25
 9b2:	80 93 0e 01 	sts	0x010E, r24
 9b6:	62 c0       	rjmp	.+196    	; 0xa7c <__vector_18+0x166>
		else
			time_step=6;//4
 9b8:	86 e0       	ldi	r24, 0x06	; 6
 9ba:	90 e0       	ldi	r25, 0x00	; 0
 9bc:	90 93 0f 01 	sts	0x010F, r25
 9c0:	80 93 0e 01 	sts	0x010E, r24
		
		if(MD==PROGRAM)
 9c4:	22 30       	cpi	r18, 0x02	; 2
 9c6:	09 f0       	breq	.+2      	; 0x9ca <__vector_18+0xb4>
 9c8:	59 c0       	rjmp	.+178    	; 0xa7c <__vector_18+0x166>
		{
			//PROGRAM_start=1;
			PROGRAM_done=0;
 9ca:	10 92 25 01 	sts	0x0125, r1
			prog_val=0;
 9ce:	10 92 1a 01 	sts	0x011A, r1
 9d2:	10 92 19 01 	sts	0x0119, r1
 9d6:	52 c0       	rjmp	.+164    	; 0xa7c <__vector_18+0x166>
		}
		break;
		case 2:
		x16=UDR0<<4;
 9d8:	80 91 c6 00 	lds	r24, 0x00C6
 9dc:	90 e0       	ldi	r25, 0x00	; 0
 9de:	34 e0       	ldi	r19, 0x04	; 4
 9e0:	88 0f       	add	r24, r24
 9e2:	99 1f       	adc	r25, r25
 9e4:	3a 95       	dec	r19
 9e6:	e1 f7       	brne	.-8      	; 0x9e0 <__vector_18+0xca>
 9e8:	90 93 1c 01 	sts	0x011C, r25
 9ec:	80 93 1b 01 	sts	0x011B, r24
 9f0:	45 c0       	rjmp	.+138    	; 0xa7c <__vector_18+0x166>
		break;
		case 3:	
		y16=UDR0<<4;
 9f2:	80 91 c6 00 	lds	r24, 0x00C6
 9f6:	90 e0       	ldi	r25, 0x00	; 0
 9f8:	24 e0       	ldi	r18, 0x04	; 4
 9fa:	88 0f       	add	r24, r24
 9fc:	99 1f       	adc	r25, r25
 9fe:	2a 95       	dec	r18
 a00:	e1 f7       	brne	.-8      	; 0x9fa <__vector_18+0xe4>
 a02:	90 93 1e 01 	sts	0x011E, r25
 a06:	80 93 1d 01 	sts	0x011D, r24
 a0a:	38 c0       	rjmp	.+112    	; 0xa7c <__vector_18+0x166>
		break;
		case 4:
		z16=UDR0<<4;
 a0c:	80 91 c6 00 	lds	r24, 0x00C6
 a10:	90 e0       	ldi	r25, 0x00	; 0
 a12:	b4 e0       	ldi	r27, 0x04	; 4
 a14:	88 0f       	add	r24, r24
 a16:	99 1f       	adc	r25, r25
 a18:	ba 95       	dec	r27
 a1a:	e1 f7       	brne	.-8      	; 0xa14 <__vector_18+0xfe>
 a1c:	90 93 20 01 	sts	0x0120, r25
 a20:	80 93 1f 01 	sts	0x011F, r24
 a24:	2b c0       	rjmp	.+86     	; 0xa7c <__vector_18+0x166>
		break;		
		case 5:
		t2=UDR0;
 a26:	80 91 c6 00 	lds	r24, 0x00C6
 a2a:	80 93 0b 01 	sts	0x010B, r24
 a2e:	26 c0       	rjmp	.+76     	; 0xa7c <__vector_18+0x166>
		break;	
		case 6:
		dT=UDR0;
 a30:	80 91 c6 00 	lds	r24, 0x00C6
 a34:	80 93 3b 01 	sts	0x013B, r24
 a38:	21 c0       	rjmp	.+66     	; 0xa7c <__vector_18+0x166>
		break;
		case 7:
		T=UDR0;
 a3a:	80 91 c6 00 	lds	r24, 0x00C6
 a3e:	80 93 41 01 	sts	0x0141, r24
 a42:	1c c0       	rjmp	.+56     	; 0xa7c <__vector_18+0x166>
		break;
		case 8:
		chan=UDR0;
 a44:	80 91 c6 00 	lds	r24, 0x00C6
 a48:	80 93 26 01 	sts	0x0126, r24
 a4c:	17 c0       	rjmp	.+46     	; 0xa7c <__vector_18+0x166>
		break;
		
		case 9:
			reverted[chan]=UDR0;
 a4e:	80 91 c6 00 	lds	r24, 0x00C6
 a52:	e0 91 26 01 	lds	r30, 0x0126
 a56:	f0 e0       	ldi	r31, 0x00	; 0
 a58:	e5 5d       	subi	r30, 0xD5	; 213
 a5a:	fe 4f       	sbci	r31, 0xFE	; 254
 a5c:	80 83       	st	Z, r24
		
			event_cnt=0;			
 a5e:	10 92 39 01 	sts	0x0139, r1
 a62:	10 92 38 01 	sts	0x0138, r1
			
			if(MD==GATHER_MULT)
 a66:	80 91 12 01 	lds	r24, 0x0112
 a6a:	83 30       	cpi	r24, 0x03	; 3
 a6c:	19 f4       	brne	.+6      	; 0xa74 <__vector_18+0x15e>
			{
			//	PORTD=0b00100000;
			//static int ff=1<<5;
			//if(x16>>4)
			gatherMult();
 a6e:	0e 94 7a 00 	call	0xf4	; 0xf4 <gatherMult>
 a72:	04 c0       	rjmp	.+8      	; 0xa7c <__vector_18+0x166>
			//PORTD=(1<<5)^PORTD;
			//PORTD=ff;
			}
			else if(MD==SEPAR_MULT)	
 a74:	84 30       	cpi	r24, 0x04	; 4
 a76:	11 f4       	brne	.+4      	; 0xa7c <__vector_18+0x166>
			{
			separMult();	
 a78:	0e 94 83 00 	call	0x106	; 0x106 <separMult>
		break;
	}
	

	
	dTt2=dT+t2;
 a7c:	80 91 0b 01 	lds	r24, 0x010B
 a80:	90 91 3b 01 	lds	r25, 0x013B
 a84:	89 0f       	add	r24, r25
 a86:	80 93 0c 01 	sts	0x010C, r24
	//UDR0=x16/16;
	ptr++;
	ptr%=10;
 a8a:	80 91 24 01 	lds	r24, 0x0124
 a8e:	8f 5f       	subi	r24, 0xFF	; 255
 a90:	6a e0       	ldi	r22, 0x0A	; 10
 a92:	0e 94 5e 05 	call	0xabc	; 0xabc <__udivmodqi4>
 a96:	90 93 24 01 	sts	0x0124, r25
 a9a:	ff 91       	pop	r31
 a9c:	ef 91       	pop	r30
 a9e:	bf 91       	pop	r27
 aa0:	af 91       	pop	r26
 aa2:	9f 91       	pop	r25
 aa4:	8f 91       	pop	r24
 aa6:	7f 91       	pop	r23
 aa8:	6f 91       	pop	r22
 aaa:	5f 91       	pop	r21
 aac:	4f 91       	pop	r20
 aae:	3f 91       	pop	r19
 ab0:	2f 91       	pop	r18
 ab2:	0f 90       	pop	r0
 ab4:	0f be       	out	0x3f, r0	; 63
 ab6:	0f 90       	pop	r0
 ab8:	1f 90       	pop	r1
 aba:	18 95       	reti

00000abc <__udivmodqi4>:
 abc:	99 1b       	sub	r25, r25
 abe:	79 e0       	ldi	r23, 0x09	; 9
 ac0:	04 c0       	rjmp	.+8      	; 0xaca <__udivmodqi4_ep>

00000ac2 <__udivmodqi4_loop>:
 ac2:	99 1f       	adc	r25, r25
 ac4:	96 17       	cp	r25, r22
 ac6:	08 f0       	brcs	.+2      	; 0xaca <__udivmodqi4_ep>
 ac8:	96 1b       	sub	r25, r22

00000aca <__udivmodqi4_ep>:
 aca:	88 1f       	adc	r24, r24
 acc:	7a 95       	dec	r23
 ace:	c9 f7       	brne	.-14     	; 0xac2 <__udivmodqi4_loop>
 ad0:	80 95       	com	r24
 ad2:	08 95       	ret

00000ad4 <__udivmodhi4>:
 ad4:	aa 1b       	sub	r26, r26
 ad6:	bb 1b       	sub	r27, r27
 ad8:	51 e1       	ldi	r21, 0x11	; 17
 ada:	07 c0       	rjmp	.+14     	; 0xaea <__udivmodhi4_ep>

00000adc <__udivmodhi4_loop>:
 adc:	aa 1f       	adc	r26, r26
 ade:	bb 1f       	adc	r27, r27
 ae0:	a6 17       	cp	r26, r22
 ae2:	b7 07       	cpc	r27, r23
 ae4:	10 f0       	brcs	.+4      	; 0xaea <__udivmodhi4_ep>
 ae6:	a6 1b       	sub	r26, r22
 ae8:	b7 0b       	sbc	r27, r23

00000aea <__udivmodhi4_ep>:
 aea:	88 1f       	adc	r24, r24
 aec:	99 1f       	adc	r25, r25
 aee:	5a 95       	dec	r21
 af0:	a9 f7       	brne	.-22     	; 0xadc <__udivmodhi4_loop>
 af2:	80 95       	com	r24
 af4:	90 95       	com	r25
 af6:	bc 01       	movw	r22, r24
 af8:	cd 01       	movw	r24, r26
 afa:	08 95       	ret

00000afc <_exit>:
 afc:	f8 94       	cli

00000afe <__stop_program>:
 afe:	ff cf       	rjmp	.-2      	; 0xafe <__stop_program>
