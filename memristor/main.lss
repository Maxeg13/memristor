
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000010  00800100  00000944  000009d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000944  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000034  00800110  00800110  000009e8  2**0
                  ALLOC
  3 .debug_aranges 00000020  00000000  00000000  000009e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000244  00000000  00000000  00000a08  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000005b0  00000000  00000000  00000c4c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000001f5  00000000  00000000  000011fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000008c4  00000000  00000000  000013f1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000e0  00000000  00000000  00001cb8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000216  00000000  00000000  00001d98  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000007c  00000000  00000000  00001fae  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 19 01 	jmp	0x232	; 0x232 <__vector_9>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 c1 03 	jmp	0x782	; 0x782 <__vector_18>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e4 e4       	ldi	r30, 0x44	; 68
  7c:	f9 e0       	ldi	r31, 0x09	; 9
  7e:	02 c0       	rjmp	.+4      	; 0x84 <.do_copy_data_start>

00000080 <.do_copy_data_loop>:
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0

00000084 <.do_copy_data_start>:
  84:	a0 31       	cpi	r26, 0x10	; 16
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <.do_copy_data_loop>

0000008a <__do_clear_bss>:
  8a:	11 e0       	ldi	r17, 0x01	; 1
  8c:	a0 e1       	ldi	r26, 0x10	; 16
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a4 34       	cpi	r26, 0x44	; 68
  96:	b1 07       	cpc	r27, r17
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 c9 00 	call	0x192	; 0x192 <main>
  9e:	0c 94 a0 04 	jmp	0x940	; 0x940 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <ADC_Init>:
uint8_t accum_cnt;

//функция инициализаци АЦП
//АЦП используется для регистрации тока, проходящего через мемристор
void ADC_Init(){
 ADCSRA |= (1 << ADEN) // Включаем АЦП
  a6:	ea e7       	ldi	r30, 0x7A	; 122
  a8:	f0 e0       	ldi	r31, 0x00	; 0
  aa:	80 81       	ld	r24, Z
  ac:	83 68       	ori	r24, 0x83	; 131
  ae:	80 83       	st	Z, r24
 //ADCSRA&=~(1 << ADPS1)|(1 << ADPS0)|(1 << ADPS1);
 |(1 << ADPS1)|(1 << ADPS0)|(1 << ADPS1);    // устанавливаем предделитель преобразователя на 8
 ADMUX |= (0 << REFS1)|(1 << REFS0) //выставляем опорное напряжение, как внешний ИОН
  b0:	ec e7       	ldi	r30, 0x7C	; 124
  b2:	f0 e0       	ldi	r31, 0x00	; 0
  b4:	80 81       	ld	r24, Z
  b6:	80 64       	ori	r24, 0x40	; 64
  b8:	80 83       	st	Z, r24
 |(0 << MUX0)|(0 << MUX1)|(0 << MUX2)|(0 << MUX3); // снимать сигнал будем с  входа PC0 
}
  ba:	08 95       	ret

000000bc <timer_init>:

//функция инициализации таймера
// Таймер используется для формирования временной последовательности значений, формируемых с ЦАПа
void timer_init()
{
    TCCR2A = 0;        
  bc:	10 92 b0 00 	sts	0x00B0, r1
    TCCR2B = 0;
  c0:	e1 eb       	ldi	r30, 0xB1	; 177
  c2:	f0 e0       	ldi	r31, 0x00	; 0
  c4:	10 82       	st	Z, r1
    
    TCCR2B |= (1<<CS21) ;    
  c6:	80 81       	ld	r24, Z
  c8:	82 60       	ori	r24, 0x02	; 2
  ca:	80 83       	st	Z, r24
    TIMSK2 = (1 << TOIE2);
  cc:	81 e0       	ldi	r24, 0x01	; 1
  ce:	80 93 70 00 	sts	0x0070, r24
}
  d2:	08 95       	ret

000000d4 <uart_init>:

//функция инициализации UART-интерфейса
void uart_init(unsigned int ubrr)
{	
	UBRR0H = (unsigned char)(ubrr>>8);
  d4:	90 93 c5 00 	sts	0x00C5, r25
	UBRR0L = (unsigned char)ubrr;
  d8:	80 93 c4 00 	sts	0x00C4, r24
	UCSR0B = (1<<RXCIE0)|(1<<RXEN0)|(1<<TXEN0);
  dc:	88 e9       	ldi	r24, 0x98	; 152
  de:	80 93 c1 00 	sts	0x00C1, r24
	UCSR0C = (1<<USBS0)|(3<<UCSZ00);
  e2:	8e e0       	ldi	r24, 0x0E	; 14
  e4:	80 93 c2 00 	sts	0x00C2, r24
}
  e8:	08 95       	ret

000000ea <SPI_MasterInit>:

//функция инициализации SPI
void SPI_MasterInit()
{
	DDR_SPI = (1<<DD_MOSI)|(1<<DD_SCK)|(1<<SPI_SS);
  ea:	8c e2       	ldi	r24, 0x2C	; 44
  ec:	84 b9       	out	0x04, r24	; 4
	SPCR = (1<<SPE)|(0<<DORD)|(1<<MSTR)|(1<<CPOL)|(0<<CPHA);//|(1<<SPR1)|(0<<SPR0);
  ee:	88 e5       	ldi	r24, 0x58	; 88
  f0:	8c bd       	out	0x2c, r24	; 44
}
  f2:	08 95       	ret

000000f4 <gatherMult>:
}

			
void gatherMult()
{
	UNSET_BYTE(PORTD, 6);
  f4:	5e 98       	cbi	0x0b, 6	; 11
	UNSET_BYTE(PORTD, 7);				
  f6:	5f 98       	cbi	0x0b, 7	; 11
	UNSET_BYTE(PORTD, 5);
  f8:	5d 98       	cbi	0x0b, 5	; 11
	UNSET_BYTE(PORTC, 4);
  fa:	44 98       	cbi	0x08, 4	; 8
	
	
	SET_BYTE(PORTC, 1);				
  fc:	41 9a       	sbi	0x08, 1	; 8
	SET_BYTE(PORTB, 2);
  fe:	2a 9a       	sbi	0x05, 2	; 5
	SET_BYTE(PORTB, 1);
 100:	29 9a       	sbi	0x05, 1	; 5
	SET_BYTE(PORTB, 0);
 102:	28 9a       	sbi	0x05, 0	; 5
}
 104:	08 95       	ret

00000106 <separMult>:
void separMult()
{
	UNSET_BYTE(PORTB, 1);
 106:	29 98       	cbi	0x05, 1	; 5
	UNSET_BYTE(PORTB, 2);
 108:	2a 98       	cbi	0x05, 2	; 5
	UNSET_BYTE(PORTC, 1);
 10a:	41 98       	cbi	0x08, 1	; 8
	
	SET_BYTE(PORTC, 4);						
 10c:	44 9a       	sbi	0x08, 4	; 8
	SET_BYTE(PORTD, 6);
 10e:	5e 9a       	sbi	0x0b, 6	; 11
	SET_BYTE(PORTD, 7);
 110:	5f 9a       	sbi	0x0b, 7	; 11
	SET_BYTE(PORTB, 0);
 112:	28 9a       	sbi	0x05, 0	; 5
	SET_BYTE(PORTD, 5);
 114:	5d 9a       	sbi	0x0b, 5	; 11
}
 116:	08 95       	ret

00000118 <SPI_WriteByte>:



void SPI_WriteByte(uint8_t data)
{
   SPDR = data;
 118:	8e bd       	out	0x2e, r24	; 46
  while(!(SPSR & (1<<SPIF)));
 11a:	0d b4       	in	r0, 0x2d	; 45
 11c:	07 fe       	sbrs	r0, 7
 11e:	fd cf       	rjmp	.-6      	; 0x11a <SPI_WriteByte+0x2>
}
 120:	08 95       	ret

00000122 <resetDAC>:
void resetDAC(int8_t chan)//_____________bipolar!!! and <<4 larger
{

    // static int16_t x;
	//x+=2048;
	PORTD&=~(1<<SYNC);
 122:	5b 98       	cbi	0x0b, 3	; 11
	//send8 = (x >> 8);
	// send8 = 0b00001000;
	// send8|=(chan_addrs[chan]);
	SPI_WriteByte(0b00001000|chan_addrs[chan]);
 124:	e8 2f       	mov	r30, r24
 126:	ff 27       	eor	r31, r31
 128:	e7 fd       	sbrc	r30, 7
 12a:	f0 95       	com	r31
 12c:	e0 50       	subi	r30, 0x00	; 0
 12e:	ff 4f       	sbci	r31, 0xFF	; 255
 130:	80 81       	ld	r24, Z
 132:	88 60       	ori	r24, 0x08	; 8
 134:	90 e0       	ldi	r25, 0x00	; 0
 136:	0e 94 8c 00 	call	0x118	; 0x118 <SPI_WriteByte>
	// send8=x;
	SPI_WriteByte(0);		
 13a:	80 e0       	ldi	r24, 0x00	; 0
 13c:	90 e0       	ldi	r25, 0x00	; 0
 13e:	0e 94 8c 00 	call	0x118	; 0x118 <SPI_WriteByte>
	PORTD|=(1<<SYNC);
 142:	5b 9a       	sbi	0x0b, 3	; 11

}
 144:	08 95       	ret

00000146 <setDAC>:

//функция управления ЦАПом 
// при этом, управление регистром LDAC должно использоваться 
//вне функции в перспепктиве создания многоканальной схемы
void setDAC(int16_t x,int8_t chan)//_____________bipolar!!! and <<4 larger
{
 146:	0f 93       	push	r16
 148:	1f 93       	push	r17
 14a:	e6 2f       	mov	r30, r22


	x=-x;
 14c:	00 27       	eor	r16, r16
 14e:	11 27       	eor	r17, r17
 150:	08 1b       	sub	r16, r24
 152:	19 0b       	sbc	r17, r25
	x+=2048;
 154:	00 50       	subi	r16, 0x00	; 0
 156:	18 4f       	sbci	r17, 0xF8	; 248
	PORTD&=~(1<<SYNC);
 158:	5b 98       	cbi	0x0b, 3	; 11
	send8 = (x >> 8);
	send8 &= 0b00001111;
	send8|=(chan_addrs[chan]);
 15a:	81 2f       	mov	r24, r17
 15c:	99 27       	eor	r25, r25
 15e:	87 fd       	sbrc	r24, 7
 160:	9a 95       	dec	r25
 162:	8f 70       	andi	r24, 0x0F	; 15
 164:	ff 27       	eor	r31, r31
 166:	e7 fd       	sbrc	r30, 7
 168:	f0 95       	com	r31
 16a:	e0 50       	subi	r30, 0x00	; 0
 16c:	ff 4f       	sbci	r31, 0xFF	; 255
 16e:	20 81       	ld	r18, Z
 170:	82 2b       	or	r24, r18
 172:	80 93 38 01 	sts	0x0138, r24
	SPI_WriteByte(send8);
 176:	90 e0       	ldi	r25, 0x00	; 0
 178:	0e 94 8c 00 	call	0x118	; 0x118 <SPI_WriteByte>
	send8=x;
 17c:	00 93 38 01 	sts	0x0138, r16
	SPI_WriteByte(send8);		
 180:	80 2f       	mov	r24, r16
 182:	90 e0       	ldi	r25, 0x00	; 0
 184:	0e 94 8c 00 	call	0x118	; 0x118 <SPI_WriteByte>
	PORTD|=(1<<SYNC);
 188:	5b 9a       	sbi	0x0b, 3	; 11

}
 18a:	1f 91       	pop	r17
 18c:	0f 91       	pop	r16
 18e:	08 95       	ret

00000190 <set_reverser>:
		else
			PORTB&=~(1<<4);
		break;

	}
}
 190:	08 95       	ret

00000192 <main>:



void main(void)
{
 192:	1f 93       	push	r17
 194:	e0 e0       	ldi	r30, 0x00	; 0
 196:	f1 e0       	ldi	r31, 0x01	; 1
	for (uint8_t i=0; i<8;i++)
		chan_addrs[i]=chan_addrs[i]<<4;
 198:	80 81       	ld	r24, Z
 19a:	82 95       	swap	r24
 19c:	80 7f       	andi	r24, 0xF0	; 240
 19e:	81 93       	st	Z+, r24



void main(void)
{
	for (uint8_t i=0; i<8;i++)
 1a0:	81 e0       	ldi	r24, 0x01	; 1
 1a2:	e8 30       	cpi	r30, 0x08	; 8
 1a4:	f8 07       	cpc	r31, r24
 1a6:	c1 f7       	brne	.-16     	; 0x198 <main+0x6>
		chan_addrs[i]=chan_addrs[i]<<4;
	
	PORTC|=0b00000000;
 1a8:	88 b1       	in	r24, 0x08	; 8
 1aa:	88 b9       	out	0x08, r24	; 8
	DDRC= 0b00011110;
 1ac:	8e e1       	ldi	r24, 0x1E	; 30
 1ae:	87 b9       	out	0x07, r24	; 7
	DDRD =0b11111110;
 1b0:	8e ef       	ldi	r24, 0xFE	; 254
 1b2:	8a b9       	out	0x0a, r24	; 10
	//PORTD|=0b00100000;	
	DDRB= 0b00011111;
 1b4:	8f e1       	ldi	r24, 0x1F	; 31
 1b6:	84 b9       	out	0x04, r24	; 4
	sei();
 1b8:	78 94       	sei
}

//функция инициализации SPI
void SPI_MasterInit()
{
	DDR_SPI = (1<<DD_MOSI)|(1<<DD_SCK)|(1<<SPI_SS);
 1ba:	8c e2       	ldi	r24, 0x2C	; 44
 1bc:	84 b9       	out	0x04, r24	; 4
	SPCR = (1<<SPE)|(0<<DORD)|(1<<MSTR)|(1<<CPOL)|(0<<CPHA);//|(1<<SPR1)|(0<<SPR0);
 1be:	88 e5       	ldi	r24, 0x58	; 88
 1c0:	8c bd       	out	0x2c, r24	; 44

//функция инициализации таймера
// Таймер используется для формирования временной последовательности значений, формируемых с ЦАПа
void timer_init()
{
    TCCR2A = 0;        
 1c2:	10 92 b0 00 	sts	0x00B0, r1
    TCCR2B = 0;
 1c6:	10 92 b1 00 	sts	0x00B1, r1
    
    TCCR2B |= (1<<CS21) ;    
 1ca:	80 91 b1 00 	lds	r24, 0x00B1
 1ce:	82 60       	ori	r24, 0x02	; 2
 1d0:	80 93 b1 00 	sts	0x00B1, r24
    TIMSK2 = (1 << TOIE2);
 1d4:	81 e0       	ldi	r24, 0x01	; 1
 1d6:	80 93 70 00 	sts	0x0070, r24
}

//функция инициализации UART-интерфейса
void uart_init(unsigned int ubrr)
{	
	UBRR0H = (unsigned char)(ubrr>>8);
 1da:	10 92 c5 00 	sts	0x00C5, r1
	UBRR0L = (unsigned char)ubrr;
 1de:	83 e3       	ldi	r24, 0x33	; 51
 1e0:	80 93 c4 00 	sts	0x00C4, r24
	UCSR0B = (1<<RXCIE0)|(1<<RXEN0)|(1<<TXEN0);
 1e4:	88 e9       	ldi	r24, 0x98	; 152
 1e6:	80 93 c1 00 	sts	0x00C1, r24
	UCSR0C = (1<<USBS0)|(3<<UCSZ00);
 1ea:	8e e0       	ldi	r24, 0x0E	; 14
 1ec:	80 93 c2 00 	sts	0x00C2, r24
uint8_t accum_cnt;

//функция инициализаци АЦП
//АЦП используется для регистрации тока, проходящего через мемристор
void ADC_Init(){
 ADCSRA |= (1 << ADEN) // Включаем АЦП
 1f0:	80 91 7a 00 	lds	r24, 0x007A
 1f4:	83 68       	ori	r24, 0x83	; 131
 1f6:	80 93 7a 00 	sts	0x007A, r24
 //ADCSRA&=~(1 << ADPS1)|(1 << ADPS0)|(1 << ADPS1);
 |(1 << ADPS1)|(1 << ADPS0)|(1 << ADPS1);    // устанавливаем предделитель преобразователя на 8
 ADMUX |= (0 << REFS1)|(1 << REFS0) //выставляем опорное напряжение, как внешний ИОН
 1fa:	80 91 7c 00 	lds	r24, 0x007C
 1fe:	80 64       	ori	r24, 0x40	; 64
 200:	80 93 7c 00 	sts	0x007C, r24
    //DDRD = 0b000001100;	
	
	uart_init(BAUDRATE);
	ADC_Init();
	
	ADCSRA |= (1 << ADSC); 
 204:	80 91 7a 00 	lds	r24, 0x007A
 208:	80 64       	ori	r24, 0x40	; 64
 20a:	80 93 7a 00 	sts	0x007A, r24
	ADCL;
 20e:	80 91 78 00 	lds	r24, 0x0078
	ADCL;
 212:	80 91 78 00 	lds	r24, 0x0078
 216:	10 e0       	ldi	r17, 0x00	; 0
		//set_reverser(i,1);
	
	//set_reverser(0,0);
	for (int i=0;i<8;i++)
	{
		setDAC(0,i);
 218:	80 e0       	ldi	r24, 0x00	; 0
 21a:	90 e0       	ldi	r25, 0x00	; 0
 21c:	61 2f       	mov	r22, r17
 21e:	0e 94 a3 00 	call	0x146	; 0x146 <setDAC>
 222:	1f 5f       	subi	r17, 0xFF	; 255

	//for(int i=0;i<8;i++)
		//set_reverser(i,1);
	
	//set_reverser(0,0);
	for (int i=0;i<8;i++)
 224:	18 30       	cpi	r17, 0x08	; 8
 226:	c1 f7       	brne	.-16     	; 0x218 <main+0x86>
	{
		setDAC(0,i);
	}
	PORTD&=~(1<<LDAC);
 228:	5a 98       	cbi	0x0b, 2	; 11
	PORTD|=(1<<LDAC);
 22a:	5a 9a       	sbi	0x0b, 2	; 11
	
	separMult();
 22c:	0e 94 83 00 	call	0x106	; 0x106 <separMult>
 230:	ff cf       	rjmp	.-2      	; 0x230 <main+0x9e>

00000232 <__vector_9>:
//главный цикл работы контроллера
//Здесь устанавливаются значения ЦАП и передаются данные на компьютер
//через UART-интерфейс
//данный участок кода повторяется при переполнении TIMER2
ISR(TIMER2_OVF_vect)
{
 232:	1f 92       	push	r1
 234:	0f 92       	push	r0
 236:	0f b6       	in	r0, 0x3f	; 63
 238:	0f 92       	push	r0
 23a:	11 24       	eor	r1, r1
 23c:	2f 93       	push	r18
 23e:	3f 93       	push	r19
 240:	4f 93       	push	r20
 242:	5f 93       	push	r21
 244:	6f 93       	push	r22
 246:	7f 93       	push	r23
 248:	8f 93       	push	r24
 24a:	9f 93       	push	r25
 24c:	af 93       	push	r26
 24e:	bf 93       	push	r27
 250:	ef 93       	push	r30
 252:	ff 93       	push	r31
	if(ctr>time_step)
 254:	20 91 34 01 	lds	r18, 0x0134
 258:	30 91 35 01 	lds	r19, 0x0135
 25c:	80 91 0c 01 	lds	r24, 0x010C
 260:	90 91 0d 01 	lds	r25, 0x010D
 264:	82 17       	cp	r24, r18
 266:	93 07       	cpc	r25, r19
 268:	0c f0       	brlt	.+2      	; 0x26c <__vector_9+0x3a>
 26a:	71 c2       	rjmp	.+1250   	; 0x74e <__vector_9+0x51c>
	{
		if(MD==CUSTOM)
 26c:	60 91 10 01 	lds	r22, 0x0110
 270:	66 23       	and	r22, r22
 272:	09 f0       	breq	.+2      	; 0x276 <__vector_9+0x44>
 274:	65 c0       	rjmp	.+202    	; 0x340 <__vector_9+0x10e>
		{
			if(event_cnt==(1))
 276:	20 91 30 01 	lds	r18, 0x0130
 27a:	30 91 31 01 	lds	r19, 0x0131
 27e:	21 30       	cpi	r18, 0x01	; 1
 280:	31 05       	cpc	r19, r1
 282:	59 f4       	brne	.+22     	; 0x29a <__vector_9+0x68>
			{	
			ADCL_=ADCL;
 284:	90 91 78 00 	lds	r25, 0x0078
 288:	90 93 3a 01 	sts	0x013A, r25
			ADCH_=ADCH;
 28c:	80 91 79 00 	lds	r24, 0x0079
 290:	80 93 3c 01 	sts	0x013C, r24
			UDR0=ADCL_;			
 294:	90 93 c6 00 	sts	0x00C6, r25
 298:	1b c0       	rjmp	.+54     	; 0x2d0 <__vector_9+0x9e>
			}
			
			if(event_cnt==(2))
 29a:	22 30       	cpi	r18, 0x02	; 2
 29c:	31 05       	cpc	r19, r1
 29e:	29 f4       	brne	.+10     	; 0x2aa <__vector_9+0x78>
			{	
			UDR0=ADCH_;				
 2a0:	80 91 3c 01 	lds	r24, 0x013C
 2a4:	80 93 c6 00 	sts	0x00C6, r24
 2a8:	13 c0       	rjmp	.+38     	; 0x2d0 <__vector_9+0x9e>
			}
			
			
			
			if(event_cnt==0)
 2aa:	21 15       	cp	r18, r1
 2ac:	31 05       	cpc	r19, r1
 2ae:	81 f4       	brne	.+32     	; 0x2d0 <__vector_9+0x9e>
			{
			UDR0=255;
 2b0:	8f ef       	ldi	r24, 0xFF	; 255
 2b2:	80 93 c6 00 	sts	0x00C6, r24
			setDAC(x16,chan);
 2b6:	80 91 19 01 	lds	r24, 0x0119
 2ba:	90 91 1a 01 	lds	r25, 0x011A
 2be:	60 91 22 01 	lds	r22, 0x0122
 2c2:	0e 94 a3 00 	call	0x146	; 0x146 <setDAC>
			setDAC(x16,2);
 2c6:	80 91 19 01 	lds	r24, 0x0119
 2ca:	90 91 1a 01 	lds	r25, 0x011A
 2ce:	32 c0       	rjmp	.+100    	; 0x334 <__vector_9+0x102>
			PORTD&=~(1<<LDAC);
			PORTD|=(1<<LDAC);
			}
			
			else if(event_cnt==t1)
 2d0:	80 91 08 01 	lds	r24, 0x0108
 2d4:	90 e0       	ldi	r25, 0x00	; 0
 2d6:	28 17       	cp	r18, r24
 2d8:	39 07       	cpc	r19, r25
 2da:	09 f4       	brne	.+2      	; 0x2de <__vector_9+0xac>
 2dc:	e0 c1       	rjmp	.+960    	; 0x69e <__vector_9+0x46c>
			setDAC(0,chan);
			//setDAC(0,2);
			PORTD&=~(1<<LDAC);
			PORTD|=(1<<LDAC);
			}
			else if(event_cnt==dT)
 2de:	80 91 33 01 	lds	r24, 0x0133
 2e2:	90 e0       	ldi	r25, 0x00	; 0
 2e4:	28 17       	cp	r18, r24
 2e6:	39 07       	cpc	r19, r25
 2e8:	09 f4       	brne	.+2      	; 0x2ec <__vector_9+0xba>
 2ea:	39 c1       	rjmp	.+626    	; 0x55e <__vector_9+0x32c>
			 //setDAC(y16,2);
			PORTD&=~(1<<LDAC);
			PORTD|=(1<<LDAC);
		
			}
			else if(event_cnt==(dT+1))
 2ec:	01 96       	adiw	r24, 0x01	; 1
 2ee:	28 17       	cp	r18, r24
 2f0:	39 07       	cpc	r19, r25
 2f2:	09 f4       	brne	.+2      	; 0x2f6 <__vector_9+0xc4>
 2f4:	e4 c1       	rjmp	.+968    	; 0x6be <__vector_9+0x48c>
				ADCSRA |= (1 << ADSC); 

			else if(event_cnt==dTt2)
 2f6:	80 91 0a 01 	lds	r24, 0x010A
 2fa:	90 e0       	ldi	r25, 0x00	; 0
 2fc:	28 17       	cp	r18, r24
 2fe:	39 07       	cpc	r19, r25
 300:	09 f0       	breq	.+2      	; 0x304 <__vector_9+0xd2>
 302:	ff c1       	rjmp	.+1022   	; 0x702 <__vector_9+0x4d0>
			{
			if ( ( UCSR0A & (1<<UDRE0)) )			
 304:	80 91 c0 00 	lds	r24, 0x00C0
 308:	85 ff       	sbrs	r24, 5
 30a:	04 c0       	rjmp	.+8      	; 0x314 <__vector_9+0xe2>
				UDR0=_adc;	
 30c:	80 91 3f 01 	lds	r24, 0x013F
 310:	80 93 c6 00 	sts	0x00C6, r24
			accum=0;
 314:	10 92 3e 01 	sts	0x013E, r1
 318:	10 92 3d 01 	sts	0x013D, r1
			ADC_on=0;
 31c:	10 92 2f 01 	sts	0x012F, r1
			accum_cnt=0;			
 320:	10 92 36 01 	sts	0x0136, r1
			setDAC(0,chan);
 324:	80 e0       	ldi	r24, 0x00	; 0
 326:	90 e0       	ldi	r25, 0x00	; 0
 328:	60 91 22 01 	lds	r22, 0x0122
 32c:	0e 94 a3 00 	call	0x146	; 0x146 <setDAC>
			setDAC(0,2);
 330:	80 e0       	ldi	r24, 0x00	; 0
 332:	90 e0       	ldi	r25, 0x00	; 0
 334:	62 e0       	ldi	r22, 0x02	; 2
 336:	0e 94 a3 00 	call	0x146	; 0x146 <setDAC>
			PORTD&=~(1<<LDAC);
 33a:	5a 98       	cbi	0x0b, 2	; 11
			PORTD|=(1<<LDAC);
 33c:	5a 9a       	sbi	0x0b, 2	; 11
 33e:	e1 c1       	rjmp	.+962    	; 0x702 <__vector_9+0x4d0>

			}		

		}
		else if(MD==VAC)
 340:	61 30       	cpi	r22, 0x01	; 1
 342:	09 f0       	breq	.+2      	; 0x346 <__vector_9+0x114>
 344:	7c c0       	rjmp	.+248    	; 0x43e <__vector_9+0x20c>
		{			
			static int i=0;
			i++;						
 346:	80 91 2d 01 	lds	r24, 0x012D
 34a:	90 91 2e 01 	lds	r25, 0x012E
 34e:	01 96       	adiw	r24, 0x01	; 1
 350:	90 93 2e 01 	sts	0x012E, r25
 354:	80 93 2d 01 	sts	0x012D, r24
			
			switch(UDP_cnt)
 358:	80 91 43 01 	lds	r24, 0x0143
 35c:	81 30       	cpi	r24, 0x01	; 1
 35e:	79 f0       	breq	.+30     	; 0x37e <__vector_9+0x14c>
 360:	81 30       	cpi	r24, 0x01	; 1
 362:	30 f0       	brcs	.+12     	; 0x370 <__vector_9+0x13e>
 364:	82 30       	cpi	r24, 0x02	; 2
 366:	f1 f0       	breq	.+60     	; 0x3a4 <__vector_9+0x172>
 368:	83 30       	cpi	r24, 0x03	; 3
 36a:	09 f0       	breq	.+2      	; 0x36e <__vector_9+0x13c>
 36c:	61 c0       	rjmp	.+194    	; 0x430 <__vector_9+0x1fe>
 36e:	1f c0       	rjmp	.+62     	; 0x3ae <__vector_9+0x17c>
			{
				case 0:					
				 ADCSRA |= (1 << ADSC); 
 370:	80 91 7a 00 	lds	r24, 0x007A
 374:	80 64       	ori	r24, 0x40	; 64
 376:	80 93 7a 00 	sts	0x007A, r24
				UDR0=255;
 37a:	8f ef       	ldi	r24, 0xFF	; 255
 37c:	15 c0       	rjmp	.+42     	; 0x3a8 <__vector_9+0x176>
				break;
				
				
				
				case 1:	
				ADCL__=	ADCL_;
 37e:	80 91 3a 01 	lds	r24, 0x013A
 382:	80 93 37 01 	sts	0x0137, r24
				ADCH__ = ADCH_;
 386:	80 91 3c 01 	lds	r24, 0x013C
 38a:	80 93 32 01 	sts	0x0132, r24
				ADCL_=ADCL;
 38e:	90 91 78 00 	lds	r25, 0x0078
 392:	90 93 3a 01 	sts	0x013A, r25
				ADCH_=ADCH;
 396:	80 91 79 00 	lds	r24, 0x0079
 39a:	80 93 3c 01 	sts	0x013C, r24
				
				UDR0=ADCL_;
 39e:	90 93 c6 00 	sts	0x00C6, r25
 3a2:	46 c0       	rjmp	.+140    	; 0x430 <__vector_9+0x1fe>
				break;
				
				case 2:
				UDR0=ADCH_;
 3a4:	80 91 3c 01 	lds	r24, 0x013C
 3a8:	80 93 c6 00 	sts	0x00C6, r24
 3ac:	41 c0       	rjmp	.+130    	; 0x430 <__vector_9+0x1fe>
				
				
				case 3:
								
				//VAC16_HH=VAC16_H;
				VAC16_H=VAC16;
 3ae:	20 91 11 01 	lds	r18, 0x0111
 3b2:	30 91 12 01 	lds	r19, 0x0112
 3b6:	30 93 14 01 	sts	0x0114, r19
 3ba:	20 93 13 01 	sts	0x0113, r18
				
				if(pos_phase)
 3be:	80 91 0b 01 	lds	r24, 0x010B
 3c2:	88 23       	and	r24, r24
 3c4:	81 f0       	breq	.+32     	; 0x3e6 <__vector_9+0x1b4>
				{
							//PORTC=0b00000010;
		//PORTB=0b00011111;
		//PORTD=0b11101100;
					VAC16+=32;
 3c6:	20 5e       	subi	r18, 0xE0	; 224
 3c8:	3f 4f       	sbci	r19, 0xFF	; 255
 3ca:	30 93 12 01 	sts	0x0112, r19
 3ce:	20 93 11 01 	sts	0x0111, r18
					if(VAC16>(y16-1))
 3d2:	80 91 1b 01 	lds	r24, 0x011B
 3d6:	90 91 1c 01 	lds	r25, 0x011C
 3da:	28 17       	cp	r18, r24
 3dc:	39 07       	cpc	r19, r25
 3de:	b4 f0       	brlt	.+44     	; 0x40c <__vector_9+0x1da>
					{
					pos_phase=0;				
 3e0:	10 92 0b 01 	sts	0x010B, r1
 3e4:	13 c0       	rjmp	.+38     	; 0x40c <__vector_9+0x1da>
				else
				{
					//PORTB=0;
		//PORTC=0;
		//PORTD=0;
					VAC16-=32;
 3e6:	c9 01       	movw	r24, r18
 3e8:	80 97       	sbiw	r24, 0x20	; 32
 3ea:	90 93 12 01 	sts	0x0112, r25
 3ee:	80 93 11 01 	sts	0x0111, r24
					if(VAC16<(-x16+1))
 3f2:	21 e0       	ldi	r18, 0x01	; 1
 3f4:	30 e0       	ldi	r19, 0x00	; 0
 3f6:	40 91 19 01 	lds	r20, 0x0119
 3fa:	50 91 1a 01 	lds	r21, 0x011A
 3fe:	24 1b       	sub	r18, r20
 400:	35 0b       	sbc	r19, r21
 402:	82 17       	cp	r24, r18
 404:	93 07       	cpc	r25, r19
 406:	14 f4       	brge	.+4      	; 0x40c <__vector_9+0x1da>
					{
					pos_phase=1;									
 408:	60 93 0b 01 	sts	0x010B, r22
					}
				}	
				
				
				
				UDR0=VAC16>>4;
 40c:	80 91 11 01 	lds	r24, 0x0111
 410:	90 91 12 01 	lds	r25, 0x0112
 414:	9c 01       	movw	r18, r24
 416:	74 e0       	ldi	r23, 0x04	; 4
 418:	35 95       	asr	r19
 41a:	27 95       	ror	r18
 41c:	7a 95       	dec	r23
 41e:	e1 f7       	brne	.-8      	; 0x418 <__vector_9+0x1e6>
 420:	20 93 c6 00 	sts	0x00C6, r18
				setDAC(VAC16,chan);
 424:	60 91 22 01 	lds	r22, 0x0122
 428:	0e 94 a3 00 	call	0x146	; 0x146 <setDAC>
				//setDAC(VAC16,3);
				//setDAC(VAC16,4);
				//setDAC(VAC16,5);
				//setDAC(VAC16,6);
				//setDAC(VAC16,7);				
				PORTD&=~(1<<LDAC);
 42c:	5a 98       	cbi	0x0b, 2	; 11
				PORTD|=(1<<LDAC);
 42e:	5a 9a       	sbi	0x0b, 2	; 11
				
			}
						
			
			UDP_cnt++;
			UDP_cnt%=4;
 430:	80 91 43 01 	lds	r24, 0x0143
 434:	8f 5f       	subi	r24, 0xFF	; 255
 436:	83 70       	andi	r24, 0x03	; 3
 438:	80 93 43 01 	sts	0x0143, r24
 43c:	62 c1       	rjmp	.+708    	; 0x702 <__vector_9+0x4d0>

			
		}
		else if(MD==PROGRAM)
 43e:	62 30       	cpi	r22, 0x02	; 2
 440:	09 f0       	breq	.+2      	; 0x444 <__vector_9+0x212>
 442:	a3 c0       	rjmp	.+326    	; 0x58a <__vector_9+0x358>
		{
			T=16;
 444:	80 e1       	ldi	r24, 0x10	; 16
 446:	80 93 39 01 	sts	0x0139, r24
			static uint16_t adc_h;
			
			if(event_cnt==(1))
 44a:	40 91 30 01 	lds	r20, 0x0130
 44e:	50 91 31 01 	lds	r21, 0x0131
 452:	41 30       	cpi	r20, 0x01	; 1
 454:	51 05       	cpc	r21, r1
 456:	29 f4       	brne	.+10     	; 0x462 <__vector_9+0x230>
			{	
				UDR0=PROGRAM_done;
 458:	80 91 21 01 	lds	r24, 0x0121
 45c:	80 93 c6 00 	sts	0x00C6, r24
 460:	77 c0       	rjmp	.+238    	; 0x550 <__vector_9+0x31e>
			}

			if(event_cnt==(2))//ADC GET 
 462:	42 30       	cpi	r20, 0x02	; 2
 464:	51 05       	cpc	r21, r1
 466:	59 f4       	brne	.+22     	; 0x47e <__vector_9+0x24c>
			{	
				ADCL_=ADCL;	
 468:	90 91 78 00 	lds	r25, 0x0078
 46c:	90 93 3a 01 	sts	0x013A, r25
				ADCH_=ADCH;
 470:	80 91 79 00 	lds	r24, 0x0079
 474:	80 93 3c 01 	sts	0x013C, r24
				UDR0=ADCL_;
 478:	90 93 c6 00 	sts	0x00C6, r25
 47c:	6d c0       	rjmp	.+218    	; 0x558 <__vector_9+0x326>
			}
			
			if(event_cnt==(3))//ADC GET CONTINUE
 47e:	43 30       	cpi	r20, 0x03	; 3
 480:	51 05       	cpc	r21, r1
 482:	31 f5       	brne	.+76     	; 0x4d0 <__vector_9+0x29e>
			{	
				
				UDR0=ADCH_;
 484:	80 91 3c 01 	lds	r24, 0x013C
 488:	80 93 c6 00 	sts	0x00C6, r24
				
				_adc=(ADCL_|(ADCH_ <<8));
 48c:	38 2f       	mov	r19, r24
 48e:	20 e0       	ldi	r18, 0x00	; 0
 490:	80 91 3a 01 	lds	r24, 0x013A
 494:	90 e0       	ldi	r25, 0x00	; 0
 496:	82 2b       	or	r24, r18
 498:	93 2b       	or	r25, r19
 49a:	90 93 40 01 	sts	0x0140, r25
 49e:	80 93 3f 01 	sts	0x013F, r24
				adc_h=((uint16_t)(512)-_adc);
 4a2:	20 e0       	ldi	r18, 0x00	; 0
 4a4:	32 e0       	ldi	r19, 0x02	; 2
 4a6:	28 1b       	sub	r18, r24
 4a8:	39 0b       	sbc	r19, r25
 4aa:	30 93 2c 01 	sts	0x012C, r19
 4ae:	20 93 2b 01 	sts	0x012B, r18
				
				if((adc_h)==(uint16_t)(t1))
 4b2:	80 91 08 01 	lds	r24, 0x0108
 4b6:	90 e0       	ldi	r25, 0x00	; 0
 4b8:	28 17       	cp	r18, r24
 4ba:	39 07       	cpc	r19, r25
 4bc:	09 f0       	breq	.+2      	; 0x4c0 <__vector_9+0x28e>
 4be:	48 c0       	rjmp	.+144    	; 0x550 <__vector_9+0x31e>
				{
					PROGRAM_done=1;
 4c0:	81 e0       	ldi	r24, 0x01	; 1
 4c2:	80 93 21 01 	sts	0x0121, r24
					prog_val=0;
 4c6:	10 92 18 01 	sts	0x0118, r1
 4ca:	10 92 17 01 	sts	0x0117, r1
 4ce:	4c c0       	rjmp	.+152    	; 0x568 <__vector_9+0x336>
				}
			}
			
			if(event_cnt==0)
 4d0:	41 15       	cp	r20, r1
 4d2:	51 05       	cpc	r21, r1
 4d4:	e9 f5       	brne	.+122    	; 0x550 <__vector_9+0x31e>
			{
				UDR0=255;
 4d6:	8f ef       	ldi	r24, 0xFF	; 255
 4d8:	80 93 c6 00 	sts	0x00C6, r24
				
				
				prog_val+=32;
 4dc:	20 91 17 01 	lds	r18, 0x0117
 4e0:	30 91 18 01 	lds	r19, 0x0118
 4e4:	20 5e       	subi	r18, 0xE0	; 224
 4e6:	3f 4f       	sbci	r19, 0xFF	; 255
 4e8:	30 93 18 01 	sts	0x0118, r19
 4ec:	20 93 17 01 	sts	0x0117, r18
				
				if(prog_val==(-x16+32))
 4f0:	40 91 19 01 	lds	r20, 0x0119
 4f4:	50 91 1a 01 	lds	r21, 0x011A
 4f8:	80 e2       	ldi	r24, 0x20	; 32
 4fa:	90 e0       	ldi	r25, 0x00	; 0
 4fc:	84 1b       	sub	r24, r20
 4fe:	95 0b       	sbc	r25, r21
 500:	28 17       	cp	r18, r24
 502:	39 07       	cpc	r19, r25
 504:	29 f4       	brne	.+10     	; 0x510 <__vector_9+0x2de>
					prog_val=0;
 506:	10 92 18 01 	sts	0x0118, r1
 50a:	10 92 17 01 	sts	0x0117, r1
 50e:	13 c0       	rjmp	.+38     	; 0x536 <__vector_9+0x304>
				else
				if(prog_val>(t2<<4))
 510:	80 91 09 01 	lds	r24, 0x0109
 514:	90 e0       	ldi	r25, 0x00	; 0
 516:	64 e0       	ldi	r22, 0x04	; 4
 518:	88 0f       	add	r24, r24
 51a:	99 1f       	adc	r25, r25
 51c:	6a 95       	dec	r22
 51e:	e1 f7       	brne	.-8      	; 0x518 <__vector_9+0x2e6>
 520:	82 17       	cp	r24, r18
 522:	93 07       	cpc	r25, r19
 524:	44 f4       	brge	.+16     	; 0x536 <__vector_9+0x304>
					prog_val=-x16;
 526:	88 27       	eor	r24, r24
 528:	99 27       	eor	r25, r25
 52a:	84 1b       	sub	r24, r20
 52c:	95 0b       	sbc	r25, r21
 52e:	90 93 18 01 	sts	0x0118, r25
 532:	80 93 17 01 	sts	0x0117, r24
				
				if(PROGRAM_done)
 536:	80 91 21 01 	lds	r24, 0x0121
 53a:	88 23       	and	r24, r24
 53c:	21 f0       	breq	.+8      	; 0x546 <__vector_9+0x314>
					prog_val=0;
 53e:	10 92 18 01 	sts	0x0118, r1
 542:	10 92 17 01 	sts	0x0117, r1
				
				setDAC(prog_val,chan);
 546:	80 91 17 01 	lds	r24, 0x0117
 54a:	90 91 18 01 	lds	r25, 0x0118
 54e:	8c c0       	rjmp	.+280    	; 0x668 <__vector_9+0x436>
				PORTD&=~(1<<LDAC);
				PORTD|=(1<<LDAC);
			}			
			else if(event_cnt==7)//t1
 550:	47 30       	cpi	r20, 0x07	; 7
 552:	51 05       	cpc	r21, r1
 554:	09 f4       	brne	.+2      	; 0x558 <__vector_9+0x326>
 556:	a3 c0       	rjmp	.+326    	; 0x69e <__vector_9+0x46c>
			{
				setDAC(0,chan);
				PORTD&=~(1<<LDAC);
				PORTD|=(1<<LDAC);
			}
			else if(event_cnt==9)//dT
 558:	49 30       	cpi	r20, 0x09	; 9
 55a:	51 05       	cpc	r21, r1
 55c:	29 f4       	brne	.+10     	; 0x568 <__vector_9+0x336>
			{		
				setDAC(y16,chan);
 55e:	80 91 1b 01 	lds	r24, 0x011B
 562:	90 91 1c 01 	lds	r25, 0x011C
 566:	80 c0       	rjmp	.+256    	; 0x668 <__vector_9+0x436>
				PORTD&=~(1<<LDAC);
				PORTD|=(1<<LDAC);
			}
			else if(event_cnt==(9+1))
 568:	4a 30       	cpi	r20, 0x0A	; 10
 56a:	51 05       	cpc	r21, r1
 56c:	09 f4       	brne	.+2      	; 0x570 <__vector_9+0x33e>
 56e:	a7 c0       	rjmp	.+334    	; 0x6be <__vector_9+0x48c>
				ADCSRA |= (1 << ADSC); 

			else if(event_cnt==14)//
 570:	4e 30       	cpi	r20, 0x0E	; 14
 572:	51 05       	cpc	r21, r1
 574:	09 f0       	breq	.+2      	; 0x578 <__vector_9+0x346>
 576:	c5 c0       	rjmp	.+394    	; 0x702 <__vector_9+0x4d0>
			{

			accum=0;
 578:	10 92 3e 01 	sts	0x013E, r1
 57c:	10 92 3d 01 	sts	0x013D, r1
			ADC_on=0;
 580:	10 92 2f 01 	sts	0x012F, r1
			accum_cnt=0;
 584:	10 92 36 01 	sts	0x0136, r1
 588:	8a c0       	rjmp	.+276    	; 0x69e <__vector_9+0x46c>
			setDAC(0,chan);
			PORTD&=~(1<<LDAC);
			PORTD|=(1<<LDAC);
			}
		}
		else if(MD == ONE_SHOT)
 58a:	65 30       	cpi	r22, 0x05	; 5
 58c:	09 f0       	breq	.+2      	; 0x590 <__vector_9+0x35e>
 58e:	5f c0       	rjmp	.+190    	; 0x64e <__vector_9+0x41c>
		{
			//готовим сброс
			if(event_cnt==0)
 590:	80 91 30 01 	lds	r24, 0x0130
 594:	90 91 31 01 	lds	r25, 0x0131
 598:	00 97       	sbiw	r24, 0x00	; 0
 59a:	49 f1       	breq	.+82     	; 0x5ee <__vector_9+0x3bc>
			{
				separMult();
			}//сброс
			else if(event_cnt==1)
 59c:	81 30       	cpi	r24, 0x01	; 1
 59e:	91 05       	cpc	r25, r1
 5a0:	41 f4       	brne	.+16     	; 0x5b2 <__vector_9+0x380>
			{
				setDAC(120<<4,3);
 5a2:	80 e8       	ldi	r24, 0x80	; 128
 5a4:	97 e0       	ldi	r25, 0x07	; 7
 5a6:	63 e0       	ldi	r22, 0x03	; 3
 5a8:	0e 94 a3 00 	call	0x146	; 0x146 <setDAC>
				setDAC(120<<4,2);
 5ac:	80 e8       	ldi	r24, 0x80	; 128
 5ae:	97 e0       	ldi	r25, 0x07	; 7
 5b0:	c1 ce       	rjmp	.-638    	; 0x334 <__vector_9+0x102>
				PORTD&=~(1<<LDAC);
				PORTD|=(1<<LDAC);
			}
			else if(event_cnt==2)
 5b2:	82 30       	cpi	r24, 0x02	; 2
 5b4:	91 05       	cpc	r25, r1
 5b6:	21 f4       	brne	.+8      	; 0x5c0 <__vector_9+0x38e>
			{
				setDAC(0,3);
 5b8:	80 e0       	ldi	r24, 0x00	; 0
 5ba:	90 e0       	ldi	r25, 0x00	; 0
 5bc:	63 e0       	ldi	r22, 0x03	; 3
 5be:	b6 ce       	rjmp	.-660    	; 0x32c <__vector_9+0xfa>
				setDAC(0,2);
				PORTD&=~(1<<LDAC);
				PORTD|=(1<<LDAC);
			}		//reseted		
			else if(event_cnt==3)
 5c0:	83 30       	cpi	r24, 0x03	; 3
 5c2:	91 05       	cpc	r25, r1
 5c4:	19 f4       	brne	.+6      	; 0x5cc <__vector_9+0x39a>
			{
				gatherMult();
 5c6:	0e 94 7a 00 	call	0xf4	; 0xf4 <gatherMult>
 5ca:	9b c0       	rjmp	.+310    	; 0x702 <__vector_9+0x4d0>
			}
			else if(event_cnt==4)
 5cc:	84 30       	cpi	r24, 0x04	; 4
 5ce:	91 05       	cpc	r25, r1
 5d0:	29 f4       	brne	.+10     	; 0x5dc <__vector_9+0x3aa>
			{
				setDAC(x16,3);				
 5d2:	80 91 19 01 	lds	r24, 0x0119
 5d6:	90 91 1a 01 	lds	r25, 0x011A
 5da:	22 c0       	rjmp	.+68     	; 0x620 <__vector_9+0x3ee>
				PORTD&=~(1<<LDAC);
				PORTD|=(1<<LDAC);
			}		
			else if(event_cnt==5)
 5dc:	85 30       	cpi	r24, 0x05	; 5
 5de:	91 05       	cpc	r25, r1
 5e0:	e9 f0       	breq	.+58     	; 0x61c <__vector_9+0x3ea>
				setDAC(0,3);				
				PORTD&=~(1<<LDAC);
				PORTD|=(1<<LDAC);
			}	//пнули		
				//посмотрим, что вышло
			else if(event_cnt==6)
 5e2:	86 30       	cpi	r24, 0x06	; 6
 5e4:	91 05       	cpc	r25, r1
 5e6:	31 f4       	brne	.+12     	; 0x5f4 <__vector_9+0x3c2>
			{
				UDR0=255;
 5e8:	8f ef       	ldi	r24, 0xFF	; 255
 5ea:	80 93 c6 00 	sts	0x00C6, r24
				separMult();				
 5ee:	0e 94 83 00 	call	0x106	; 0x106 <separMult>
 5f2:	87 c0       	rjmp	.+270    	; 0x702 <__vector_9+0x4d0>
			}			
			else if(event_cnt==7)
 5f4:	87 30       	cpi	r24, 0x07	; 7
 5f6:	91 05       	cpc	r25, r1
 5f8:	31 f4       	brne	.+12     	; 0x606 <__vector_9+0x3d4>
			{
				setDAC(y16,3);
 5fa:	80 91 1b 01 	lds	r24, 0x011B
 5fe:	90 91 1c 01 	lds	r25, 0x011C
 602:	63 e0       	ldi	r22, 0x03	; 3
 604:	58 c0       	rjmp	.+176    	; 0x6b6 <__vector_9+0x484>
				PORTD&=~(1<<LDAC);
				PORTD|=(1<<LDAC);
				
				ADCSRA |= (1 << ADSC); 
			}	
			else if(event_cnt==9)
 606:	89 30       	cpi	r24, 0x09	; 9
 608:	91 05       	cpc	r25, r1
 60a:	09 f4       	brne	.+2      	; 0x60e <__vector_9+0x3dc>
 60c:	69 c0       	rjmp	.+210    	; 0x6e0 <__vector_9+0x4ae>
				//setDAC(y16,3);
				ADCL_=ADCL;	
				ADCH_=ADCH;
				UDR0=ADCL_;
			}
			else if(event_cnt==10)
 60e:	8a 30       	cpi	r24, 0x0A	; 10
 610:	91 05       	cpc	r25, r1
 612:	41 f4       	brne	.+16     	; 0x624 <__vector_9+0x3f2>
			{
				UDR0=ADCH_; 
 614:	80 91 3c 01 	lds	r24, 0x013C
 618:	80 93 c6 00 	sts	0x00C6, r24
				
				setDAC(0,3);
 61c:	80 e0       	ldi	r24, 0x00	; 0
 61e:	90 e0       	ldi	r25, 0x00	; 0
 620:	63 e0       	ldi	r22, 0x03	; 3
 622:	89 ce       	rjmp	.-750    	; 0x336 <__vector_9+0x104>
				PORTD&=~(1<<LDAC);
				PORTD|=(1<<LDAC);
			}		
			//3й просмотрен
			else if(event_cnt==11)
 624:	8b 30       	cpi	r24, 0x0B	; 11
 626:	91 05       	cpc	r25, r1
 628:	31 f4       	brne	.+12     	; 0x636 <__vector_9+0x404>
			{				 
				setDAC(y16,2);
 62a:	80 91 1b 01 	lds	r24, 0x011B
 62e:	90 91 1c 01 	lds	r25, 0x011C
 632:	62 e0       	ldi	r22, 0x02	; 2
 634:	40 c0       	rjmp	.+128    	; 0x6b6 <__vector_9+0x484>
				PORTD&=~(1<<LDAC);
				PORTD|=(1<<LDAC);
				
				ADCSRA |= (1 << ADSC); 
			}
			else if(event_cnt==13)
 636:	8d 30       	cpi	r24, 0x0D	; 13
 638:	91 05       	cpc	r25, r1
 63a:	09 f4       	brne	.+2      	; 0x63e <__vector_9+0x40c>
 63c:	51 c0       	rjmp	.+162    	; 0x6e0 <__vector_9+0x4ae>
			{		
				ADCL_=ADCL;	
				ADCH_=ADCH;
				UDR0=ADCL_;
			}
			else if(event_cnt == 14)
 63e:	0e 97       	sbiw	r24, 0x0e	; 14
 640:	09 f0       	breq	.+2      	; 0x644 <__vector_9+0x412>
 642:	5f c0       	rjmp	.+190    	; 0x702 <__vector_9+0x4d0>
			{
				UDR0=ADCH_; 
 644:	80 91 3c 01 	lds	r24, 0x013C
 648:	80 93 c6 00 	sts	0x00C6, r24
 64c:	71 ce       	rjmp	.-798    	; 0x330 <__vector_9+0xfe>
			}
			
		}
		
		
		else if(MD == ANALYZE)
 64e:	66 30       	cpi	r22, 0x06	; 6
 650:	09 f0       	breq	.+2      	; 0x654 <__vector_9+0x422>
 652:	57 c0       	rjmp	.+174    	; 0x702 <__vector_9+0x4d0>
		{
			//unset
			if(event_cnt==0)
 654:	80 91 30 01 	lds	r24, 0x0130
 658:	90 91 31 01 	lds	r25, 0x0131
 65c:	00 97       	sbiw	r24, 0x00	; 0
 65e:	39 f4       	brne	.+14     	; 0x66e <__vector_9+0x43c>
			{
				setDAC(z16, chan);
 660:	80 91 1d 01 	lds	r24, 0x011D
 664:	90 91 1e 01 	lds	r25, 0x011E
 668:	60 91 22 01 	lds	r22, 0x0122
 66c:	64 ce       	rjmp	.-824    	; 0x336 <__vector_9+0x104>
				PORTD&=~(1<<LDAC);
				PORTD|=(1<<LDAC);
			}
			else if(event_cnt==1)
 66e:	81 30       	cpi	r24, 0x01	; 1
 670:	91 05       	cpc	r25, r1
 672:	a9 f0       	breq	.+42     	; 0x69e <__vector_9+0x46c>
			{
				setDAC(0, chan);				
				PORTD&=~(1<<LDAC);
				PORTD|=(1<<LDAC);
			}
			else if(event_cnt==3)
 674:	83 30       	cpi	r24, 0x03	; 3
 676:	91 05       	cpc	r25, r1
 678:	79 f4       	brne	.+30     	; 0x698 <__vector_9+0x466>
			{
				setDAC(x16, chan);
 67a:	80 91 19 01 	lds	r24, 0x0119
 67e:	90 91 1a 01 	lds	r25, 0x011A
 682:	60 91 22 01 	lds	r22, 0x0122
 686:	0e 94 a3 00 	call	0x146	; 0x146 <setDAC>
				PORTD&=~(1<<LDAC);
 68a:	5a 98       	cbi	0x0b, 2	; 11
				PORTD|=(1<<LDAC);
 68c:	5a 9a       	sbi	0x0b, 2	; 11
				resetDAC(chan);
 68e:	80 91 22 01 	lds	r24, 0x0122
 692:	0e 94 91 00 	call	0x122	; 0x122 <resetDAC>
 696:	51 ce       	rjmp	.-862    	; 0x33a <__vector_9+0x108>
				PORTD&=~(1<<LDAC);
				PORTD|=(1<<LDAC);
			}
			else if(event_cnt==4)
 698:	84 30       	cpi	r24, 0x04	; 4
 69a:	91 05       	cpc	r25, r1
 69c:	19 f4       	brne	.+6      	; 0x6a4 <__vector_9+0x472>
			{
				setDAC(0, chan);
 69e:	80 e0       	ldi	r24, 0x00	; 0
 6a0:	90 e0       	ldi	r25, 0x00	; 0
 6a2:	e2 cf       	rjmp	.-60     	; 0x668 <__vector_9+0x436>
				PORTD&=~(1<<LDAC);
				PORTD|=(1<<LDAC);
			}
			else if(event_cnt==6)//measure
 6a4:	86 30       	cpi	r24, 0x06	; 6
 6a6:	91 05       	cpc	r25, r1
 6a8:	81 f4       	brne	.+32     	; 0x6ca <__vector_9+0x498>
			{
				setDAC(y16, chan);
 6aa:	80 91 1b 01 	lds	r24, 0x011B
 6ae:	90 91 1c 01 	lds	r25, 0x011C
 6b2:	60 91 22 01 	lds	r22, 0x0122
 6b6:	0e 94 a3 00 	call	0x146	; 0x146 <setDAC>
				PORTD&=~(1<<LDAC);
 6ba:	5a 98       	cbi	0x0b, 2	; 11
				PORTD|=(1<<LDAC);
 6bc:	5a 9a       	sbi	0x0b, 2	; 11
				ADCSRA |= (1 << ADSC); 
 6be:	80 91 7a 00 	lds	r24, 0x007A
 6c2:	80 64       	ori	r24, 0x40	; 64
 6c4:	80 93 7a 00 	sts	0x007A, r24
 6c8:	1c c0       	rjmp	.+56     	; 0x702 <__vector_9+0x4d0>
			}
			else if(event_cnt==7)
 6ca:	87 30       	cpi	r24, 0x07	; 7
 6cc:	91 05       	cpc	r25, r1
 6ce:	99 f4       	brne	.+38     	; 0x6f6 <__vector_9+0x4c4>
			{
				setDAC(0, chan);
 6d0:	80 e0       	ldi	r24, 0x00	; 0
 6d2:	90 e0       	ldi	r25, 0x00	; 0
 6d4:	60 91 22 01 	lds	r22, 0x0122
 6d8:	0e 94 a3 00 	call	0x146	; 0x146 <setDAC>
				PORTD&=~(1<<LDAC);
 6dc:	5a 98       	cbi	0x0b, 2	; 11
				PORTD|=(1<<LDAC);
 6de:	5a 9a       	sbi	0x0b, 2	; 11
				
				ADCL_=ADCL;	
 6e0:	90 91 78 00 	lds	r25, 0x0078
 6e4:	90 93 3a 01 	sts	0x013A, r25
				ADCH_=ADCH;
 6e8:	80 91 79 00 	lds	r24, 0x0079
 6ec:	80 93 3c 01 	sts	0x013C, r24
				UDR0=ADCL_;
 6f0:	90 93 c6 00 	sts	0x00C6, r25
 6f4:	06 c0       	rjmp	.+12     	; 0x702 <__vector_9+0x4d0>
			}
			else if(event_cnt==8)
 6f6:	08 97       	sbiw	r24, 0x08	; 8
 6f8:	21 f4       	brne	.+8      	; 0x702 <__vector_9+0x4d0>
			{
				UDR0=ADCH_;
 6fa:	80 91 3c 01 	lds	r24, 0x013C
 6fe:	80 93 c6 00 	sts	0x00C6, r24
		}
		
		
		
		
		ctr=0;
 702:	10 92 35 01 	sts	0x0135, r1
 706:	10 92 34 01 	sts	0x0134, r1
		
		
		if(MD!=ONE_SHOT)
 70a:	80 91 10 01 	lds	r24, 0x0110
 70e:	20 91 30 01 	lds	r18, 0x0130
 712:	30 91 31 01 	lds	r19, 0x0131
 716:	85 30       	cpi	r24, 0x05	; 5
 718:	89 f0       	breq	.+34     	; 0x73c <__vector_9+0x50a>
		{
		event_cnt++;
 71a:	2f 5f       	subi	r18, 0xFF	; 255
 71c:	3f 4f       	sbci	r19, 0xFF	; 255
 71e:	30 93 31 01 	sts	0x0131, r19
 722:	20 93 30 01 	sts	0x0130, r18
		if(event_cnt>T)
 726:	80 91 39 01 	lds	r24, 0x0139
 72a:	90 e0       	ldi	r25, 0x00	; 0
 72c:	82 17       	cp	r24, r18
 72e:	93 07       	cpc	r25, r19
 730:	74 f4       	brge	.+28     	; 0x74e <__vector_9+0x51c>
			event_cnt=0;
 732:	10 92 31 01 	sts	0x0131, r1
 736:	10 92 30 01 	sts	0x0130, r1
 73a:	09 c0       	rjmp	.+18     	; 0x74e <__vector_9+0x51c>
		}
		else
		{
			if(event_cnt<30)
 73c:	2e 31       	cpi	r18, 0x1E	; 30
 73e:	31 05       	cpc	r19, r1
 740:	34 f4       	brge	.+12     	; 0x74e <__vector_9+0x51c>
				event_cnt++;			
 742:	2f 5f       	subi	r18, 0xFF	; 255
 744:	3f 4f       	sbci	r19, 0xFF	; 255
 746:	30 93 31 01 	sts	0x0131, r19
 74a:	20 93 30 01 	sts	0x0130, r18
		}
	}
	ctr++;
 74e:	80 91 34 01 	lds	r24, 0x0134
 752:	90 91 35 01 	lds	r25, 0x0135
 756:	01 96       	adiw	r24, 0x01	; 1
 758:	90 93 35 01 	sts	0x0135, r25
 75c:	80 93 34 01 	sts	0x0134, r24
}
 760:	ff 91       	pop	r31
 762:	ef 91       	pop	r30
 764:	bf 91       	pop	r27
 766:	af 91       	pop	r26
 768:	9f 91       	pop	r25
 76a:	8f 91       	pop	r24
 76c:	7f 91       	pop	r23
 76e:	6f 91       	pop	r22
 770:	5f 91       	pop	r21
 772:	4f 91       	pop	r20
 774:	3f 91       	pop	r19
 776:	2f 91       	pop	r18
 778:	0f 90       	pop	r0
 77a:	0f be       	out	0x3f, r0	; 63
 77c:	0f 90       	pop	r0
 77e:	1f 90       	pop	r1
 780:	18 95       	reti

00000782 <__vector_18>:

//прием команд от компьютера по UART в зависимости от режима
ISR(USART_RX_vect)
{
 782:	1f 92       	push	r1
 784:	0f 92       	push	r0
 786:	0f b6       	in	r0, 0x3f	; 63
 788:	0f 92       	push	r0
 78a:	11 24       	eor	r1, r1
 78c:	2f 93       	push	r18
 78e:	3f 93       	push	r19
 790:	4f 93       	push	r20
 792:	5f 93       	push	r21
 794:	6f 93       	push	r22
 796:	7f 93       	push	r23
 798:	8f 93       	push	r24
 79a:	9f 93       	push	r25
 79c:	af 93       	push	r26
 79e:	bf 93       	push	r27
 7a0:	ef 93       	push	r30
 7a2:	ff 93       	push	r31
	switch(ptr)
 7a4:	80 91 20 01 	lds	r24, 0x0120
 7a8:	84 30       	cpi	r24, 0x04	; 4
 7aa:	09 f4       	brne	.+2      	; 0x7ae <__vector_18+0x2c>
 7ac:	65 c0       	rjmp	.+202    	; 0x878 <__vector_18+0xf6>
 7ae:	85 30       	cpi	r24, 0x05	; 5
 7b0:	58 f4       	brcc	.+22     	; 0x7c8 <__vector_18+0x46>
 7b2:	81 30       	cpi	r24, 0x01	; 1
 7b4:	51 f1       	breq	.+84     	; 0x80a <__vector_18+0x88>
 7b6:	81 30       	cpi	r24, 0x01	; 1
 7b8:	d0 f0       	brcs	.+52     	; 0x7ee <__vector_18+0x6c>
 7ba:	82 30       	cpi	r24, 0x02	; 2
 7bc:	09 f4       	brne	.+2      	; 0x7c0 <__vector_18+0x3e>
 7be:	42 c0       	rjmp	.+132    	; 0x844 <__vector_18+0xc2>
 7c0:	83 30       	cpi	r24, 0x03	; 3
 7c2:	09 f0       	breq	.+2      	; 0x7c6 <__vector_18+0x44>
 7c4:	91 c0       	rjmp	.+290    	; 0x8e8 <__vector_18+0x166>
 7c6:	4b c0       	rjmp	.+150    	; 0x85e <__vector_18+0xdc>
 7c8:	87 30       	cpi	r24, 0x07	; 7
 7ca:	09 f4       	brne	.+2      	; 0x7ce <__vector_18+0x4c>
 7cc:	6c c0       	rjmp	.+216    	; 0x8a6 <__vector_18+0x124>
 7ce:	88 30       	cpi	r24, 0x08	; 8
 7d0:	38 f4       	brcc	.+14     	; 0x7e0 <__vector_18+0x5e>
 7d2:	85 30       	cpi	r24, 0x05	; 5
 7d4:	09 f4       	brne	.+2      	; 0x7d8 <__vector_18+0x56>
 7d6:	5d c0       	rjmp	.+186    	; 0x892 <__vector_18+0x110>
 7d8:	86 30       	cpi	r24, 0x06	; 6
 7da:	09 f0       	breq	.+2      	; 0x7de <__vector_18+0x5c>
 7dc:	85 c0       	rjmp	.+266    	; 0x8e8 <__vector_18+0x166>
 7de:	5e c0       	rjmp	.+188    	; 0x89c <__vector_18+0x11a>
 7e0:	88 30       	cpi	r24, 0x08	; 8
 7e2:	09 f4       	brne	.+2      	; 0x7e6 <__vector_18+0x64>
 7e4:	65 c0       	rjmp	.+202    	; 0x8b0 <__vector_18+0x12e>
 7e6:	89 30       	cpi	r24, 0x09	; 9
 7e8:	09 f0       	breq	.+2      	; 0x7ec <__vector_18+0x6a>
 7ea:	7e c0       	rjmp	.+252    	; 0x8e8 <__vector_18+0x166>
 7ec:	66 c0       	rjmp	.+204    	; 0x8ba <__vector_18+0x138>
	{
		case 0:
		if(UDR0!=255)//байт 255 является синхронизирующим
 7ee:	80 91 c6 00 	lds	r24, 0x00C6
 7f2:	8f 3f       	cpi	r24, 0xFF	; 255
 7f4:	31 f0       	breq	.+12     	; 0x802 <__vector_18+0x80>
		{
			sync=0;
 7f6:	10 92 1f 01 	sts	0x011F, r1
			ptr--;
			ptr%=7;
 7fa:	83 e0       	ldi	r24, 0x03	; 3
 7fc:	80 93 20 01 	sts	0x0120, r24
 800:	73 c0       	rjmp	.+230    	; 0x8e8 <__vector_18+0x166>
		}
		else
			sync=1;
 802:	81 e0       	ldi	r24, 0x01	; 1
 804:	80 93 1f 01 	sts	0x011F, r24
 808:	6f c0       	rjmp	.+222    	; 0x8e8 <__vector_18+0x166>
		break;
		case 1:
		MD=UDR0;
 80a:	20 91 c6 00 	lds	r18, 0x00C6
 80e:	20 93 10 01 	sts	0x0110, r18
		if(MD==VAC)
 812:	21 30       	cpi	r18, 0x01	; 1
 814:	39 f4       	brne	.+14     	; 0x824 <__vector_18+0xa2>
			time_step=4;//5
 816:	84 e0       	ldi	r24, 0x04	; 4
 818:	90 e0       	ldi	r25, 0x00	; 0
 81a:	90 93 0d 01 	sts	0x010D, r25
 81e:	80 93 0c 01 	sts	0x010C, r24
 822:	62 c0       	rjmp	.+196    	; 0x8e8 <__vector_18+0x166>
		else
			time_step=6;//4
 824:	86 e0       	ldi	r24, 0x06	; 6
 826:	90 e0       	ldi	r25, 0x00	; 0
 828:	90 93 0d 01 	sts	0x010D, r25
 82c:	80 93 0c 01 	sts	0x010C, r24
		
		if(MD==PROGRAM)
 830:	22 30       	cpi	r18, 0x02	; 2
 832:	09 f0       	breq	.+2      	; 0x836 <__vector_18+0xb4>
 834:	59 c0       	rjmp	.+178    	; 0x8e8 <__vector_18+0x166>
		{
			//PROGRAM_start=1;
			PROGRAM_done=0;
 836:	10 92 21 01 	sts	0x0121, r1
			prog_val=0;
 83a:	10 92 18 01 	sts	0x0118, r1
 83e:	10 92 17 01 	sts	0x0117, r1
 842:	52 c0       	rjmp	.+164    	; 0x8e8 <__vector_18+0x166>
		}
		break;
		case 2:
		x16=UDR0<<4;
 844:	80 91 c6 00 	lds	r24, 0x00C6
 848:	90 e0       	ldi	r25, 0x00	; 0
 84a:	a4 e0       	ldi	r26, 0x04	; 4
 84c:	88 0f       	add	r24, r24
 84e:	99 1f       	adc	r25, r25
 850:	aa 95       	dec	r26
 852:	e1 f7       	brne	.-8      	; 0x84c <__vector_18+0xca>
 854:	90 93 1a 01 	sts	0x011A, r25
 858:	80 93 19 01 	sts	0x0119, r24
 85c:	45 c0       	rjmp	.+138    	; 0x8e8 <__vector_18+0x166>
		break;
		case 3:	
		y16=UDR0<<4;
 85e:	80 91 c6 00 	lds	r24, 0x00C6
 862:	90 e0       	ldi	r25, 0x00	; 0
 864:	f4 e0       	ldi	r31, 0x04	; 4
 866:	88 0f       	add	r24, r24
 868:	99 1f       	adc	r25, r25
 86a:	fa 95       	dec	r31
 86c:	e1 f7       	brne	.-8      	; 0x866 <__vector_18+0xe4>
 86e:	90 93 1c 01 	sts	0x011C, r25
 872:	80 93 1b 01 	sts	0x011B, r24
 876:	38 c0       	rjmp	.+112    	; 0x8e8 <__vector_18+0x166>
		break;
		case 4:
		z16=UDR0<<4;
 878:	80 91 c6 00 	lds	r24, 0x00C6
 87c:	90 e0       	ldi	r25, 0x00	; 0
 87e:	e4 e0       	ldi	r30, 0x04	; 4
 880:	88 0f       	add	r24, r24
 882:	99 1f       	adc	r25, r25
 884:	ea 95       	dec	r30
 886:	e1 f7       	brne	.-8      	; 0x880 <__vector_18+0xfe>
 888:	90 93 1e 01 	sts	0x011E, r25
 88c:	80 93 1d 01 	sts	0x011D, r24
 890:	2b c0       	rjmp	.+86     	; 0x8e8 <__vector_18+0x166>
		break;		
		case 5:
		t2=UDR0;
 892:	80 91 c6 00 	lds	r24, 0x00C6
 896:	80 93 09 01 	sts	0x0109, r24
 89a:	26 c0       	rjmp	.+76     	; 0x8e8 <__vector_18+0x166>
		break;	
		case 6:
		dT=UDR0;
 89c:	80 91 c6 00 	lds	r24, 0x00C6
 8a0:	80 93 33 01 	sts	0x0133, r24
 8a4:	21 c0       	rjmp	.+66     	; 0x8e8 <__vector_18+0x166>
		break;
		case 7:
		T=UDR0;
 8a6:	80 91 c6 00 	lds	r24, 0x00C6
 8aa:	80 93 39 01 	sts	0x0139, r24
 8ae:	1c c0       	rjmp	.+56     	; 0x8e8 <__vector_18+0x166>
		break;
		case 8:
		chan=UDR0;
 8b0:	80 91 c6 00 	lds	r24, 0x00C6
 8b4:	80 93 22 01 	sts	0x0122, r24
 8b8:	17 c0       	rjmp	.+46     	; 0x8e8 <__vector_18+0x166>
		break;
		
		case 9:
			reverted[chan]=UDR0;
 8ba:	80 91 c6 00 	lds	r24, 0x00C6
 8be:	e0 91 22 01 	lds	r30, 0x0122
 8c2:	f0 e0       	ldi	r31, 0x00	; 0
 8c4:	ed 5d       	subi	r30, 0xDD	; 221
 8c6:	fe 4f       	sbci	r31, 0xFE	; 254
 8c8:	80 83       	st	Z, r24
		
			event_cnt=0;			
 8ca:	10 92 31 01 	sts	0x0131, r1
 8ce:	10 92 30 01 	sts	0x0130, r1
			
			if(MD==GATHER_MULT)
 8d2:	80 91 10 01 	lds	r24, 0x0110
 8d6:	83 30       	cpi	r24, 0x03	; 3
 8d8:	19 f4       	brne	.+6      	; 0x8e0 <__vector_18+0x15e>
			{
			//	PORTD=0b00100000;
			//static int ff=1<<5;
			//if(x16>>4)
			gatherMult();
 8da:	0e 94 7a 00 	call	0xf4	; 0xf4 <gatherMult>
 8de:	04 c0       	rjmp	.+8      	; 0x8e8 <__vector_18+0x166>
			//PORTD=(1<<5)^PORTD;
			//PORTD=ff;
			}else if(MD==SEPAR_MULT)	
 8e0:	84 30       	cpi	r24, 0x04	; 4
 8e2:	11 f4       	brne	.+4      	; 0x8e8 <__vector_18+0x166>
			{
			separMult();	
 8e4:	0e 94 83 00 	call	0x106	; 0x106 <separMult>
		break;
	}
	

	
	dTt2=dT+t2;
 8e8:	80 91 09 01 	lds	r24, 0x0109
 8ec:	90 91 33 01 	lds	r25, 0x0133
 8f0:	89 0f       	add	r24, r25
 8f2:	80 93 0a 01 	sts	0x010A, r24
	//UDR0=x16/16;
	ptr++;
	ptr%=10;
 8f6:	80 91 20 01 	lds	r24, 0x0120
 8fa:	8f 5f       	subi	r24, 0xFF	; 255
 8fc:	6a e0       	ldi	r22, 0x0A	; 10
 8fe:	0e 94 94 04 	call	0x928	; 0x928 <__udivmodqi4>
 902:	90 93 20 01 	sts	0x0120, r25
 906:	ff 91       	pop	r31
 908:	ef 91       	pop	r30
 90a:	bf 91       	pop	r27
 90c:	af 91       	pop	r26
 90e:	9f 91       	pop	r25
 910:	8f 91       	pop	r24
 912:	7f 91       	pop	r23
 914:	6f 91       	pop	r22
 916:	5f 91       	pop	r21
 918:	4f 91       	pop	r20
 91a:	3f 91       	pop	r19
 91c:	2f 91       	pop	r18
 91e:	0f 90       	pop	r0
 920:	0f be       	out	0x3f, r0	; 63
 922:	0f 90       	pop	r0
 924:	1f 90       	pop	r1
 926:	18 95       	reti

00000928 <__udivmodqi4>:
 928:	99 1b       	sub	r25, r25
 92a:	79 e0       	ldi	r23, 0x09	; 9
 92c:	04 c0       	rjmp	.+8      	; 0x936 <__udivmodqi4_ep>

0000092e <__udivmodqi4_loop>:
 92e:	99 1f       	adc	r25, r25
 930:	96 17       	cp	r25, r22
 932:	08 f0       	brcs	.+2      	; 0x936 <__udivmodqi4_ep>
 934:	96 1b       	sub	r25, r22

00000936 <__udivmodqi4_ep>:
 936:	88 1f       	adc	r24, r24
 938:	7a 95       	dec	r23
 93a:	c9 f7       	brne	.-14     	; 0x92e <__udivmodqi4_loop>
 93c:	80 95       	com	r24
 93e:	08 95       	ret

00000940 <_exit>:
 940:	f8 94       	cli

00000942 <__stop_program>:
 942:	ff cf       	rjmp	.-2      	; 0x942 <__stop_program>
