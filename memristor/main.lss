
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000001e  00800100  00000c04  00000c98  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000c04  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000053  0080011e  0080011e  00000cb6  2**0
                  ALLOC
  3 .debug_aranges 00000020  00000000  00000000  00000cb6  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 000002df  00000000  00000000  00000cd6  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000811  00000000  00000000  00000fb5  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000001fd  00000000  00000000  000017c6  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000a91  00000000  00000000  000019c3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000f0  00000000  00000000  00002454  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000002aa  00000000  00000000  00002544  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000116  00000000  00000000  000027ee  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 83 01 	jmp	0x306	; 0x306 <__vector_9>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 f7 04 	jmp	0x9ee	; 0x9ee <__vector_18>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e4 e0       	ldi	r30, 0x04	; 4
  7c:	fc e0       	ldi	r31, 0x0C	; 12
  7e:	02 c0       	rjmp	.+4      	; 0x84 <.do_copy_data_start>

00000080 <.do_copy_data_loop>:
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0

00000084 <.do_copy_data_start>:
  84:	ae 31       	cpi	r26, 0x1E	; 30
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <.do_copy_data_loop>

0000008a <__do_clear_bss>:
  8a:	11 e0       	ldi	r17, 0x01	; 1
  8c:	ae e1       	ldi	r26, 0x1E	; 30
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a1 37       	cpi	r26, 0x71	; 113
  96:	b1 07       	cpc	r27, r17
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 2c 01 	call	0x258	; 0x258 <main>
  9e:	0c 94 00 06 	jmp	0xc00	; 0xc00 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <ADC_Init>:
//uint

//функция инициализаци АЦП
//АЦП используется для регистрации тока, проходящего через мемристор
void ADC_Init(){
 ADCSRA |= (1 << ADEN) // Включаем АЦП
  a6:	ea e7       	ldi	r30, 0x7A	; 122
  a8:	f0 e0       	ldi	r31, 0x00	; 0
  aa:	80 81       	ld	r24, Z
  ac:	83 68       	ori	r24, 0x83	; 131
  ae:	80 83       	st	Z, r24
 //ADCSRA&=~(1 << ADPS1)|(1 << ADPS0)|(1 << ADPS1);
 |(1 << ADPS1)|(1 << ADPS0)|(1 << ADPS1);    // устанавливаем предделитель преобразователя на 8
 ADMUX |= (0 << REFS1)|(1 << REFS0) //выставляем опорное напряжение, как внешний ИОН
  b0:	ec e7       	ldi	r30, 0x7C	; 124
  b2:	f0 e0       	ldi	r31, 0x00	; 0
  b4:	80 81       	ld	r24, Z
  b6:	80 64       	ori	r24, 0x40	; 64
  b8:	80 83       	st	Z, r24
 |(0 << MUX0)|(0 << MUX1)|(0 << MUX2)|(0 << MUX3); // снимать сигнал будем с  входа PC0 
}
  ba:	08 95       	ret

000000bc <timer_init>:

//функция инициализации таймера
// Таймер используется для формирования временной последовательности значений, формируемых с ЦАПа
void timer_init()
{
    TCCR2A = 0;        
  bc:	10 92 b0 00 	sts	0x00B0, r1
    TCCR2B = 0;
  c0:	e1 eb       	ldi	r30, 0xB1	; 177
  c2:	f0 e0       	ldi	r31, 0x00	; 0
  c4:	10 82       	st	Z, r1
    
    TCCR2B |= (1<<CS21) ;    
  c6:	80 81       	ld	r24, Z
  c8:	82 60       	ori	r24, 0x02	; 2
  ca:	80 83       	st	Z, r24
    TIMSK2 = (1 << TOIE2);
  cc:	81 e0       	ldi	r24, 0x01	; 1
  ce:	80 93 70 00 	sts	0x0070, r24
}
  d2:	08 95       	ret

000000d4 <uart_init>:

//функция инициализации UART-интерфейса
void uart_init(unsigned int ubrr)
{	
	UBRR0H = (unsigned char)(ubrr>>8);
  d4:	90 93 c5 00 	sts	0x00C5, r25
	UBRR0L = (unsigned char)ubrr;
  d8:	80 93 c4 00 	sts	0x00C4, r24
	UCSR0B = (1<<RXCIE0)|(1<<RXEN0)|(1<<TXEN0);
  dc:	88 e9       	ldi	r24, 0x98	; 152
  de:	80 93 c1 00 	sts	0x00C1, r24
	UCSR0C = (1<<USBS0)|(3<<UCSZ00);
  e2:	8e e0       	ldi	r24, 0x0E	; 14
  e4:	80 93 c2 00 	sts	0x00C2, r24
}
  e8:	08 95       	ret

000000ea <SPI_MasterInit>:

//функция инициализации SPI
void SPI_MasterInit()
{
	DDR_SPI = (1<<DD_MOSI)|(1<<DD_SCK)|(1<<SPI_SS);
  ea:	8c e2       	ldi	r24, 0x2C	; 44
  ec:	84 b9       	out	0x04, r24	; 4
	SPCR = (1<<SPE)|(0<<DORD)|(1<<MSTR)|(1<<CPOL)|(0<<CPHA);//|(1<<SPR1)|(0<<SPR0);
  ee:	88 e5       	ldi	r24, 0x58	; 88
  f0:	8c bd       	out	0x2c, r24	; 44
}
  f2:	08 95       	ret

000000f4 <gatherMult>:
}

			
void gatherMult()
{
	reset_BYTE(PORTD, 6);
  f4:	5e 98       	cbi	0x0b, 6	; 11
	reset_BYTE(PORTD, 7);				
  f6:	5f 98       	cbi	0x0b, 7	; 11
	reset_BYTE(PORTD, 5);
  f8:	5d 98       	cbi	0x0b, 5	; 11
	reset_BYTE(PORTC, 4);
  fa:	44 98       	cbi	0x08, 4	; 8
	
	
	SET_BYTE(PORTC, 1);				
  fc:	41 9a       	sbi	0x08, 1	; 8
	SET_BYTE(PORTB, 2);
  fe:	2a 9a       	sbi	0x05, 2	; 5
	SET_BYTE(PORTB, 1);
 100:	29 9a       	sbi	0x05, 1	; 5
	SET_BYTE(PORTB, 0);
 102:	28 9a       	sbi	0x05, 0	; 5
}
 104:	08 95       	ret

00000106 <separMult>:
void separMult()
{
	reset_BYTE(PORTB, 1);
 106:	29 98       	cbi	0x05, 1	; 5
	reset_BYTE(PORTB, 2);
 108:	2a 98       	cbi	0x05, 2	; 5
	reset_BYTE(PORTC, 1);
 10a:	41 98       	cbi	0x08, 1	; 8
	
	SET_BYTE(PORTC, 4);						
 10c:	44 9a       	sbi	0x08, 4	; 8
	SET_BYTE(PORTD, 6);
 10e:	5e 9a       	sbi	0x0b, 6	; 11
	SET_BYTE(PORTD, 7);
 110:	5f 9a       	sbi	0x0b, 7	; 11
	SET_BYTE(PORTB, 0);
 112:	28 9a       	sbi	0x05, 0	; 5
	SET_BYTE(PORTD, 5);
 114:	5d 9a       	sbi	0x0b, 5	; 11
}
 116:	08 95       	ret

00000118 <SPI_WriteByte>:



void SPI_WriteByte(uint8_t data)
{
   SPDR = data;
 118:	8e bd       	out	0x2e, r24	; 46
  while(!(SPSR & (1<<SPIF)));
 11a:	0d b4       	in	r0, 0x2d	; 45
 11c:	07 fe       	sbrs	r0, 7
 11e:	fd cf       	rjmp	.-6      	; 0x11a <SPI_WriteByte+0x2>
}
 120:	08 95       	ret

00000122 <prepareResetDAC>:

}


void prepareResetDAC(int8_t chan)//_____________bipolar!!! and <<4 larger
{
 122:	0f 93       	push	r16
 124:	1f 93       	push	r17
 126:	cf 93       	push	r28
 128:	df 93       	push	r29
	PORTD&=~(1<<SYNC_PINS[chan>>3]);
 12a:	9b b1       	in	r25, 0x0b	; 11
 12c:	28 2f       	mov	r18, r24
 12e:	25 95       	asr	r18
 130:	25 95       	asr	r18
 132:	25 95       	asr	r18
 134:	c2 2f       	mov	r28, r18
 136:	dd 27       	eor	r29, r29
 138:	c7 fd       	sbrc	r28, 7
 13a:	d0 95       	com	r29
 13c:	c8 5f       	subi	r28, 0xF8	; 248
 13e:	de 4f       	sbci	r29, 0xFE	; 254
 140:	01 e0       	ldi	r16, 0x01	; 1
 142:	10 e0       	ldi	r17, 0x00	; 0
 144:	98 01       	movw	r18, r16
 146:	08 80       	ld	r0, Y
 148:	02 c0       	rjmp	.+4      	; 0x14e <prepareResetDAC+0x2c>
 14a:	22 0f       	add	r18, r18
 14c:	33 1f       	adc	r19, r19
 14e:	0a 94       	dec	r0
 150:	e2 f7       	brpl	.-8      	; 0x14a <prepareResetDAC+0x28>
 152:	20 95       	com	r18
 154:	29 23       	and	r18, r25
 156:	2b b9       	out	0x0b, r18	; 11
	SPI_WriteByte(0b00001000|chan_addrs[chan%8]); // magic numbers, fuck
 158:	68 e0       	ldi	r22, 0x08	; 8
 15a:	0e 94 df 05 	call	0xbbe	; 0xbbe <__divmodqi4>
 15e:	e9 2f       	mov	r30, r25
 160:	ff 27       	eor	r31, r31
 162:	e7 fd       	sbrc	r30, 7
 164:	f0 95       	com	r31
 166:	e2 5f       	subi	r30, 0xF2	; 242
 168:	fe 4f       	sbci	r31, 0xFE	; 254
 16a:	80 81       	ld	r24, Z
 16c:	88 60       	ori	r24, 0x08	; 8
 16e:	90 e0       	ldi	r25, 0x00	; 0
 170:	0e 94 8c 00 	call	0x118	; 0x118 <SPI_WriteByte>
	SPI_WriteByte(0);		
 174:	80 e0       	ldi	r24, 0x00	; 0
 176:	90 e0       	ldi	r25, 0x00	; 0
 178:	0e 94 8c 00 	call	0x118	; 0x118 <SPI_WriteByte>
	PORTD|=(1<<SYNC_PINS[chan>>3]);
 17c:	8b b1       	in	r24, 0x0b	; 11
 17e:	08 80       	ld	r0, Y
 180:	02 c0       	rjmp	.+4      	; 0x186 <prepareResetDAC+0x64>
 182:	00 0f       	add	r16, r16
 184:	11 1f       	adc	r17, r17
 186:	0a 94       	dec	r0
 188:	e2 f7       	brpl	.-8      	; 0x182 <prepareResetDAC+0x60>
 18a:	80 2b       	or	r24, r16
 18c:	8b b9       	out	0x0b, r24	; 11
}
 18e:	df 91       	pop	r29
 190:	cf 91       	pop	r28
 192:	1f 91       	pop	r17
 194:	0f 91       	pop	r16
 196:	08 95       	ret

00000198 <prepareSetDAC>:

//функция управления ЦАПом 
// при этом, управление регистром LDAC должно использоваться 
//вне функции в перспепктиве создания многоканальной схемы
void prepareSetDAC(int16_t x,uint8_t chan)//_____________bipolar!!! and <<4 larger
{
 198:	cf 92       	push	r12
 19a:	df 92       	push	r13
 19c:	ef 92       	push	r14
 19e:	ff 92       	push	r15
 1a0:	0f 93       	push	r16
 1a2:	1f 93       	push	r17
 1a4:	cf 93       	push	r28
 1a6:	df 93       	push	r29
 1a8:	e6 2f       	mov	r30, r22
	x=-x;
 1aa:	00 27       	eor	r16, r16
 1ac:	11 27       	eor	r17, r17
 1ae:	08 1b       	sub	r16, r24
 1b0:	19 0b       	sbc	r17, r25
	x+=2048;
 1b2:	00 50       	subi	r16, 0x00	; 0
 1b4:	18 4f       	sbci	r17, 0xF8	; 248
	*(REGS_OUT[chan>>3])&=~(1<<SYNC_PINS[chan>>3]);
 1b6:	c6 2e       	mov	r12, r22
 1b8:	c6 94       	lsr	r12
 1ba:	c6 94       	lsr	r12
 1bc:	c6 94       	lsr	r12
 1be:	8c 2d       	mov	r24, r12
 1c0:	90 e0       	ldi	r25, 0x00	; 0
 1c2:	6c 01       	movw	r12, r24
 1c4:	cc 0c       	add	r12, r12
 1c6:	dd 1c       	adc	r13, r13
 1c8:	20 e0       	ldi	r18, 0x00	; 0
 1ca:	31 e0       	ldi	r19, 0x01	; 1
 1cc:	c2 0e       	add	r12, r18
 1ce:	d3 1e       	adc	r13, r19
 1d0:	e6 01       	movw	r28, r12
 1d2:	a8 81       	ld	r26, Y
 1d4:	b9 81       	ldd	r27, Y+1	; 0x01
 1d6:	ec 01       	movw	r28, r24
 1d8:	c8 5f       	subi	r28, 0xF8	; 248
 1da:	de 4f       	sbci	r29, 0xFE	; 254
 1dc:	91 e0       	ldi	r25, 0x01	; 1
 1de:	e9 2e       	mov	r14, r25
 1e0:	f1 2c       	mov	r15, r1
 1e2:	c7 01       	movw	r24, r14
 1e4:	08 80       	ld	r0, Y
 1e6:	02 c0       	rjmp	.+4      	; 0x1ec <prepareSetDAC+0x54>
 1e8:	88 0f       	add	r24, r24
 1ea:	99 1f       	adc	r25, r25
 1ec:	0a 94       	dec	r0
 1ee:	e2 f7       	brpl	.-8      	; 0x1e8 <prepareSetDAC+0x50>
 1f0:	80 95       	com	r24
 1f2:	2c 91       	ld	r18, X
 1f4:	28 23       	and	r18, r24
 1f6:	2c 93       	st	X, r18
	send8 = (x >> 8);
	send8 &= 0b00001111;
	send8|= (chan_addrs[chan%8]);
 1f8:	81 2f       	mov	r24, r17
 1fa:	99 27       	eor	r25, r25
 1fc:	87 fd       	sbrc	r24, 7
 1fe:	9a 95       	dec	r25
 200:	8f 70       	andi	r24, 0x0F	; 15
 202:	f0 e0       	ldi	r31, 0x00	; 0
 204:	e7 70       	andi	r30, 0x07	; 7
 206:	f0 70       	andi	r31, 0x00	; 0
 208:	e2 5f       	subi	r30, 0xF2	; 242
 20a:	fe 4f       	sbci	r31, 0xFE	; 254
 20c:	20 81       	ld	r18, Z
 20e:	82 2b       	or	r24, r18
 210:	80 93 62 01 	sts	0x0162, r24
	SPI_WriteByte(send8);
 214:	90 e0       	ldi	r25, 0x00	; 0
 216:	0e 94 8c 00 	call	0x118	; 0x118 <SPI_WriteByte>
	send8=x;
 21a:	00 93 62 01 	sts	0x0162, r16
	SPI_WriteByte(send8);		
 21e:	80 2f       	mov	r24, r16
 220:	90 e0       	ldi	r25, 0x00	; 0
 222:	0e 94 8c 00 	call	0x118	; 0x118 <SPI_WriteByte>
	*(REGS_OUT[chan>>3])|=(1<<SYNC_PINS[chan>>3]);
 226:	d6 01       	movw	r26, r12
 228:	ed 91       	ld	r30, X+
 22a:	fc 91       	ld	r31, X
 22c:	08 80       	ld	r0, Y
 22e:	02 c0       	rjmp	.+4      	; 0x234 <prepareSetDAC+0x9c>
 230:	ee 0c       	add	r14, r14
 232:	ff 1c       	adc	r15, r15
 234:	0a 94       	dec	r0
 236:	e2 f7       	brpl	.-8      	; 0x230 <prepareSetDAC+0x98>
 238:	80 81       	ld	r24, Z
 23a:	8e 29       	or	r24, r14
 23c:	80 83       	st	Z, r24

}
 23e:	df 91       	pop	r29
 240:	cf 91       	pop	r28
 242:	1f 91       	pop	r17
 244:	0f 91       	pop	r16
 246:	ff 90       	pop	r15
 248:	ef 90       	pop	r14
 24a:	df 90       	pop	r13
 24c:	cf 90       	pop	r12
 24e:	08 95       	ret

00000250 <set_reverser>:
		else
			PORTB&=~(1<<4);
		break;

	}
}
 250:	08 95       	ret

00000252 <setDAC>:

void setDAC(){
	PORTD&=~(1<<LDAC);
 252:	5a 98       	cbi	0x0b, 2	; 11
	PORTD|=(1<<LDAC);	
 254:	5a 9a       	sbi	0x0b, 2	; 11
}
 256:	08 95       	ret

00000258 <main>:


void main(void)
{
 258:	1f 93       	push	r17
	BIG_STAT_N = STAT_N*STAT_CYCLE;
 25a:	80 91 0d 01 	lds	r24, 0x010D
 25e:	90 91 0c 01 	lds	r25, 0x010C
 262:	89 9f       	mul	r24, r25
 264:	80 2d       	mov	r24, r0
 266:	11 24       	eor	r1, r1
 268:	80 93 69 01 	sts	0x0169, r24
 26c:	ee e0       	ldi	r30, 0x0E	; 14
 26e:	f1 e0       	ldi	r31, 0x01	; 1
	
	for (uint8_t i=0; i< 8;i++)
		chan_addrs[i]=chan_addrs[i]<<4;
 270:	80 81       	ld	r24, Z
 272:	82 95       	swap	r24
 274:	80 7f       	andi	r24, 0xF0	; 240
 276:	81 93       	st	Z+, r24

void main(void)
{
	BIG_STAT_N = STAT_N*STAT_CYCLE;
	
	for (uint8_t i=0; i< 8;i++)
 278:	81 e0       	ldi	r24, 0x01	; 1
 27a:	e6 31       	cpi	r30, 0x16	; 22
 27c:	f8 07       	cpc	r31, r24
 27e:	c1 f7       	brne	.-16     	; 0x270 <main+0x18>
		chan_addrs[i]=chan_addrs[i]<<4;
	
	PORTC|=0b00000000;
 280:	88 b1       	in	r24, 0x08	; 8
 282:	88 b9       	out	0x08, r24	; 8
	DDRC= 0b00011110;
 284:	8e e1       	ldi	r24, 0x1E	; 30
 286:	87 b9       	out	0x07, r24	; 7
	DDRD =0b11111111;
 288:	8f ef       	ldi	r24, 0xFF	; 255
 28a:	8a b9       	out	0x0a, r24	; 10
	//PORTD|=0b00100000;	
	DDRB= 0b00011111;
 28c:	8f e1       	ldi	r24, 0x1F	; 31
 28e:	84 b9       	out	0x04, r24	; 4
	sei();
 290:	78 94       	sei
}

//функция инициализации SPI
void SPI_MasterInit()
{
	DDR_SPI = (1<<DD_MOSI)|(1<<DD_SCK)|(1<<SPI_SS);
 292:	8c e2       	ldi	r24, 0x2C	; 44
 294:	84 b9       	out	0x04, r24	; 4
	SPCR = (1<<SPE)|(0<<DORD)|(1<<MSTR)|(1<<CPOL)|(0<<CPHA);//|(1<<SPR1)|(0<<SPR0);
 296:	88 e5       	ldi	r24, 0x58	; 88
 298:	8c bd       	out	0x2c, r24	; 44

//функция инициализации таймера
// Таймер используется для формирования временной последовательности значений, формируемых с ЦАПа
void timer_init()
{
    TCCR2A = 0;        
 29a:	10 92 b0 00 	sts	0x00B0, r1
    TCCR2B = 0;
 29e:	10 92 b1 00 	sts	0x00B1, r1
    
    TCCR2B |= (1<<CS21) ;    
 2a2:	80 91 b1 00 	lds	r24, 0x00B1
 2a6:	82 60       	ori	r24, 0x02	; 2
 2a8:	80 93 b1 00 	sts	0x00B1, r24
    TIMSK2 = (1 << TOIE2);
 2ac:	81 e0       	ldi	r24, 0x01	; 1
 2ae:	80 93 70 00 	sts	0x0070, r24
}

//функция инициализации UART-интерфейса
void uart_init(unsigned int ubrr)
{	
	UBRR0H = (unsigned char)(ubrr>>8);
 2b2:	10 92 c5 00 	sts	0x00C5, r1
	UBRR0L = (unsigned char)ubrr;
 2b6:	83 e3       	ldi	r24, 0x33	; 51
 2b8:	80 93 c4 00 	sts	0x00C4, r24
	UCSR0B = (1<<RXCIE0)|(1<<RXEN0)|(1<<TXEN0);
 2bc:	88 e9       	ldi	r24, 0x98	; 152
 2be:	80 93 c1 00 	sts	0x00C1, r24
	UCSR0C = (1<<USBS0)|(3<<UCSZ00);
 2c2:	8e e0       	ldi	r24, 0x0E	; 14
 2c4:	80 93 c2 00 	sts	0x00C2, r24
//uint

//функция инициализаци АЦП
//АЦП используется для регистрации тока, проходящего через мемристор
void ADC_Init(){
 ADCSRA |= (1 << ADEN) // Включаем АЦП
 2c8:	80 91 7a 00 	lds	r24, 0x007A
 2cc:	83 68       	ori	r24, 0x83	; 131
 2ce:	80 93 7a 00 	sts	0x007A, r24
 //ADCSRA&=~(1 << ADPS1)|(1 << ADPS0)|(1 << ADPS1);
 |(1 << ADPS1)|(1 << ADPS0)|(1 << ADPS1);    // устанавливаем предделитель преобразователя на 8
 ADMUX |= (0 << REFS1)|(1 << REFS0) //выставляем опорное напряжение, как внешний ИОН
 2d2:	80 91 7c 00 	lds	r24, 0x007C
 2d6:	80 64       	ori	r24, 0x40	; 64
 2d8:	80 93 7c 00 	sts	0x007C, r24
    //DDRD = 0b000001100;	
	
	uart_init(BAUDRATE);
	ADC_Init();
	
	ADCSRA |= (1 << ADSC); 
 2dc:	80 91 7a 00 	lds	r24, 0x007A
 2e0:	80 64       	ori	r24, 0x40	; 64
 2e2:	80 93 7a 00 	sts	0x007A, r24
	ADCL;
 2e6:	80 91 78 00 	lds	r24, 0x0078
	ADCL;
 2ea:	80 91 78 00 	lds	r24, 0x0078
 2ee:	10 e0       	ldi	r17, 0x00	; 0
		//set_reverser(i,1);
	
	//set_reverser(0,0);
	for (int i=0;i<CHAN_N;i++)
	{
		prepareSetDAC(0,i);
 2f0:	80 e0       	ldi	r24, 0x00	; 0
 2f2:	90 e0       	ldi	r25, 0x00	; 0
 2f4:	61 2f       	mov	r22, r17
 2f6:	0e 94 cc 00 	call	0x198	; 0x198 <prepareSetDAC>
 2fa:	1f 5f       	subi	r17, 0xFF	; 255

	//for(int i=0;i<8;i++)
		//set_reverser(i,1);
	
	//set_reverser(0,0);
	for (int i=0;i<CHAN_N;i++)
 2fc:	10 32       	cpi	r17, 0x20	; 32
 2fe:	c1 f7       	brne	.-16     	; 0x2f0 <main+0x98>

	}
}

void setDAC(){
	PORTD&=~(1<<LDAC);
 300:	5a 98       	cbi	0x0b, 2	; 11
	PORTD|=(1<<LDAC);	
 302:	5a 9a       	sbi	0x0b, 2	; 11
 304:	ff cf       	rjmp	.-2      	; 0x304 <main+0xac>

00000306 <__vector_9>:
//главный цикл работы контроллера
//Здесь устанавливаются значения ЦАП и передаются данные на компьютер
//через UART-интерфейс
//данный участок кода повторяется при переполнении TIMER2
ISR(TIMER2_OVF_vect)
{
 306:	1f 92       	push	r1
 308:	0f 92       	push	r0
 30a:	0f b6       	in	r0, 0x3f	; 63
 30c:	0f 92       	push	r0
 30e:	11 24       	eor	r1, r1
 310:	2f 93       	push	r18
 312:	3f 93       	push	r19
 314:	4f 93       	push	r20
 316:	5f 93       	push	r21
 318:	6f 93       	push	r22
 31a:	7f 93       	push	r23
 31c:	8f 93       	push	r24
 31e:	9f 93       	push	r25
 320:	af 93       	push	r26
 322:	bf 93       	push	r27
 324:	ef 93       	push	r30
 326:	ff 93       	push	r31
	if(ctr>time_step)
 328:	20 91 5f 01 	lds	r18, 0x015F
 32c:	30 91 60 01 	lds	r19, 0x0160
 330:	80 91 1a 01 	lds	r24, 0x011A
 334:	90 91 1b 01 	lds	r25, 0x011B
 338:	82 17       	cp	r24, r18
 33a:	93 07       	cpc	r25, r19
 33c:	0c f0       	brlt	.+2      	; 0x340 <__vector_9+0x3a>
 33e:	3d c3       	rjmp	.+1658   	; 0x9ba <__stack+0xbb>
	{
		if(MD==CUSTOM)
 340:	60 91 1e 01 	lds	r22, 0x011E
 344:	66 23       	and	r22, r22
 346:	09 f0       	breq	.+2      	; 0x34a <__vector_9+0x44>
 348:	40 c0       	rjmp	.+128    	; 0x3ca <__vector_9+0xc4>
		{
			if(event_cnt==(1))
 34a:	20 91 5b 01 	lds	r18, 0x015B
 34e:	30 91 5c 01 	lds	r19, 0x015C
 352:	21 30       	cpi	r18, 0x01	; 1
 354:	31 05       	cpc	r19, r1
 356:	59 f4       	brne	.+22     	; 0x36e <__vector_9+0x68>
			{	
			ADCL_=ADCL;
 358:	90 91 78 00 	lds	r25, 0x0078
 35c:	90 93 64 01 	sts	0x0164, r25
			ADCH_=ADCH;
 360:	80 91 79 00 	lds	r24, 0x0079
 364:	80 93 68 01 	sts	0x0168, r24
			UDR0=ADCL_;			
 368:	90 93 c6 00 	sts	0x00C6, r25
 36c:	0d c0       	rjmp	.+26     	; 0x388 <__vector_9+0x82>
			}
			
			if(event_cnt==(2))
 36e:	22 30       	cpi	r18, 0x02	; 2
 370:	31 05       	cpc	r19, r1
 372:	29 f4       	brne	.+10     	; 0x37e <__vector_9+0x78>
			{	
			UDR0=ADCH_;				
 374:	80 91 68 01 	lds	r24, 0x0168
 378:	80 93 c6 00 	sts	0x00C6, r24
 37c:	05 c0       	rjmp	.+10     	; 0x388 <__vector_9+0x82>
			}
			
			
			
			if(event_cnt==0)
 37e:	21 15       	cp	r18, r1
 380:	31 05       	cpc	r19, r1
 382:	11 f4       	brne	.+4      	; 0x388 <__vector_9+0x82>
			{
			UDR0=255;
 384:	8f ef       	ldi	r24, 0xFF	; 255
 386:	b3 c2       	rjmp	.+1382   	; 0x8ee <__vector_9+0x5e8>
			prepareSetDAC(0,chan);
			//prepareSetDAC(x16,2);
			setDAC();
			}
			
			else if(event_cnt==t1)
 388:	80 91 16 01 	lds	r24, 0x0116
 38c:	90 e0       	ldi	r25, 0x00	; 0
 38e:	28 17       	cp	r18, r24
 390:	39 07       	cpc	r19, r25
 392:	09 f4       	brne	.+2      	; 0x396 <__vector_9+0x90>
 394:	de c2       	rjmp	.+1468   	; 0x952 <__stack+0x53>
			{
				
			//prepareSetDAC(0,chan);
			//setDAC();
			}
			else if(event_cnt==dT)
 396:	80 91 5e 01 	lds	r24, 0x015E
 39a:	90 e0       	ldi	r25, 0x00	; 0
 39c:	28 17       	cp	r18, r24
 39e:	39 07       	cpc	r19, r25
 3a0:	09 f4       	brne	.+2      	; 0x3a4 <__vector_9+0x9e>
 3a2:	d7 c2       	rjmp	.+1454   	; 0x952 <__stack+0x53>
			{		
			//prepareSetDAC(0,chan);
			//setDAC();
		
			}
			else if(event_cnt==(dT+1))
 3a4:	01 96       	adiw	r24, 0x01	; 1
 3a6:	28 17       	cp	r18, r24
 3a8:	39 07       	cpc	r19, r25
 3aa:	09 f4       	brne	.+2      	; 0x3ae <__vector_9+0xa8>
 3ac:	b0 c2       	rjmp	.+1376   	; 0x90e <__stack+0xf>
				ADCSRA |= (1 << ADSC); 

			else if(event_cnt==dTt2)
 3ae:	80 91 18 01 	lds	r24, 0x0118
 3b2:	90 e0       	ldi	r25, 0x00	; 0
 3b4:	28 17       	cp	r18, r24
 3b6:	39 07       	cpc	r19, r25
 3b8:	09 f0       	breq	.+2      	; 0x3bc <__vector_9+0xb6>
 3ba:	cb c2       	rjmp	.+1430   	; 0x952 <__stack+0x53>
			{
			if ( ( UCSR0A & (1<<UDRE0)) )			
 3bc:	80 91 c0 00 	lds	r24, 0x00C0
 3c0:	85 ff       	sbrs	r24, 5
 3c2:	c7 c2       	rjmp	.+1422   	; 0x952 <__stack+0x53>
				UDR0=_adc;			
 3c4:	80 91 6a 01 	lds	r24, 0x016A
 3c8:	c2 c2       	rjmp	.+1412   	; 0x94e <__stack+0x4f>
			//setDAC();

			}		

		}
		else if(MD==VAC)
 3ca:	61 30       	cpi	r22, 0x01	; 1
 3cc:	09 f0       	breq	.+2      	; 0x3d0 <__vector_9+0xca>
 3ce:	86 c0       	rjmp	.+268    	; 0x4dc <__vector_9+0x1d6>
		{			
			static int i=0;
			i++;						
 3d0:	80 91 59 01 	lds	r24, 0x0159
 3d4:	90 91 5a 01 	lds	r25, 0x015A
 3d8:	01 96       	adiw	r24, 0x01	; 1
 3da:	90 93 5a 01 	sts	0x015A, r25
 3de:	80 93 59 01 	sts	0x0159, r24
			
			switch(UDP_cnt)
 3e2:	80 91 70 01 	lds	r24, 0x0170
 3e6:	82 30       	cpi	r24, 0x02	; 2
 3e8:	41 f1       	breq	.+80     	; 0x43a <__vector_9+0x134>
 3ea:	83 30       	cpi	r24, 0x03	; 3
 3ec:	30 f4       	brcc	.+12     	; 0x3fa <__vector_9+0xf4>
 3ee:	88 23       	and	r24, r24
 3f0:	51 f0       	breq	.+20     	; 0x406 <__vector_9+0x100>
 3f2:	81 30       	cpi	r24, 0x01	; 1
 3f4:	09 f0       	breq	.+2      	; 0x3f8 <__vector_9+0xf2>
 3f6:	69 c0       	rjmp	.+210    	; 0x4ca <__vector_9+0x1c4>
 3f8:	0d c0       	rjmp	.+26     	; 0x414 <__vector_9+0x10e>
 3fa:	83 30       	cpi	r24, 0x03	; 3
 3fc:	19 f1       	breq	.+70     	; 0x444 <__vector_9+0x13e>
 3fe:	84 30       	cpi	r24, 0x04	; 4
 400:	09 f0       	breq	.+2      	; 0x404 <__vector_9+0xfe>
 402:	63 c0       	rjmp	.+198    	; 0x4ca <__vector_9+0x1c4>
 404:	60 c0       	rjmp	.+192    	; 0x4c6 <__vector_9+0x1c0>
			{
				case 0:					
				 ADCSRA |= (1 << ADSC); 
 406:	80 91 7a 00 	lds	r24, 0x007A
 40a:	80 64       	ori	r24, 0x40	; 64
 40c:	80 93 7a 00 	sts	0x007A, r24
				UDR0=255;
 410:	8f ef       	ldi	r24, 0xFF	; 255
 412:	15 c0       	rjmp	.+42     	; 0x43e <__vector_9+0x138>
				break;
				
				
				
				case 1:	
				ADCL__=	ADCL_;
 414:	80 91 64 01 	lds	r24, 0x0164
 418:	80 93 61 01 	sts	0x0161, r24
				ADCH__ = ADCH_;
 41c:	80 91 68 01 	lds	r24, 0x0168
 420:	80 93 5d 01 	sts	0x015D, r24
				ADCL_=ADCL;
 424:	90 91 78 00 	lds	r25, 0x0078
 428:	90 93 64 01 	sts	0x0164, r25
				ADCH_=ADCH;
 42c:	80 91 79 00 	lds	r24, 0x0079
 430:	80 93 68 01 	sts	0x0168, r24
				
				UDR0=ADCL_;
 434:	90 93 c6 00 	sts	0x00C6, r25
 438:	48 c0       	rjmp	.+144    	; 0x4ca <__vector_9+0x1c4>
				break;
				
				case 2:
				UDR0=ADCH_;
 43a:	80 91 68 01 	lds	r24, 0x0168
 43e:	80 93 c6 00 	sts	0x00C6, r24
 442:	43 c0       	rjmp	.+134    	; 0x4ca <__vector_9+0x1c4>
				
				
				case 3:
								
					//VAC16_HH=VAC16_H;
					VAC16_H=VAC16;
 444:	20 91 1f 01 	lds	r18, 0x011F
 448:	30 91 20 01 	lds	r19, 0x0120
 44c:	30 93 22 01 	sts	0x0122, r19
 450:	20 93 21 01 	sts	0x0121, r18
					
					if(pos_phase)
 454:	80 91 19 01 	lds	r24, 0x0119
 458:	88 23       	and	r24, r24
 45a:	81 f0       	breq	.+32     	; 0x47c <__vector_9+0x176>
					{
								//PORTC=0b00000010;
			//PORTB=0b00011111;
			//PORTD=0b11101100;
						VAC16+=32;
 45c:	20 5e       	subi	r18, 0xE0	; 224
 45e:	3f 4f       	sbci	r19, 0xFF	; 255
 460:	30 93 20 01 	sts	0x0120, r19
 464:	20 93 1f 01 	sts	0x011F, r18
						if(VAC16>(ref16-1))
 468:	80 91 29 01 	lds	r24, 0x0129
 46c:	90 91 2a 01 	lds	r25, 0x012A
 470:	28 17       	cp	r18, r24
 472:	39 07       	cpc	r19, r25
 474:	b4 f0       	brlt	.+44     	; 0x4a2 <__vector_9+0x19c>
						{
						pos_phase=0;				
 476:	10 92 19 01 	sts	0x0119, r1
 47a:	13 c0       	rjmp	.+38     	; 0x4a2 <__vector_9+0x19c>
					else
					{
						//PORTB=0;
			//PORTC=0;
			//PORTD=0;
						VAC16-=32;
 47c:	c9 01       	movw	r24, r18
 47e:	80 97       	sbiw	r24, 0x20	; 32
 480:	90 93 20 01 	sts	0x0120, r25
 484:	80 93 1f 01 	sts	0x011F, r24
						if(VAC16<(-x16+1))
 488:	21 e0       	ldi	r18, 0x01	; 1
 48a:	30 e0       	ldi	r19, 0x00	; 0
 48c:	40 91 27 01 	lds	r20, 0x0127
 490:	50 91 28 01 	lds	r21, 0x0128
 494:	24 1b       	sub	r18, r20
 496:	35 0b       	sbc	r19, r21
 498:	82 17       	cp	r24, r18
 49a:	93 07       	cpc	r25, r19
 49c:	14 f4       	brge	.+4      	; 0x4a2 <__vector_9+0x19c>
						{
						pos_phase=1;									
 49e:	60 93 19 01 	sts	0x0119, r22
						}
					}	
					
					
					
					UDR0=VAC16>>4;
 4a2:	80 91 1f 01 	lds	r24, 0x011F
 4a6:	90 91 20 01 	lds	r25, 0x0120
 4aa:	9c 01       	movw	r18, r24
 4ac:	b4 e0       	ldi	r27, 0x04	; 4
 4ae:	35 95       	asr	r19
 4b0:	27 95       	ror	r18
 4b2:	ba 95       	dec	r27
 4b4:	e1 f7       	brne	.-8      	; 0x4ae <__vector_9+0x1a8>
 4b6:	20 93 c6 00 	sts	0x00C6, r18
					prepareSetDAC(VAC16,chan);
 4ba:	60 91 32 01 	lds	r22, 0x0132
 4be:	0e 94 cc 00 	call	0x198	; 0x198 <prepareSetDAC>

	}
}

void setDAC(){
	PORTD&=~(1<<LDAC);
 4c2:	5a 98       	cbi	0x0b, 2	; 11
	PORTD|=(1<<LDAC);	
 4c4:	5a 9a       	sbi	0x0b, 2	; 11
					//prepareSetDAC(VAC16,5);
					//prepareSetDAC(VAC16,6);
					//prepareSetDAC(VAC16,7);				
					setDAC();
				case 4:
					UDR0=DUMMY_BYTE;	
 4c6:	10 92 c6 00 	sts	0x00C6, r1
				
			}
						
			
			UDP_cnt++;
			UDP_cnt%=5;
 4ca:	80 91 70 01 	lds	r24, 0x0170
 4ce:	8f 5f       	subi	r24, 0xFF	; 255
 4d0:	65 e0       	ldi	r22, 0x05	; 5
 4d2:	0e 94 d3 05 	call	0xba6	; 0xba6 <__udivmodqi4>
 4d6:	90 93 70 01 	sts	0x0170, r25
 4da:	3b c2       	rjmp	.+1142   	; 0x952 <__stack+0x53>
		}
		else if(MD==PROGRAM)
 4dc:	62 30       	cpi	r22, 0x02	; 2
 4de:	09 f0       	breq	.+2      	; 0x4e2 <__vector_9+0x1dc>
 4e0:	9d c0       	rjmp	.+314    	; 0x61c <__vector_9+0x316>
		{
			T=16;
 4e2:	80 e1       	ldi	r24, 0x10	; 16
 4e4:	80 93 63 01 	sts	0x0163, r24
			static uint16_t adc_h;
			

			if(event_cnt==0)//dT
 4e8:	80 91 5b 01 	lds	r24, 0x015B
 4ec:	90 91 5c 01 	lds	r25, 0x015C
 4f0:	00 97       	sbiw	r24, 0x00	; 0
 4f2:	21 f4       	brne	.+8      	; 0x4fc <__vector_9+0x1f6>
			{		
				UDR0=255;
 4f4:	8f ef       	ldi	r24, 0xFF	; 255
 4f6:	80 93 c6 00 	sts	0x00C6, r24
 4fa:	ff c1       	rjmp	.+1022   	; 0x8fa <__vector_9+0x5f4>
			
				prepareSetDAC(ref16,chan);
				setDAC();
				ADCSRA |= (1 << ADSC); 
			}
			else if(event_cnt == 1)
 4fc:	81 30       	cpi	r24, 0x01	; 1
 4fe:	91 05       	cpc	r25, r1
 500:	19 f4       	brne	.+6      	; 0x508 <__vector_9+0x202>
			{
				UDR0 =PROGRAM_done;
 502:	80 91 31 01 	lds	r24, 0x0131
 506:	23 c2       	rjmp	.+1094   	; 0x94e <__stack+0x4f>
			}	

			else
			if(event_cnt==2)//ADC GET 
 508:	82 30       	cpi	r24, 0x02	; 2
 50a:	91 05       	cpc	r25, r1
 50c:	09 f4       	brne	.+2      	; 0x510 <__vector_9+0x20a>
 50e:	10 c2       	rjmp	.+1056   	; 0x930 <__stack+0x31>
			}
			
			//ADC make CONTINUE
			//make decision
			else
			if(event_cnt==3)
 510:	83 30       	cpi	r24, 0x03	; 3
 512:	91 05       	cpc	r25, r1
 514:	d1 f5       	brne	.+116    	; 0x58a <__vector_9+0x284>
			{	
				
				UDR0=ADCH_; //3
 516:	80 91 68 01 	lds	r24, 0x0168
 51a:	80 93 c6 00 	sts	0x00C6, r24
				
				_adc=(ADCL_|(ADCH_ <<8));
 51e:	38 2f       	mov	r19, r24
 520:	20 e0       	ldi	r18, 0x00	; 0
 522:	80 91 64 01 	lds	r24, 0x0164
 526:	90 e0       	ldi	r25, 0x00	; 0
 528:	82 2b       	or	r24, r18
 52a:	93 2b       	or	r25, r19
 52c:	90 93 6b 01 	sts	0x016B, r25
 530:	80 93 6a 01 	sts	0x016A, r24
				adc_h=((uint16_t)(512)-_adc);
 534:	20 e0       	ldi	r18, 0x00	; 0
 536:	32 e0       	ldi	r19, 0x02	; 2
 538:	28 1b       	sub	r18, r24
 53a:	39 0b       	sbc	r19, r25
 53c:	30 93 58 01 	sts	0x0158, r19
 540:	20 93 57 01 	sts	0x0157, r18
				
				//optimization
				//put some window val here maybe?
				//be  carefull with -
				if((adc_h)<(uint16_t)(t1))
 544:	80 91 16 01 	lds	r24, 0x0116
 548:	90 e0       	ldi	r25, 0x00	; 0
 54a:	28 17       	cp	r18, r24
 54c:	39 07       	cpc	r19, r25
 54e:	60 f4       	brcc	.+24     	; 0x568 <__vector_9+0x262>
				{
					proging_val = -x16;  //set!
 550:	80 91 27 01 	lds	r24, 0x0127
 554:	90 91 28 01 	lds	r25, 0x0128
 558:	90 95       	com	r25
 55a:	81 95       	neg	r24
 55c:	9f 4f       	sbci	r25, 0xFF	; 255
 55e:	90 93 26 01 	sts	0x0126, r25
 562:	80 93 25 01 	sts	0x0125, r24
 566:	f5 c1       	rjmp	.+1002   	; 0x952 <__stack+0x53>
				}
				else if((adc_h)<(uint16_t)(t1+1)) //done!
 568:	01 96       	adiw	r24, 0x01	; 1
 56a:	28 17       	cp	r18, r24
 56c:	39 07       	cpc	r19, r25
 56e:	08 f0       	brcs	.+2      	; 0x572 <__vector_9+0x26c>
 570:	f0 c1       	rjmp	.+992    	; 0x952 <__stack+0x53>
				{

					PROGRAM_done=1;
 572:	81 e0       	ldi	r24, 0x01	; 1
 574:	80 93 31 01 	sts	0x0131, r24
					proging_val=0;
 578:	10 92 26 01 	sts	0x0126, r1
 57c:	10 92 25 01 	sts	0x0125, r1
					prepareSetDAC(ref16,chan);
 580:	80 91 29 01 	lds	r24, 0x0129
 584:	90 91 2a 01 	lds	r25, 0x012A
 588:	db c0       	rjmp	.+438    	; 0x740 <__vector_9+0x43a>
					setDAC();
				}
				
			}
			//DACset proging val
			else if(event_cnt==4)
 58a:	84 30       	cpi	r24, 0x04	; 4
 58c:	91 05       	cpc	r25, r1
 58e:	09 f0       	breq	.+2      	; 0x592 <__vector_9+0x28c>
 590:	3f c0       	rjmp	.+126    	; 0x610 <__vector_9+0x30a>
			{
				UDR0 =DUMMY_BYTE;		
 592:	10 92 c6 00 	sts	0x00C6, r1
				if(PROGRAM_done)
 596:	80 91 31 01 	lds	r24, 0x0131
 59a:	88 23       	and	r24, r24
 59c:	21 f0       	breq	.+8      	; 0x5a6 <__vector_9+0x2a0>
					proging_val=0;	
 59e:	10 92 26 01 	sts	0x0126, r1
 5a2:	10 92 25 01 	sts	0x0125, r1
				
				prepareSetDAC(proging_val,chan);
 5a6:	80 91 25 01 	lds	r24, 0x0125
 5aa:	90 91 26 01 	lds	r25, 0x0126
 5ae:	60 91 32 01 	lds	r22, 0x0132
 5b2:	0e 94 cc 00 	call	0x198	; 0x198 <prepareSetDAC>

	}
}

void setDAC(){
	PORTD&=~(1<<LDAC);
 5b6:	5a 98       	cbi	0x0b, 2	; 11
	PORTD|=(1<<LDAC);	
 5b8:	5a 9a       	sbi	0x0b, 2	; 11
					proging_val=0;	
				
				prepareSetDAC(proging_val,chan);
				setDAC();
							
				if(proging_val == -x16)
 5ba:	20 91 25 01 	lds	r18, 0x0125
 5be:	30 91 26 01 	lds	r19, 0x0126
 5c2:	80 91 27 01 	lds	r24, 0x0127
 5c6:	90 91 28 01 	lds	r25, 0x0128
 5ca:	44 27       	eor	r20, r20
 5cc:	55 27       	eor	r21, r21
 5ce:	48 1b       	sub	r20, r24
 5d0:	59 0b       	sbc	r21, r25
 5d2:	24 17       	cp	r18, r20
 5d4:	35 07       	cpc	r19, r21
 5d6:	29 f4       	brne	.+10     	; 0x5e2 <__vector_9+0x2dc>
				{
					proging_val=0;
 5d8:	10 92 26 01 	sts	0x0126, r1
 5dc:	10 92 25 01 	sts	0x0125, r1
 5e0:	b8 c1       	rjmp	.+880    	; 0x952 <__stack+0x53>
				}					
				else
				if(proging_val>(t2<<4))
 5e2:	80 91 17 01 	lds	r24, 0x0117
 5e6:	90 e0       	ldi	r25, 0x00	; 0
 5e8:	a4 e0       	ldi	r26, 0x04	; 4
 5ea:	88 0f       	add	r24, r24
 5ec:	99 1f       	adc	r25, r25
 5ee:	aa 95       	dec	r26
 5f0:	e1 f7       	brne	.-8      	; 0x5ea <__vector_9+0x2e4>
 5f2:	82 17       	cp	r24, r18
 5f4:	93 07       	cpc	r25, r19
 5f6:	2c f4       	brge	.+10     	; 0x602 <__vector_9+0x2fc>
				{
					proging_val= -x16;
 5f8:	50 93 26 01 	sts	0x0126, r21
 5fc:	40 93 25 01 	sts	0x0125, r20
 600:	a8 c1       	rjmp	.+848    	; 0x952 <__stack+0x53>
				}	
				else
				{
					proging_val+=32;
 602:	20 5e       	subi	r18, 0xE0	; 224
 604:	3f 4f       	sbci	r19, 0xFF	; 255
 606:	30 93 26 01 	sts	0x0126, r19
 60a:	20 93 25 01 	sts	0x0125, r18
 60e:	a1 c1       	rjmp	.+834    	; 0x952 <__stack+0x53>
				}	
			}
			else if(event_cnt==5)//
 610:	05 97       	sbiw	r24, 0x05	; 5
 612:	09 f0       	breq	.+2      	; 0x616 <__vector_9+0x310>
 614:	9e c1       	rjmp	.+828    	; 0x952 <__stack+0x53>
			{	
				UDR0 =DUMMY_BYTE;			
 616:	10 92 c6 00 	sts	0x00C6, r1
 61a:	90 c0       	rjmp	.+288    	; 0x73c <__vector_9+0x436>
			}
			
			

		}
		else if(MD == ONE_SHOT)
 61c:	65 30       	cpi	r22, 0x05	; 5
 61e:	09 f0       	breq	.+2      	; 0x622 <__vector_9+0x31c>
 620:	75 c0       	rjmp	.+234    	; 0x70c <__vector_9+0x406>
		{
			//готовим reset
				if(event_cnt==1){
 622:	80 91 5b 01 	lds	r24, 0x015B
 626:	90 91 5c 01 	lds	r25, 0x015C
 62a:	81 30       	cpi	r24, 0x01	; 1
 62c:	91 05       	cpc	r25, r1
 62e:	b1 f1       	breq	.+108    	; 0x69c <__vector_9+0x396>
				separMult();
			}//reseting
			else if(event_cnt==2)
 630:	82 30       	cpi	r24, 0x02	; 2
 632:	91 05       	cpc	r25, r1
 634:	61 f4       	brne	.+24     	; 0x64e <__vector_9+0x348>
			{
				prepareSetDAC(reset16,CHAN_4);
 636:	80 91 2b 01 	lds	r24, 0x012B
 63a:	90 91 2c 01 	lds	r25, 0x012C
 63e:	63 e0       	ldi	r22, 0x03	; 3
 640:	0e 94 cc 00 	call	0x198	; 0x198 <prepareSetDAC>
				prepareSetDAC(reset16,CHAN_3);
 644:	80 91 2b 01 	lds	r24, 0x012B
 648:	90 91 2c 01 	lds	r25, 0x012C
 64c:	0a c0       	rjmp	.+20     	; 0x662 <__vector_9+0x35c>
				setDAC();
			}
			else if(event_cnt==3)
 64e:	83 30       	cpi	r24, 0x03	; 3
 650:	91 05       	cpc	r25, r1
 652:	49 f4       	brne	.+18     	; 0x666 <__vector_9+0x360>
			{
				prepareSetDAC(0,CHAN_4);
 654:	80 e0       	ldi	r24, 0x00	; 0
 656:	90 e0       	ldi	r25, 0x00	; 0
 658:	63 e0       	ldi	r22, 0x03	; 3
 65a:	0e 94 cc 00 	call	0x198	; 0x198 <prepareSetDAC>
				prepareSetDAC(0,CHAN_3);
 65e:	80 e0       	ldi	r24, 0x00	; 0
 660:	90 e0       	ldi	r25, 0x00	; 0
 662:	62 e0       	ldi	r22, 0x02	; 2
 664:	6f c0       	rjmp	.+222    	; 0x744 <__vector_9+0x43e>
				setDAC();
			}		//is reset		
			else if(event_cnt==4)
 666:	84 30       	cpi	r24, 0x04	; 4
 668:	91 05       	cpc	r25, r1
 66a:	19 f4       	brne	.+6      	; 0x672 <__vector_9+0x36c>
			{
				gatherMult();
 66c:	0e 94 7a 00 	call	0xf4	; 0xf4 <gatherMult>
 670:	70 c1       	rjmp	.+736    	; 0x952 <__stack+0x53>
			}
			else if(event_cnt==5)
 672:	85 30       	cpi	r24, 0x05	; 5
 674:	91 05       	cpc	r25, r1
 676:	29 f4       	brne	.+10     	; 0x682 <__vector_9+0x37c>
			{
				prepareSetDAC(x16,CHAN_4);				
 678:	80 91 27 01 	lds	r24, 0x0127
 67c:	90 91 28 01 	lds	r25, 0x0128
 680:	05 c0       	rjmp	.+10     	; 0x68c <__vector_9+0x386>
				setDAC();
			}		
			else if(event_cnt==6)
 682:	86 30       	cpi	r24, 0x06	; 6
 684:	91 05       	cpc	r25, r1
 686:	21 f4       	brne	.+8      	; 0x690 <__vector_9+0x38a>
			{
				prepareSetDAC(0,CHAN_4);				
 688:	80 e0       	ldi	r24, 0x00	; 0
 68a:	90 e0       	ldi	r25, 0x00	; 0
 68c:	63 e0       	ldi	r22, 0x03	; 3
 68e:	5a c0       	rjmp	.+180    	; 0x744 <__vector_9+0x43e>
				setDAC();
			}	
			
			//пнули		
			//посмотрим, что вышло
			else if(event_cnt==7)
 690:	87 30       	cpi	r24, 0x07	; 7
 692:	91 05       	cpc	r25, r1
 694:	31 f4       	brne	.+12     	; 0x6a2 <__vector_9+0x39c>
			{
				UDR0=255;//1
 696:	8f ef       	ldi	r24, 0xFF	; 255
 698:	80 93 c6 00 	sts	0x00C6, r24
				separMult();				
 69c:	0e 94 83 00 	call	0x106	; 0x106 <separMult>
 6a0:	58 c1       	rjmp	.+688    	; 0x952 <__stack+0x53>
			}			
			else if(event_cnt==8)
 6a2:	88 30       	cpi	r24, 0x08	; 8
 6a4:	91 05       	cpc	r25, r1
 6a6:	31 f4       	brne	.+12     	; 0x6b4 <__vector_9+0x3ae>
			{
				prepareSetDAC(ref16,CHAN_4);
 6a8:	80 91 29 01 	lds	r24, 0x0129
 6ac:	90 91 2a 01 	lds	r25, 0x012A
 6b0:	63 e0       	ldi	r22, 0x03	; 3
 6b2:	29 c1       	rjmp	.+594    	; 0x906 <__stack+0x7>
				setDAC();				
				ADCSRA |= (1 << ADSC); 
			}	
			else if(event_cnt==9)
 6b4:	89 30       	cpi	r24, 0x09	; 9
 6b6:	91 05       	cpc	r25, r1
 6b8:	09 f4       	brne	.+2      	; 0x6bc <__vector_9+0x3b6>
 6ba:	3a c1       	rjmp	.+628    	; 0x930 <__stack+0x31>
				//prepareSetDAC(ref16,3);
				ADCL_=ADCL;	
				ADCH_=ADCH;
				UDR0=ADCL_;//2
			}
			else if(event_cnt==10)
 6bc:	8a 30       	cpi	r24, 0x0A	; 10
 6be:	91 05       	cpc	r25, r1
 6c0:	29 f4       	brne	.+10     	; 0x6cc <__vector_9+0x3c6>
			{
				UDR0=ADCH_; //3 1st chan
 6c2:	80 91 68 01 	lds	r24, 0x0168
 6c6:	80 93 c6 00 	sts	0x00C6, r24
 6ca:	de cf       	rjmp	.-68     	; 0x688 <__vector_9+0x382>
				
				prepareSetDAC(0,CHAN_4);
				setDAC();
			}		
			//4й просмотрен
			else if(event_cnt==11)
 6cc:	8b 30       	cpi	r24, 0x0B	; 11
 6ce:	91 05       	cpc	r25, r1
 6d0:	31 f4       	brne	.+12     	; 0x6de <__vector_9+0x3d8>
			{				 
				prepareSetDAC(ref16,CHAN_3);
 6d2:	80 91 29 01 	lds	r24, 0x0129
 6d6:	90 91 2a 01 	lds	r25, 0x012A
 6da:	62 e0       	ldi	r22, 0x02	; 2
 6dc:	14 c1       	rjmp	.+552    	; 0x906 <__stack+0x7>
				setDAC();
				
				ADCSRA |= (1 << ADSC); 
			}
			else if(event_cnt==12)
 6de:	8c 30       	cpi	r24, 0x0C	; 12
 6e0:	91 05       	cpc	r25, r1
 6e2:	09 f4       	brne	.+2      	; 0x6e6 <__vector_9+0x3e0>
 6e4:	25 c1       	rjmp	.+586    	; 0x930 <__stack+0x31>
			{		
				ADCL_=ADCL;	
				ADCH_=ADCH;
				UDR0=ADCL_; //4
			}
			else if(event_cnt == 13)
 6e6:	0d 97       	sbiw	r24, 0x0d	; 13
 6e8:	09 f0       	breq	.+2      	; 0x6ec <__vector_9+0x3e6>
 6ea:	33 c1       	rjmp	.+614    	; 0x952 <__stack+0x53>
			{
				UDR0=ADCH_; // 5
 6ec:	80 91 68 01 	lds	r24, 0x0168
 6f0:	80 93 c6 00 	sts	0x00C6, r24
				
				prepareSetDAC(0,CHAN_3);
 6f4:	80 e0       	ldi	r24, 0x00	; 0
 6f6:	90 e0       	ldi	r25, 0x00	; 0
 6f8:	62 e0       	ldi	r22, 0x02	; 2
 6fa:	0e 94 cc 00 	call	0x198	; 0x198 <prepareSetDAC>

	}
}

void setDAC(){
	PORTD&=~(1<<LDAC);
 6fe:	5a 98       	cbi	0x0b, 2	; 11
	PORTD|=(1<<LDAC);	
 700:	5a 9a       	sbi	0x0b, 2	; 11
			{
				UDR0=ADCH_; // 5
				
				prepareSetDAC(0,CHAN_3);
				setDAC();
				event_cnt=0;	
 702:	10 92 5c 01 	sts	0x015C, r1
 706:	10 92 5b 01 	sts	0x015B, r1
 70a:	23 c1       	rjmp	.+582    	; 0x952 <__stack+0x53>
			}
			
		}
		
		
		else if(MD == ANALYZE)//5 by 5
 70c:	66 30       	cpi	r22, 0x06	; 6
 70e:	09 f0       	breq	.+2      	; 0x712 <__vector_9+0x40c>
 710:	20 c1       	rjmp	.+576    	; 0x952 <__stack+0x53>
		{
			//reset
			if(event_cnt==0)
 712:	80 91 5b 01 	lds	r24, 0x015B
 716:	90 91 5c 01 	lds	r25, 0x015C
 71a:	00 97       	sbiw	r24, 0x00	; 0
 71c:	61 f4       	brne	.+24     	; 0x736 <__vector_9+0x430>
			{
				prepareSetDAC(reset16, chan);
 71e:	80 91 2b 01 	lds	r24, 0x012B
 722:	90 91 2c 01 	lds	r25, 0x012C
 726:	60 91 32 01 	lds	r22, 0x0132
 72a:	0e 94 cc 00 	call	0x198	; 0x198 <prepareSetDAC>

	}
}

void setDAC(){
	PORTD&=~(1<<LDAC);
 72e:	5a 98       	cbi	0x0b, 2	; 11
	PORTD|=(1<<LDAC);	
 730:	5a 9a       	sbi	0x0b, 2	; 11
			//reset
			if(event_cnt==0)
			{
				prepareSetDAC(reset16, chan);
				setDAC();
				UDR0=255;
 732:	8f ef       	ldi	r24, 0xFF	; 255
 734:	0c c1       	rjmp	.+536    	; 0x94e <__stack+0x4f>
			}
			else if(event_cnt==1)
 736:	81 30       	cpi	r24, 0x01	; 1
 738:	91 05       	cpc	r25, r1
 73a:	49 f4       	brne	.+18     	; 0x74e <__vector_9+0x448>
			{
				prepareSetDAC(0, chan);				
 73c:	80 e0       	ldi	r24, 0x00	; 0
 73e:	90 e0       	ldi	r25, 0x00	; 0
 740:	60 91 32 01 	lds	r22, 0x0132
 744:	0e 94 cc 00 	call	0x198	; 0x198 <prepareSetDAC>

	}
}

void setDAC(){
	PORTD&=~(1<<LDAC);
 748:	5a 98       	cbi	0x0b, 2	; 11
	PORTD|=(1<<LDAC);	
 74a:	5a 9a       	sbi	0x0b, 2	; 11
 74c:	02 c1       	rjmp	.+516    	; 0x952 <__stack+0x53>
			{
				prepareSetDAC(0, chan);				
				setDAC();
			}
			//create set impulse
			else if(event_cnt==3)
 74e:	83 30       	cpi	r24, 0x03	; 3
 750:	91 05       	cpc	r25, r1
 752:	09 f0       	breq	.+2      	; 0x756 <__vector_9+0x450>
 754:	c7 c0       	rjmp	.+398    	; 0x8e4 <__vector_9+0x5de>
			{
				if(an_cnt<(BIG_STAT_N))
 756:	40 91 33 01 	lds	r20, 0x0133
 75a:	50 91 34 01 	lds	r21, 0x0134
 75e:	20 91 69 01 	lds	r18, 0x0169
 762:	82 2f       	mov	r24, r18
 764:	90 e0       	ldi	r25, 0x00	; 0
 766:	48 17       	cp	r20, r24
 768:	59 07       	cpc	r21, r25
 76a:	18 f4       	brcc	.+6      	; 0x772 <__vector_9+0x46c>
				{
					STAT_V_step=0;					 
 76c:	10 92 2f 01 	sts	0x012F, r1
 770:	23 c0       	rjmp	.+70     	; 0x7b8 <__vector_9+0x4b2>
				}
				else if(an_cnt<(BIG_STAT_N*2))
 772:	82 2f       	mov	r24, r18
 774:	90 e0       	ldi	r25, 0x00	; 0
 776:	9c 01       	movw	r18, r24
 778:	22 0f       	add	r18, r18
 77a:	33 1f       	adc	r19, r19
 77c:	42 17       	cp	r20, r18
 77e:	53 07       	cpc	r21, r19
 780:	10 f4       	brcc	.+4      	; 0x786 <__vector_9+0x480>
				{
					STAT_V_step=1;
 782:	81 e0       	ldi	r24, 0x01	; 1
 784:	17 c0       	rjmp	.+46     	; 0x7b4 <__vector_9+0x4ae>
				}
				else if(an_cnt<(BIG_STAT_N*3))
 786:	28 0f       	add	r18, r24
 788:	39 1f       	adc	r19, r25
 78a:	42 17       	cp	r20, r18
 78c:	53 07       	cpc	r21, r19
 78e:	10 f4       	brcc	.+4      	; 0x794 <__vector_9+0x48e>
				{
					STAT_V_step=2;
 790:	82 e0       	ldi	r24, 0x02	; 2
 792:	10 c0       	rjmp	.+32     	; 0x7b4 <__vector_9+0x4ae>
				}
				else if(an_cnt<(BIG_STAT_N*4))
 794:	9c 01       	movw	r18, r24
 796:	22 0f       	add	r18, r18
 798:	33 1f       	adc	r19, r19
 79a:	22 0f       	add	r18, r18
 79c:	33 1f       	adc	r19, r19
 79e:	42 17       	cp	r20, r18
 7a0:	53 07       	cpc	r21, r19
 7a2:	10 f4       	brcc	.+4      	; 0x7a8 <__vector_9+0x4a2>
				{
					STAT_V_step=3;
 7a4:	83 e0       	ldi	r24, 0x03	; 3
 7a6:	06 c0       	rjmp	.+12     	; 0x7b4 <__vector_9+0x4ae>
				}
				else if(an_cnt<(BIG_STAT_N*5))
 7a8:	28 0f       	add	r18, r24
 7aa:	39 1f       	adc	r19, r25
 7ac:	42 17       	cp	r20, r18
 7ae:	53 07       	cpc	r21, r19
 7b0:	18 f4       	brcc	.+6      	; 0x7b8 <__vector_9+0x4b2>
				{
					STAT_V_step=4;
 7b2:	84 e0       	ldi	r24, 0x04	; 4
 7b4:	80 93 2f 01 	sts	0x012F, r24
				}////////////						
				//prepareSetDAC(x16, chan);
				UDR0=STAT_V_step;
 7b8:	80 91 2f 01 	lds	r24, 0x012F
 7bc:	80 93 c6 00 	sts	0x00C6, r24
				x16_grad = (-(STAT_V_step+1)*8 )<<4;//16
 7c0:	90 e0       	ldi	r25, 0x00	; 0
 7c2:	80 95       	com	r24
 7c4:	90 95       	com	r25
 7c6:	96 95       	lsr	r25
 7c8:	98 2f       	mov	r25, r24
 7ca:	88 27       	eor	r24, r24
 7cc:	97 95       	ror	r25
 7ce:	87 95       	ror	r24
 7d0:	90 93 6d 01 	sts	0x016D, r25
 7d4:	80 93 6c 01 	sts	0x016C, r24
				prepareSetDAC(x16_grad, chan);
 7d8:	60 91 32 01 	lds	r22, 0x0132
 7dc:	0e 94 cc 00 	call	0x198	; 0x198 <prepareSetDAC>

	}
}

void setDAC(){
	PORTD&=~(1<<LDAC);
 7e0:	5a 98       	cbi	0x0b, 2	; 11
	PORTD|=(1<<LDAC);	
 7e2:	5a 9a       	sbi	0x0b, 2	; 11
				x16_grad = (-(STAT_V_step+1)*8 )<<4;//16
				prepareSetDAC(x16_grad, chan);
				setDAC();
				
				
				if(an_cnt_fast<(STAT_N))//20 us
 7e4:	40 91 35 01 	lds	r20, 0x0135
 7e8:	50 91 36 01 	lds	r21, 0x0136
 7ec:	80 91 0c 01 	lds	r24, 0x010C
 7f0:	90 e0       	ldi	r25, 0x00	; 0
 7f2:	48 17       	cp	r20, r24
 7f4:	59 07       	cpc	r21, r25
 7f6:	18 f4       	brcc	.+6      	; 0x7fe <__vector_9+0x4f8>
				{
					STAT_dt_step=0;									
 7f8:	10 92 2e 01 	sts	0x012E, r1
 7fc:	49 c0       	rjmp	.+146    	; 0x890 <__vector_9+0x58a>
				}
				else if(an_cnt_fast<(STAT_N*2))//80 us
 7fe:	9c 01       	movw	r18, r24
 800:	22 0f       	add	r18, r18
 802:	33 1f       	adc	r19, r19
 804:	42 17       	cp	r20, r18
 806:	53 07       	cpc	r21, r19
 808:	60 f4       	brcc	.+24     	; 0x822 <__vector_9+0x51c>
				{
					STAT_dt_step=1;
 80a:	81 e0       	ldi	r24, 0x01	; 1
 80c:	80 93 2e 01 	sts	0x012E, r24
 810:	80 e0       	ldi	r24, 0x00	; 0
 812:	90 e0       	ldi	r25, 0x00	; 0

	}
}

void setDAC(){
	PORTD&=~(1<<LDAC);
 814:	5a 98       	cbi	0x0b, 2	; 11
	PORTD|=(1<<LDAC);	
 816:	5a 9a       	sbi	0x0b, 2	; 11
					STAT_dt_step=0;									
				}
				else if(an_cnt_fast<(STAT_N*2))//80 us
				{
					STAT_dt_step=1;
					for(int i=0;i<40;i++)//28
 818:	01 96       	adiw	r24, 0x01	; 1
 81a:	88 32       	cpi	r24, 0x28	; 40
 81c:	91 05       	cpc	r25, r1
 81e:	d1 f7       	brne	.-12     	; 0x814 <__vector_9+0x50e>
 820:	37 c0       	rjmp	.+110    	; 0x890 <__vector_9+0x58a>
					{
					setDAC();
					}
				}
				else if(an_cnt_fast<(STAT_N*3))//220 us
 822:	28 0f       	add	r18, r24
 824:	39 1f       	adc	r19, r25
 826:	42 17       	cp	r20, r18
 828:	53 07       	cpc	r21, r19
 82a:	60 f4       	brcc	.+24     	; 0x844 <__vector_9+0x53e>
				{
					STAT_dt_step=2;
 82c:	82 e0       	ldi	r24, 0x02	; 2
 82e:	80 93 2e 01 	sts	0x012E, r24
 832:	80 e0       	ldi	r24, 0x00	; 0
 834:	90 e0       	ldi	r25, 0x00	; 0

	}
}

void setDAC(){
	PORTD&=~(1<<LDAC);
 836:	5a 98       	cbi	0x0b, 2	; 11
	PORTD|=(1<<LDAC);	
 838:	5a 9a       	sbi	0x0b, 2	; 11
					}
				}
				else if(an_cnt_fast<(STAT_N*3))//220 us
				{
					STAT_dt_step=2;
					for(int i=0;i<160;i++)
 83a:	01 96       	adiw	r24, 0x01	; 1
 83c:	80 3a       	cpi	r24, 0xA0	; 160
 83e:	91 05       	cpc	r25, r1
 840:	d1 f7       	brne	.-12     	; 0x836 <__vector_9+0x530>
 842:	26 c0       	rjmp	.+76     	; 0x890 <__vector_9+0x58a>
					{
					setDAC();
					}
				}
				else if(an_cnt_fast<(STAT_N*4))//900 us
 844:	88 0f       	add	r24, r24
 846:	99 1f       	adc	r25, r25
 848:	88 0f       	add	r24, r24
 84a:	99 1f       	adc	r25, r25
 84c:	48 17       	cp	r20, r24
 84e:	59 07       	cpc	r21, r25
 850:	68 f4       	brcc	.+26     	; 0x86c <__vector_9+0x566>
				{
					STAT_dt_step=3;
 852:	83 e0       	ldi	r24, 0x03	; 3
 854:	80 93 2e 01 	sts	0x012E, r24
 858:	80 e0       	ldi	r24, 0x00	; 0
 85a:	90 e0       	ldi	r25, 0x00	; 0

	}
}

void setDAC(){
	PORTD&=~(1<<LDAC);
 85c:	5a 98       	cbi	0x0b, 2	; 11
	PORTD|=(1<<LDAC);	
 85e:	5a 9a       	sbi	0x0b, 2	; 11
					}
				}
				else if(an_cnt_fast<(STAT_N*4))//900 us
				{
					STAT_dt_step=3;
					for(int i=0;i<640;i++)
 860:	01 96       	adiw	r24, 0x01	; 1
 862:	22 e0       	ldi	r18, 0x02	; 2
 864:	80 38       	cpi	r24, 0x80	; 128
 866:	92 07       	cpc	r25, r18
 868:	c9 f7       	brne	.-14     	; 0x85c <__vector_9+0x556>
 86a:	12 c0       	rjmp	.+36     	; 0x890 <__vector_9+0x58a>
					{
					setDAC();
					}
				}
				else if(an_cnt_fast<(BIG_STAT_N))//3.5 ms
 86c:	80 91 69 01 	lds	r24, 0x0169
 870:	90 e0       	ldi	r25, 0x00	; 0
 872:	48 17       	cp	r20, r24
 874:	59 07       	cpc	r21, r25
 876:	60 f4       	brcc	.+24     	; 0x890 <__vector_9+0x58a>
				{
					STAT_dt_step=4;
 878:	84 e0       	ldi	r24, 0x04	; 4
 87a:	80 93 2e 01 	sts	0x012E, r24
 87e:	80 e0       	ldi	r24, 0x00	; 0
 880:	90 e0       	ldi	r25, 0x00	; 0

	}
}

void setDAC(){
	PORTD&=~(1<<LDAC);
 882:	5a 98       	cbi	0x0b, 2	; 11
	PORTD|=(1<<LDAC);	
 884:	5a 9a       	sbi	0x0b, 2	; 11
					}
				}
				else if(an_cnt_fast<(BIG_STAT_N))//3.5 ms
				{
					STAT_dt_step=4;
					for(int i=0;i<2560;i++)
 886:	01 96       	adiw	r24, 0x01	; 1
 888:	2a e0       	ldi	r18, 0x0A	; 10
 88a:	80 30       	cpi	r24, 0x00	; 0
 88c:	92 07       	cpc	r25, r18
 88e:	c9 f7       	brne	.-14     	; 0x882 <__vector_9+0x57c>
					setDAC();
					}
				}////////////////
									
				
				prepareResetDAC(chan);
 890:	80 91 32 01 	lds	r24, 0x0132
 894:	0e 94 91 00 	call	0x122	; 0x122 <prepareResetDAC>

	}
}

void setDAC(){
	PORTD&=~(1<<LDAC);
 898:	5a 98       	cbi	0x0b, 2	; 11
	PORTD|=(1<<LDAC);	
 89a:	5a 9a       	sbi	0x0b, 2	; 11
									
				
				prepareResetDAC(chan);
				setDAC();			
				
				an_cnt++; // upper				
 89c:	80 91 33 01 	lds	r24, 0x0133
 8a0:	90 91 34 01 	lds	r25, 0x0134
 8a4:	01 96       	adiw	r24, 0x01	; 1
 8a6:	90 93 34 01 	sts	0x0134, r25
 8aa:	80 93 33 01 	sts	0x0133, r24
				if(an_cnt>(BIG_STAT_N*5)) an_cnt=0; // lower
 8ae:	20 91 69 01 	lds	r18, 0x0169
 8b2:	45 e0       	ldi	r20, 0x05	; 5
 8b4:	24 9f       	mul	r18, r20
 8b6:	90 01       	movw	r18, r0
 8b8:	11 24       	eor	r1, r1
 8ba:	28 17       	cp	r18, r24
 8bc:	39 07       	cpc	r19, r25
 8be:	20 f4       	brcc	.+8      	; 0x8c8 <__vector_9+0x5c2>
 8c0:	10 92 34 01 	sts	0x0134, r1
 8c4:	10 92 33 01 	sts	0x0133, r1
				
				an_cnt_fast = an_cnt%BIG_STAT_N;
 8c8:	60 91 69 01 	lds	r22, 0x0169
 8cc:	80 91 33 01 	lds	r24, 0x0133
 8d0:	90 91 34 01 	lds	r25, 0x0134
 8d4:	70 e0       	ldi	r23, 0x00	; 0
 8d6:	0e 94 ec 05 	call	0xbd8	; 0xbd8 <__udivmodhi4>
 8da:	90 93 36 01 	sts	0x0136, r25
 8de:	80 93 35 01 	sts	0x0135, r24
 8e2:	37 c0       	rjmp	.+110    	; 0x952 <__stack+0x53>
			}
			else if(event_cnt==4)
 8e4:	84 30       	cpi	r24, 0x04	; 4
 8e6:	91 05       	cpc	r25, r1
 8e8:	29 f4       	brne	.+10     	; 0x8f4 <__vector_9+0x5ee>
			{
				UDR0=STAT_dt_step;
 8ea:	80 91 2e 01 	lds	r24, 0x012E
 8ee:	80 93 c6 00 	sts	0x00C6, r24
 8f2:	24 cf       	rjmp	.-440    	; 0x73c <__vector_9+0x436>
				prepareSetDAC(0, chan);
				setDAC();
			}
			else if(event_cnt==6)//start measure
 8f4:	86 30       	cpi	r24, 0x06	; 6
 8f6:	91 05       	cpc	r25, r1
 8f8:	81 f4       	brne	.+32     	; 0x91a <__stack+0x1b>
			{
				prepareSetDAC(ref16, chan);
 8fa:	80 91 29 01 	lds	r24, 0x0129
 8fe:	90 91 2a 01 	lds	r25, 0x012A
 902:	60 91 32 01 	lds	r22, 0x0132
 906:	0e 94 cc 00 	call	0x198	; 0x198 <prepareSetDAC>

	}
}

void setDAC(){
	PORTD&=~(1<<LDAC);
 90a:	5a 98       	cbi	0x0b, 2	; 11
	PORTD|=(1<<LDAC);	
 90c:	5a 9a       	sbi	0x0b, 2	; 11
			}
			else if(event_cnt==6)//start measure
			{
				prepareSetDAC(ref16, chan);
				setDAC();
				ADCSRA |= (1 << ADSC); 
 90e:	80 91 7a 00 	lds	r24, 0x007A
 912:	80 64       	ori	r24, 0x40	; 64
 914:	80 93 7a 00 	sts	0x007A, r24
 918:	1c c0       	rjmp	.+56     	; 0x952 <__stack+0x53>
				
			}
			else if(event_cnt==7)
 91a:	87 30       	cpi	r24, 0x07	; 7
 91c:	91 05       	cpc	r25, r1
 91e:	99 f4       	brne	.+38     	; 0x946 <__stack+0x47>
			{
				prepareSetDAC(0, chan);
 920:	80 e0       	ldi	r24, 0x00	; 0
 922:	90 e0       	ldi	r25, 0x00	; 0
 924:	60 91 32 01 	lds	r22, 0x0132
 928:	0e 94 cc 00 	call	0x198	; 0x198 <prepareSetDAC>

	}
}

void setDAC(){
	PORTD&=~(1<<LDAC);
 92c:	5a 98       	cbi	0x0b, 2	; 11
	PORTD|=(1<<LDAC);	
 92e:	5a 9a       	sbi	0x0b, 2	; 11
			else if(event_cnt==7)
			{
				prepareSetDAC(0, chan);
				setDAC();
				
				ADCL_=ADCL;	
 930:	90 91 78 00 	lds	r25, 0x0078
 934:	90 93 64 01 	sts	0x0164, r25
				ADCH_=ADCH;
 938:	80 91 79 00 	lds	r24, 0x0079
 93c:	80 93 68 01 	sts	0x0168, r24
				UDR0=ADCL_;
 940:	90 93 c6 00 	sts	0x00C6, r25
 944:	06 c0       	rjmp	.+12     	; 0x952 <__stack+0x53>
			}
			else if(event_cnt==8)
 946:	08 97       	sbiw	r24, 0x08	; 8
 948:	21 f4       	brne	.+8      	; 0x952 <__stack+0x53>
			{
				UDR0=ADCH_;
 94a:	80 91 68 01 	lds	r24, 0x0168
 94e:	80 93 c6 00 	sts	0x00C6, r24
		}
		
		
		
		
		ctr=0;
 952:	10 92 60 01 	sts	0x0160, r1
 956:	10 92 5f 01 	sts	0x015F, r1
		
		
		if(MD == ONE_SHOT)
 95a:	80 91 1e 01 	lds	r24, 0x011E
 95e:	85 30       	cpi	r24, 0x05	; 5
 960:	69 f4       	brne	.+26     	; 0x97c <__stack+0x7d>
		{
			if(event_cnt<16)
 962:	80 91 5b 01 	lds	r24, 0x015B
 966:	90 91 5c 01 	lds	r25, 0x015C
 96a:	80 31       	cpi	r24, 0x10	; 16
 96c:	91 05       	cpc	r25, r1
 96e:	2c f5       	brge	.+74     	; 0x9ba <__stack+0xbb>
				event_cnt++;
 970:	01 96       	adiw	r24, 0x01	; 1
 972:	90 93 5c 01 	sts	0x015C, r25
 976:	80 93 5b 01 	sts	0x015B, r24
 97a:	1f c0       	rjmp	.+62     	; 0x9ba <__stack+0xbb>
 97c:	20 91 5b 01 	lds	r18, 0x015B
 980:	30 91 5c 01 	lds	r19, 0x015C
		}
		else if(MD == PROGRAM)
 984:	82 30       	cpi	r24, 0x02	; 2
 986:	49 f4       	brne	.+18     	; 0x99a <__stack+0x9b>
		{
			event_cnt++;
 988:	c9 01       	movw	r24, r18
 98a:	01 96       	adiw	r24, 0x01	; 1
 98c:	90 93 5c 01 	sts	0x015C, r25
 990:	80 93 5b 01 	sts	0x015B, r24
			if(event_cnt>8)
 994:	09 97       	sbiw	r24, 0x09	; 9
 996:	8c f0       	brlt	.+34     	; 0x9ba <__stack+0xbb>
 998:	0c c0       	rjmp	.+24     	; 0x9b2 <__stack+0xb3>
				event_cnt = 0;
		}
		else{
			event_cnt++;
 99a:	2f 5f       	subi	r18, 0xFF	; 255
 99c:	3f 4f       	sbci	r19, 0xFF	; 255
 99e:	30 93 5c 01 	sts	0x015C, r19
 9a2:	20 93 5b 01 	sts	0x015B, r18
			if(event_cnt>T)
 9a6:	80 91 63 01 	lds	r24, 0x0163
 9aa:	90 e0       	ldi	r25, 0x00	; 0
 9ac:	82 17       	cp	r24, r18
 9ae:	93 07       	cpc	r25, r19
 9b0:	24 f4       	brge	.+8      	; 0x9ba <__stack+0xbb>
				event_cnt=0;
 9b2:	10 92 5c 01 	sts	0x015C, r1
 9b6:	10 92 5b 01 	sts	0x015B, r1
		//{
		//	if(event_cnt<16)
		//		event_cnt++;			
		//}
	}
	ctr++;
 9ba:	80 91 5f 01 	lds	r24, 0x015F
 9be:	90 91 60 01 	lds	r25, 0x0160
 9c2:	01 96       	adiw	r24, 0x01	; 1
 9c4:	90 93 60 01 	sts	0x0160, r25
 9c8:	80 93 5f 01 	sts	0x015F, r24
}
 9cc:	ff 91       	pop	r31
 9ce:	ef 91       	pop	r30
 9d0:	bf 91       	pop	r27
 9d2:	af 91       	pop	r26
 9d4:	9f 91       	pop	r25
 9d6:	8f 91       	pop	r24
 9d8:	7f 91       	pop	r23
 9da:	6f 91       	pop	r22
 9dc:	5f 91       	pop	r21
 9de:	4f 91       	pop	r20
 9e0:	3f 91       	pop	r19
 9e2:	2f 91       	pop	r18
 9e4:	0f 90       	pop	r0
 9e6:	0f be       	out	0x3f, r0	; 63
 9e8:	0f 90       	pop	r0
 9ea:	1f 90       	pop	r1
 9ec:	18 95       	reti

000009ee <__vector_18>:

//прием команд от компьютера по UART в зависимости от режима
ISR(USART_RX_vect)
{
 9ee:	1f 92       	push	r1
 9f0:	0f 92       	push	r0
 9f2:	0f b6       	in	r0, 0x3f	; 63
 9f4:	0f 92       	push	r0
 9f6:	11 24       	eor	r1, r1
 9f8:	2f 93       	push	r18
 9fa:	3f 93       	push	r19
 9fc:	4f 93       	push	r20
 9fe:	5f 93       	push	r21
 a00:	6f 93       	push	r22
 a02:	7f 93       	push	r23
 a04:	8f 93       	push	r24
 a06:	9f 93       	push	r25
 a08:	af 93       	push	r26
 a0a:	bf 93       	push	r27
 a0c:	ef 93       	push	r30
 a0e:	ff 93       	push	r31
	switch(ptr)
 a10:	80 91 30 01 	lds	r24, 0x0130
 a14:	84 30       	cpi	r24, 0x04	; 4
 a16:	09 f4       	brne	.+2      	; 0xa1a <__vector_18+0x2c>
 a18:	69 c0       	rjmp	.+210    	; 0xaec <__vector_18+0xfe>
 a1a:	85 30       	cpi	r24, 0x05	; 5
 a1c:	58 f4       	brcc	.+22     	; 0xa34 <__vector_18+0x46>
 a1e:	81 30       	cpi	r24, 0x01	; 1
 a20:	51 f1       	breq	.+84     	; 0xa76 <__vector_18+0x88>
 a22:	81 30       	cpi	r24, 0x01	; 1
 a24:	d0 f0       	brcs	.+52     	; 0xa5a <__vector_18+0x6c>
 a26:	82 30       	cpi	r24, 0x02	; 2
 a28:	09 f4       	brne	.+2      	; 0xa2c <__vector_18+0x3e>
 a2a:	42 c0       	rjmp	.+132    	; 0xab0 <__vector_18+0xc2>
 a2c:	83 30       	cpi	r24, 0x03	; 3
 a2e:	09 f0       	breq	.+2      	; 0xa32 <__vector_18+0x44>
 a30:	9a c0       	rjmp	.+308    	; 0xb66 <__vector_18+0x178>
 a32:	4f c0       	rjmp	.+158    	; 0xad2 <__vector_18+0xe4>
 a34:	87 30       	cpi	r24, 0x07	; 7
 a36:	09 f4       	brne	.+2      	; 0xa3a <__vector_18+0x4c>
 a38:	79 c0       	rjmp	.+242    	; 0xb2c <__vector_18+0x13e>
 a3a:	88 30       	cpi	r24, 0x08	; 8
 a3c:	38 f4       	brcc	.+14     	; 0xa4c <__vector_18+0x5e>
 a3e:	85 30       	cpi	r24, 0x05	; 5
 a40:	09 f4       	brne	.+2      	; 0xa44 <__vector_18+0x56>
 a42:	6a c0       	rjmp	.+212    	; 0xb18 <__vector_18+0x12a>
 a44:	86 30       	cpi	r24, 0x06	; 6
 a46:	09 f0       	breq	.+2      	; 0xa4a <__vector_18+0x5c>
 a48:	8e c0       	rjmp	.+284    	; 0xb66 <__vector_18+0x178>
 a4a:	6b c0       	rjmp	.+214    	; 0xb22 <__vector_18+0x134>
 a4c:	88 30       	cpi	r24, 0x08	; 8
 a4e:	09 f4       	brne	.+2      	; 0xa52 <__vector_18+0x64>
 a50:	72 c0       	rjmp	.+228    	; 0xb36 <__vector_18+0x148>
 a52:	89 30       	cpi	r24, 0x09	; 9
 a54:	09 f0       	breq	.+2      	; 0xa58 <__vector_18+0x6a>
 a56:	87 c0       	rjmp	.+270    	; 0xb66 <__vector_18+0x178>
 a58:	73 c0       	rjmp	.+230    	; 0xb40 <__vector_18+0x152>
	{
		case 0:
		if(UDR0!=255)//байт 255 является синхронизирующим
 a5a:	80 91 c6 00 	lds	r24, 0x00C6
 a5e:	8f 3f       	cpi	r24, 0xFF	; 255
 a60:	31 f0       	breq	.+12     	; 0xa6e <__vector_18+0x80>
		{
			sync=0;
 a62:	10 92 2d 01 	sts	0x012D, r1
			ptr--;
			ptr%=7;
 a66:	83 e0       	ldi	r24, 0x03	; 3
 a68:	80 93 30 01 	sts	0x0130, r24
 a6c:	7c c0       	rjmp	.+248    	; 0xb66 <__vector_18+0x178>
		}
		else
			sync=1;
 a6e:	81 e0       	ldi	r24, 0x01	; 1
 a70:	80 93 2d 01 	sts	0x012D, r24
 a74:	78 c0       	rjmp	.+240    	; 0xb66 <__vector_18+0x178>
		break;
		
		
		case 1:
		MD=UDR0;
 a76:	20 91 c6 00 	lds	r18, 0x00C6
 a7a:	20 93 1e 01 	sts	0x011E, r18
		if(MD==VAC)
 a7e:	21 30       	cpi	r18, 0x01	; 1
 a80:	39 f4       	brne	.+14     	; 0xa90 <__vector_18+0xa2>
			time_step=4;//5
 a82:	84 e0       	ldi	r24, 0x04	; 4
 a84:	90 e0       	ldi	r25, 0x00	; 0
 a86:	90 93 1b 01 	sts	0x011B, r25
 a8a:	80 93 1a 01 	sts	0x011A, r24
 a8e:	6b c0       	rjmp	.+214    	; 0xb66 <__vector_18+0x178>
		else
			time_step=6;//4		
 a90:	86 e0       	ldi	r24, 0x06	; 6
 a92:	90 e0       	ldi	r25, 0x00	; 0
 a94:	90 93 1b 01 	sts	0x011B, r25
 a98:	80 93 1a 01 	sts	0x011A, r24
		if(MD==PROGRAM)
 a9c:	22 30       	cpi	r18, 0x02	; 2
 a9e:	09 f0       	breq	.+2      	; 0xaa2 <__vector_18+0xb4>
 aa0:	62 c0       	rjmp	.+196    	; 0xb66 <__vector_18+0x178>
		{
			//PROGRAM_start=1;
			PROGRAM_done=0;
 aa2:	10 92 31 01 	sts	0x0131, r1
			proging_val=0;
 aa6:	10 92 26 01 	sts	0x0126, r1
 aaa:	10 92 25 01 	sts	0x0125, r1
 aae:	5b c0       	rjmp	.+182    	; 0xb66 <__vector_18+0x178>
		}
		break;
		
		
		case 2:		
		x16_simple = UDR0;
 ab0:	80 91 c6 00 	lds	r24, 0x00C6
 ab4:	90 e0       	ldi	r25, 0x00	; 0
 ab6:	90 93 66 01 	sts	0x0166, r25
 aba:	80 93 65 01 	sts	0x0165, r24
		x16 = x16_simple<<4;
 abe:	44 e0       	ldi	r20, 0x04	; 4
 ac0:	88 0f       	add	r24, r24
 ac2:	99 1f       	adc	r25, r25
 ac4:	4a 95       	dec	r20
 ac6:	e1 f7       	brne	.-8      	; 0xac0 <__vector_18+0xd2>
 ac8:	90 93 28 01 	sts	0x0128, r25
 acc:	80 93 27 01 	sts	0x0127, r24
 ad0:	4a c0       	rjmp	.+148    	; 0xb66 <__vector_18+0x178>
		break;
		case 3:	
		ref16=UDR0<<4;
 ad2:	80 91 c6 00 	lds	r24, 0x00C6
 ad6:	90 e0       	ldi	r25, 0x00	; 0
 ad8:	34 e0       	ldi	r19, 0x04	; 4
 ada:	88 0f       	add	r24, r24
 adc:	99 1f       	adc	r25, r25
 ade:	3a 95       	dec	r19
 ae0:	e1 f7       	brne	.-8      	; 0xada <__vector_18+0xec>
 ae2:	90 93 2a 01 	sts	0x012A, r25
 ae6:	80 93 29 01 	sts	0x0129, r24
 aea:	3d c0       	rjmp	.+122    	; 0xb66 <__vector_18+0x178>
		break;
		case 4:
		if(MD==PROGRAM)
 aec:	80 91 1e 01 	lds	r24, 0x011E
 af0:	82 30       	cpi	r24, 0x02	; 2
 af2:	29 f4       	brne	.+10     	; 0xafe <__vector_18+0x110>
			t1=UDR0;
 af4:	80 91 c6 00 	lds	r24, 0x00C6
 af8:	80 93 16 01 	sts	0x0116, r24
 afc:	34 c0       	rjmp	.+104    	; 0xb66 <__vector_18+0x178>
		else
			reset16=UDR0<<4;
 afe:	80 91 c6 00 	lds	r24, 0x00C6
 b02:	90 e0       	ldi	r25, 0x00	; 0
 b04:	24 e0       	ldi	r18, 0x04	; 4
 b06:	88 0f       	add	r24, r24
 b08:	99 1f       	adc	r25, r25
 b0a:	2a 95       	dec	r18
 b0c:	e1 f7       	brne	.-8      	; 0xb06 <__vector_18+0x118>
 b0e:	90 93 2c 01 	sts	0x012C, r25
 b12:	80 93 2b 01 	sts	0x012B, r24
 b16:	27 c0       	rjmp	.+78     	; 0xb66 <__vector_18+0x178>
		break;		
		case 5:
		
		t2=UDR0;
 b18:	80 91 c6 00 	lds	r24, 0x00C6
 b1c:	80 93 17 01 	sts	0x0117, r24
 b20:	22 c0       	rjmp	.+68     	; 0xb66 <__vector_18+0x178>
	
		
		break;	
		case 6:
		dT=UDR0;
 b22:	80 91 c6 00 	lds	r24, 0x00C6
 b26:	80 93 5e 01 	sts	0x015E, r24
 b2a:	1d c0       	rjmp	.+58     	; 0xb66 <__vector_18+0x178>
		break;
		case 7:
		T=UDR0;
 b2c:	80 91 c6 00 	lds	r24, 0x00C6
 b30:	80 93 63 01 	sts	0x0163, r24
 b34:	18 c0       	rjmp	.+48     	; 0xb66 <__vector_18+0x178>
		break;
		case 8:
		chan=UDR0;
 b36:	80 91 c6 00 	lds	r24, 0x00C6
 b3a:	80 93 32 01 	sts	0x0132, r24
 b3e:	13 c0       	rjmp	.+38     	; 0xb66 <__vector_18+0x178>
		break;
		
		case 9:
			reverted[chan]=UDR0;
 b40:	80 91 c6 00 	lds	r24, 0x00C6
 b44:	e0 91 32 01 	lds	r30, 0x0132
 b48:	f0 e0       	ldi	r31, 0x00	; 0
 b4a:	e9 5c       	subi	r30, 0xC9	; 201
 b4c:	fe 4f       	sbci	r31, 0xFE	; 254
 b4e:	80 83       	st	Z, r24
		
			//event_cnt=0;			
			
			if(MD==GATHER_MULT)
 b50:	80 91 1e 01 	lds	r24, 0x011E
 b54:	83 30       	cpi	r24, 0x03	; 3
 b56:	19 f4       	brne	.+6      	; 0xb5e <__vector_18+0x170>
			{
			//	PORTD=0b00100000;
			//static int ff=1<<5;
			//if(x16>>4)
			gatherMult();
 b58:	0e 94 7a 00 	call	0xf4	; 0xf4 <gatherMult>
 b5c:	04 c0       	rjmp	.+8      	; 0xb66 <__vector_18+0x178>
			//PORTD=(1<<5)^PORTD;
			//PORTD=ff;
			}
			else if(MD==SEPAR_MULT)	
 b5e:	84 30       	cpi	r24, 0x04	; 4
 b60:	11 f4       	brne	.+4      	; 0xb66 <__vector_18+0x178>
			{
			separMult();	
 b62:	0e 94 83 00 	call	0x106	; 0x106 <separMult>
		break;
	}
	

	
	dTt2=dT+t2;
 b66:	80 91 17 01 	lds	r24, 0x0117
 b6a:	90 91 5e 01 	lds	r25, 0x015E
 b6e:	89 0f       	add	r24, r25
 b70:	80 93 18 01 	sts	0x0118, r24
	//UDR0=x16/16;
	ptr++;
	ptr%=10;
 b74:	80 91 30 01 	lds	r24, 0x0130
 b78:	8f 5f       	subi	r24, 0xFF	; 255
 b7a:	6a e0       	ldi	r22, 0x0A	; 10
 b7c:	0e 94 d3 05 	call	0xba6	; 0xba6 <__udivmodqi4>
 b80:	90 93 30 01 	sts	0x0130, r25
 b84:	ff 91       	pop	r31
 b86:	ef 91       	pop	r30
 b88:	bf 91       	pop	r27
 b8a:	af 91       	pop	r26
 b8c:	9f 91       	pop	r25
 b8e:	8f 91       	pop	r24
 b90:	7f 91       	pop	r23
 b92:	6f 91       	pop	r22
 b94:	5f 91       	pop	r21
 b96:	4f 91       	pop	r20
 b98:	3f 91       	pop	r19
 b9a:	2f 91       	pop	r18
 b9c:	0f 90       	pop	r0
 b9e:	0f be       	out	0x3f, r0	; 63
 ba0:	0f 90       	pop	r0
 ba2:	1f 90       	pop	r1
 ba4:	18 95       	reti

00000ba6 <__udivmodqi4>:
 ba6:	99 1b       	sub	r25, r25
 ba8:	79 e0       	ldi	r23, 0x09	; 9
 baa:	04 c0       	rjmp	.+8      	; 0xbb4 <__udivmodqi4_ep>

00000bac <__udivmodqi4_loop>:
 bac:	99 1f       	adc	r25, r25
 bae:	96 17       	cp	r25, r22
 bb0:	08 f0       	brcs	.+2      	; 0xbb4 <__udivmodqi4_ep>
 bb2:	96 1b       	sub	r25, r22

00000bb4 <__udivmodqi4_ep>:
 bb4:	88 1f       	adc	r24, r24
 bb6:	7a 95       	dec	r23
 bb8:	c9 f7       	brne	.-14     	; 0xbac <__udivmodqi4_loop>
 bba:	80 95       	com	r24
 bbc:	08 95       	ret

00000bbe <__divmodqi4>:
 bbe:	87 fb       	bst	r24, 7
 bc0:	08 2e       	mov	r0, r24
 bc2:	06 26       	eor	r0, r22
 bc4:	87 fd       	sbrc	r24, 7
 bc6:	81 95       	neg	r24
 bc8:	67 fd       	sbrc	r22, 7
 bca:	61 95       	neg	r22
 bcc:	ec df       	rcall	.-40     	; 0xba6 <__udivmodqi4>
 bce:	0e f4       	brtc	.+2      	; 0xbd2 <__divmodqi4_1>
 bd0:	91 95       	neg	r25

00000bd2 <__divmodqi4_1>:
 bd2:	07 fc       	sbrc	r0, 7
 bd4:	81 95       	neg	r24

00000bd6 <__divmodqi4_exit>:
 bd6:	08 95       	ret

00000bd8 <__udivmodhi4>:
 bd8:	aa 1b       	sub	r26, r26
 bda:	bb 1b       	sub	r27, r27
 bdc:	51 e1       	ldi	r21, 0x11	; 17
 bde:	07 c0       	rjmp	.+14     	; 0xbee <__udivmodhi4_ep>

00000be0 <__udivmodhi4_loop>:
 be0:	aa 1f       	adc	r26, r26
 be2:	bb 1f       	adc	r27, r27
 be4:	a6 17       	cp	r26, r22
 be6:	b7 07       	cpc	r27, r23
 be8:	10 f0       	brcs	.+4      	; 0xbee <__udivmodhi4_ep>
 bea:	a6 1b       	sub	r26, r22
 bec:	b7 0b       	sbc	r27, r23

00000bee <__udivmodhi4_ep>:
 bee:	88 1f       	adc	r24, r24
 bf0:	99 1f       	adc	r25, r25
 bf2:	5a 95       	dec	r21
 bf4:	a9 f7       	brne	.-22     	; 0xbe0 <__udivmodhi4_loop>
 bf6:	80 95       	com	r24
 bf8:	90 95       	com	r25
 bfa:	bc 01       	movw	r22, r24
 bfc:	cd 01       	movw	r24, r26
 bfe:	08 95       	ret

00000c00 <_exit>:
 c00:	f8 94       	cli

00000c02 <__stop_program>:
 c02:	ff cf       	rjmp	.-2      	; 0xc02 <__stop_program>
