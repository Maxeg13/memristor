
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000032  00800100  00000c0a  00000c9e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000c0a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000078  00800132  00800132  00000cd0  2**0
                  ALLOC
  3 .debug_aranges 00000020  00000000  00000000  00000cd0  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 0000033c  00000000  00000000  00000cf0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000945  00000000  00000000  0000102c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000264  00000000  00000000  00001971  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000009f0  00000000  00000000  00001bd5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000110  00000000  00000000  000025c8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000313  00000000  00000000  000026d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000094  00000000  00000000  000029eb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 56 02 	jmp	0x4ac	; 0x4ac <__vector_9>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 08 05 	jmp	0xa10	; 0xa10 <__vector_18>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ea e0       	ldi	r30, 0x0A	; 10
  7c:	fc e0       	ldi	r31, 0x0C	; 12
  7e:	02 c0       	rjmp	.+4      	; 0x84 <.do_copy_data_start>

00000080 <.do_copy_data_loop>:
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0

00000084 <.do_copy_data_start>:
  84:	a2 33       	cpi	r26, 0x32	; 50
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <.do_copy_data_loop>

0000008a <__do_clear_bss>:
  8a:	11 e0       	ldi	r17, 0x01	; 1
  8c:	a2 e3       	ldi	r26, 0x32	; 50
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	aa 3a       	cpi	r26, 0xAA	; 170
  96:	b1 07       	cpc	r27, r17
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 00 02 	call	0x400	; 0x400 <main>
  9e:	0c 94 03 06 	jmp	0xc06	; 0xc06 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <set_pin>:
					
struct Pin_t SYNC_PINS[] = {	{&PORTD, PD5}, {&PORTD, PD6}, {&PORTD, PD7}, {&PORTB, PB0}, 		//pd3 for multiplexing or pd5 for 64
								{&PORTB, PB1}, {&PORTC, PC2}, {&PORTC, PC3}, {&PORTC, PC4} };
						
						
void set_pin(struct Pin_t pin) {
  a6:	df 93       	push	r29
  a8:	cf 93       	push	r28
  aa:	00 d0       	rcall	.+0      	; 0xac <set_pin+0x6>
  ac:	0f 92       	push	r0
  ae:	cd b7       	in	r28, 0x3d	; 61
  b0:	de b7       	in	r29, 0x3e	; 62
  b2:	69 83       	std	Y+1, r22	; 0x01
  b4:	7a 83       	std	Y+2, r23	; 0x02
  b6:	8b 83       	std	Y+3, r24	; 0x03
  b8:	e9 81       	ldd	r30, Y+1	; 0x01
  ba:	fa 81       	ldd	r31, Y+2	; 0x02
	SET_PIN(*pin.reg_out, pin.pin);
  bc:	21 e0       	ldi	r18, 0x01	; 1
  be:	30 e0       	ldi	r19, 0x00	; 0
  c0:	02 c0       	rjmp	.+4      	; 0xc6 <set_pin+0x20>
  c2:	22 0f       	add	r18, r18
  c4:	33 1f       	adc	r19, r19
  c6:	8a 95       	dec	r24
  c8:	e2 f7       	brpl	.-8      	; 0xc2 <set_pin+0x1c>
  ca:	80 81       	ld	r24, Z
  cc:	82 2b       	or	r24, r18
  ce:	80 83       	st	Z, r24
}
  d0:	0f 90       	pop	r0
  d2:	0f 90       	pop	r0
  d4:	0f 90       	pop	r0
  d6:	cf 91       	pop	r28
  d8:	df 91       	pop	r29
  da:	08 95       	ret

000000dc <reset_pin>:

void reset_pin(struct Pin_t pin) {
  dc:	df 93       	push	r29
  de:	cf 93       	push	r28
  e0:	00 d0       	rcall	.+0      	; 0xe2 <reset_pin+0x6>
  e2:	0f 92       	push	r0
  e4:	cd b7       	in	r28, 0x3d	; 61
  e6:	de b7       	in	r29, 0x3e	; 62
  e8:	69 83       	std	Y+1, r22	; 0x01
  ea:	7a 83       	std	Y+2, r23	; 0x02
  ec:	8b 83       	std	Y+3, r24	; 0x03
  ee:	e9 81       	ldd	r30, Y+1	; 0x01
  f0:	fa 81       	ldd	r31, Y+2	; 0x02
	RESET_PIN(*pin.reg_out, pin.pin);
  f2:	21 e0       	ldi	r18, 0x01	; 1
  f4:	30 e0       	ldi	r19, 0x00	; 0
  f6:	02 c0       	rjmp	.+4      	; 0xfc <reset_pin+0x20>
  f8:	22 0f       	add	r18, r18
  fa:	33 1f       	adc	r19, r19
  fc:	8a 95       	dec	r24
  fe:	e2 f7       	brpl	.-8      	; 0xf8 <reset_pin+0x1c>
 100:	20 95       	com	r18
 102:	80 81       	ld	r24, Z
 104:	82 23       	and	r24, r18
 106:	80 83       	st	Z, r24
}
 108:	0f 90       	pop	r0
 10a:	0f 90       	pop	r0
 10c:	0f 90       	pop	r0
 10e:	cf 91       	pop	r28
 110:	df 91       	pop	r29
 112:	08 95       	ret

00000114 <gatherMult>:
struct Pin_t sep4_pin = {&PORTB, 0};
struct Pin_t resister_pin = {&PORTC, 4};
		
void gatherMult()
{
	reset_pin(sep2_pin);
 114:	e0 91 1b 01 	lds	r30, 0x011B
 118:	f0 91 1c 01 	lds	r31, 0x011C
void set_pin(struct Pin_t pin) {
	SET_PIN(*pin.reg_out, pin.pin);
}

void reset_pin(struct Pin_t pin) {
	RESET_PIN(*pin.reg_out, pin.pin);
 11c:	41 e0       	ldi	r20, 0x01	; 1
 11e:	50 e0       	ldi	r21, 0x00	; 0
 120:	ca 01       	movw	r24, r20
 122:	00 90 1d 01 	lds	r0, 0x011D
 126:	02 c0       	rjmp	.+4      	; 0x12c <gatherMult+0x18>
 128:	88 0f       	add	r24, r24
 12a:	99 1f       	adc	r25, r25
 12c:	0a 94       	dec	r0
 12e:	e2 f7       	brpl	.-8      	; 0x128 <gatherMult+0x14>
 130:	80 95       	com	r24
 132:	20 81       	ld	r18, Z
 134:	28 23       	and	r18, r24
 136:	20 83       	st	Z, r18
struct Pin_t resister_pin = {&PORTC, 4};
		
void gatherMult()
{
	reset_pin(sep2_pin);
	reset_pin(sep3_pin);
 138:	e0 91 1e 01 	lds	r30, 0x011E
 13c:	f0 91 1f 01 	lds	r31, 0x011F
void set_pin(struct Pin_t pin) {
	SET_PIN(*pin.reg_out, pin.pin);
}

void reset_pin(struct Pin_t pin) {
	RESET_PIN(*pin.reg_out, pin.pin);
 140:	ca 01       	movw	r24, r20
 142:	00 90 20 01 	lds	r0, 0x0120
 146:	02 c0       	rjmp	.+4      	; 0x14c <gatherMult+0x38>
 148:	88 0f       	add	r24, r24
 14a:	99 1f       	adc	r25, r25
 14c:	0a 94       	dec	r0
 14e:	e2 f7       	brpl	.-8      	; 0x148 <gatherMult+0x34>
 150:	80 95       	com	r24
 152:	20 81       	ld	r18, Z
 154:	28 23       	and	r18, r24
 156:	20 83       	st	Z, r18
		
void gatherMult()
{
	reset_pin(sep2_pin);
	reset_pin(sep3_pin);
	reset_pin(sep1_pin);
 158:	e0 91 18 01 	lds	r30, 0x0118
 15c:	f0 91 19 01 	lds	r31, 0x0119
void set_pin(struct Pin_t pin) {
	SET_PIN(*pin.reg_out, pin.pin);
}

void reset_pin(struct Pin_t pin) {
	RESET_PIN(*pin.reg_out, pin.pin);
 160:	ca 01       	movw	r24, r20
 162:	00 90 1a 01 	lds	r0, 0x011A
 166:	02 c0       	rjmp	.+4      	; 0x16c <gatherMult+0x58>
 168:	88 0f       	add	r24, r24
 16a:	99 1f       	adc	r25, r25
 16c:	0a 94       	dec	r0
 16e:	e2 f7       	brpl	.-8      	; 0x168 <gatherMult+0x54>
 170:	80 95       	com	r24
 172:	20 81       	ld	r18, Z
 174:	28 23       	and	r18, r24
 176:	20 83       	st	Z, r18
	reset_pin(sep2_pin);
	reset_pin(sep3_pin);
	reset_pin(sep1_pin);
	
	// 3-4
	RESET_PIN(PORTC, 1);	
 178:	41 98       	cbi	0x08, 1	; 8
	// 2-3	
	RESET_PIN(PORTB, 2);
 17a:	2a 98       	cbi	0x05, 2	; 5
	// 1-2
	RESET_PIN(PORTB, 1);
 17c:	29 98       	cbi	0x05, 1	; 5
	
	reset_pin(sep4_pin);
 17e:	e0 91 21 01 	lds	r30, 0x0121
 182:	f0 91 22 01 	lds	r31, 0x0122
void set_pin(struct Pin_t pin) {
	SET_PIN(*pin.reg_out, pin.pin);
}

void reset_pin(struct Pin_t pin) {
	RESET_PIN(*pin.reg_out, pin.pin);
 186:	ca 01       	movw	r24, r20
 188:	00 90 23 01 	lds	r0, 0x0123
 18c:	02 c0       	rjmp	.+4      	; 0x192 <gatherMult+0x7e>
 18e:	88 0f       	add	r24, r24
 190:	99 1f       	adc	r25, r25
 192:	0a 94       	dec	r0
 194:	e2 f7       	brpl	.-8      	; 0x18e <gatherMult+0x7a>
 196:	80 95       	com	r24
 198:	20 81       	ld	r18, Z
 19a:	28 23       	and	r18, r24
 19c:	20 83       	st	Z, r18
	// 1-2
	RESET_PIN(PORTB, 1);
	
	reset_pin(sep4_pin);
	
	set_pin(resister_pin);
 19e:	e0 91 24 01 	lds	r30, 0x0124
 1a2:	f0 91 25 01 	lds	r31, 0x0125
struct Pin_t SYNC_PINS[] = {	{&PORTD, PD5}, {&PORTD, PD6}, {&PORTD, PD7}, {&PORTB, PB0}, 		//pd3 for multiplexing or pd5 for 64
								{&PORTB, PB1}, {&PORTC, PC2}, {&PORTC, PC3}, {&PORTC, PC4} };
						
						
void set_pin(struct Pin_t pin) {
	SET_PIN(*pin.reg_out, pin.pin);
 1a6:	00 90 26 01 	lds	r0, 0x0126
 1aa:	02 c0       	rjmp	.+4      	; 0x1b0 <gatherMult+0x9c>
 1ac:	44 0f       	add	r20, r20
 1ae:	55 1f       	adc	r21, r21
 1b0:	0a 94       	dec	r0
 1b2:	e2 f7       	brpl	.-8      	; 0x1ac <gatherMult+0x98>
 1b4:	80 81       	ld	r24, Z
 1b6:	84 2b       	or	r24, r20
 1b8:	80 83       	st	Z, r24
	RESET_PIN(PORTB, 1);
	
	reset_pin(sep4_pin);
	
	set_pin(resister_pin);
}
 1ba:	08 95       	ret

000001bc <usualMult>:

void usualMult()
{
	RESET_PIN(PORTB, 1);
 1bc:	29 98       	cbi	0x05, 1	; 5
	RESET_PIN(PORTB, 2);
 1be:	2a 98       	cbi	0x05, 2	; 5
	RESET_PIN(PORTC, 1);
 1c0:	41 98       	cbi	0x08, 1	; 8
	
	set_pin(resister_pin);
 1c2:	e0 91 24 01 	lds	r30, 0x0124
 1c6:	f0 91 25 01 	lds	r31, 0x0125
struct Pin_t SYNC_PINS[] = {	{&PORTD, PD5}, {&PORTD, PD6}, {&PORTD, PD7}, {&PORTB, PB0}, 		//pd3 for multiplexing or pd5 for 64
								{&PORTB, PB1}, {&PORTC, PC2}, {&PORTC, PC3}, {&PORTC, PC4} };
						
						
void set_pin(struct Pin_t pin) {
	SET_PIN(*pin.reg_out, pin.pin);
 1ca:	21 e0       	ldi	r18, 0x01	; 1
 1cc:	30 e0       	ldi	r19, 0x00	; 0
 1ce:	a9 01       	movw	r20, r18
 1d0:	00 90 26 01 	lds	r0, 0x0126
 1d4:	02 c0       	rjmp	.+4      	; 0x1da <usualMult+0x1e>
 1d6:	44 0f       	add	r20, r20
 1d8:	55 1f       	adc	r21, r21
 1da:	0a 94       	dec	r0
 1dc:	e2 f7       	brpl	.-8      	; 0x1d6 <usualMult+0x1a>
 1de:	80 81       	ld	r24, Z
 1e0:	84 2b       	or	r24, r20
 1e2:	80 83       	st	Z, r24
	RESET_PIN(PORTB, 1);
	RESET_PIN(PORTB, 2);
	RESET_PIN(PORTC, 1);
	
	set_pin(resister_pin);
	set_pin(sep2_pin);
 1e4:	e0 91 1b 01 	lds	r30, 0x011B
 1e8:	f0 91 1c 01 	lds	r31, 0x011C
struct Pin_t SYNC_PINS[] = {	{&PORTD, PD5}, {&PORTD, PD6}, {&PORTD, PD7}, {&PORTB, PB0}, 		//pd3 for multiplexing or pd5 for 64
								{&PORTB, PB1}, {&PORTC, PC2}, {&PORTC, PC3}, {&PORTC, PC4} };
						
						
void set_pin(struct Pin_t pin) {
	SET_PIN(*pin.reg_out, pin.pin);
 1ec:	a9 01       	movw	r20, r18
 1ee:	00 90 1d 01 	lds	r0, 0x011D
 1f2:	02 c0       	rjmp	.+4      	; 0x1f8 <usualMult+0x3c>
 1f4:	44 0f       	add	r20, r20
 1f6:	55 1f       	adc	r21, r21
 1f8:	0a 94       	dec	r0
 1fa:	e2 f7       	brpl	.-8      	; 0x1f4 <usualMult+0x38>
 1fc:	80 81       	ld	r24, Z
 1fe:	84 2b       	or	r24, r20
 200:	80 83       	st	Z, r24
	RESET_PIN(PORTB, 2);
	RESET_PIN(PORTC, 1);
	
	set_pin(resister_pin);
	set_pin(sep2_pin);
	set_pin(sep3_pin);
 202:	e0 91 1e 01 	lds	r30, 0x011E
 206:	f0 91 1f 01 	lds	r31, 0x011F
struct Pin_t SYNC_PINS[] = {	{&PORTD, PD5}, {&PORTD, PD6}, {&PORTD, PD7}, {&PORTB, PB0}, 		//pd3 for multiplexing or pd5 for 64
								{&PORTB, PB1}, {&PORTC, PC2}, {&PORTC, PC3}, {&PORTC, PC4} };
						
						
void set_pin(struct Pin_t pin) {
	SET_PIN(*pin.reg_out, pin.pin);
 20a:	a9 01       	movw	r20, r18
 20c:	00 90 20 01 	lds	r0, 0x0120
 210:	02 c0       	rjmp	.+4      	; 0x216 <usualMult+0x5a>
 212:	44 0f       	add	r20, r20
 214:	55 1f       	adc	r21, r21
 216:	0a 94       	dec	r0
 218:	e2 f7       	brpl	.-8      	; 0x212 <usualMult+0x56>
 21a:	80 81       	ld	r24, Z
 21c:	84 2b       	or	r24, r20
 21e:	80 83       	st	Z, r24
	RESET_PIN(PORTC, 1);
	
	set_pin(resister_pin);
	set_pin(sep2_pin);
	set_pin(sep3_pin);
	set_pin(sep4_pin);
 220:	e0 91 21 01 	lds	r30, 0x0121
 224:	f0 91 22 01 	lds	r31, 0x0122
struct Pin_t SYNC_PINS[] = {	{&PORTD, PD5}, {&PORTD, PD6}, {&PORTD, PD7}, {&PORTB, PB0}, 		//pd3 for multiplexing or pd5 for 64
								{&PORTB, PB1}, {&PORTC, PC2}, {&PORTC, PC3}, {&PORTC, PC4} };
						
						
void set_pin(struct Pin_t pin) {
	SET_PIN(*pin.reg_out, pin.pin);
 228:	a9 01       	movw	r20, r18
 22a:	00 90 23 01 	lds	r0, 0x0123
 22e:	02 c0       	rjmp	.+4      	; 0x234 <usualMult+0x78>
 230:	44 0f       	add	r20, r20
 232:	55 1f       	adc	r21, r21
 234:	0a 94       	dec	r0
 236:	e2 f7       	brpl	.-8      	; 0x230 <usualMult+0x74>
 238:	80 81       	ld	r24, Z
 23a:	84 2b       	or	r24, r20
 23c:	80 83       	st	Z, r24
	
	set_pin(resister_pin);
	set_pin(sep2_pin);
	set_pin(sep3_pin);
	set_pin(sep4_pin);
	set_pin(sep1_pin);
 23e:	e0 91 18 01 	lds	r30, 0x0118
 242:	f0 91 19 01 	lds	r31, 0x0119
struct Pin_t SYNC_PINS[] = {	{&PORTD, PD5}, {&PORTD, PD6}, {&PORTD, PD7}, {&PORTB, PB0}, 		//pd3 for multiplexing or pd5 for 64
								{&PORTB, PB1}, {&PORTC, PC2}, {&PORTC, PC3}, {&PORTC, PC4} };
						
						
void set_pin(struct Pin_t pin) {
	SET_PIN(*pin.reg_out, pin.pin);
 246:	00 90 1a 01 	lds	r0, 0x011A
 24a:	02 c0       	rjmp	.+4      	; 0x250 <usualMult+0x94>
 24c:	22 0f       	add	r18, r18
 24e:	33 1f       	adc	r19, r19
 250:	0a 94       	dec	r0
 252:	e2 f7       	brpl	.-8      	; 0x24c <usualMult+0x90>
 254:	80 81       	ld	r24, Z
 256:	82 2b       	or	r24, r18
 258:	80 83       	st	Z, r24
	set_pin(resister_pin);
	set_pin(sep2_pin);
	set_pin(sep3_pin);
	set_pin(sep4_pin);
	set_pin(sep1_pin);
}
 25a:	08 95       	ret

0000025c <set_reverser>:
		else
			PORTB&=~(1<<4);
		break;

	}
}
 25c:	08 95       	ret

0000025e <ADC_Init>:
}

//функция инициализаци АЦП
//АЦП используется для регистрации тока, проходящего через мемристор
void ADC_Init(){
 ADCSRA |= (1 << ADEN) // Включаем АЦП
 25e:	ea e7       	ldi	r30, 0x7A	; 122
 260:	f0 e0       	ldi	r31, 0x00	; 0
 262:	80 81       	ld	r24, Z
 264:	83 68       	ori	r24, 0x83	; 131
 266:	80 83       	st	Z, r24
 //ADCSRA&=~(1 << ADPS1)|(1 << ADPS0)|(1 << ADPS1);
 |(1 << ADPS1)|(1 << ADPS0)|(1 << ADPS1);    // устанавливаем предделитель преобразователя на 8
 ADMUX |= (0 << REFS1)|(1 << REFS0) //выставляем опорное напряжение, как внешний ИОН
 268:	ec e7       	ldi	r30, 0x7C	; 124
 26a:	f0 e0       	ldi	r31, 0x00	; 0
 26c:	80 81       	ld	r24, Z
 26e:	80 64       	ori	r24, 0x40	; 64
 270:	80 83       	st	Z, r24
 |(0 << MUX0)|(0 << MUX1)|(0 << MUX2)|(0 << MUX3); // снимать сигнал будем с  входа PC0 
}
 272:	08 95       	ret

00000274 <timer_init>:

//функция инициализации таймера
// Таймер используется для формирования временной последовательности значений, формируемых с ЦАПа
void timer_init()
{
    TCCR2A = 0;        
 274:	10 92 b0 00 	sts	0x00B0, r1
    TCCR2B = 0;
 278:	e1 eb       	ldi	r30, 0xB1	; 177
 27a:	f0 e0       	ldi	r31, 0x00	; 0
 27c:	10 82       	st	Z, r1
    
    TCCR2B |= (1<<CS21) ;    
 27e:	80 81       	ld	r24, Z
 280:	82 60       	ori	r24, 0x02	; 2
 282:	80 83       	st	Z, r24
    TIMSK2 = (1 << TOIE2);
 284:	81 e0       	ldi	r24, 0x01	; 1
 286:	80 93 70 00 	sts	0x0070, r24
}
 28a:	08 95       	ret

0000028c <uart_init>:

//функция инициализации UART-интерфейса
void uart_init(unsigned int ubrr)
{	
	UBRR0H = (unsigned char)(ubrr>>8);
 28c:	90 93 c5 00 	sts	0x00C5, r25
	UBRR0L = (unsigned char)ubrr;
 290:	80 93 c4 00 	sts	0x00C4, r24
	UCSR0B = (1<<RXCIE0)|(1<<RXEN0)|(1<<TXEN0);
 294:	88 e9       	ldi	r24, 0x98	; 152
 296:	80 93 c1 00 	sts	0x00C1, r24
	UCSR0C = (1<<USBS0)|(3<<UCSZ00);
 29a:	8e e0       	ldi	r24, 0x0E	; 14
 29c:	80 93 c2 00 	sts	0x00C2, r24
}
 2a0:	08 95       	ret

000002a2 <SPI_MasterInit>:

//функция инициализации SPI
void SPI_MasterInit()
{
	DDR_SPI |= (1<<DD_MOSI)|(1<<DD_SCK)|(1<<SPI_SS);
 2a2:	84 b1       	in	r24, 0x04	; 4
 2a4:	8c 62       	ori	r24, 0x2C	; 44
 2a6:	84 b9       	out	0x04, r24	; 4
	SPCR = (1<<SPE)|(0<<DORD)|(1<<MSTR)|(1<<CPOL)|(0<<CPHA);//|(1<<SPR1)|(0<<SPR0);
 2a8:	88 e5       	ldi	r24, 0x58	; 88
 2aa:	8c bd       	out	0x2c, r24	; 44
}
 2ac:	08 95       	ret

000002ae <SPI_WriteByte>:



void SPI_WriteByte(uint8_t data)
{
   SPDR = data;
 2ae:	8e bd       	out	0x2e, r24	; 46
  while(!(SPSR & (1<<SPIF)));
 2b0:	0d b4       	in	r0, 0x2d	; 45
 2b2:	07 fe       	sbrs	r0, 7
 2b4:	fd cf       	rjmp	.-6      	; 0x2b0 <SPI_WriteByte+0x2>
}
 2b6:	08 95       	ret

000002b8 <prepareResetDAC>:




void prepareResetDAC(int8_t chan)//_____________bipolar!!! and <<4 larger
{
 2b8:	ef 92       	push	r14
 2ba:	ff 92       	push	r15
 2bc:	0f 93       	push	r16
 2be:	1f 93       	push	r17
	reset_pin(SYNC_PINS[chan>>3]);
 2c0:	28 2f       	mov	r18, r24
 2c2:	25 95       	asr	r18
 2c4:	25 95       	asr	r18
 2c6:	25 95       	asr	r18
 2c8:	33 27       	eor	r19, r19
 2ca:	27 fd       	sbrc	r18, 7
 2cc:	30 95       	com	r19
 2ce:	89 01       	movw	r16, r18
 2d0:	00 0f       	add	r16, r16
 2d2:	11 1f       	adc	r17, r17
 2d4:	02 0f       	add	r16, r18
 2d6:	13 1f       	adc	r17, r19
 2d8:	00 50       	subi	r16, 0x00	; 0
 2da:	1f 4f       	sbci	r17, 0xFF	; 255
 2dc:	d8 01       	movw	r26, r16
 2de:	ed 91       	ld	r30, X+
 2e0:	fc 91       	ld	r31, X
 2e2:	11 97       	sbiw	r26, 0x01	; 1
void set_pin(struct Pin_t pin) {
	SET_PIN(*pin.reg_out, pin.pin);
}

void reset_pin(struct Pin_t pin) {
	RESET_PIN(*pin.reg_out, pin.pin);
 2e4:	91 e0       	ldi	r25, 0x01	; 1
 2e6:	e9 2e       	mov	r14, r25
 2e8:	f1 2c       	mov	r15, r1
 2ea:	97 01       	movw	r18, r14
 2ec:	12 96       	adiw	r26, 0x02	; 2
 2ee:	0c 90       	ld	r0, X
 2f0:	02 c0       	rjmp	.+4      	; 0x2f6 <prepareResetDAC+0x3e>
 2f2:	22 0f       	add	r18, r18
 2f4:	33 1f       	adc	r19, r19
 2f6:	0a 94       	dec	r0
 2f8:	e2 f7       	brpl	.-8      	; 0x2f2 <prepareResetDAC+0x3a>
 2fa:	20 95       	com	r18
 2fc:	90 81       	ld	r25, Z
 2fe:	92 23       	and	r25, r18
 300:	90 83       	st	Z, r25
	SPI_WriteByte(0b00001000|chan_addrs[chan%8]); // magic numbers, fuck
 302:	68 e0       	ldi	r22, 0x08	; 8
 304:	0e 94 f6 05 	call	0xbec	; 0xbec <__divmodqi4>
 308:	e9 2f       	mov	r30, r25
 30a:	ff 27       	eor	r31, r31
 30c:	e7 fd       	sbrc	r30, 7
 30e:	f0 95       	com	r31
 310:	ee 55       	subi	r30, 0x5E	; 94
 312:	fe 4f       	sbci	r31, 0xFE	; 254
 314:	80 81       	ld	r24, Z
 316:	88 60       	ori	r24, 0x08	; 8
 318:	90 e0       	ldi	r25, 0x00	; 0
 31a:	0e 94 57 01 	call	0x2ae	; 0x2ae <SPI_WriteByte>
	SPI_WriteByte(0);		
 31e:	80 e0       	ldi	r24, 0x00	; 0
 320:	90 e0       	ldi	r25, 0x00	; 0
 322:	0e 94 57 01 	call	0x2ae	; 0x2ae <SPI_WriteByte>
	set_pin(SYNC_PINS[chan>>3]);
 326:	d8 01       	movw	r26, r16
 328:	ed 91       	ld	r30, X+
 32a:	fc 91       	ld	r31, X
 32c:	11 97       	sbiw	r26, 0x01	; 1
struct Pin_t SYNC_PINS[] = {	{&PORTD, PD5}, {&PORTD, PD6}, {&PORTD, PD7}, {&PORTB, PB0}, 		//pd3 for multiplexing or pd5 for 64
								{&PORTB, PB1}, {&PORTC, PC2}, {&PORTC, PC3}, {&PORTC, PC4} };
						
						
void set_pin(struct Pin_t pin) {
	SET_PIN(*pin.reg_out, pin.pin);
 32e:	12 96       	adiw	r26, 0x02	; 2
 330:	0c 90       	ld	r0, X
 332:	02 c0       	rjmp	.+4      	; 0x338 <prepareResetDAC+0x80>
 334:	ee 0c       	add	r14, r14
 336:	ff 1c       	adc	r15, r15
 338:	0a 94       	dec	r0
 33a:	e2 f7       	brpl	.-8      	; 0x334 <prepareResetDAC+0x7c>
 33c:	80 81       	ld	r24, Z
 33e:	8e 29       	or	r24, r14
 340:	80 83       	st	Z, r24
}
 342:	1f 91       	pop	r17
 344:	0f 91       	pop	r16
 346:	ff 90       	pop	r15
 348:	ef 90       	pop	r14
 34a:	08 95       	ret

0000034c <prepareSetDAC>:

//функция управления ЦАПом 
// при этом, управление регистром LDAC должно использоваться 
//вне функции в перспепктиве создания многоканальной схемы
void prepareSetDAC(int16_t x,uint8_t chan)//_____________bipolar!!! and <<4 larger
{
 34c:	cf 92       	push	r12
 34e:	df 92       	push	r13
 350:	ef 92       	push	r14
 352:	ff 92       	push	r15
 354:	0f 93       	push	r16
 356:	1f 93       	push	r17
 358:	cf 93       	push	r28
 35a:	df 93       	push	r29
 35c:	e6 2f       	mov	r30, r22
	static uint8_t send8;
	
	x=-x;
 35e:	ee 24       	eor	r14, r14
 360:	ff 24       	eor	r15, r15
 362:	e8 1a       	sub	r14, r24
 364:	f9 0a       	sbc	r15, r25
	x+=2048;
 366:	80 e0       	ldi	r24, 0x00	; 0
 368:	98 e0       	ldi	r25, 0x08	; 8
 36a:	e8 0e       	add	r14, r24
 36c:	f9 1e       	adc	r15, r25
	uint8_t DAC = chan>>3;
	reset_pin(SYNC_PINS[DAC]);
 36e:	86 2f       	mov	r24, r22
 370:	86 95       	lsr	r24
 372:	86 95       	lsr	r24
 374:	86 95       	lsr	r24
 376:	90 e0       	ldi	r25, 0x00	; 0
 378:	8c 01       	movw	r16, r24
 37a:	00 0f       	add	r16, r16
 37c:	11 1f       	adc	r17, r17
 37e:	08 0f       	add	r16, r24
 380:	19 1f       	adc	r17, r25
 382:	00 50       	subi	r16, 0x00	; 0
 384:	1f 4f       	sbci	r17, 0xFF	; 255
 386:	e8 01       	movw	r28, r16
 388:	a8 81       	ld	r26, Y
 38a:	b9 81       	ldd	r27, Y+1	; 0x01
}

void reset_pin(struct Pin_t pin) {
	RESET_PIN(*pin.reg_out, pin.pin);
 38c:	61 e0       	ldi	r22, 0x01	; 1
 38e:	c6 2e       	mov	r12, r22
 390:	d1 2c       	mov	r13, r1
 392:	c6 01       	movw	r24, r12
 394:	0a 80       	ldd	r0, Y+2	; 0x02
 396:	02 c0       	rjmp	.+4      	; 0x39c <prepareSetDAC+0x50>
 398:	88 0f       	add	r24, r24
 39a:	99 1f       	adc	r25, r25
 39c:	0a 94       	dec	r0
 39e:	e2 f7       	brpl	.-8      	; 0x398 <prepareSetDAC+0x4c>
 3a0:	80 95       	com	r24
 3a2:	2c 91       	ld	r18, X
 3a4:	28 23       	and	r18, r24
 3a6:	2c 93       	st	X, r18
	send8 = (x >> 8);
	send8 &= 0b00001111;
	send8|= (chan_addrs[chan%8]);
	SPI_WriteByte(send8);
 3a8:	8f 2d       	mov	r24, r15
 3aa:	99 27       	eor	r25, r25
 3ac:	87 fd       	sbrc	r24, 7
 3ae:	9a 95       	dec	r25
 3b0:	8f 70       	andi	r24, 0x0F	; 15
 3b2:	f0 e0       	ldi	r31, 0x00	; 0
 3b4:	e7 70       	andi	r30, 0x07	; 7
 3b6:	f0 70       	andi	r31, 0x00	; 0
 3b8:	ee 55       	subi	r30, 0x5E	; 94
 3ba:	fe 4f       	sbci	r31, 0xFE	; 254
 3bc:	20 81       	ld	r18, Z
 3be:	82 2b       	or	r24, r18
 3c0:	90 e0       	ldi	r25, 0x00	; 0
 3c2:	0e 94 57 01 	call	0x2ae	; 0x2ae <SPI_WriteByte>
	send8=x;
 3c6:	e0 92 8a 01 	sts	0x018A, r14
	SPI_WriteByte(send8);		
 3ca:	8e 2d       	mov	r24, r14
 3cc:	90 e0       	ldi	r25, 0x00	; 0
 3ce:	0e 94 57 01 	call	0x2ae	; 0x2ae <SPI_WriteByte>
	set_pin(SYNC_PINS[DAC]);
 3d2:	e8 81       	ld	r30, Y
 3d4:	f9 81       	ldd	r31, Y+1	; 0x01
struct Pin_t SYNC_PINS[] = {	{&PORTD, PD5}, {&PORTD, PD6}, {&PORTD, PD7}, {&PORTB, PB0}, 		//pd3 for multiplexing or pd5 for 64
								{&PORTB, PB1}, {&PORTC, PC2}, {&PORTC, PC3}, {&PORTC, PC4} };
						
						
void set_pin(struct Pin_t pin) {
	SET_PIN(*pin.reg_out, pin.pin);
 3d6:	0a 80       	ldd	r0, Y+2	; 0x02
 3d8:	02 c0       	rjmp	.+4      	; 0x3de <prepareSetDAC+0x92>
 3da:	cc 0c       	add	r12, r12
 3dc:	dd 1c       	adc	r13, r13
 3de:	0a 94       	dec	r0
 3e0:	e2 f7       	brpl	.-8      	; 0x3da <prepareSetDAC+0x8e>
 3e2:	80 81       	ld	r24, Z
 3e4:	8c 29       	or	r24, r12
 3e6:	80 83       	st	Z, r24
}
 3e8:	df 91       	pop	r29
 3ea:	cf 91       	pop	r28
 3ec:	1f 91       	pop	r17
 3ee:	0f 91       	pop	r16
 3f0:	ff 90       	pop	r15
 3f2:	ef 90       	pop	r14
 3f4:	df 90       	pop	r13
 3f6:	cf 90       	pop	r12
 3f8:	08 95       	ret

000003fa <setDAC>:
  while(!(SPSR & (1<<SPIF)));
}


void setDAC(){
	PORTD&=~(1<<LDAC);
 3fa:	5a 98       	cbi	0x0b, 2	; 11
	PORTD|=(1<<LDAC);	
 3fc:	5a 9a       	sbi	0x0b, 2	; 11
}
 3fe:	08 95       	ret

00000400 <main>:


int main(void)
{
 400:	1f 93       	push	r17
	BIG_STAT_N = STAT_N*STAT_CYCLE;
 402:	80 91 28 01 	lds	r24, 0x0128
 406:	90 91 27 01 	lds	r25, 0x0127
 40a:	89 9f       	mul	r24, r25
 40c:	80 2d       	mov	r24, r0
 40e:	11 24       	eor	r1, r1
 410:	80 93 97 01 	sts	0x0197, r24
 414:	e2 ea       	ldi	r30, 0xA2	; 162
 416:	f1 e0       	ldi	r31, 0x01	; 1
 418:	90 e0       	ldi	r25, 0x00	; 0
	
	for (uint8_t i=0; i< 8;i++)
		chan_addrs[i] = i<<4;
 41a:	89 2f       	mov	r24, r25
 41c:	82 95       	swap	r24
 41e:	80 7f       	andi	r24, 0xF0	; 240
 420:	81 93       	st	Z+, r24

int main(void)
{
	BIG_STAT_N = STAT_N*STAT_CYCLE;
	
	for (uint8_t i=0; i< 8;i++)
 422:	9f 5f       	subi	r25, 0xFF	; 255
 424:	98 30       	cpi	r25, 0x08	; 8
 426:	c9 f7       	brne	.-14     	; 0x41a <main+0x1a>
		chan_addrs[i] = i<<4;
	
	DDRC= 0b00011110;
 428:	8e e1       	ldi	r24, 0x1E	; 30
 42a:	87 b9       	out	0x07, r24	; 7
	DDRD =0b11111111;	
 42c:	8f ef       	ldi	r24, 0xFF	; 255
 42e:	8a b9       	out	0x0a, r24	; 10
	DDRB= 0b00011111;
 430:	8f e1       	ldi	r24, 0x1F	; 31
 432:	84 b9       	out	0x04, r24	; 4
	sei();
 434:	78 94       	sei
}

//функция инициализации SPI
void SPI_MasterInit()
{
	DDR_SPI |= (1<<DD_MOSI)|(1<<DD_SCK)|(1<<SPI_SS);
 436:	84 b1       	in	r24, 0x04	; 4
 438:	8c 62       	ori	r24, 0x2C	; 44
 43a:	84 b9       	out	0x04, r24	; 4
	SPCR = (1<<SPE)|(0<<DORD)|(1<<MSTR)|(1<<CPOL)|(0<<CPHA);//|(1<<SPR1)|(0<<SPR0);
 43c:	88 e5       	ldi	r24, 0x58	; 88
 43e:	8c bd       	out	0x2c, r24	; 44

//функция инициализации таймера
// Таймер используется для формирования временной последовательности значений, формируемых с ЦАПа
void timer_init()
{
    TCCR2A = 0;        
 440:	10 92 b0 00 	sts	0x00B0, r1
    TCCR2B = 0;
 444:	10 92 b1 00 	sts	0x00B1, r1
    
    TCCR2B |= (1<<CS21) ;    
 448:	80 91 b1 00 	lds	r24, 0x00B1
 44c:	82 60       	ori	r24, 0x02	; 2
 44e:	80 93 b1 00 	sts	0x00B1, r24
    TIMSK2 = (1 << TOIE2);
 452:	81 e0       	ldi	r24, 0x01	; 1
 454:	80 93 70 00 	sts	0x0070, r24
}

//функция инициализации UART-интерфейса
void uart_init(unsigned int ubrr)
{	
	UBRR0H = (unsigned char)(ubrr>>8);
 458:	10 92 c5 00 	sts	0x00C5, r1
	UBRR0L = (unsigned char)ubrr;
 45c:	83 e3       	ldi	r24, 0x33	; 51
 45e:	80 93 c4 00 	sts	0x00C4, r24
	UCSR0B = (1<<RXCIE0)|(1<<RXEN0)|(1<<TXEN0);
 462:	88 e9       	ldi	r24, 0x98	; 152
 464:	80 93 c1 00 	sts	0x00C1, r24
	UCSR0C = (1<<USBS0)|(3<<UCSZ00);
 468:	8e e0       	ldi	r24, 0x0E	; 14
 46a:	80 93 c2 00 	sts	0x00C2, r24
}

//функция инициализаци АЦП
//АЦП используется для регистрации тока, проходящего через мемристор
void ADC_Init(){
 ADCSRA |= (1 << ADEN) // Включаем АЦП
 46e:	80 91 7a 00 	lds	r24, 0x007A
 472:	83 68       	ori	r24, 0x83	; 131
 474:	80 93 7a 00 	sts	0x007A, r24
 //ADCSRA&=~(1 << ADPS1)|(1 << ADPS0)|(1 << ADPS1);
 |(1 << ADPS1)|(1 << ADPS0)|(1 << ADPS1);    // устанавливаем предделитель преобразователя на 8
 ADMUX |= (0 << REFS1)|(1 << REFS0) //выставляем опорное напряжение, как внешний ИОН
 478:	80 91 7c 00 	lds	r24, 0x007C
 47c:	80 64       	ori	r24, 0x40	; 64
 47e:	80 93 7c 00 	sts	0x007C, r24
	timer_init();
	
	uart_init(BAUDRATE);
	ADC_Init();
	
	ADCSRA |= (1 << ADSC); 
 482:	80 91 7a 00 	lds	r24, 0x007A
 486:	80 64       	ori	r24, 0x40	; 64
 488:	80 93 7a 00 	sts	0x007A, r24
	ADCL;
 48c:	80 91 78 00 	lds	r24, 0x0078
	ADCL;
 490:	80 91 78 00 	lds	r24, 0x0078
 494:	10 e0       	ldi	r17, 0x00	; 0
		//set_reverser(i,1);
	
	//set_reverser(0,0);
	for (int i=0;i<CHAN_N;i++)
	{
		prepareSetDAC(0,i);
 496:	80 e0       	ldi	r24, 0x00	; 0
 498:	90 e0       	ldi	r25, 0x00	; 0
 49a:	61 2f       	mov	r22, r17
 49c:	0e 94 a6 01 	call	0x34c	; 0x34c <prepareSetDAC>
 4a0:	1f 5f       	subi	r17, 0xFF	; 255

	//for(int i=0;i<8;i++)
		//set_reverser(i,1);
	
	//set_reverser(0,0);
	for (int i=0;i<CHAN_N;i++)
 4a2:	10 34       	cpi	r17, 0x40	; 64
 4a4:	c1 f7       	brne	.-16     	; 0x496 <main+0x96>
  while(!(SPSR & (1<<SPIF)));
}


void setDAC(){
	PORTD&=~(1<<LDAC);
 4a6:	5a 98       	cbi	0x0b, 2	; 11
	PORTD|=(1<<LDAC);	
 4a8:	5a 9a       	sbi	0x0b, 2	; 11
 4aa:	ff cf       	rjmp	.-2      	; 0x4aa <main+0xaa>

000004ac <__vector_9>:
//главный цикл работы контроллера
//Здесь устанавливаются значения ЦАП и передаются данные на компьютер
//через UART-интерфейс
//данный участок кода повторяется при переполнении TIMER2
ISR(TIMER2_OVF_vect)
{
 4ac:	1f 92       	push	r1
 4ae:	0f 92       	push	r0
 4b0:	0f b6       	in	r0, 0x3f	; 63
 4b2:	0f 92       	push	r0
 4b4:	11 24       	eor	r1, r1
 4b6:	2f 93       	push	r18
 4b8:	3f 93       	push	r19
 4ba:	4f 93       	push	r20
 4bc:	5f 93       	push	r21
 4be:	6f 93       	push	r22
 4c0:	7f 93       	push	r23
 4c2:	8f 93       	push	r24
 4c4:	9f 93       	push	r25
 4c6:	af 93       	push	r26
 4c8:	bf 93       	push	r27
 4ca:	ef 93       	push	r30
 4cc:	ff 93       	push	r31
	if(!mode_active)
 4ce:	80 91 43 01 	lds	r24, 0x0143
 4d2:	88 23       	and	r24, r24
 4d4:	09 f4       	brne	.+2      	; 0x4d8 <__vector_9+0x2c>
 4d6:	8b c2       	rjmp	.+1302   	; 0x9ee <__stack+0xef>
		return;
	
	if(_ctr>time_step)
 4d8:	20 91 90 01 	lds	r18, 0x0190
 4dc:	30 91 91 01 	lds	r19, 0x0191
 4e0:	80 91 2d 01 	lds	r24, 0x012D
 4e4:	90 91 2e 01 	lds	r25, 0x012E
 4e8:	82 17       	cp	r24, r18
 4ea:	93 07       	cpc	r25, r19
 4ec:	0c f0       	brlt	.+2      	; 0x4f0 <__vector_9+0x44>
 4ee:	76 c2       	rjmp	.+1260   	; 0x9dc <__stack+0xdd>
	{
		if(MD==MEASURE)
 4f0:	80 91 32 01 	lds	r24, 0x0132
 4f4:	88 23       	and	r24, r24
 4f6:	99 f5       	brne	.+102    	; 0x55e <__vector_9+0xb2>
		{

			if(event_cnt==0)
 4f8:	80 91 8b 01 	lds	r24, 0x018B
 4fc:	90 91 8c 01 	lds	r25, 0x018C
 500:	00 97       	sbiw	r24, 0x00	; 0
 502:	21 f4       	brne	.+8      	; 0x50c <__vector_9+0x60>
			{
			UDR0=255;
 504:	8f ef       	ldi	r24, 0xFF	; 255
 506:	80 93 c6 00 	sts	0x00C6, r24
 50a:	1c c1       	rjmp	.+568    	; 0x744 <__vector_9+0x298>

			prepareSetDAC(ref16,chan);
			setDAC();
				
			}
			else if(event_cnt==1)
 50c:	81 30       	cpi	r24, 0x01	; 1
 50e:	91 05       	cpc	r25, r1
 510:	31 f4       	brne	.+12     	; 0x51e <__vector_9+0x72>
			{
			ADCSRA |= (1 << ADSC); 
 512:	80 91 7a 00 	lds	r24, 0x007A
 516:	80 64       	ori	r24, 0x40	; 64
 518:	80 93 7a 00 	sts	0x007A, r24
 51c:	cf c0       	rjmp	.+414    	; 0x6bc <__vector_9+0x210>
			UDR0=DUMMY_BYTE;
			}
			else if(event_cnt==2)
 51e:	82 30       	cpi	r24, 0x02	; 2
 520:	91 05       	cpc	r25, r1
 522:	09 f4       	brne	.+2      	; 0x526 <__vector_9+0x7a>
 524:	cb c0       	rjmp	.+406    	; 0x6bc <__vector_9+0x210>
			{	
			UDR0=DUMMY_BYTE;
		
			}
			else if(event_cnt==3)
 526:	83 30       	cpi	r24, 0x03	; 3
 528:	91 05       	cpc	r25, r1
 52a:	09 f4       	brne	.+2      	; 0x52e <__vector_9+0x82>
 52c:	46 c2       	rjmp	.+1164   	; 0x9ba <__stack+0xbb>
			{
				
			}
			else if(event_cnt==4)
 52e:	84 30       	cpi	r24, 0x04	; 4
 530:	91 05       	cpc	r25, r1
 532:	69 f4       	brne	.+26     	; 0x54e <__vector_9+0xa2>
			{	
			ADCL_=ADCL;
 534:	90 91 78 00 	lds	r25, 0x0078
 538:	90 93 94 01 	sts	0x0194, r25
			ADCH_=ADCH;
 53c:	80 91 79 00 	lds	r24, 0x0079
 540:	80 93 96 01 	sts	0x0196, r24
			UDR0=ADCL_;	
 544:	90 93 c6 00 	sts	0x00C6, r25
			prepareSetDAC(0,chan);	
 548:	80 e0       	ldi	r24, 0x00	; 0
 54a:	90 e0       	ldi	r25, 0x00	; 0
 54c:	ff c0       	rjmp	.+510    	; 0x74c <__vector_9+0x2a0>
			setDAC();					
			}			
			else if(event_cnt==5)
 54e:	05 97       	sbiw	r24, 0x05	; 5
 550:	09 f0       	breq	.+2      	; 0x554 <__vector_9+0xa8>
 552:	33 c2       	rjmp	.+1126   	; 0x9ba <__stack+0xbb>
			{	
			UDR0=ADCH_;	
 554:	80 91 96 01 	lds	r24, 0x0196
 558:	80 93 c6 00 	sts	0x00C6, r24
 55c:	2c c2       	rjmp	.+1112   	; 0x9b6 <__stack+0xb7>
			mode_active = 0;
			}	

		}
		else if(MD == MODE_SET) {
 55e:	87 30       	cpi	r24, 0x07	; 7
 560:	31 f5       	brne	.+76     	; 0x5ae <__vector_9+0x102>
			T=7;			
 562:	80 93 93 01 	sts	0x0193, r24

			if(event_cnt==0)//dT
 566:	80 91 8b 01 	lds	r24, 0x018B
 56a:	90 91 8c 01 	lds	r25, 0x018C
 56e:	00 97       	sbiw	r24, 0x00	; 0
 570:	91 f4       	brne	.+36     	; 0x596 <__vector_9+0xea>
			{		
				UDR0=255;
 572:	8f ef       	ldi	r24, 0xFF	; 255
 574:	80 93 c6 00 	sts	0x00C6, r24
				inp16 = inp8;
				inp16 = inp16<<4;
 578:	80 91 92 01 	lds	r24, 0x0192
 57c:	99 27       	eor	r25, r25
 57e:	87 fd       	sbrc	r24, 7
 580:	90 95       	com	r25
 582:	a4 e0       	ldi	r26, 0x04	; 4
 584:	88 0f       	add	r24, r24
 586:	99 1f       	adc	r25, r25
 588:	aa 95       	dec	r26
 58a:	e1 f7       	brne	.-8      	; 0x584 <__vector_9+0xd8>
 58c:	90 93 38 01 	sts	0x0138, r25
 590:	80 93 37 01 	sts	0x0137, r24
 594:	84 c0       	rjmp	.+264    	; 0x69e <__vector_9+0x1f2>
				prepareSetDAC(inp16,chan);
				setDAC();				

				ADCSRA |= (1 << ADSC); 
			}
			else if(event_cnt == 1)
 596:	81 30       	cpi	r24, 0x01	; 1
 598:	91 05       	cpc	r25, r1
 59a:	09 f4       	brne	.+2      	; 0x59e <__vector_9+0xf2>
 59c:	8f c0       	rjmp	.+286    	; 0x6bc <__vector_9+0x210>
			{
				UDR0 =DUMMY_BYTE;
			}	
			else
			if(event_cnt==2)//ADC GET 
 59e:	82 30       	cpi	r24, 0x02	; 2
 5a0:	91 05       	cpc	r25, r1
 5a2:	09 f4       	brne	.+2      	; 0x5a6 <__vector_9+0xfa>
 5a4:	ee c1       	rjmp	.+988    	; 0x982 <__stack+0x83>
				ADCL_=ADCL;	
				ADCH_=ADCH;
				UDR0=ADCL_;   //2				
			}	
			else
			if(event_cnt==3)
 5a6:	83 30       	cpi	r24, 0x03	; 3
 5a8:	91 05       	cpc	r25, r1
 5aa:	b9 f4       	brne	.+46     	; 0x5da <__vector_9+0x12e>
 5ac:	29 c0       	rjmp	.+82     	; 0x600 <__vector_9+0x154>
				UDR0 =DUMMY_BYTE;
				mode_active = 0;
			}
		}
		// VAC mode
		else if(MD==VAC)
 5ae:	81 30       	cpi	r24, 0x01	; 1
 5b0:	09 f0       	breq	.+2      	; 0x5b4 <__vector_9+0x108>
 5b2:	62 c0       	rjmp	.+196    	; 0x678 <__vector_9+0x1cc>
		{							
			
			switch(event_cnt)
 5b4:	80 91 8b 01 	lds	r24, 0x018B
 5b8:	90 91 8c 01 	lds	r25, 0x018C
 5bc:	82 30       	cpi	r24, 0x02	; 2
 5be:	91 05       	cpc	r25, r1
 5c0:	f9 f0       	breq	.+62     	; 0x600 <__vector_9+0x154>
 5c2:	83 30       	cpi	r24, 0x03	; 3
 5c4:	91 05       	cpc	r25, r1
 5c6:	34 f4       	brge	.+12     	; 0x5d4 <__vector_9+0x128>
 5c8:	00 97       	sbiw	r24, 0x00	; 0
 5ca:	59 f0       	breq	.+22     	; 0x5e2 <__vector_9+0x136>
 5cc:	01 97       	sbiw	r24, 0x01	; 1
 5ce:	09 f0       	breq	.+2      	; 0x5d2 <__vector_9+0x126>
 5d0:	f4 c1       	rjmp	.+1000   	; 0x9ba <__stack+0xbb>
 5d2:	0d c0       	rjmp	.+26     	; 0x5ee <__vector_9+0x142>
 5d4:	83 30       	cpi	r24, 0x03	; 3
 5d6:	91 05       	cpc	r25, r1
 5d8:	b1 f0       	breq	.+44     	; 0x606 <__vector_9+0x15a>
 5da:	04 97       	sbiw	r24, 0x04	; 4
 5dc:	09 f0       	breq	.+2      	; 0x5e0 <__vector_9+0x134>
 5de:	ed c1       	rjmp	.+986    	; 0x9ba <__stack+0xbb>
 5e0:	e8 c1       	rjmp	.+976    	; 0x9b2 <__stack+0xb3>
			{
				case 0:					
				 ADCSRA |= (1 << ADSC); 
 5e2:	80 91 7a 00 	lds	r24, 0x007A
 5e6:	80 64       	ori	r24, 0x40	; 64
 5e8:	80 93 7a 00 	sts	0x007A, r24
 5ec:	4d c1       	rjmp	.+666    	; 0x888 <__vector_9+0x3dc>
				UDR0=255;
				
				break;
				
				case 1:	
				ADCL__=	ADCL_;
 5ee:	80 91 94 01 	lds	r24, 0x0194
 5f2:	80 93 8f 01 	sts	0x018F, r24
				ADCH__ = ADCH_;
 5f6:	80 91 96 01 	lds	r24, 0x0196
 5fa:	80 93 8d 01 	sts	0x018D, r24
 5fe:	c1 c1       	rjmp	.+898    	; 0x982 <__stack+0x83>
				
				UDR0=ADCL_;
				break;
				
				case 2:
				UDR0=ADCH_;				
 600:	80 91 96 01 	lds	r24, 0x0196
 604:	42 c1       	rjmp	.+644    	; 0x88a <__vector_9+0x3de>
				break;				
				
				case 3:								
										
					if(pos_phase)
 606:	80 91 2c 01 	lds	r24, 0x012C
 60a:	20 91 33 01 	lds	r18, 0x0133
 60e:	30 91 34 01 	lds	r19, 0x0134
 612:	88 23       	and	r24, r24
 614:	81 f0       	breq	.+32     	; 0x636 <__vector_9+0x18a>
					{
						voltage16+=32;
 616:	20 5e       	subi	r18, 0xE0	; 224
 618:	3f 4f       	sbci	r19, 0xFF	; 255
 61a:	30 93 34 01 	sts	0x0134, r19
 61e:	20 93 33 01 	sts	0x0133, r18
						if(voltage16>(ref16-1))
 622:	80 91 39 01 	lds	r24, 0x0139
 626:	90 91 3a 01 	lds	r25, 0x013A
 62a:	28 17       	cp	r18, r24
 62c:	39 07       	cpc	r19, r25
 62e:	bc f0       	brlt	.+46     	; 0x65e <__vector_9+0x1b2>
						{
						pos_phase=0;				
 630:	10 92 2c 01 	sts	0x012C, r1
 634:	14 c0       	rjmp	.+40     	; 0x65e <__vector_9+0x1b2>
						}
					}
					else
					{
						voltage16-=32;
 636:	c9 01       	movw	r24, r18
 638:	80 97       	sbiw	r24, 0x20	; 32
 63a:	90 93 34 01 	sts	0x0134, r25
 63e:	80 93 33 01 	sts	0x0133, r24
						if(voltage16<(-inp16+1))
 642:	21 e0       	ldi	r18, 0x01	; 1
 644:	30 e0       	ldi	r19, 0x00	; 0
 646:	40 91 37 01 	lds	r20, 0x0137
 64a:	50 91 38 01 	lds	r21, 0x0138
 64e:	24 1b       	sub	r18, r20
 650:	35 0b       	sbc	r19, r21
 652:	82 17       	cp	r24, r18
 654:	93 07       	cpc	r25, r19
 656:	1c f4       	brge	.+6      	; 0x65e <__vector_9+0x1b2>
						{
						pos_phase=1;									
 658:	81 e0       	ldi	r24, 0x01	; 1
 65a:	80 93 2c 01 	sts	0x012C, r24
						}
					}						
					
					UDR0=voltage16>>4;
 65e:	80 91 33 01 	lds	r24, 0x0133
 662:	90 91 34 01 	lds	r25, 0x0134
 666:	9c 01       	movw	r18, r24
 668:	f4 e0       	ldi	r31, 0x04	; 4
 66a:	35 95       	asr	r19
 66c:	27 95       	ror	r18
 66e:	fa 95       	dec	r31
 670:	e1 f7       	brne	.-8      	; 0x66a <__vector_9+0x1be>
 672:	20 93 c6 00 	sts	0x00C6, r18
 676:	6a c0       	rjmp	.+212    	; 0x74c <__vector_9+0x2a0>
				case 4:
					UDR0=DUMMY_BYTE;
					mode_active = 0;					
			}
		}
		else if(MD==PROGRAM)
 678:	82 30       	cpi	r24, 0x02	; 2
 67a:	09 f0       	breq	.+2      	; 0x67e <__vector_9+0x1d2>
 67c:	c9 c0       	rjmp	.+402    	; 0x810 <__vector_9+0x364>
		{
			T=16;
 67e:	80 e1       	ldi	r24, 0x10	; 16
 680:	80 93 93 01 	sts	0x0193, r24
			static uint16_t adc_h;			

			if(event_cnt==0)//dT
 684:	80 91 8b 01 	lds	r24, 0x018B
 688:	90 91 8c 01 	lds	r25, 0x018C
 68c:	00 97       	sbiw	r24, 0x00	; 0
 68e:	99 f4       	brne	.+38     	; 0x6b6 <__vector_9+0x20a>
			{		
				UDR0=255;
 690:	8f ef       	ldi	r24, 0xFF	; 255
 692:	80 93 c6 00 	sts	0x00C6, r24
			
				prepareSetDAC(ref16,chan);
 696:	80 91 39 01 	lds	r24, 0x0139
 69a:	90 91 3a 01 	lds	r25, 0x013A
 69e:	60 91 42 01 	lds	r22, 0x0142
 6a2:	0e 94 a6 01 	call	0x34c	; 0x34c <prepareSetDAC>
  while(!(SPSR & (1<<SPIF)));
}


void setDAC(){
	PORTD&=~(1<<LDAC);
 6a6:	5a 98       	cbi	0x0b, 2	; 11
	PORTD|=(1<<LDAC);	
 6a8:	5a 9a       	sbi	0x0b, 2	; 11
			{		
				UDR0=255;
			
				prepareSetDAC(ref16,chan);
				setDAC();
				ADCSRA |= (1 << ADSC); 
 6aa:	80 91 7a 00 	lds	r24, 0x007A
 6ae:	80 64       	ori	r24, 0x40	; 64
 6b0:	80 93 7a 00 	sts	0x007A, r24
 6b4:	82 c1       	rjmp	.+772    	; 0x9ba <__stack+0xbb>
			}
			else if(event_cnt == 1)
 6b6:	81 30       	cpi	r24, 0x01	; 1
 6b8:	91 05       	cpc	r25, r1
 6ba:	19 f4       	brne	.+6      	; 0x6c2 <__vector_9+0x216>
			{
				UDR0=DUMMY_BYTE;
 6bc:	10 92 c6 00 	sts	0x00C6, r1
 6c0:	7c c1       	rjmp	.+760    	; 0x9ba <__stack+0xbb>
			}	
			else
			if(event_cnt==2)//ADC GET 
 6c2:	82 30       	cpi	r24, 0x02	; 2
 6c4:	91 05       	cpc	r25, r1
 6c6:	09 f4       	brne	.+2      	; 0x6ca <__vector_9+0x21e>
 6c8:	5c c1       	rjmp	.+696    	; 0x982 <__stack+0x83>
			}
			
			//ADC make CONTINUE
			//make decision
			else
			if(event_cnt==3)
 6ca:	83 30       	cpi	r24, 0x03	; 3
 6cc:	91 05       	cpc	r25, r1
 6ce:	09 f0       	breq	.+2      	; 0x6d2 <__vector_9+0x226>
 6d0:	40 c0       	rjmp	.+128    	; 0x752 <__vector_9+0x2a6>
			{	
				
				UDR0=ADCH_; //3
 6d2:	80 91 96 01 	lds	r24, 0x0196
 6d6:	80 93 c6 00 	sts	0x00C6, r24
				
				_adc=(ADCL_|(ADCH_ <<8));
 6da:	38 2f       	mov	r19, r24
 6dc:	20 e0       	ldi	r18, 0x00	; 0
 6de:	80 91 94 01 	lds	r24, 0x0194
 6e2:	90 e0       	ldi	r25, 0x00	; 0
 6e4:	82 2b       	or	r24, r18
 6e6:	93 2b       	or	r25, r19
 6e8:	90 93 99 01 	sts	0x0199, r25
 6ec:	80 93 98 01 	sts	0x0198, r24
				adc_h=((uint16_t)(512)-_adc);
 6f0:	40 e0       	ldi	r20, 0x00	; 0
 6f2:	52 e0       	ldi	r21, 0x02	; 2
 6f4:	48 1b       	sub	r20, r24
 6f6:	59 0b       	sbc	r21, r25
 6f8:	50 93 89 01 	sts	0x0189, r21
 6fc:	40 93 88 01 	sts	0x0188, r20
				
				//optimization
				//put some window val here maybe?
				//be  carefull with -
				if((adc_h)<(uint16_t)(t1 - 1))
 700:	80 91 29 01 	lds	r24, 0x0129
 704:	28 2f       	mov	r18, r24
 706:	30 e0       	ldi	r19, 0x00	; 0
 708:	c9 01       	movw	r24, r18
 70a:	01 97       	sbiw	r24, 0x01	; 1
 70c:	48 17       	cp	r20, r24
 70e:	59 07       	cpc	r21, r25
 710:	60 f4       	brcc	.+24     	; 0x72a <__vector_9+0x27e>
				{
					proging_val = -inp16;  // memristor set
 712:	80 91 37 01 	lds	r24, 0x0137
 716:	90 91 38 01 	lds	r25, 0x0138
 71a:	90 95       	com	r25
 71c:	81 95       	neg	r24
 71e:	9f 4f       	sbci	r25, 0xFF	; 255
 720:	90 93 36 01 	sts	0x0136, r25
 724:	80 93 35 01 	sts	0x0135, r24
 728:	48 c1       	rjmp	.+656    	; 0x9ba <__stack+0xbb>
				}
				else if((adc_h)<(uint16_t)(t1+1 + 1)) //done!
 72a:	2e 5f       	subi	r18, 0xFE	; 254
 72c:	3f 4f       	sbci	r19, 0xFF	; 255
 72e:	42 17       	cp	r20, r18
 730:	53 07       	cpc	r21, r19
 732:	08 f0       	brcs	.+2      	; 0x736 <__vector_9+0x28a>
 734:	42 c1       	rjmp	.+644    	; 0x9ba <__stack+0xbb>
				{
					PROGRAM_done=1;
 736:	81 e0       	ldi	r24, 0x01	; 1
 738:	80 93 41 01 	sts	0x0141, r24
					proging_val=0;
 73c:	10 92 36 01 	sts	0x0136, r1
 740:	10 92 35 01 	sts	0x0135, r1
					prepareSetDAC(ref16,chan);
 744:	80 91 39 01 	lds	r24, 0x0139
 748:	90 91 3a 01 	lds	r25, 0x013A
 74c:	60 91 42 01 	lds	r22, 0x0142
 750:	b6 c0       	rjmp	.+364    	; 0x8be <__vector_9+0x412>
					setDAC();
				}				
			}
			//DACset proging val
			else if(event_cnt==4)
 752:	84 30       	cpi	r24, 0x04	; 4
 754:	91 05       	cpc	r25, r1
 756:	09 f0       	breq	.+2      	; 0x75a <__vector_9+0x2ae>
 758:	3f c0       	rjmp	.+126    	; 0x7d8 <__vector_9+0x32c>
			{
				UDR0 = PROGRAM_done;		
 75a:	80 91 41 01 	lds	r24, 0x0141
 75e:	80 93 c6 00 	sts	0x00C6, r24
				if(PROGRAM_done)
 762:	88 23       	and	r24, r24
 764:	21 f0       	breq	.+8      	; 0x76e <__vector_9+0x2c2>
					proging_val=0;	
 766:	10 92 36 01 	sts	0x0136, r1
 76a:	10 92 35 01 	sts	0x0135, r1
				
				prepareSetDAC(proging_val,chan);
 76e:	80 91 35 01 	lds	r24, 0x0135
 772:	90 91 36 01 	lds	r25, 0x0136
 776:	60 91 42 01 	lds	r22, 0x0142
 77a:	0e 94 a6 01 	call	0x34c	; 0x34c <prepareSetDAC>
  while(!(SPSR & (1<<SPIF)));
}


void setDAC(){
	PORTD&=~(1<<LDAC);
 77e:	5a 98       	cbi	0x0b, 2	; 11
	PORTD|=(1<<LDAC);	
 780:	5a 9a       	sbi	0x0b, 2	; 11
					proging_val=0;	
				
				prepareSetDAC(proging_val,chan);
				setDAC();
							
				if(proging_val == -inp16)
 782:	20 91 35 01 	lds	r18, 0x0135
 786:	30 91 36 01 	lds	r19, 0x0136
 78a:	80 91 37 01 	lds	r24, 0x0137
 78e:	90 91 38 01 	lds	r25, 0x0138
 792:	44 27       	eor	r20, r20
 794:	55 27       	eor	r21, r21
 796:	48 1b       	sub	r20, r24
 798:	59 0b       	sbc	r21, r25
 79a:	24 17       	cp	r18, r20
 79c:	35 07       	cpc	r19, r21
 79e:	29 f4       	brne	.+10     	; 0x7aa <__vector_9+0x2fe>
				{
					proging_val=0;
 7a0:	10 92 36 01 	sts	0x0136, r1
 7a4:	10 92 35 01 	sts	0x0135, r1
 7a8:	08 c1       	rjmp	.+528    	; 0x9ba <__stack+0xbb>
				}					
				else
				if(proging_val>(t2<<4))
 7aa:	80 91 2a 01 	lds	r24, 0x012A
 7ae:	90 e0       	ldi	r25, 0x00	; 0
 7b0:	e4 e0       	ldi	r30, 0x04	; 4
 7b2:	88 0f       	add	r24, r24
 7b4:	99 1f       	adc	r25, r25
 7b6:	ea 95       	dec	r30
 7b8:	e1 f7       	brne	.-8      	; 0x7b2 <__vector_9+0x306>
 7ba:	82 17       	cp	r24, r18
 7bc:	93 07       	cpc	r25, r19
 7be:	2c f4       	brge	.+10     	; 0x7ca <__vector_9+0x31e>
				{
					proging_val= -inp16;
 7c0:	50 93 36 01 	sts	0x0136, r21
 7c4:	40 93 35 01 	sts	0x0135, r20
 7c8:	f8 c0       	rjmp	.+496    	; 0x9ba <__stack+0xbb>
				}	
				else
				{
					proging_val+=32;
 7ca:	20 5e       	subi	r18, 0xE0	; 224
 7cc:	3f 4f       	sbci	r19, 0xFF	; 255
 7ce:	30 93 36 01 	sts	0x0136, r19
 7d2:	20 93 35 01 	sts	0x0135, r18
 7d6:	f1 c0       	rjmp	.+482    	; 0x9ba <__stack+0xbb>
				
				// quick reset
				//prepareSetDAC(0,chan);
				//setDAC();
			}
			else if(event_cnt==5)//
 7d8:	05 97       	sbiw	r24, 0x05	; 5
 7da:	09 f0       	breq	.+2      	; 0x7de <__vector_9+0x332>
 7dc:	ee c0       	rjmp	.+476    	; 0x9ba <__stack+0xbb>
			{	
				UDR0 = PROGRAM_done;			
 7de:	80 91 41 01 	lds	r24, 0x0141
 7e2:	80 93 c6 00 	sts	0x00C6, r24
				prepareSetDAC(0,chan);
 7e6:	80 e0       	ldi	r24, 0x00	; 0
 7e8:	90 e0       	ldi	r25, 0x00	; 0
 7ea:	60 91 42 01 	lds	r22, 0x0142
 7ee:	0e 94 a6 01 	call	0x34c	; 0x34c <prepareSetDAC>
  while(!(SPSR & (1<<SPIF)));
}


void setDAC(){
	PORTD&=~(1<<LDAC);
 7f2:	5a 98       	cbi	0x0b, 2	; 11
	PORTD|=(1<<LDAC);	
 7f4:	5a 9a       	sbi	0x0b, 2	; 11
			{	
				UDR0 = PROGRAM_done;			
				prepareSetDAC(0,chan);
				setDAC();
				
				if(PROGRAM_done) {
 7f6:	80 91 41 01 	lds	r24, 0x0141
 7fa:	88 23       	and	r24, r24
 7fc:	11 f0       	breq	.+4      	; 0x802 <__vector_9+0x356>
					mode_active = 0;
 7fe:	10 92 43 01 	sts	0x0143, r1
				}
				
				event_cnt = -1;				
 802:	8f ef       	ldi	r24, 0xFF	; 255
 804:	9f ef       	ldi	r25, 0xFF	; 255
 806:	90 93 8c 01 	sts	0x018C, r25
 80a:	80 93 8b 01 	sts	0x018B, r24
 80e:	d5 c0       	rjmp	.+426    	; 0x9ba <__stack+0xbb>
			}
		} // MD PROGRAM
		
		// MD RESET
		else if(MD == RESET) {
 810:	88 30       	cpi	r24, 0x08	; 8
 812:	f1 f5       	brne	.+124    	; 0x890 <__vector_9+0x3e4>
			if(event_cnt==0)
 814:	80 91 8b 01 	lds	r24, 0x018B
 818:	90 91 8c 01 	lds	r25, 0x018C
 81c:	00 97       	sbiw	r24, 0x00	; 0
 81e:	09 f4       	brne	.+2      	; 0x822 <__vector_9+0x376>
 820:	5c c0       	rjmp	.+184    	; 0x8da <__vector_9+0x42e>
			{
				usualMult();
			}
			else if(event_cnt==1)
 822:	81 30       	cpi	r24, 0x01	; 1
 824:	91 05       	cpc	r25, r1
 826:	d1 f4       	brne	.+52     	; 0x85c <__vector_9+0x3b0>
			{
				prepareSetDAC(reset16,CHAN_1);
 828:	80 91 3b 01 	lds	r24, 0x013B
 82c:	90 91 3c 01 	lds	r25, 0x013C
 830:	60 e0       	ldi	r22, 0x00	; 0
 832:	0e 94 a6 01 	call	0x34c	; 0x34c <prepareSetDAC>
				prepareSetDAC(reset16,CHAN_2);
 836:	80 91 3b 01 	lds	r24, 0x013B
 83a:	90 91 3c 01 	lds	r25, 0x013C
 83e:	61 e0       	ldi	r22, 0x01	; 1
 840:	0e 94 a6 01 	call	0x34c	; 0x34c <prepareSetDAC>
				prepareSetDAC(reset16,CHAN_3);
 844:	80 91 3b 01 	lds	r24, 0x013B
 848:	90 91 3c 01 	lds	r25, 0x013C
 84c:	62 e0       	ldi	r22, 0x02	; 2
 84e:	0e 94 a6 01 	call	0x34c	; 0x34c <prepareSetDAC>
				prepareSetDAC(reset16,CHAN_4);				
 852:	80 91 3b 01 	lds	r24, 0x013B
 856:	90 91 3c 01 	lds	r25, 0x013C
 85a:	a7 c0       	rjmp	.+334    	; 0x9aa <__stack+0xab>
				setDAC();
			}		
			else if(event_cnt==2)
 85c:	82 30       	cpi	r24, 0x02	; 2
 85e:	91 05       	cpc	r25, r1
 860:	81 f4       	brne	.+32     	; 0x882 <__vector_9+0x3d6>
			{
				prepareSetDAC(0,CHAN_1);
 862:	80 e0       	ldi	r24, 0x00	; 0
 864:	90 e0       	ldi	r25, 0x00	; 0
 866:	60 e0       	ldi	r22, 0x00	; 0
 868:	0e 94 a6 01 	call	0x34c	; 0x34c <prepareSetDAC>
				prepareSetDAC(0,CHAN_2);
 86c:	80 e0       	ldi	r24, 0x00	; 0
 86e:	90 e0       	ldi	r25, 0x00	; 0
 870:	61 e0       	ldi	r22, 0x01	; 1
 872:	0e 94 a6 01 	call	0x34c	; 0x34c <prepareSetDAC>
				prepareSetDAC(0,CHAN_3);
 876:	80 e0       	ldi	r24, 0x00	; 0
 878:	90 e0       	ldi	r25, 0x00	; 0
 87a:	62 e0       	ldi	r22, 0x02	; 2
 87c:	0e 94 a6 01 	call	0x34c	; 0x34c <prepareSetDAC>
 880:	92 c0       	rjmp	.+292    	; 0x9a6 <__stack+0xa7>
				setDAC();
			}	
			
			//пнули		
			//посмотрим, что вышло
			else if(event_cnt==3)
 882:	83 30       	cpi	r24, 0x03	; 3
 884:	91 05       	cpc	r25, r1
 886:	61 f5       	brne	.+88     	; 0x8e0 <__vector_9+0x434>
			{
				UDR0=255;//1							
 888:	8f ef       	ldi	r24, 0xFF	; 255
 88a:	80 93 c6 00 	sts	0x00C6, r24
 88e:	95 c0       	rjmp	.+298    	; 0x9ba <__stack+0xbb>
				UDR0 = DUMMY_BYTE;
				mode_active = 0;
			}
			
		}
		else if(MD == ONE_SHOT) {		
 890:	85 30       	cpi	r24, 0x05	; 5
 892:	09 f0       	breq	.+2      	; 0x896 <__vector_9+0x3ea>
 894:	92 c0       	rjmp	.+292    	; 0x9ba <__stack+0xbb>
			if(event_cnt==0)
 896:	80 91 8b 01 	lds	r24, 0x018B
 89a:	90 91 8c 01 	lds	r25, 0x018C
 89e:	00 97       	sbiw	r24, 0x00	; 0
 8a0:	19 f4       	brne	.+6      	; 0x8a8 <__vector_9+0x3fc>
			{
				gatherMult();
 8a2:	0e 94 8a 00 	call	0x114	; 0x114 <gatherMult>
 8a6:	89 c0       	rjmp	.+274    	; 0x9ba <__stack+0xbb>
			}
			else if(event_cnt==1)
 8a8:	81 30       	cpi	r24, 0x01	; 1
 8aa:	91 05       	cpc	r25, r1
 8ac:	69 f4       	brne	.+26     	; 0x8c8 <__vector_9+0x41c>
			{
				prepareSetDAC(-inp16,CHAN_1);				
 8ae:	80 91 37 01 	lds	r24, 0x0137
 8b2:	90 91 38 01 	lds	r25, 0x0138
 8b6:	90 95       	com	r25
 8b8:	81 95       	neg	r24
 8ba:	9f 4f       	sbci	r25, 0xFF	; 255
 8bc:	60 e0       	ldi	r22, 0x00	; 0
 8be:	0e 94 a6 01 	call	0x34c	; 0x34c <prepareSetDAC>
  while(!(SPSR & (1<<SPIF)));
}


void setDAC(){
	PORTD&=~(1<<LDAC);
 8c2:	5a 98       	cbi	0x0b, 2	; 11
	PORTD|=(1<<LDAC);	
 8c4:	5a 9a       	sbi	0x0b, 2	; 11
 8c6:	79 c0       	rjmp	.+242    	; 0x9ba <__stack+0xbb>
			else if(event_cnt==1)
			{
				prepareSetDAC(-inp16,CHAN_1);				
				setDAC();
			}		
			else if(event_cnt==2)
 8c8:	82 30       	cpi	r24, 0x02	; 2
 8ca:	91 05       	cpc	r25, r1
 8cc:	e9 f0       	breq	.+58     	; 0x908 <__stack+0x9>
				setDAC();
			}	
			
			//пнули		
			//посмотрим, что вышло
			else if(event_cnt==3)
 8ce:	83 30       	cpi	r24, 0x03	; 3
 8d0:	91 05       	cpc	r25, r1
 8d2:	31 f4       	brne	.+12     	; 0x8e0 <__vector_9+0x434>
			{
				UDR0=255;//1
 8d4:	8f ef       	ldi	r24, 0xFF	; 255
 8d6:	80 93 c6 00 	sts	0x00C6, r24
				usualMult();				
 8da:	0e 94 de 00 	call	0x1bc	; 0x1bc <usualMult>
 8de:	6d c0       	rjmp	.+218    	; 0x9ba <__stack+0xbb>
			}			
			else if(event_cnt==4)
 8e0:	84 30       	cpi	r24, 0x04	; 4
 8e2:	91 05       	cpc	r25, r1
 8e4:	31 f4       	brne	.+12     	; 0x8f2 <__vector_9+0x446>
			{
				prepareSetDAC(ref16,CHAN_1);
 8e6:	80 91 39 01 	lds	r24, 0x0139
 8ea:	90 91 3a 01 	lds	r25, 0x013A
 8ee:	60 e0       	ldi	r22, 0x00	; 0
 8f0:	d8 ce       	rjmp	.-592    	; 0x6a2 <__vector_9+0x1f6>
				setDAC();				
				ADCSRA |= (1 << ADSC); 
			}	
			else if(event_cnt==5)
 8f2:	85 30       	cpi	r24, 0x05	; 5
 8f4:	91 05       	cpc	r25, r1
 8f6:	09 f4       	brne	.+2      	; 0x8fa <__vector_9+0x44e>
 8f8:	44 c0       	rjmp	.+136    	; 0x982 <__stack+0x83>
				//prepareSetDAC(ref16,3);
				ADCL_=ADCL;	
				ADCH_=ADCH;
				UDR0=ADCL_;//2
			}
			else if(event_cnt==6)
 8fa:	86 30       	cpi	r24, 0x06	; 6
 8fc:	91 05       	cpc	r25, r1
 8fe:	39 f4       	brne	.+14     	; 0x90e <__stack+0xf>
			{
				UDR0=ADCH_; //3 1st chan
 900:	80 91 96 01 	lds	r24, 0x0196
 904:	80 93 c6 00 	sts	0x00C6, r24
				
				prepareSetDAC(0,CHAN_1);
 908:	80 e0       	ldi	r24, 0x00	; 0
 90a:	90 e0       	ldi	r25, 0x00	; 0
 90c:	d7 cf       	rjmp	.-82     	; 0x8bc <__vector_9+0x410>
				setDAC();
			}		
			//1й просмотрен
			else if(event_cnt==7)
 90e:	87 30       	cpi	r24, 0x07	; 7
 910:	91 05       	cpc	r25, r1
 912:	31 f4       	brne	.+12     	; 0x920 <__stack+0x21>
			{				 
				prepareSetDAC(ref16,CHAN_2);
 914:	80 91 39 01 	lds	r24, 0x0139
 918:	90 91 3a 01 	lds	r25, 0x013A
 91c:	61 e0       	ldi	r22, 0x01	; 1
 91e:	c1 ce       	rjmp	.-638    	; 0x6a2 <__vector_9+0x1f6>
				setDAC();
				
				ADCSRA |= (1 << ADSC); 
			}
			else if(event_cnt==8)
 920:	88 30       	cpi	r24, 0x08	; 8
 922:	91 05       	cpc	r25, r1
 924:	71 f1       	breq	.+92     	; 0x982 <__stack+0x83>
			{		
				ADCL_=ADCL;	
				ADCH_=ADCH;
				UDR0=ADCL_; //4
			}
			else if(event_cnt == 9)
 926:	89 30       	cpi	r24, 0x09	; 9
 928:	91 05       	cpc	r25, r1
 92a:	41 f4       	brne	.+16     	; 0x93c <__stack+0x3d>
			{
				UDR0=ADCH_; // 5
 92c:	80 91 96 01 	lds	r24, 0x0196
 930:	80 93 c6 00 	sts	0x00C6, r24
				
				prepareSetDAC(0,CHAN_2);
 934:	80 e0       	ldi	r24, 0x00	; 0
 936:	90 e0       	ldi	r25, 0x00	; 0
 938:	61 e0       	ldi	r22, 0x01	; 1
 93a:	c1 cf       	rjmp	.-126    	; 0x8be <__vector_9+0x412>
				setDAC();
			}
			
			else if(event_cnt==10)
 93c:	8a 30       	cpi	r24, 0x0A	; 10
 93e:	91 05       	cpc	r25, r1
 940:	31 f4       	brne	.+12     	; 0x94e <__stack+0x4f>
			{				 
				prepareSetDAC(ref16,CHAN_3);
 942:	80 91 39 01 	lds	r24, 0x0139
 946:	90 91 3a 01 	lds	r25, 0x013A
 94a:	62 e0       	ldi	r22, 0x02	; 2
 94c:	aa ce       	rjmp	.-684    	; 0x6a2 <__vector_9+0x1f6>
				setDAC();
				
				ADCSRA |= (1 << ADSC); 
			}
			else if(event_cnt==11)
 94e:	8b 30       	cpi	r24, 0x0B	; 11
 950:	91 05       	cpc	r25, r1
 952:	b9 f0       	breq	.+46     	; 0x982 <__stack+0x83>
			{		
				ADCL_=ADCL;	
				ADCH_=ADCH;
				UDR0=ADCL_; //4
			}
			else if(event_cnt == 12)
 954:	8c 30       	cpi	r24, 0x0C	; 12
 956:	91 05       	cpc	r25, r1
 958:	41 f4       	brne	.+16     	; 0x96a <__stack+0x6b>
			{
				UDR0=ADCH_; // 5
 95a:	80 91 96 01 	lds	r24, 0x0196
 95e:	80 93 c6 00 	sts	0x00C6, r24
				
				prepareSetDAC(0,CHAN_3);
 962:	80 e0       	ldi	r24, 0x00	; 0
 964:	90 e0       	ldi	r25, 0x00	; 0
 966:	62 e0       	ldi	r22, 0x02	; 2
 968:	aa cf       	rjmp	.-172    	; 0x8be <__vector_9+0x412>
				setDAC();	
			}
			
			else if(event_cnt==13)
 96a:	8d 30       	cpi	r24, 0x0D	; 13
 96c:	91 05       	cpc	r25, r1
 96e:	31 f4       	brne	.+12     	; 0x97c <__stack+0x7d>
			{				 
				prepareSetDAC(ref16,CHAN_4);
 970:	80 91 39 01 	lds	r24, 0x0139
 974:	90 91 3a 01 	lds	r25, 0x013A
 978:	63 e0       	ldi	r22, 0x03	; 3
 97a:	93 ce       	rjmp	.-730    	; 0x6a2 <__vector_9+0x1f6>
				setDAC();
				
				ADCSRA |= (1 << ADSC); 
			}
			else if(event_cnt==14)
 97c:	8e 30       	cpi	r24, 0x0E	; 14
 97e:	91 05       	cpc	r25, r1
 980:	59 f4       	brne	.+22     	; 0x998 <__stack+0x99>
			{		
				ADCL_=ADCL;	
 982:	90 91 78 00 	lds	r25, 0x0078
 986:	90 93 94 01 	sts	0x0194, r25
				ADCH_=ADCH;
 98a:	80 91 79 00 	lds	r24, 0x0079
 98e:	80 93 96 01 	sts	0x0196, r24
				UDR0=ADCL_; //4
 992:	90 93 c6 00 	sts	0x00C6, r25
 996:	11 c0       	rjmp	.+34     	; 0x9ba <__stack+0xbb>
			}
			else if(event_cnt == 15)
 998:	8f 30       	cpi	r24, 0x0F	; 15
 99a:	91 05       	cpc	r25, r1
 99c:	41 f4       	brne	.+16     	; 0x9ae <__stack+0xaf>
			{
				UDR0=ADCH_; // 5
 99e:	80 91 96 01 	lds	r24, 0x0196
 9a2:	80 93 c6 00 	sts	0x00C6, r24
				
				prepareSetDAC(0,CHAN_4);
 9a6:	80 e0       	ldi	r24, 0x00	; 0
 9a8:	90 e0       	ldi	r25, 0x00	; 0
 9aa:	63 e0       	ldi	r22, 0x03	; 3
 9ac:	88 cf       	rjmp	.-240    	; 0x8be <__vector_9+0x412>
				setDAC();	
			}
			else if(event_cnt == 16) {				
 9ae:	40 97       	sbiw	r24, 0x10	; 16
 9b0:	21 f4       	brne	.+8      	; 0x9ba <__stack+0xbb>
				UDR0 = DUMMY_BYTE;
 9b2:	10 92 c6 00 	sts	0x00C6, r1
				mode_active = 0;
 9b6:	10 92 43 01 	sts	0x0143, r1
			}			
		}
		
		
		_ctr=0;  // mandatory
 9ba:	10 92 91 01 	sts	0x0191, r1
 9be:	10 92 90 01 	sts	0x0190, r1
		

		if(mode_active) event_cnt++; // mandatory
 9c2:	80 91 43 01 	lds	r24, 0x0143
 9c6:	88 23       	and	r24, r24
 9c8:	49 f0       	breq	.+18     	; 0x9dc <__stack+0xdd>
 9ca:	80 91 8b 01 	lds	r24, 0x018B
 9ce:	90 91 8c 01 	lds	r25, 0x018C
 9d2:	01 96       	adiw	r24, 0x01	; 1
 9d4:	90 93 8c 01 	sts	0x018C, r25
 9d8:	80 93 8b 01 	sts	0x018B, r24

	}
	_ctr++;
 9dc:	80 91 90 01 	lds	r24, 0x0190
 9e0:	90 91 91 01 	lds	r25, 0x0191
 9e4:	01 96       	adiw	r24, 0x01	; 1
 9e6:	90 93 91 01 	sts	0x0191, r25
 9ea:	80 93 90 01 	sts	0x0190, r24
}
 9ee:	ff 91       	pop	r31
 9f0:	ef 91       	pop	r30
 9f2:	bf 91       	pop	r27
 9f4:	af 91       	pop	r26
 9f6:	9f 91       	pop	r25
 9f8:	8f 91       	pop	r24
 9fa:	7f 91       	pop	r23
 9fc:	6f 91       	pop	r22
 9fe:	5f 91       	pop	r21
 a00:	4f 91       	pop	r20
 a02:	3f 91       	pop	r19
 a04:	2f 91       	pop	r18
 a06:	0f 90       	pop	r0
 a08:	0f be       	out	0x3f, r0	; 63
 a0a:	0f 90       	pop	r0
 a0c:	1f 90       	pop	r1
 a0e:	18 95       	reti

00000a10 <__vector_18>:

uint8_t rec;
//прием команд от компьютера по UART в зависимости от режима
ISR(USART_RX_vect)
{
 a10:	1f 92       	push	r1
 a12:	0f 92       	push	r0
 a14:	0f b6       	in	r0, 0x3f	; 63
 a16:	0f 92       	push	r0
 a18:	11 24       	eor	r1, r1
 a1a:	2f 93       	push	r18
 a1c:	3f 93       	push	r19
 a1e:	4f 93       	push	r20
 a20:	5f 93       	push	r21
 a22:	6f 93       	push	r22
 a24:	7f 93       	push	r23
 a26:	8f 93       	push	r24
 a28:	9f 93       	push	r25
 a2a:	af 93       	push	r26
 a2c:	bf 93       	push	r27
 a2e:	ef 93       	push	r30
 a30:	ff 93       	push	r31
	rec = UDR0;
 a32:	20 91 c6 00 	lds	r18, 0x00C6
 a36:	20 93 9f 01 	sts	0x019F, r18
	switch(rec_ind)
 a3a:	80 91 40 01 	lds	r24, 0x0140
 a3e:	84 30       	cpi	r24, 0x04	; 4
 a40:	09 f4       	brne	.+2      	; 0xa44 <__vector_18+0x34>
 a42:	71 c0       	rjmp	.+226    	; 0xb26 <__vector_18+0x116>
 a44:	85 30       	cpi	r24, 0x05	; 5
 a46:	58 f4       	brcc	.+22     	; 0xa5e <__vector_18+0x4e>
 a48:	81 30       	cpi	r24, 0x01	; 1
 a4a:	41 f1       	breq	.+80     	; 0xa9c <__vector_18+0x8c>
 a4c:	81 30       	cpi	r24, 0x01	; 1
 a4e:	d0 f0       	brcs	.+52     	; 0xa84 <__vector_18+0x74>
 a50:	82 30       	cpi	r24, 0x02	; 2
 a52:	09 f4       	brne	.+2      	; 0xa56 <__vector_18+0x46>
 a54:	4a c0       	rjmp	.+148    	; 0xaea <__vector_18+0xda>
 a56:	83 30       	cpi	r24, 0x03	; 3
 a58:	09 f0       	breq	.+2      	; 0xa5c <__vector_18+0x4c>
 a5a:	9c c0       	rjmp	.+312    	; 0xb94 <__vector_18+0x184>
 a5c:	58 c0       	rjmp	.+176    	; 0xb0e <__vector_18+0xfe>
 a5e:	87 30       	cpi	r24, 0x07	; 7
 a60:	09 f4       	brne	.+2      	; 0xa64 <__vector_18+0x54>
 a62:	7a c0       	rjmp	.+244    	; 0xb58 <__vector_18+0x148>
 a64:	88 30       	cpi	r24, 0x08	; 8
 a66:	38 f4       	brcc	.+14     	; 0xa76 <__vector_18+0x66>
 a68:	85 30       	cpi	r24, 0x05	; 5
 a6a:	09 f4       	brne	.+2      	; 0xa6e <__vector_18+0x5e>
 a6c:	6f c0       	rjmp	.+222    	; 0xb4c <__vector_18+0x13c>
 a6e:	86 30       	cpi	r24, 0x06	; 6
 a70:	09 f0       	breq	.+2      	; 0xa74 <__vector_18+0x64>
 a72:	90 c0       	rjmp	.+288    	; 0xb94 <__vector_18+0x184>
 a74:	6e c0       	rjmp	.+220    	; 0xb52 <__vector_18+0x142>
 a76:	88 30       	cpi	r24, 0x08	; 8
 a78:	09 f4       	brne	.+2      	; 0xa7c <__vector_18+0x6c>
 a7a:	71 c0       	rjmp	.+226    	; 0xb5e <__vector_18+0x14e>
 a7c:	89 30       	cpi	r24, 0x09	; 9
 a7e:	09 f0       	breq	.+2      	; 0xa82 <__vector_18+0x72>
 a80:	89 c0       	rjmp	.+274    	; 0xb94 <__vector_18+0x184>
 a82:	70 c0       	rjmp	.+224    	; 0xb64 <__vector_18+0x154>
	{
		case 0:
		if(rec!=255)//байт 255 является синхронизирующим
 a84:	2f 3f       	cpi	r18, 0xFF	; 255
 a86:	31 f0       	breq	.+12     	; 0xa94 <__vector_18+0x84>
		{
			sync=0;
 a88:	10 92 3d 01 	sts	0x013D, r1
			rec_ind--;
			rec_ind%=7;
 a8c:	83 e0       	ldi	r24, 0x03	; 3
 a8e:	80 93 40 01 	sts	0x0140, r24
 a92:	80 c0       	rjmp	.+256    	; 0xb94 <__vector_18+0x184>
		}
		else
			sync=1;
 a94:	81 e0       	ldi	r24, 0x01	; 1
 a96:	80 93 3d 01 	sts	0x013D, r24
 a9a:	7c c0       	rjmp	.+248    	; 0xb94 <__vector_18+0x184>
		break;
		
		
		case 1: //MD
		if((rec == VAC)&&(MD != VAC)) {
 a9c:	21 30       	cpi	r18, 0x01	; 1
 a9e:	51 f4       	brne	.+20     	; 0xab4 <__vector_18+0xa4>
 aa0:	80 91 32 01 	lds	r24, 0x0132
 aa4:	81 30       	cpi	r24, 0x01	; 1
 aa6:	31 f0       	breq	.+12     	; 0xab4 <__vector_18+0xa4>
			voltage16 = 0;
 aa8:	10 92 34 01 	sts	0x0134, r1
 aac:	10 92 33 01 	sts	0x0133, r1
			pos_phase = 0;
 ab0:	10 92 2c 01 	sts	0x012C, r1
		}
		MD=rec;
 ab4:	20 93 32 01 	sts	0x0132, r18
		if(MD==VAC)
 ab8:	21 30       	cpi	r18, 0x01	; 1
 aba:	39 f4       	brne	.+14     	; 0xaca <__vector_18+0xba>
			time_step=4;//5
 abc:	84 e0       	ldi	r24, 0x04	; 4
 abe:	90 e0       	ldi	r25, 0x00	; 0
 ac0:	90 93 2e 01 	sts	0x012E, r25
 ac4:	80 93 2d 01 	sts	0x012D, r24
 ac8:	65 c0       	rjmp	.+202    	; 0xb94 <__vector_18+0x184>
		else
			time_step=6;//4		
 aca:	86 e0       	ldi	r24, 0x06	; 6
 acc:	90 e0       	ldi	r25, 0x00	; 0
 ace:	90 93 2e 01 	sts	0x012E, r25
 ad2:	80 93 2d 01 	sts	0x012D, r24
		if(MD==PROGRAM)
 ad6:	22 30       	cpi	r18, 0x02	; 2
 ad8:	09 f0       	breq	.+2      	; 0xadc <__vector_18+0xcc>
 ada:	5c c0       	rjmp	.+184    	; 0xb94 <__vector_18+0x184>
		{
			//PROGRAM_start=1;
			PROGRAM_done=0;
 adc:	10 92 41 01 	sts	0x0141, r1
			proging_val=0;
 ae0:	10 92 36 01 	sts	0x0136, r1
 ae4:	10 92 35 01 	sts	0x0135, r1
 ae8:	55 c0       	rjmp	.+170    	; 0xb94 <__vector_18+0x184>
		}
		break;
		
		
		case 2:	
		inp8 = rec;		
 aea:	20 93 92 01 	sts	0x0192, r18
		inp16_simple = (uint8_t)inp8;
 aee:	82 2f       	mov	r24, r18
 af0:	90 e0       	ldi	r25, 0x00	; 0
 af2:	90 93 9b 01 	sts	0x019B, r25
 af6:	80 93 9a 01 	sts	0x019A, r24
		inp16 = inp16_simple<<4;
 afa:	34 e0       	ldi	r19, 0x04	; 4
 afc:	88 0f       	add	r24, r24
 afe:	99 1f       	adc	r25, r25
 b00:	3a 95       	dec	r19
 b02:	e1 f7       	brne	.-8      	; 0xafc <__vector_18+0xec>
 b04:	90 93 38 01 	sts	0x0138, r25
 b08:	80 93 37 01 	sts	0x0137, r24
 b0c:	43 c0       	rjmp	.+134    	; 0xb94 <__vector_18+0x184>
		break;
		case 3:	
		ref16=rec<<4;
 b0e:	82 2f       	mov	r24, r18
 b10:	90 e0       	ldi	r25, 0x00	; 0
 b12:	24 e0       	ldi	r18, 0x04	; 4
 b14:	88 0f       	add	r24, r24
 b16:	99 1f       	adc	r25, r25
 b18:	2a 95       	dec	r18
 b1a:	e1 f7       	brne	.-8      	; 0xb14 <__vector_18+0x104>
 b1c:	90 93 3a 01 	sts	0x013A, r25
 b20:	80 93 39 01 	sts	0x0139, r24
 b24:	37 c0       	rjmp	.+110    	; 0xb94 <__vector_18+0x184>
		break;
		case 4:
		if(MD==PROGRAM)
 b26:	80 91 32 01 	lds	r24, 0x0132
 b2a:	82 30       	cpi	r24, 0x02	; 2
 b2c:	19 f4       	brne	.+6      	; 0xb34 <__vector_18+0x124>
			t1=rec;
 b2e:	20 93 29 01 	sts	0x0129, r18
 b32:	30 c0       	rjmp	.+96     	; 0xb94 <__vector_18+0x184>
		else
			reset16=rec<<4;
 b34:	82 2f       	mov	r24, r18
 b36:	90 e0       	ldi	r25, 0x00	; 0
 b38:	b4 e0       	ldi	r27, 0x04	; 4
 b3a:	88 0f       	add	r24, r24
 b3c:	99 1f       	adc	r25, r25
 b3e:	ba 95       	dec	r27
 b40:	e1 f7       	brne	.-8      	; 0xb3a <__vector_18+0x12a>
 b42:	90 93 3c 01 	sts	0x013C, r25
 b46:	80 93 3b 01 	sts	0x013B, r24
 b4a:	24 c0       	rjmp	.+72     	; 0xb94 <__vector_18+0x184>
		break;		
		case 5:
		
		t2=rec;
 b4c:	20 93 2a 01 	sts	0x012A, r18
 b50:	21 c0       	rjmp	.+66     	; 0xb94 <__vector_18+0x184>
	
		
		break;	
		case 6:
		dT=rec;
 b52:	20 93 8e 01 	sts	0x018E, r18
 b56:	1e c0       	rjmp	.+60     	; 0xb94 <__vector_18+0x184>
		break;
		case 7:
		T=rec;
 b58:	20 93 93 01 	sts	0x0193, r18
 b5c:	1b c0       	rjmp	.+54     	; 0xb94 <__vector_18+0x184>
		break;
		case 8:
		chan=rec;
 b5e:	20 93 42 01 	sts	0x0142, r18
 b62:	18 c0       	rjmp	.+48     	; 0xb94 <__vector_18+0x184>
		break;
		
		case 9:
			reverted[chan]=rec;				
 b64:	e0 91 42 01 	lds	r30, 0x0142
 b68:	f0 e0       	ldi	r31, 0x00	; 0
 b6a:	e8 5b       	subi	r30, 0xB8	; 184
 b6c:	fe 4f       	sbci	r31, 0xFE	; 254
 b6e:	20 83       	st	Z, r18
			
			if(MD==GATHER_MULT)
 b70:	80 91 32 01 	lds	r24, 0x0132
 b74:	83 30       	cpi	r24, 0x03	; 3
 b76:	19 f4       	brne	.+6      	; 0xb7e <__vector_18+0x16e>
			{
			//	PORTD=0b00100000;
			//static int ff=1<<5;
			//if(inp16>>4)
			gatherMult();
 b78:	0e 94 8a 00 	call	0x114	; 0x114 <gatherMult>
 b7c:	04 c0       	rjmp	.+8      	; 0xb86 <__vector_18+0x176>
			//PORTD=(1<<5)^PORTD;
			//PORTD=ff;
			}
			else if(MD==SEPAR_MULT)	
 b7e:	84 30       	cpi	r24, 0x04	; 4
 b80:	11 f4       	brne	.+4      	; 0xb86 <__vector_18+0x176>
			{
			usualMult();	
 b82:	0e 94 de 00 	call	0x1bc	; 0x1bc <usualMult>
			if(MD == ONE_SHOT)
			{
				
			}
			
			event_cnt = 0;
 b86:	10 92 8c 01 	sts	0x018C, r1
 b8a:	10 92 8b 01 	sts	0x018B, r1
			mode_active = 1;
 b8e:	81 e0       	ldi	r24, 0x01	; 1
 b90:	80 93 43 01 	sts	0x0143, r24
		break;
	}
	

	
	dTt2=dT+t2;
 b94:	80 91 2a 01 	lds	r24, 0x012A
 b98:	90 91 8e 01 	lds	r25, 0x018E
 b9c:	89 0f       	add	r24, r25
 b9e:	80 93 2b 01 	sts	0x012B, r24
	//UDR0=inp16/16;
	rec_ind++;
	rec_ind%=10;
 ba2:	80 91 40 01 	lds	r24, 0x0140
 ba6:	8f 5f       	subi	r24, 0xFF	; 255
 ba8:	6a e0       	ldi	r22, 0x0A	; 10
 baa:	0e 94 ea 05 	call	0xbd4	; 0xbd4 <__udivmodqi4>
 bae:	90 93 40 01 	sts	0x0140, r25
 bb2:	ff 91       	pop	r31
 bb4:	ef 91       	pop	r30
 bb6:	bf 91       	pop	r27
 bb8:	af 91       	pop	r26
 bba:	9f 91       	pop	r25
 bbc:	8f 91       	pop	r24
 bbe:	7f 91       	pop	r23
 bc0:	6f 91       	pop	r22
 bc2:	5f 91       	pop	r21
 bc4:	4f 91       	pop	r20
 bc6:	3f 91       	pop	r19
 bc8:	2f 91       	pop	r18
 bca:	0f 90       	pop	r0
 bcc:	0f be       	out	0x3f, r0	; 63
 bce:	0f 90       	pop	r0
 bd0:	1f 90       	pop	r1
 bd2:	18 95       	reti

00000bd4 <__udivmodqi4>:
 bd4:	99 1b       	sub	r25, r25
 bd6:	79 e0       	ldi	r23, 0x09	; 9
 bd8:	04 c0       	rjmp	.+8      	; 0xbe2 <__udivmodqi4_ep>

00000bda <__udivmodqi4_loop>:
 bda:	99 1f       	adc	r25, r25
 bdc:	96 17       	cp	r25, r22
 bde:	08 f0       	brcs	.+2      	; 0xbe2 <__udivmodqi4_ep>
 be0:	96 1b       	sub	r25, r22

00000be2 <__udivmodqi4_ep>:
 be2:	88 1f       	adc	r24, r24
 be4:	7a 95       	dec	r23
 be6:	c9 f7       	brne	.-14     	; 0xbda <__udivmodqi4_loop>
 be8:	80 95       	com	r24
 bea:	08 95       	ret

00000bec <__divmodqi4>:
 bec:	87 fb       	bst	r24, 7
 bee:	08 2e       	mov	r0, r24
 bf0:	06 26       	eor	r0, r22
 bf2:	87 fd       	sbrc	r24, 7
 bf4:	81 95       	neg	r24
 bf6:	67 fd       	sbrc	r22, 7
 bf8:	61 95       	neg	r22
 bfa:	ec df       	rcall	.-40     	; 0xbd4 <__udivmodqi4>
 bfc:	0e f4       	brtc	.+2      	; 0xc00 <__divmodqi4_1>
 bfe:	91 95       	neg	r25

00000c00 <__divmodqi4_1>:
 c00:	07 fc       	sbrc	r0, 7
 c02:	81 95       	neg	r24

00000c04 <__divmodqi4_exit>:
 c04:	08 95       	ret

00000c06 <_exit>:
 c06:	f8 94       	cli

00000c08 <__stop_program>:
 c08:	ff cf       	rjmp	.-2      	; 0xc08 <__stop_program>
