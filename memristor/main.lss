
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000012  00800100  00000b2e  00000bc2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000b2e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000003f  00800112  00800112  00000bd4  2**0
                  ALLOC
  3 .debug_aranges 00000020  00000000  00000000  00000bd4  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 000002e4  00000000  00000000  00000bf4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000007a6  00000000  00000000  00000ed8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000001ee  00000000  00000000  0000167e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000a92  00000000  00000000  0000186c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000f0  00000000  00000000  00002300  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000028f  00000000  00000000  000023f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000010c  00000000  00000000  0000267f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 25 01 	jmp	0x24a	; 0x24a <__vector_9>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 95 04 	jmp	0x92a	; 0x92a <__vector_18>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ee e2       	ldi	r30, 0x2E	; 46
  7c:	fb e0       	ldi	r31, 0x0B	; 11
  7e:	02 c0       	rjmp	.+4      	; 0x84 <.do_copy_data_start>

00000080 <.do_copy_data_loop>:
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0

00000084 <.do_copy_data_start>:
  84:	a2 31       	cpi	r26, 0x12	; 18
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <.do_copy_data_loop>

0000008a <__do_clear_bss>:
  8a:	11 e0       	ldi	r17, 0x01	; 1
  8c:	a2 e1       	ldi	r26, 0x12	; 18
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a1 35       	cpi	r26, 0x51	; 81
  96:	b1 07       	cpc	r27, r17
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 cc 00 	call	0x198	; 0x198 <main>
  9e:	0c 94 95 05 	jmp	0xb2a	; 0xb2a <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <ADC_Init>:
uint8_t accum_cnt;

//функция инициализаци АЦП
//АЦП используется для регистрации тока, проходящего через мемристор
void ADC_Init(){
 ADCSRA |= (1 << ADEN) // Включаем АЦП
  a6:	ea e7       	ldi	r30, 0x7A	; 122
  a8:	f0 e0       	ldi	r31, 0x00	; 0
  aa:	80 81       	ld	r24, Z
  ac:	83 68       	ori	r24, 0x83	; 131
  ae:	80 83       	st	Z, r24
 //ADCSRA&=~(1 << ADPS1)|(1 << ADPS0)|(1 << ADPS1);
 |(1 << ADPS1)|(1 << ADPS0)|(1 << ADPS1);    // устанавливаем предделитель преобразователя на 8
 ADMUX |= (0 << REFS1)|(1 << REFS0) //выставляем опорное напряжение, как внешний ИОН
  b0:	ec e7       	ldi	r30, 0x7C	; 124
  b2:	f0 e0       	ldi	r31, 0x00	; 0
  b4:	80 81       	ld	r24, Z
  b6:	80 64       	ori	r24, 0x40	; 64
  b8:	80 83       	st	Z, r24
 |(0 << MUX0)|(0 << MUX1)|(0 << MUX2)|(0 << MUX3); // снимать сигнал будем с  входа PC0 
}
  ba:	08 95       	ret

000000bc <timer_init>:

//функция инициализации таймера
// Таймер используется для формирования временной последовательности значений, формируемых с ЦАПа
void timer_init()
{
    TCCR2A = 0;        
  bc:	10 92 b0 00 	sts	0x00B0, r1
    TCCR2B = 0;
  c0:	e1 eb       	ldi	r30, 0xB1	; 177
  c2:	f0 e0       	ldi	r31, 0x00	; 0
  c4:	10 82       	st	Z, r1
    
    TCCR2B |= (1<<CS21) ;    
  c6:	80 81       	ld	r24, Z
  c8:	82 60       	ori	r24, 0x02	; 2
  ca:	80 83       	st	Z, r24
    TIMSK2 = (1 << TOIE2);
  cc:	81 e0       	ldi	r24, 0x01	; 1
  ce:	80 93 70 00 	sts	0x0070, r24
}
  d2:	08 95       	ret

000000d4 <uart_init>:

//функция инициализации UART-интерфейса
void uart_init(unsigned int ubrr)
{	
	UBRR0H = (unsigned char)(ubrr>>8);
  d4:	90 93 c5 00 	sts	0x00C5, r25
	UBRR0L = (unsigned char)ubrr;
  d8:	80 93 c4 00 	sts	0x00C4, r24
	UCSR0B = (1<<RXCIE0)|(1<<RXEN0)|(1<<TXEN0);
  dc:	88 e9       	ldi	r24, 0x98	; 152
  de:	80 93 c1 00 	sts	0x00C1, r24
	UCSR0C = (1<<USBS0)|(3<<UCSZ00);
  e2:	8e e0       	ldi	r24, 0x0E	; 14
  e4:	80 93 c2 00 	sts	0x00C2, r24
}
  e8:	08 95       	ret

000000ea <SPI_MasterInit>:

//функция инициализации SPI
void SPI_MasterInit()
{
	DDR_SPI = (1<<DD_MOSI)|(1<<DD_SCK)|(1<<SPI_SS);
  ea:	8c e2       	ldi	r24, 0x2C	; 44
  ec:	84 b9       	out	0x04, r24	; 4
	SPCR = (1<<SPE)|(0<<DORD)|(1<<MSTR)|(1<<CPOL)|(0<<CPHA);//|(1<<SPR1)|(0<<SPR0);
  ee:	88 e5       	ldi	r24, 0x58	; 88
  f0:	8c bd       	out	0x2c, r24	; 44
}
  f2:	08 95       	ret

000000f4 <gatherMult>:
}

			
void gatherMult()
{
	UNSET_BYTE(PORTD, 6);
  f4:	5e 98       	cbi	0x0b, 6	; 11
	UNSET_BYTE(PORTD, 7);				
  f6:	5f 98       	cbi	0x0b, 7	; 11
	UNSET_BYTE(PORTD, 5);
  f8:	5d 98       	cbi	0x0b, 5	; 11
	UNSET_BYTE(PORTC, 4);
  fa:	44 98       	cbi	0x08, 4	; 8
	
	
	SET_BYTE(PORTC, 1);				
  fc:	41 9a       	sbi	0x08, 1	; 8
	SET_BYTE(PORTB, 2);
  fe:	2a 9a       	sbi	0x05, 2	; 5
	SET_BYTE(PORTB, 1);
 100:	29 9a       	sbi	0x05, 1	; 5
	SET_BYTE(PORTB, 0);
 102:	28 9a       	sbi	0x05, 0	; 5
}
 104:	08 95       	ret

00000106 <separMult>:
void separMult()
{
	UNSET_BYTE(PORTB, 1);
 106:	29 98       	cbi	0x05, 1	; 5
	UNSET_BYTE(PORTB, 2);
 108:	2a 98       	cbi	0x05, 2	; 5
	UNSET_BYTE(PORTC, 1);
 10a:	41 98       	cbi	0x08, 1	; 8
	
	SET_BYTE(PORTC, 4);						
 10c:	44 9a       	sbi	0x08, 4	; 8
	SET_BYTE(PORTD, 6);
 10e:	5e 9a       	sbi	0x0b, 6	; 11
	SET_BYTE(PORTD, 7);
 110:	5f 9a       	sbi	0x0b, 7	; 11
	SET_BYTE(PORTB, 0);
 112:	28 9a       	sbi	0x05, 0	; 5
	SET_BYTE(PORTD, 5);
 114:	5d 9a       	sbi	0x0b, 5	; 11
}
 116:	08 95       	ret

00000118 <SPI_WriteByte>:



void SPI_WriteByte(uint8_t data)
{
   SPDR = data;
 118:	8e bd       	out	0x2e, r24	; 46
  while(!(SPSR & (1<<SPIF)));
 11a:	0d b4       	in	r0, 0x2d	; 45
 11c:	07 fe       	sbrs	r0, 7
 11e:	fd cf       	rjmp	.-6      	; 0x11a <SPI_WriteByte+0x2>
}
 120:	08 95       	ret

00000122 <prepareResetDAC>:

void prepareResetDAC(int8_t chan)//_____________bipolar!!! and <<4 larger
{
    // static int16_t x;
	//x+=2048;
	PORTD&=~(1<<SYNC);
 122:	5b 98       	cbi	0x0b, 3	; 11
	//send8 = (x >> 8);
	// send8 = 0b00001000;
	// send8|=(chan_addrs[chan]);
	SPI_WriteByte(0b00001000|chan_addrs[chan]);
 124:	e8 2f       	mov	r30, r24
 126:	ff 27       	eor	r31, r31
 128:	e7 fd       	sbrc	r30, 7
 12a:	f0 95       	com	r31
 12c:	ee 5f       	subi	r30, 0xFE	; 254
 12e:	fe 4f       	sbci	r31, 0xFE	; 254
 130:	80 81       	ld	r24, Z
 132:	88 60       	ori	r24, 0x08	; 8
 134:	90 e0       	ldi	r25, 0x00	; 0
 136:	0e 94 8c 00 	call	0x118	; 0x118 <SPI_WriteByte>
	// send8=x;
	SPI_WriteByte(0);		
 13a:	80 e0       	ldi	r24, 0x00	; 0
 13c:	90 e0       	ldi	r25, 0x00	; 0
 13e:	0e 94 8c 00 	call	0x118	; 0x118 <SPI_WriteByte>
	PORTD|=(1<<SYNC);
 142:	5b 9a       	sbi	0x0b, 3	; 11
}
 144:	08 95       	ret

00000146 <prepareSetDAC>:

//функция управления ЦАПом 
// при этом, управление регистром LDAC должно использоваться 
//вне функции в перспепктиве создания многоканальной схемы
void prepareSetDAC(int16_t x,int8_t chan)//_____________bipolar!!! and <<4 larger
{
 146:	0f 93       	push	r16
 148:	1f 93       	push	r17
 14a:	e6 2f       	mov	r30, r22


	x=-x;
 14c:	00 27       	eor	r16, r16
 14e:	11 27       	eor	r17, r17
 150:	08 1b       	sub	r16, r24
 152:	19 0b       	sbc	r17, r25
	x+=2048;
 154:	00 50       	subi	r16, 0x00	; 0
 156:	18 4f       	sbci	r17, 0xF8	; 248
	PORTD&=~(1<<SYNC);
 158:	5b 98       	cbi	0x0b, 3	; 11
	send8 = (x >> 8);
	send8 &= 0b00001111;
	send8|=(chan_addrs[chan]);
 15a:	81 2f       	mov	r24, r17
 15c:	99 27       	eor	r25, r25
 15e:	87 fd       	sbrc	r24, 7
 160:	9a 95       	dec	r25
 162:	8f 70       	andi	r24, 0x0F	; 15
 164:	ff 27       	eor	r31, r31
 166:	e7 fd       	sbrc	r30, 7
 168:	f0 95       	com	r31
 16a:	ee 5f       	subi	r30, 0xFE	; 254
 16c:	fe 4f       	sbci	r31, 0xFE	; 254
 16e:	20 81       	ld	r18, Z
 170:	82 2b       	or	r24, r18
 172:	80 93 40 01 	sts	0x0140, r24
	SPI_WriteByte(send8);
 176:	90 e0       	ldi	r25, 0x00	; 0
 178:	0e 94 8c 00 	call	0x118	; 0x118 <SPI_WriteByte>
	send8=x;
 17c:	00 93 40 01 	sts	0x0140, r16
	SPI_WriteByte(send8);		
 180:	80 2f       	mov	r24, r16
 182:	90 e0       	ldi	r25, 0x00	; 0
 184:	0e 94 8c 00 	call	0x118	; 0x118 <SPI_WriteByte>
	PORTD|=(1<<SYNC);
 188:	5b 9a       	sbi	0x0b, 3	; 11

}
 18a:	1f 91       	pop	r17
 18c:	0f 91       	pop	r16
 18e:	08 95       	ret

00000190 <set_reverser>:
		else
			PORTB&=~(1<<4);
		break;

	}
}
 190:	08 95       	ret

00000192 <setDAC>:

void setDAC(){
	PORTD&=~(1<<LDAC);
 192:	5a 98       	cbi	0x0b, 2	; 11
	PORTD|=(1<<LDAC);	
 194:	5a 9a       	sbi	0x0b, 2	; 11
}
 196:	08 95       	ret

00000198 <main>:


void main(void)
{
 198:	1f 93       	push	r17
	BIG_STAT_N = STAT_N*STAT_CYCLE;
 19a:	80 91 01 01 	lds	r24, 0x0101
 19e:	90 91 00 01 	lds	r25, 0x0100
 1a2:	89 9f       	mul	r24, r25
 1a4:	80 2d       	mov	r24, r0
 1a6:	11 24       	eor	r1, r1
 1a8:	80 93 49 01 	sts	0x0149, r24
 1ac:	e2 e0       	ldi	r30, 0x02	; 2
 1ae:	f1 e0       	ldi	r31, 0x01	; 1
	
	for (uint8_t i=0; i<8;i++)
		chan_addrs[i]=chan_addrs[i]<<4;
 1b0:	80 81       	ld	r24, Z
 1b2:	82 95       	swap	r24
 1b4:	80 7f       	andi	r24, 0xF0	; 240
 1b6:	81 93       	st	Z+, r24

void main(void)
{
	BIG_STAT_N = STAT_N*STAT_CYCLE;
	
	for (uint8_t i=0; i<8;i++)
 1b8:	81 e0       	ldi	r24, 0x01	; 1
 1ba:	ea 30       	cpi	r30, 0x0A	; 10
 1bc:	f8 07       	cpc	r31, r24
 1be:	c1 f7       	brne	.-16     	; 0x1b0 <main+0x18>
		chan_addrs[i]=chan_addrs[i]<<4;
	
	PORTC|=0b00000000;
 1c0:	88 b1       	in	r24, 0x08	; 8
 1c2:	88 b9       	out	0x08, r24	; 8
	DDRC= 0b00011110;
 1c4:	8e e1       	ldi	r24, 0x1E	; 30
 1c6:	87 b9       	out	0x07, r24	; 7
	DDRD =0b11111110;
 1c8:	8e ef       	ldi	r24, 0xFE	; 254
 1ca:	8a b9       	out	0x0a, r24	; 10
	//PORTD|=0b00100000;	
	DDRB= 0b00011111;
 1cc:	8f e1       	ldi	r24, 0x1F	; 31
 1ce:	84 b9       	out	0x04, r24	; 4
	sei();
 1d0:	78 94       	sei
}

//функция инициализации SPI
void SPI_MasterInit()
{
	DDR_SPI = (1<<DD_MOSI)|(1<<DD_SCK)|(1<<SPI_SS);
 1d2:	8c e2       	ldi	r24, 0x2C	; 44
 1d4:	84 b9       	out	0x04, r24	; 4
	SPCR = (1<<SPE)|(0<<DORD)|(1<<MSTR)|(1<<CPOL)|(0<<CPHA);//|(1<<SPR1)|(0<<SPR0);
 1d6:	88 e5       	ldi	r24, 0x58	; 88
 1d8:	8c bd       	out	0x2c, r24	; 44

//функция инициализации таймера
// Таймер используется для формирования временной последовательности значений, формируемых с ЦАПа
void timer_init()
{
    TCCR2A = 0;        
 1da:	10 92 b0 00 	sts	0x00B0, r1
    TCCR2B = 0;
 1de:	10 92 b1 00 	sts	0x00B1, r1
    
    TCCR2B |= (1<<CS21) ;    
 1e2:	80 91 b1 00 	lds	r24, 0x00B1
 1e6:	82 60       	ori	r24, 0x02	; 2
 1e8:	80 93 b1 00 	sts	0x00B1, r24
    TIMSK2 = (1 << TOIE2);
 1ec:	81 e0       	ldi	r24, 0x01	; 1
 1ee:	80 93 70 00 	sts	0x0070, r24
}

//функция инициализации UART-интерфейса
void uart_init(unsigned int ubrr)
{	
	UBRR0H = (unsigned char)(ubrr>>8);
 1f2:	10 92 c5 00 	sts	0x00C5, r1
	UBRR0L = (unsigned char)ubrr;
 1f6:	83 e3       	ldi	r24, 0x33	; 51
 1f8:	80 93 c4 00 	sts	0x00C4, r24
	UCSR0B = (1<<RXCIE0)|(1<<RXEN0)|(1<<TXEN0);
 1fc:	88 e9       	ldi	r24, 0x98	; 152
 1fe:	80 93 c1 00 	sts	0x00C1, r24
	UCSR0C = (1<<USBS0)|(3<<UCSZ00);
 202:	8e e0       	ldi	r24, 0x0E	; 14
 204:	80 93 c2 00 	sts	0x00C2, r24
uint8_t accum_cnt;

//функция инициализаци АЦП
//АЦП используется для регистрации тока, проходящего через мемристор
void ADC_Init(){
 ADCSRA |= (1 << ADEN) // Включаем АЦП
 208:	80 91 7a 00 	lds	r24, 0x007A
 20c:	83 68       	ori	r24, 0x83	; 131
 20e:	80 93 7a 00 	sts	0x007A, r24
 //ADCSRA&=~(1 << ADPS1)|(1 << ADPS0)|(1 << ADPS1);
 |(1 << ADPS1)|(1 << ADPS0)|(1 << ADPS1);    // устанавливаем предделитель преобразователя на 8
 ADMUX |= (0 << REFS1)|(1 << REFS0) //выставляем опорное напряжение, как внешний ИОН
 212:	80 91 7c 00 	lds	r24, 0x007C
 216:	80 64       	ori	r24, 0x40	; 64
 218:	80 93 7c 00 	sts	0x007C, r24
    //DDRD = 0b000001100;	
	
	uart_init(BAUDRATE);
	ADC_Init();
	
	ADCSRA |= (1 << ADSC); 
 21c:	80 91 7a 00 	lds	r24, 0x007A
 220:	80 64       	ori	r24, 0x40	; 64
 222:	80 93 7a 00 	sts	0x007A, r24
	ADCL;
 226:	80 91 78 00 	lds	r24, 0x0078
	ADCL;
 22a:	80 91 78 00 	lds	r24, 0x0078
 22e:	10 e0       	ldi	r17, 0x00	; 0
		//set_reverser(i,1);
	
	//set_reverser(0,0);
	for (int i=0;i<8;i++)
	{
		prepareSetDAC(0,i);
 230:	80 e0       	ldi	r24, 0x00	; 0
 232:	90 e0       	ldi	r25, 0x00	; 0
 234:	61 2f       	mov	r22, r17
 236:	0e 94 a3 00 	call	0x146	; 0x146 <prepareSetDAC>
 23a:	1f 5f       	subi	r17, 0xFF	; 255

	//for(int i=0;i<8;i++)
		//set_reverser(i,1);
	
	//set_reverser(0,0);
	for (int i=0;i<8;i++)
 23c:	18 30       	cpi	r17, 0x08	; 8
 23e:	c1 f7       	brne	.-16     	; 0x230 <main+0x98>

	}
}

void setDAC(){
	PORTD&=~(1<<LDAC);
 240:	5a 98       	cbi	0x0b, 2	; 11
	PORTD|=(1<<LDAC);	
 242:	5a 9a       	sbi	0x0b, 2	; 11
	for (int i=0;i<8;i++)
	{
		prepareSetDAC(0,i);
	}
setDAC();	
	separMult();
 244:	0e 94 83 00 	call	0x106	; 0x106 <separMult>
 248:	ff cf       	rjmp	.-2      	; 0x248 <main+0xb0>

0000024a <__vector_9>:
//главный цикл работы контроллера
//Здесь устанавливаются значения ЦАП и передаются данные на компьютер
//через UART-интерфейс
//данный участок кода повторяется при переполнении TIMER2
ISR(TIMER2_OVF_vect)
{
 24a:	1f 92       	push	r1
 24c:	0f 92       	push	r0
 24e:	0f b6       	in	r0, 0x3f	; 63
 250:	0f 92       	push	r0
 252:	11 24       	eor	r1, r1
 254:	2f 93       	push	r18
 256:	3f 93       	push	r19
 258:	4f 93       	push	r20
 25a:	5f 93       	push	r21
 25c:	6f 93       	push	r22
 25e:	7f 93       	push	r23
 260:	8f 93       	push	r24
 262:	9f 93       	push	r25
 264:	af 93       	push	r26
 266:	bf 93       	push	r27
 268:	ef 93       	push	r30
 26a:	ff 93       	push	r31
	if(ctr>time_step)
 26c:	20 91 3c 01 	lds	r18, 0x013C
 270:	30 91 3d 01 	lds	r19, 0x013D
 274:	80 91 0e 01 	lds	r24, 0x010E
 278:	90 91 0f 01 	lds	r25, 0x010F
 27c:	82 17       	cp	r24, r18
 27e:	93 07       	cpc	r25, r19
 280:	0c f0       	brlt	.+2      	; 0x284 <__vector_9+0x3a>
 282:	39 c3       	rjmp	.+1650   	; 0x8f6 <__vector_9+0x6ac>
	{
		if(MD==CUSTOM)
 284:	60 91 12 01 	lds	r22, 0x0112
 288:	66 23       	and	r22, r22
 28a:	09 f0       	breq	.+2      	; 0x28e <__vector_9+0x44>
 28c:	65 c0       	rjmp	.+202    	; 0x358 <__vector_9+0x10e>
		{
			if(event_cnt==(1))
 28e:	20 91 38 01 	lds	r18, 0x0138
 292:	30 91 39 01 	lds	r19, 0x0139
 296:	21 30       	cpi	r18, 0x01	; 1
 298:	31 05       	cpc	r19, r1
 29a:	59 f4       	brne	.+22     	; 0x2b2 <__vector_9+0x68>
			{	
			ADCL_=ADCL;
 29c:	90 91 78 00 	lds	r25, 0x0078
 2a0:	90 93 42 01 	sts	0x0142, r25
			ADCH_=ADCH;
 2a4:	80 91 79 00 	lds	r24, 0x0079
 2a8:	80 93 46 01 	sts	0x0146, r24
			UDR0=ADCL_;			
 2ac:	90 93 c6 00 	sts	0x00C6, r25
 2b0:	1b c0       	rjmp	.+54     	; 0x2e8 <__vector_9+0x9e>
			}
			
			if(event_cnt==(2))
 2b2:	22 30       	cpi	r18, 0x02	; 2
 2b4:	31 05       	cpc	r19, r1
 2b6:	29 f4       	brne	.+10     	; 0x2c2 <__vector_9+0x78>
			{	
			UDR0=ADCH_;				
 2b8:	80 91 46 01 	lds	r24, 0x0146
 2bc:	80 93 c6 00 	sts	0x00C6, r24
 2c0:	13 c0       	rjmp	.+38     	; 0x2e8 <__vector_9+0x9e>
			}
			
			
			
			if(event_cnt==0)
 2c2:	21 15       	cp	r18, r1
 2c4:	31 05       	cpc	r19, r1
 2c6:	81 f4       	brne	.+32     	; 0x2e8 <__vector_9+0x9e>
			{
			UDR0=255;
 2c8:	8f ef       	ldi	r24, 0xFF	; 255
 2ca:	80 93 c6 00 	sts	0x00C6, r24
			prepareSetDAC(x16,chan);
 2ce:	80 91 1b 01 	lds	r24, 0x011B
 2d2:	90 91 1c 01 	lds	r25, 0x011C
 2d6:	60 91 26 01 	lds	r22, 0x0126
 2da:	0e 94 a3 00 	call	0x146	; 0x146 <prepareSetDAC>
			prepareSetDAC(x16,2);
 2de:	80 91 1b 01 	lds	r24, 0x011B
 2e2:	90 91 1c 01 	lds	r25, 0x011C
 2e6:	32 c0       	rjmp	.+100    	; 0x34c <__vector_9+0x102>
			setDAC();
			}
			
			else if(event_cnt==t1)
 2e8:	80 91 0a 01 	lds	r24, 0x010A
 2ec:	90 e0       	ldi	r25, 0x00	; 0
 2ee:	28 17       	cp	r18, r24
 2f0:	39 07       	cpc	r19, r25
 2f2:	09 f4       	brne	.+2      	; 0x2f6 <__vector_9+0xac>
 2f4:	54 c1       	rjmp	.+680    	; 0x59e <__vector_9+0x354>
			{
				
			prepareSetDAC(0,chan);
			setDAC();
			}
			else if(event_cnt==dT)
 2f6:	80 91 3b 01 	lds	r24, 0x013B
 2fa:	90 e0       	ldi	r25, 0x00	; 0
 2fc:	28 17       	cp	r18, r24
 2fe:	39 07       	cpc	r19, r25
 300:	09 f4       	brne	.+2      	; 0x304 <__vector_9+0xba>
 302:	38 c1       	rjmp	.+624    	; 0x574 <__vector_9+0x32a>
			{		
			prepareSetDAC(ref16,chan);
			setDAC();
		
			}
			else if(event_cnt==(dT+1))
 304:	01 96       	adiw	r24, 0x01	; 1
 306:	28 17       	cp	r18, r24
 308:	39 07       	cpc	r19, r25
 30a:	09 f4       	brne	.+2      	; 0x30e <__vector_9+0xc4>
 30c:	ac c2       	rjmp	.+1368   	; 0x866 <__vector_9+0x61c>
				ADCSRA |= (1 << ADSC); 

			else if(event_cnt==dTt2)
 30e:	80 91 0c 01 	lds	r24, 0x010C
 312:	90 e0       	ldi	r25, 0x00	; 0
 314:	28 17       	cp	r18, r24
 316:	39 07       	cpc	r19, r25
 318:	09 f0       	breq	.+2      	; 0x31c <__vector_9+0xd2>
 31a:	c7 c2       	rjmp	.+1422   	; 0x8aa <__vector_9+0x660>
			{
			if ( ( UCSR0A & (1<<UDRE0)) )			
 31c:	80 91 c0 00 	lds	r24, 0x00C0
 320:	85 ff       	sbrs	r24, 5
 322:	04 c0       	rjmp	.+8      	; 0x32c <__vector_9+0xe2>
				UDR0=_adc;	
 324:	80 91 4a 01 	lds	r24, 0x014A
 328:	80 93 c6 00 	sts	0x00C6, r24
			accum=0;
 32c:	10 92 48 01 	sts	0x0148, r1
 330:	10 92 47 01 	sts	0x0147, r1
			ADC_on=0;
 334:	10 92 37 01 	sts	0x0137, r1
			accum_cnt=0;			
 338:	10 92 3e 01 	sts	0x013E, r1
			prepareSetDAC(0,chan);
 33c:	80 e0       	ldi	r24, 0x00	; 0
 33e:	90 e0       	ldi	r25, 0x00	; 0
 340:	60 91 26 01 	lds	r22, 0x0126
 344:	0e 94 a3 00 	call	0x146	; 0x146 <prepareSetDAC>
			prepareSetDAC(0,2);
 348:	80 e0       	ldi	r24, 0x00	; 0
 34a:	90 e0       	ldi	r25, 0x00	; 0
 34c:	62 e0       	ldi	r22, 0x02	; 2
 34e:	0e 94 a3 00 	call	0x146	; 0x146 <prepareSetDAC>

	}
}

void setDAC(){
	PORTD&=~(1<<LDAC);
 352:	5a 98       	cbi	0x0b, 2	; 11
	PORTD|=(1<<LDAC);	
 354:	5a 9a       	sbi	0x0b, 2	; 11
 356:	a9 c2       	rjmp	.+1362   	; 0x8aa <__vector_9+0x660>
			setDAC();

			}		

		}
		else if(MD==VAC)
 358:	61 30       	cpi	r22, 0x01	; 1
 35a:	09 f0       	breq	.+2      	; 0x35e <__vector_9+0x114>
 35c:	7c c0       	rjmp	.+248    	; 0x456 <__vector_9+0x20c>
		{			
			static int i=0;
			i++;						
 35e:	80 91 35 01 	lds	r24, 0x0135
 362:	90 91 36 01 	lds	r25, 0x0136
 366:	01 96       	adiw	r24, 0x01	; 1
 368:	90 93 36 01 	sts	0x0136, r25
 36c:	80 93 35 01 	sts	0x0135, r24
			
			switch(UDP_cnt)
 370:	80 91 50 01 	lds	r24, 0x0150
 374:	81 30       	cpi	r24, 0x01	; 1
 376:	79 f0       	breq	.+30     	; 0x396 <__vector_9+0x14c>
 378:	81 30       	cpi	r24, 0x01	; 1
 37a:	30 f0       	brcs	.+12     	; 0x388 <__vector_9+0x13e>
 37c:	82 30       	cpi	r24, 0x02	; 2
 37e:	f1 f0       	breq	.+60     	; 0x3bc <__vector_9+0x172>
 380:	83 30       	cpi	r24, 0x03	; 3
 382:	09 f0       	breq	.+2      	; 0x386 <__vector_9+0x13c>
 384:	61 c0       	rjmp	.+194    	; 0x448 <__vector_9+0x1fe>
 386:	1f c0       	rjmp	.+62     	; 0x3c6 <__vector_9+0x17c>
			{
				case 0:					
				 ADCSRA |= (1 << ADSC); 
 388:	80 91 7a 00 	lds	r24, 0x007A
 38c:	80 64       	ori	r24, 0x40	; 64
 38e:	80 93 7a 00 	sts	0x007A, r24
				UDR0=255;
 392:	8f ef       	ldi	r24, 0xFF	; 255
 394:	15 c0       	rjmp	.+42     	; 0x3c0 <__vector_9+0x176>
				break;
				
				
				
				case 1:	
				ADCL__=	ADCL_;
 396:	80 91 42 01 	lds	r24, 0x0142
 39a:	80 93 3f 01 	sts	0x013F, r24
				ADCH__ = ADCH_;
 39e:	80 91 46 01 	lds	r24, 0x0146
 3a2:	80 93 3a 01 	sts	0x013A, r24
				ADCL_=ADCL;
 3a6:	90 91 78 00 	lds	r25, 0x0078
 3aa:	90 93 42 01 	sts	0x0142, r25
				ADCH_=ADCH;
 3ae:	80 91 79 00 	lds	r24, 0x0079
 3b2:	80 93 46 01 	sts	0x0146, r24
				
				UDR0=ADCL_;
 3b6:	90 93 c6 00 	sts	0x00C6, r25
 3ba:	46 c0       	rjmp	.+140    	; 0x448 <__vector_9+0x1fe>
				break;
				
				case 2:
				UDR0=ADCH_;
 3bc:	80 91 46 01 	lds	r24, 0x0146
 3c0:	80 93 c6 00 	sts	0x00C6, r24
 3c4:	41 c0       	rjmp	.+130    	; 0x448 <__vector_9+0x1fe>
				
				
				case 3:
								
				//VAC16_HH=VAC16_H;
				VAC16_H=VAC16;
 3c6:	20 91 13 01 	lds	r18, 0x0113
 3ca:	30 91 14 01 	lds	r19, 0x0114
 3ce:	30 93 16 01 	sts	0x0116, r19
 3d2:	20 93 15 01 	sts	0x0115, r18
				
				if(pos_phase)
 3d6:	80 91 0d 01 	lds	r24, 0x010D
 3da:	88 23       	and	r24, r24
 3dc:	81 f0       	breq	.+32     	; 0x3fe <__vector_9+0x1b4>
				{
							//PORTC=0b00000010;
		//PORTB=0b00011111;
		//PORTD=0b11101100;
					VAC16+=32;
 3de:	20 5e       	subi	r18, 0xE0	; 224
 3e0:	3f 4f       	sbci	r19, 0xFF	; 255
 3e2:	30 93 14 01 	sts	0x0114, r19
 3e6:	20 93 13 01 	sts	0x0113, r18
					if(VAC16>(ref16-1))
 3ea:	80 91 1d 01 	lds	r24, 0x011D
 3ee:	90 91 1e 01 	lds	r25, 0x011E
 3f2:	28 17       	cp	r18, r24
 3f4:	39 07       	cpc	r19, r25
 3f6:	b4 f0       	brlt	.+44     	; 0x424 <__vector_9+0x1da>
					{
					pos_phase=0;				
 3f8:	10 92 0d 01 	sts	0x010D, r1
 3fc:	13 c0       	rjmp	.+38     	; 0x424 <__vector_9+0x1da>
				else
				{
					//PORTB=0;
		//PORTC=0;
		//PORTD=0;
					VAC16-=32;
 3fe:	c9 01       	movw	r24, r18
 400:	80 97       	sbiw	r24, 0x20	; 32
 402:	90 93 14 01 	sts	0x0114, r25
 406:	80 93 13 01 	sts	0x0113, r24
					if(VAC16<(-x16+1))
 40a:	21 e0       	ldi	r18, 0x01	; 1
 40c:	30 e0       	ldi	r19, 0x00	; 0
 40e:	40 91 1b 01 	lds	r20, 0x011B
 412:	50 91 1c 01 	lds	r21, 0x011C
 416:	24 1b       	sub	r18, r20
 418:	35 0b       	sbc	r19, r21
 41a:	82 17       	cp	r24, r18
 41c:	93 07       	cpc	r25, r19
 41e:	14 f4       	brge	.+4      	; 0x424 <__vector_9+0x1da>
					{
					pos_phase=1;									
 420:	60 93 0d 01 	sts	0x010D, r22
					}
				}	
				
				
				
				UDR0=VAC16>>4;
 424:	80 91 13 01 	lds	r24, 0x0113
 428:	90 91 14 01 	lds	r25, 0x0114
 42c:	9c 01       	movw	r18, r24
 42e:	b4 e0       	ldi	r27, 0x04	; 4
 430:	35 95       	asr	r19
 432:	27 95       	ror	r18
 434:	ba 95       	dec	r27
 436:	e1 f7       	brne	.-8      	; 0x430 <__vector_9+0x1e6>
 438:	20 93 c6 00 	sts	0x00C6, r18
				prepareSetDAC(VAC16,chan);
 43c:	60 91 26 01 	lds	r22, 0x0126
 440:	0e 94 a3 00 	call	0x146	; 0x146 <prepareSetDAC>

	}
}

void setDAC(){
	PORTD&=~(1<<LDAC);
 444:	5a 98       	cbi	0x0b, 2	; 11
	PORTD|=(1<<LDAC);	
 446:	5a 9a       	sbi	0x0b, 2	; 11
				
			}
						
			
			UDP_cnt++;
			UDP_cnt%=4;
 448:	80 91 50 01 	lds	r24, 0x0150
 44c:	8f 5f       	subi	r24, 0xFF	; 255
 44e:	83 70       	andi	r24, 0x03	; 3
 450:	80 93 50 01 	sts	0x0150, r24
 454:	2a c2       	rjmp	.+1108   	; 0x8aa <__vector_9+0x660>

			
		}
		else if(MD==PROGRAM)
 456:	62 30       	cpi	r22, 0x02	; 2
 458:	09 f0       	breq	.+2      	; 0x45c <__vector_9+0x212>
 45a:	a6 c0       	rjmp	.+332    	; 0x5a8 <__vector_9+0x35e>
		{
			T=16;
 45c:	80 e1       	ldi	r24, 0x10	; 16
 45e:	80 93 41 01 	sts	0x0141, r24
			static uint16_t adc_h;
			
			if(event_cnt==(1))
 462:	40 91 38 01 	lds	r20, 0x0138
 466:	50 91 39 01 	lds	r21, 0x0139
 46a:	41 30       	cpi	r20, 0x01	; 1
 46c:	51 05       	cpc	r21, r1
 46e:	29 f4       	brne	.+10     	; 0x47a <__vector_9+0x230>
			{	
				UDR0=PROGRAM_done;
 470:	80 91 25 01 	lds	r24, 0x0125
 474:	80 93 c6 00 	sts	0x00C6, r24
 478:	77 c0       	rjmp	.+238    	; 0x568 <__vector_9+0x31e>
			}

			if(event_cnt==(2))//ADC GET 
 47a:	42 30       	cpi	r20, 0x02	; 2
 47c:	51 05       	cpc	r21, r1
 47e:	59 f4       	brne	.+22     	; 0x496 <__vector_9+0x24c>
			{	
				ADCL_=ADCL;	
 480:	90 91 78 00 	lds	r25, 0x0078
 484:	90 93 42 01 	sts	0x0142, r25
				ADCH_=ADCH;
 488:	80 91 79 00 	lds	r24, 0x0079
 48c:	80 93 46 01 	sts	0x0146, r24
				UDR0=ADCL_;
 490:	90 93 c6 00 	sts	0x00C6, r25
 494:	6c c0       	rjmp	.+216    	; 0x56e <__vector_9+0x324>
			}
			
			if(event_cnt==(3))//ADC GET CONTINUE
 496:	43 30       	cpi	r20, 0x03	; 3
 498:	51 05       	cpc	r21, r1
 49a:	31 f5       	brne	.+76     	; 0x4e8 <__vector_9+0x29e>
			{	
				
				UDR0=ADCH_;
 49c:	80 91 46 01 	lds	r24, 0x0146
 4a0:	80 93 c6 00 	sts	0x00C6, r24
				
				_adc=(ADCL_|(ADCH_ <<8));
 4a4:	38 2f       	mov	r19, r24
 4a6:	20 e0       	ldi	r18, 0x00	; 0
 4a8:	80 91 42 01 	lds	r24, 0x0142
 4ac:	90 e0       	ldi	r25, 0x00	; 0
 4ae:	82 2b       	or	r24, r18
 4b0:	93 2b       	or	r25, r19
 4b2:	90 93 4b 01 	sts	0x014B, r25
 4b6:	80 93 4a 01 	sts	0x014A, r24
				adc_h=((uint16_t)(512)-_adc);
 4ba:	20 e0       	ldi	r18, 0x00	; 0
 4bc:	32 e0       	ldi	r19, 0x02	; 2
 4be:	28 1b       	sub	r18, r24
 4c0:	39 0b       	sbc	r19, r25
 4c2:	30 93 34 01 	sts	0x0134, r19
 4c6:	20 93 33 01 	sts	0x0133, r18
				
				if((adc_h)==(uint16_t)(t1))
 4ca:	80 91 0a 01 	lds	r24, 0x010A
 4ce:	90 e0       	ldi	r25, 0x00	; 0
 4d0:	28 17       	cp	r18, r24
 4d2:	39 07       	cpc	r19, r25
 4d4:	09 f0       	breq	.+2      	; 0x4d8 <__vector_9+0x28e>
 4d6:	48 c0       	rjmp	.+144    	; 0x568 <__vector_9+0x31e>
				{
					PROGRAM_done=1;
 4d8:	81 e0       	ldi	r24, 0x01	; 1
 4da:	80 93 25 01 	sts	0x0125, r24
					prog_val=0;
 4de:	10 92 1a 01 	sts	0x011A, r1
 4e2:	10 92 19 01 	sts	0x0119, r1
 4e6:	4b c0       	rjmp	.+150    	; 0x57e <__vector_9+0x334>
				}
			}
			
			if(event_cnt==0)
 4e8:	41 15       	cp	r20, r1
 4ea:	51 05       	cpc	r21, r1
 4ec:	e9 f5       	brne	.+122    	; 0x568 <__vector_9+0x31e>
			{
				UDR0=255;
 4ee:	8f ef       	ldi	r24, 0xFF	; 255
 4f0:	80 93 c6 00 	sts	0x00C6, r24
				
				
				prog_val+=32;
 4f4:	20 91 19 01 	lds	r18, 0x0119
 4f8:	30 91 1a 01 	lds	r19, 0x011A
 4fc:	20 5e       	subi	r18, 0xE0	; 224
 4fe:	3f 4f       	sbci	r19, 0xFF	; 255
 500:	30 93 1a 01 	sts	0x011A, r19
 504:	20 93 19 01 	sts	0x0119, r18
				
				if(prog_val==(-x16+32))
 508:	40 91 1b 01 	lds	r20, 0x011B
 50c:	50 91 1c 01 	lds	r21, 0x011C
 510:	80 e2       	ldi	r24, 0x20	; 32
 512:	90 e0       	ldi	r25, 0x00	; 0
 514:	84 1b       	sub	r24, r20
 516:	95 0b       	sbc	r25, r21
 518:	28 17       	cp	r18, r24
 51a:	39 07       	cpc	r19, r25
 51c:	29 f4       	brne	.+10     	; 0x528 <__vector_9+0x2de>
					prog_val=0;
 51e:	10 92 1a 01 	sts	0x011A, r1
 522:	10 92 19 01 	sts	0x0119, r1
 526:	13 c0       	rjmp	.+38     	; 0x54e <__vector_9+0x304>
				else
				if(prog_val>(t2<<4))
 528:	80 91 0b 01 	lds	r24, 0x010B
 52c:	90 e0       	ldi	r25, 0x00	; 0
 52e:	a4 e0       	ldi	r26, 0x04	; 4
 530:	88 0f       	add	r24, r24
 532:	99 1f       	adc	r25, r25
 534:	aa 95       	dec	r26
 536:	e1 f7       	brne	.-8      	; 0x530 <__vector_9+0x2e6>
 538:	82 17       	cp	r24, r18
 53a:	93 07       	cpc	r25, r19
 53c:	44 f4       	brge	.+16     	; 0x54e <__vector_9+0x304>
					prog_val=-x16;
 53e:	88 27       	eor	r24, r24
 540:	99 27       	eor	r25, r25
 542:	84 1b       	sub	r24, r20
 544:	95 0b       	sbc	r25, r21
 546:	90 93 1a 01 	sts	0x011A, r25
 54a:	80 93 19 01 	sts	0x0119, r24
				
				if(PROGRAM_done)
 54e:	80 91 25 01 	lds	r24, 0x0125
 552:	88 23       	and	r24, r24
 554:	21 f0       	breq	.+8      	; 0x55e <__vector_9+0x314>
					prog_val=0;
 556:	10 92 1a 01 	sts	0x011A, r1
 55a:	10 92 19 01 	sts	0x0119, r1
				
				prepareSetDAC(prog_val,chan);
 55e:	80 91 19 01 	lds	r24, 0x0119
 562:	90 91 1a 01 	lds	r25, 0x011A
 566:	1d c0       	rjmp	.+58     	; 0x5a2 <__vector_9+0x358>
				setDAC();
			}			
			else if(event_cnt==7)//t1
 568:	47 30       	cpi	r20, 0x07	; 7
 56a:	51 05       	cpc	r21, r1
 56c:	c1 f0       	breq	.+48     	; 0x59e <__vector_9+0x354>
			{
				prepareSetDAC(0,chan);
				setDAC();
			}
			else if(event_cnt==9)//dT
 56e:	49 30       	cpi	r20, 0x09	; 9
 570:	51 05       	cpc	r21, r1
 572:	29 f4       	brne	.+10     	; 0x57e <__vector_9+0x334>
			{		
				prepareSetDAC(ref16,chan);
 574:	80 91 1d 01 	lds	r24, 0x011D
 578:	90 91 1e 01 	lds	r25, 0x011E
 57c:	12 c0       	rjmp	.+36     	; 0x5a2 <__vector_9+0x358>
				setDAC();
			}
			else if(event_cnt==(9+1))
 57e:	4a 30       	cpi	r20, 0x0A	; 10
 580:	51 05       	cpc	r21, r1
 582:	09 f4       	brne	.+2      	; 0x586 <__vector_9+0x33c>
 584:	70 c1       	rjmp	.+736    	; 0x866 <__vector_9+0x61c>
				ADCSRA |= (1 << ADSC); 

			else if(event_cnt==14)//
 586:	4e 30       	cpi	r20, 0x0E	; 14
 588:	51 05       	cpc	r21, r1
 58a:	09 f0       	breq	.+2      	; 0x58e <__vector_9+0x344>
 58c:	8e c1       	rjmp	.+796    	; 0x8aa <__vector_9+0x660>
			{
				accum=0;
 58e:	10 92 48 01 	sts	0x0148, r1
 592:	10 92 47 01 	sts	0x0147, r1
				ADC_on=0;
 596:	10 92 37 01 	sts	0x0137, r1
				accum_cnt=0;
 59a:	10 92 3e 01 	sts	0x013E, r1
				
				prepareSetDAC(0,chan);
 59e:	80 e0       	ldi	r24, 0x00	; 0
 5a0:	90 e0       	ldi	r25, 0x00	; 0
 5a2:	60 91 26 01 	lds	r22, 0x0126
 5a6:	d3 ce       	rjmp	.-602    	; 0x34e <__vector_9+0x104>
				setDAC();
			}
		}
		else if(MD == ONE_SHOT)
 5a8:	65 30       	cpi	r22, 0x05	; 5
 5aa:	09 f0       	breq	.+2      	; 0x5ae <__vector_9+0x364>
 5ac:	63 c0       	rjmp	.+198    	; 0x674 <__vector_9+0x42a>
		{
			//готовим сброс
			if(event_cnt==0)
 5ae:	80 91 38 01 	lds	r24, 0x0138
 5b2:	90 91 39 01 	lds	r25, 0x0139
 5b6:	00 97       	sbiw	r24, 0x00	; 0
 5b8:	69 f1       	breq	.+90     	; 0x614 <__vector_9+0x3ca>
			{
				separMult();
			}//сброс
			else if(event_cnt==1)
 5ba:	81 30       	cpi	r24, 0x01	; 1
 5bc:	91 05       	cpc	r25, r1
 5be:	61 f4       	brne	.+24     	; 0x5d8 <__vector_9+0x38e>
			{
				prepareSetDAC(unset16,3);
 5c0:	80 91 1f 01 	lds	r24, 0x011F
 5c4:	90 91 20 01 	lds	r25, 0x0120
 5c8:	63 e0       	ldi	r22, 0x03	; 3
 5ca:	0e 94 a3 00 	call	0x146	; 0x146 <prepareSetDAC>
				prepareSetDAC(unset16,2);
 5ce:	80 91 1f 01 	lds	r24, 0x011F
 5d2:	90 91 20 01 	lds	r25, 0x0120
 5d6:	ba ce       	rjmp	.-652    	; 0x34c <__vector_9+0x102>
				setDAC();
			}
			else if(event_cnt==2)
 5d8:	82 30       	cpi	r24, 0x02	; 2
 5da:	91 05       	cpc	r25, r1
 5dc:	21 f4       	brne	.+8      	; 0x5e6 <__vector_9+0x39c>
			{
				prepareSetDAC(0,3);
 5de:	80 e0       	ldi	r24, 0x00	; 0
 5e0:	90 e0       	ldi	r25, 0x00	; 0
 5e2:	63 e0       	ldi	r22, 0x03	; 3
 5e4:	af ce       	rjmp	.-674    	; 0x344 <__vector_9+0xfa>
				prepareSetDAC(0,2);
				setDAC();
			}		//reseted		
			else if(event_cnt==3)
 5e6:	83 30       	cpi	r24, 0x03	; 3
 5e8:	91 05       	cpc	r25, r1
 5ea:	19 f4       	brne	.+6      	; 0x5f2 <__vector_9+0x3a8>
			{
				gatherMult();
 5ec:	0e 94 7a 00 	call	0xf4	; 0xf4 <gatherMult>
 5f0:	5c c1       	rjmp	.+696    	; 0x8aa <__vector_9+0x660>
			}
			else if(event_cnt==4)
 5f2:	84 30       	cpi	r24, 0x04	; 4
 5f4:	91 05       	cpc	r25, r1
 5f6:	29 f4       	brne	.+10     	; 0x602 <__vector_9+0x3b8>
			{
				prepareSetDAC(x16,3);				
 5f8:	80 91 1b 01 	lds	r24, 0x011B
 5fc:	90 91 1c 01 	lds	r25, 0x011C
 600:	22 c0       	rjmp	.+68     	; 0x646 <__vector_9+0x3fc>
				setDAC();
			}		
			else if(event_cnt==5)
 602:	85 30       	cpi	r24, 0x05	; 5
 604:	91 05       	cpc	r25, r1
 606:	e9 f0       	breq	.+58     	; 0x642 <__vector_9+0x3f8>
			{
				prepareSetDAC(0,3);				
				setDAC();
			}	//пнули		
				//посмотрим, что вышло
			else if(event_cnt==6)
 608:	86 30       	cpi	r24, 0x06	; 6
 60a:	91 05       	cpc	r25, r1
 60c:	31 f4       	brne	.+12     	; 0x61a <__vector_9+0x3d0>
			{
				UDR0=255;
 60e:	8f ef       	ldi	r24, 0xFF	; 255
 610:	80 93 c6 00 	sts	0x00C6, r24
				separMult();				
 614:	0e 94 83 00 	call	0x106	; 0x106 <separMult>
 618:	48 c1       	rjmp	.+656    	; 0x8aa <__vector_9+0x660>
			}			
			else if(event_cnt==7)
 61a:	87 30       	cpi	r24, 0x07	; 7
 61c:	91 05       	cpc	r25, r1
 61e:	31 f4       	brne	.+12     	; 0x62c <__vector_9+0x3e2>
			{
				prepareSetDAC(ref16,3);
 620:	80 91 1d 01 	lds	r24, 0x011D
 624:	90 91 1e 01 	lds	r25, 0x011E
 628:	63 e0       	ldi	r22, 0x03	; 3
 62a:	19 c1       	rjmp	.+562    	; 0x85e <__vector_9+0x614>
				setDAC();				
				ADCSRA |= (1 << ADSC); 
			}	
			else if(event_cnt==9)
 62c:	89 30       	cpi	r24, 0x09	; 9
 62e:	91 05       	cpc	r25, r1
 630:	09 f4       	brne	.+2      	; 0x634 <__vector_9+0x3ea>
 632:	2a c1       	rjmp	.+596    	; 0x888 <__vector_9+0x63e>
				//prepareSetDAC(ref16,3);
				ADCL_=ADCL;	
				ADCH_=ADCH;
				UDR0=ADCL_;
			}
			else if(event_cnt==10)
 634:	8a 30       	cpi	r24, 0x0A	; 10
 636:	91 05       	cpc	r25, r1
 638:	41 f4       	brne	.+16     	; 0x64a <__vector_9+0x400>
			{
				UDR0=ADCH_; 
 63a:	80 91 46 01 	lds	r24, 0x0146
 63e:	80 93 c6 00 	sts	0x00C6, r24
				
				prepareSetDAC(0,3);
 642:	80 e0       	ldi	r24, 0x00	; 0
 644:	90 e0       	ldi	r25, 0x00	; 0
 646:	63 e0       	ldi	r22, 0x03	; 3
 648:	82 ce       	rjmp	.-764    	; 0x34e <__vector_9+0x104>
				setDAC();
			}		
			//3й просмотрен
			else if(event_cnt==11)
 64a:	8b 30       	cpi	r24, 0x0B	; 11
 64c:	91 05       	cpc	r25, r1
 64e:	31 f4       	brne	.+12     	; 0x65c <__vector_9+0x412>
			{				 
				prepareSetDAC(ref16,2);
 650:	80 91 1d 01 	lds	r24, 0x011D
 654:	90 91 1e 01 	lds	r25, 0x011E
 658:	62 e0       	ldi	r22, 0x02	; 2
 65a:	01 c1       	rjmp	.+514    	; 0x85e <__vector_9+0x614>
				setDAC();
				
				ADCSRA |= (1 << ADSC); 
			}
			else if(event_cnt==13)
 65c:	8d 30       	cpi	r24, 0x0D	; 13
 65e:	91 05       	cpc	r25, r1
 660:	09 f4       	brne	.+2      	; 0x664 <__vector_9+0x41a>
 662:	12 c1       	rjmp	.+548    	; 0x888 <__vector_9+0x63e>
			{		
				ADCL_=ADCL;	
				ADCH_=ADCH;
				UDR0=ADCL_;
			}
			else if(event_cnt == 14)
 664:	0e 97       	sbiw	r24, 0x0e	; 14
 666:	09 f0       	breq	.+2      	; 0x66a <__vector_9+0x420>
 668:	20 c1       	rjmp	.+576    	; 0x8aa <__vector_9+0x660>
			{
				UDR0=ADCH_; 
 66a:	80 91 46 01 	lds	r24, 0x0146
 66e:	80 93 c6 00 	sts	0x00C6, r24
 672:	6a ce       	rjmp	.-812    	; 0x348 <__vector_9+0xfe>
			}
			
		}
		
		
		else if(MD == ANALYZE)//5 by 5
 674:	66 30       	cpi	r22, 0x06	; 6
 676:	09 f0       	breq	.+2      	; 0x67a <__vector_9+0x430>
 678:	18 c1       	rjmp	.+560    	; 0x8aa <__vector_9+0x660>
		{
			//unset
			if(event_cnt==0)
 67a:	80 91 38 01 	lds	r24, 0x0138
 67e:	90 91 39 01 	lds	r25, 0x0139
 682:	00 97       	sbiw	r24, 0x00	; 0
 684:	61 f4       	brne	.+24     	; 0x69e <__vector_9+0x454>
			{
				prepareSetDAC(unset16, chan);
 686:	80 91 1f 01 	lds	r24, 0x011F
 68a:	90 91 20 01 	lds	r25, 0x0120
 68e:	60 91 26 01 	lds	r22, 0x0126
 692:	0e 94 a3 00 	call	0x146	; 0x146 <prepareSetDAC>

	}
}

void setDAC(){
	PORTD&=~(1<<LDAC);
 696:	5a 98       	cbi	0x0b, 2	; 11
	PORTD|=(1<<LDAC);	
 698:	5a 9a       	sbi	0x0b, 2	; 11
			//unset
			if(event_cnt==0)
			{
				prepareSetDAC(unset16, chan);
				setDAC();
				UDR0=255;
 69a:	8f ef       	ldi	r24, 0xFF	; 255
 69c:	04 c1       	rjmp	.+520    	; 0x8a6 <__vector_9+0x65c>
			}
			else if(event_cnt==1)
 69e:	81 30       	cpi	r24, 0x01	; 1
 6a0:	91 05       	cpc	r25, r1
 6a2:	09 f4       	brne	.+2      	; 0x6a6 <__vector_9+0x45c>
 6a4:	7c cf       	rjmp	.-264    	; 0x59e <__vector_9+0x354>
			{
				prepareSetDAC(0, chan);				
				setDAC();
			}
			//create set impulse
			else if(event_cnt==3)
 6a6:	83 30       	cpi	r24, 0x03	; 3
 6a8:	91 05       	cpc	r25, r1
 6aa:	09 f0       	breq	.+2      	; 0x6ae <__vector_9+0x464>
 6ac:	c7 c0       	rjmp	.+398    	; 0x83c <__vector_9+0x5f2>
			{
				if(an_cnt<(BIG_STAT_N))
 6ae:	40 91 27 01 	lds	r20, 0x0127
 6b2:	50 91 28 01 	lds	r21, 0x0128
 6b6:	20 91 49 01 	lds	r18, 0x0149
 6ba:	82 2f       	mov	r24, r18
 6bc:	90 e0       	ldi	r25, 0x00	; 0
 6be:	48 17       	cp	r20, r24
 6c0:	59 07       	cpc	r21, r25
 6c2:	18 f4       	brcc	.+6      	; 0x6ca <__vector_9+0x480>
				{
					STAT_V_step=0;					 
 6c4:	10 92 23 01 	sts	0x0123, r1
 6c8:	23 c0       	rjmp	.+70     	; 0x710 <__vector_9+0x4c6>
				}
				else if(an_cnt<(BIG_STAT_N*2))
 6ca:	82 2f       	mov	r24, r18
 6cc:	90 e0       	ldi	r25, 0x00	; 0
 6ce:	9c 01       	movw	r18, r24
 6d0:	22 0f       	add	r18, r18
 6d2:	33 1f       	adc	r19, r19
 6d4:	42 17       	cp	r20, r18
 6d6:	53 07       	cpc	r21, r19
 6d8:	10 f4       	brcc	.+4      	; 0x6de <__vector_9+0x494>
				{
					STAT_V_step=1;
 6da:	81 e0       	ldi	r24, 0x01	; 1
 6dc:	17 c0       	rjmp	.+46     	; 0x70c <__vector_9+0x4c2>
				}
				else if(an_cnt<(BIG_STAT_N*3))
 6de:	28 0f       	add	r18, r24
 6e0:	39 1f       	adc	r19, r25
 6e2:	42 17       	cp	r20, r18
 6e4:	53 07       	cpc	r21, r19
 6e6:	10 f4       	brcc	.+4      	; 0x6ec <__vector_9+0x4a2>
				{
					STAT_V_step=2;
 6e8:	82 e0       	ldi	r24, 0x02	; 2
 6ea:	10 c0       	rjmp	.+32     	; 0x70c <__vector_9+0x4c2>
				}
				else if(an_cnt<(BIG_STAT_N*4))
 6ec:	9c 01       	movw	r18, r24
 6ee:	22 0f       	add	r18, r18
 6f0:	33 1f       	adc	r19, r19
 6f2:	22 0f       	add	r18, r18
 6f4:	33 1f       	adc	r19, r19
 6f6:	42 17       	cp	r20, r18
 6f8:	53 07       	cpc	r21, r19
 6fa:	10 f4       	brcc	.+4      	; 0x700 <__vector_9+0x4b6>
				{
					STAT_V_step=3;
 6fc:	83 e0       	ldi	r24, 0x03	; 3
 6fe:	06 c0       	rjmp	.+12     	; 0x70c <__vector_9+0x4c2>
				}
				else if(an_cnt<(BIG_STAT_N*5))
 700:	28 0f       	add	r18, r24
 702:	39 1f       	adc	r19, r25
 704:	42 17       	cp	r20, r18
 706:	53 07       	cpc	r21, r19
 708:	18 f4       	brcc	.+6      	; 0x710 <__vector_9+0x4c6>
				{
					STAT_V_step=4;
 70a:	84 e0       	ldi	r24, 0x04	; 4
 70c:	80 93 23 01 	sts	0x0123, r24
				}////////////						
				//prepareSetDAC(x16, chan);
				UDR0=STAT_V_step;
 710:	80 91 23 01 	lds	r24, 0x0123
 714:	80 93 c6 00 	sts	0x00C6, r24
				x16_grad = (-(STAT_V_step+1)*8 )<<4;//16
 718:	90 e0       	ldi	r25, 0x00	; 0
 71a:	80 95       	com	r24
 71c:	90 95       	com	r25
 71e:	96 95       	lsr	r25
 720:	98 2f       	mov	r25, r24
 722:	88 27       	eor	r24, r24
 724:	97 95       	ror	r25
 726:	87 95       	ror	r24
 728:	90 93 4d 01 	sts	0x014D, r25
 72c:	80 93 4c 01 	sts	0x014C, r24
				prepareSetDAC(x16_grad, chan);
 730:	60 91 26 01 	lds	r22, 0x0126
 734:	0e 94 a3 00 	call	0x146	; 0x146 <prepareSetDAC>

	}
}

void setDAC(){
	PORTD&=~(1<<LDAC);
 738:	5a 98       	cbi	0x0b, 2	; 11
	PORTD|=(1<<LDAC);	
 73a:	5a 9a       	sbi	0x0b, 2	; 11
				x16_grad = (-(STAT_V_step+1)*8 )<<4;//16
				prepareSetDAC(x16_grad, chan);
				setDAC();
				
				
				if(an_cnt_fast<(STAT_N))//20 us
 73c:	40 91 29 01 	lds	r20, 0x0129
 740:	50 91 2a 01 	lds	r21, 0x012A
 744:	80 91 00 01 	lds	r24, 0x0100
 748:	90 e0       	ldi	r25, 0x00	; 0
 74a:	48 17       	cp	r20, r24
 74c:	59 07       	cpc	r21, r25
 74e:	18 f4       	brcc	.+6      	; 0x756 <__vector_9+0x50c>
				{
					STAT_dt_step=0;									
 750:	10 92 22 01 	sts	0x0122, r1
 754:	49 c0       	rjmp	.+146    	; 0x7e8 <__vector_9+0x59e>
				}
				else if(an_cnt_fast<(STAT_N*2))//80 us
 756:	9c 01       	movw	r18, r24
 758:	22 0f       	add	r18, r18
 75a:	33 1f       	adc	r19, r19
 75c:	42 17       	cp	r20, r18
 75e:	53 07       	cpc	r21, r19
 760:	60 f4       	brcc	.+24     	; 0x77a <__vector_9+0x530>
				{
					STAT_dt_step=1;
 762:	81 e0       	ldi	r24, 0x01	; 1
 764:	80 93 22 01 	sts	0x0122, r24
 768:	80 e0       	ldi	r24, 0x00	; 0
 76a:	90 e0       	ldi	r25, 0x00	; 0

	}
}

void setDAC(){
	PORTD&=~(1<<LDAC);
 76c:	5a 98       	cbi	0x0b, 2	; 11
	PORTD|=(1<<LDAC);	
 76e:	5a 9a       	sbi	0x0b, 2	; 11
					STAT_dt_step=0;									
				}
				else if(an_cnt_fast<(STAT_N*2))//80 us
				{
					STAT_dt_step=1;
					for(int i=0;i<40;i++)//28
 770:	01 96       	adiw	r24, 0x01	; 1
 772:	88 32       	cpi	r24, 0x28	; 40
 774:	91 05       	cpc	r25, r1
 776:	d1 f7       	brne	.-12     	; 0x76c <__vector_9+0x522>
 778:	37 c0       	rjmp	.+110    	; 0x7e8 <__vector_9+0x59e>
					{
					setDAC();
					}
				}
				else if(an_cnt_fast<(STAT_N*3))//220 us
 77a:	28 0f       	add	r18, r24
 77c:	39 1f       	adc	r19, r25
 77e:	42 17       	cp	r20, r18
 780:	53 07       	cpc	r21, r19
 782:	60 f4       	brcc	.+24     	; 0x79c <__vector_9+0x552>
				{
					STAT_dt_step=2;
 784:	82 e0       	ldi	r24, 0x02	; 2
 786:	80 93 22 01 	sts	0x0122, r24
 78a:	80 e0       	ldi	r24, 0x00	; 0
 78c:	90 e0       	ldi	r25, 0x00	; 0

	}
}

void setDAC(){
	PORTD&=~(1<<LDAC);
 78e:	5a 98       	cbi	0x0b, 2	; 11
	PORTD|=(1<<LDAC);	
 790:	5a 9a       	sbi	0x0b, 2	; 11
					}
				}
				else if(an_cnt_fast<(STAT_N*3))//220 us
				{
					STAT_dt_step=2;
					for(int i=0;i<160;i++)
 792:	01 96       	adiw	r24, 0x01	; 1
 794:	80 3a       	cpi	r24, 0xA0	; 160
 796:	91 05       	cpc	r25, r1
 798:	d1 f7       	brne	.-12     	; 0x78e <__vector_9+0x544>
 79a:	26 c0       	rjmp	.+76     	; 0x7e8 <__vector_9+0x59e>
					{
					setDAC();
					}
				}
				else if(an_cnt_fast<(STAT_N*4))//900 us
 79c:	88 0f       	add	r24, r24
 79e:	99 1f       	adc	r25, r25
 7a0:	88 0f       	add	r24, r24
 7a2:	99 1f       	adc	r25, r25
 7a4:	48 17       	cp	r20, r24
 7a6:	59 07       	cpc	r21, r25
 7a8:	68 f4       	brcc	.+26     	; 0x7c4 <__vector_9+0x57a>
				{
					STAT_dt_step=3;
 7aa:	83 e0       	ldi	r24, 0x03	; 3
 7ac:	80 93 22 01 	sts	0x0122, r24
 7b0:	80 e0       	ldi	r24, 0x00	; 0
 7b2:	90 e0       	ldi	r25, 0x00	; 0

	}
}

void setDAC(){
	PORTD&=~(1<<LDAC);
 7b4:	5a 98       	cbi	0x0b, 2	; 11
	PORTD|=(1<<LDAC);	
 7b6:	5a 9a       	sbi	0x0b, 2	; 11
					}
				}
				else if(an_cnt_fast<(STAT_N*4))//900 us
				{
					STAT_dt_step=3;
					for(int i=0;i<640;i++)
 7b8:	01 96       	adiw	r24, 0x01	; 1
 7ba:	22 e0       	ldi	r18, 0x02	; 2
 7bc:	80 38       	cpi	r24, 0x80	; 128
 7be:	92 07       	cpc	r25, r18
 7c0:	c9 f7       	brne	.-14     	; 0x7b4 <__vector_9+0x56a>
 7c2:	12 c0       	rjmp	.+36     	; 0x7e8 <__vector_9+0x59e>
					{
					setDAC();
					}
				}
				else if(an_cnt_fast<(BIG_STAT_N))//3.5 ms
 7c4:	80 91 49 01 	lds	r24, 0x0149
 7c8:	90 e0       	ldi	r25, 0x00	; 0
 7ca:	48 17       	cp	r20, r24
 7cc:	59 07       	cpc	r21, r25
 7ce:	60 f4       	brcc	.+24     	; 0x7e8 <__vector_9+0x59e>
				{
					STAT_dt_step=4;
 7d0:	84 e0       	ldi	r24, 0x04	; 4
 7d2:	80 93 22 01 	sts	0x0122, r24
 7d6:	80 e0       	ldi	r24, 0x00	; 0
 7d8:	90 e0       	ldi	r25, 0x00	; 0

	}
}

void setDAC(){
	PORTD&=~(1<<LDAC);
 7da:	5a 98       	cbi	0x0b, 2	; 11
	PORTD|=(1<<LDAC);	
 7dc:	5a 9a       	sbi	0x0b, 2	; 11
					}
				}
				else if(an_cnt_fast<(BIG_STAT_N))//3.5 ms
				{
					STAT_dt_step=4;
					for(int i=0;i<2560;i++)
 7de:	01 96       	adiw	r24, 0x01	; 1
 7e0:	2a e0       	ldi	r18, 0x0A	; 10
 7e2:	80 30       	cpi	r24, 0x00	; 0
 7e4:	92 07       	cpc	r25, r18
 7e6:	c9 f7       	brne	.-14     	; 0x7da <__vector_9+0x590>
					setDAC();
					}
				}////////////////
									
				
				prepareResetDAC(chan);
 7e8:	80 91 26 01 	lds	r24, 0x0126
 7ec:	0e 94 91 00 	call	0x122	; 0x122 <prepareResetDAC>

	}
}

void setDAC(){
	PORTD&=~(1<<LDAC);
 7f0:	5a 98       	cbi	0x0b, 2	; 11
	PORTD|=(1<<LDAC);	
 7f2:	5a 9a       	sbi	0x0b, 2	; 11
									
				
				prepareResetDAC(chan);
				setDAC();			
				
				an_cnt++; // upper				
 7f4:	80 91 27 01 	lds	r24, 0x0127
 7f8:	90 91 28 01 	lds	r25, 0x0128
 7fc:	01 96       	adiw	r24, 0x01	; 1
 7fe:	90 93 28 01 	sts	0x0128, r25
 802:	80 93 27 01 	sts	0x0127, r24
				if(an_cnt>(BIG_STAT_N*5)) an_cnt=0; // lower
 806:	20 91 49 01 	lds	r18, 0x0149
 80a:	45 e0       	ldi	r20, 0x05	; 5
 80c:	24 9f       	mul	r18, r20
 80e:	90 01       	movw	r18, r0
 810:	11 24       	eor	r1, r1
 812:	28 17       	cp	r18, r24
 814:	39 07       	cpc	r19, r25
 816:	20 f4       	brcc	.+8      	; 0x820 <__vector_9+0x5d6>
 818:	10 92 28 01 	sts	0x0128, r1
 81c:	10 92 27 01 	sts	0x0127, r1
				
				an_cnt_fast = an_cnt%BIG_STAT_N;
 820:	60 91 49 01 	lds	r22, 0x0149
 824:	80 91 27 01 	lds	r24, 0x0127
 828:	90 91 28 01 	lds	r25, 0x0128
 82c:	70 e0       	ldi	r23, 0x00	; 0
 82e:	0e 94 81 05 	call	0xb02	; 0xb02 <__udivmodhi4>
 832:	90 93 2a 01 	sts	0x012A, r25
 836:	80 93 29 01 	sts	0x0129, r24
 83a:	37 c0       	rjmp	.+110    	; 0x8aa <__vector_9+0x660>
			}
			else if(event_cnt==4)
 83c:	84 30       	cpi	r24, 0x04	; 4
 83e:	91 05       	cpc	r25, r1
 840:	29 f4       	brne	.+10     	; 0x84c <__vector_9+0x602>
			{
				UDR0=STAT_dt_step;
 842:	80 91 22 01 	lds	r24, 0x0122
 846:	80 93 c6 00 	sts	0x00C6, r24
 84a:	a9 ce       	rjmp	.-686    	; 0x59e <__vector_9+0x354>
				prepareSetDAC(0, chan);
				setDAC();
			}
			else if(event_cnt==6)//start measure
 84c:	86 30       	cpi	r24, 0x06	; 6
 84e:	91 05       	cpc	r25, r1
 850:	81 f4       	brne	.+32     	; 0x872 <__vector_9+0x628>
			{
				prepareSetDAC(ref16, chan);
 852:	80 91 1d 01 	lds	r24, 0x011D
 856:	90 91 1e 01 	lds	r25, 0x011E
 85a:	60 91 26 01 	lds	r22, 0x0126
 85e:	0e 94 a3 00 	call	0x146	; 0x146 <prepareSetDAC>

	}
}

void setDAC(){
	PORTD&=~(1<<LDAC);
 862:	5a 98       	cbi	0x0b, 2	; 11
	PORTD|=(1<<LDAC);	
 864:	5a 9a       	sbi	0x0b, 2	; 11
			}
			else if(event_cnt==6)//start measure
			{
				prepareSetDAC(ref16, chan);
				setDAC();
				ADCSRA |= (1 << ADSC); 
 866:	80 91 7a 00 	lds	r24, 0x007A
 86a:	80 64       	ori	r24, 0x40	; 64
 86c:	80 93 7a 00 	sts	0x007A, r24
 870:	1c c0       	rjmp	.+56     	; 0x8aa <__vector_9+0x660>
				
			}
			else if(event_cnt==7)
 872:	87 30       	cpi	r24, 0x07	; 7
 874:	91 05       	cpc	r25, r1
 876:	99 f4       	brne	.+38     	; 0x89e <__vector_9+0x654>
			{
				prepareSetDAC(0, chan);
 878:	80 e0       	ldi	r24, 0x00	; 0
 87a:	90 e0       	ldi	r25, 0x00	; 0
 87c:	60 91 26 01 	lds	r22, 0x0126
 880:	0e 94 a3 00 	call	0x146	; 0x146 <prepareSetDAC>

	}
}

void setDAC(){
	PORTD&=~(1<<LDAC);
 884:	5a 98       	cbi	0x0b, 2	; 11
	PORTD|=(1<<LDAC);	
 886:	5a 9a       	sbi	0x0b, 2	; 11
			else if(event_cnt==7)
			{
				prepareSetDAC(0, chan);
				setDAC();
				
				ADCL_=ADCL;	
 888:	90 91 78 00 	lds	r25, 0x0078
 88c:	90 93 42 01 	sts	0x0142, r25
				ADCH_=ADCH;
 890:	80 91 79 00 	lds	r24, 0x0079
 894:	80 93 46 01 	sts	0x0146, r24
				UDR0=ADCL_;
 898:	90 93 c6 00 	sts	0x00C6, r25
 89c:	06 c0       	rjmp	.+12     	; 0x8aa <__vector_9+0x660>
			}
			else if(event_cnt==8)
 89e:	08 97       	sbiw	r24, 0x08	; 8
 8a0:	21 f4       	brne	.+8      	; 0x8aa <__vector_9+0x660>
			{
				UDR0=ADCH_;
 8a2:	80 91 46 01 	lds	r24, 0x0146
 8a6:	80 93 c6 00 	sts	0x00C6, r24
		}
		
		
		
		
		ctr=0;
 8aa:	10 92 3d 01 	sts	0x013D, r1
 8ae:	10 92 3c 01 	sts	0x013C, r1
		
		
		if(MD!=ONE_SHOT)
 8b2:	80 91 12 01 	lds	r24, 0x0112
 8b6:	20 91 38 01 	lds	r18, 0x0138
 8ba:	30 91 39 01 	lds	r19, 0x0139
 8be:	85 30       	cpi	r24, 0x05	; 5
 8c0:	89 f0       	breq	.+34     	; 0x8e4 <__vector_9+0x69a>
		{
		event_cnt++;
 8c2:	2f 5f       	subi	r18, 0xFF	; 255
 8c4:	3f 4f       	sbci	r19, 0xFF	; 255
 8c6:	30 93 39 01 	sts	0x0139, r19
 8ca:	20 93 38 01 	sts	0x0138, r18
		if(event_cnt>T)
 8ce:	80 91 41 01 	lds	r24, 0x0141
 8d2:	90 e0       	ldi	r25, 0x00	; 0
 8d4:	82 17       	cp	r24, r18
 8d6:	93 07       	cpc	r25, r19
 8d8:	74 f4       	brge	.+28     	; 0x8f6 <__vector_9+0x6ac>
			event_cnt=0;
 8da:	10 92 39 01 	sts	0x0139, r1
 8de:	10 92 38 01 	sts	0x0138, r1
 8e2:	09 c0       	rjmp	.+18     	; 0x8f6 <__vector_9+0x6ac>
		}
		else
		{
			if(event_cnt<30)
 8e4:	2e 31       	cpi	r18, 0x1E	; 30
 8e6:	31 05       	cpc	r19, r1
 8e8:	34 f4       	brge	.+12     	; 0x8f6 <__vector_9+0x6ac>
				event_cnt++;			
 8ea:	2f 5f       	subi	r18, 0xFF	; 255
 8ec:	3f 4f       	sbci	r19, 0xFF	; 255
 8ee:	30 93 39 01 	sts	0x0139, r19
 8f2:	20 93 38 01 	sts	0x0138, r18
		}
	}
	ctr++;
 8f6:	80 91 3c 01 	lds	r24, 0x013C
 8fa:	90 91 3d 01 	lds	r25, 0x013D
 8fe:	01 96       	adiw	r24, 0x01	; 1
 900:	90 93 3d 01 	sts	0x013D, r25
 904:	80 93 3c 01 	sts	0x013C, r24
}
 908:	ff 91       	pop	r31
 90a:	ef 91       	pop	r30
 90c:	bf 91       	pop	r27
 90e:	af 91       	pop	r26
 910:	9f 91       	pop	r25
 912:	8f 91       	pop	r24
 914:	7f 91       	pop	r23
 916:	6f 91       	pop	r22
 918:	5f 91       	pop	r21
 91a:	4f 91       	pop	r20
 91c:	3f 91       	pop	r19
 91e:	2f 91       	pop	r18
 920:	0f 90       	pop	r0
 922:	0f be       	out	0x3f, r0	; 63
 924:	0f 90       	pop	r0
 926:	1f 90       	pop	r1
 928:	18 95       	reti

0000092a <__vector_18>:

//прием команд от компьютера по UART в зависимости от режима
ISR(USART_RX_vect)
{
 92a:	1f 92       	push	r1
 92c:	0f 92       	push	r0
 92e:	0f b6       	in	r0, 0x3f	; 63
 930:	0f 92       	push	r0
 932:	11 24       	eor	r1, r1
 934:	2f 93       	push	r18
 936:	3f 93       	push	r19
 938:	4f 93       	push	r20
 93a:	5f 93       	push	r21
 93c:	6f 93       	push	r22
 93e:	7f 93       	push	r23
 940:	8f 93       	push	r24
 942:	9f 93       	push	r25
 944:	af 93       	push	r26
 946:	bf 93       	push	r27
 948:	ef 93       	push	r30
 94a:	ff 93       	push	r31
	switch(ptr)
 94c:	80 91 24 01 	lds	r24, 0x0124
 950:	84 30       	cpi	r24, 0x04	; 4
 952:	09 f4       	brne	.+2      	; 0x956 <__vector_18+0x2c>
 954:	69 c0       	rjmp	.+210    	; 0xa28 <__vector_18+0xfe>
 956:	85 30       	cpi	r24, 0x05	; 5
 958:	58 f4       	brcc	.+22     	; 0x970 <__vector_18+0x46>
 95a:	81 30       	cpi	r24, 0x01	; 1
 95c:	51 f1       	breq	.+84     	; 0x9b2 <__vector_18+0x88>
 95e:	81 30       	cpi	r24, 0x01	; 1
 960:	d0 f0       	brcs	.+52     	; 0x996 <__vector_18+0x6c>
 962:	82 30       	cpi	r24, 0x02	; 2
 964:	09 f4       	brne	.+2      	; 0x968 <__vector_18+0x3e>
 966:	42 c0       	rjmp	.+132    	; 0x9ec <__vector_18+0xc2>
 968:	83 30       	cpi	r24, 0x03	; 3
 96a:	09 f0       	breq	.+2      	; 0x96e <__vector_18+0x44>
 96c:	9e c0       	rjmp	.+316    	; 0xaaa <__vector_18+0x180>
 96e:	4f c0       	rjmp	.+158    	; 0xa0e <__vector_18+0xe4>
 970:	87 30       	cpi	r24, 0x07	; 7
 972:	09 f4       	brne	.+2      	; 0x976 <__vector_18+0x4c>
 974:	79 c0       	rjmp	.+242    	; 0xa68 <__vector_18+0x13e>
 976:	88 30       	cpi	r24, 0x08	; 8
 978:	38 f4       	brcc	.+14     	; 0x988 <__vector_18+0x5e>
 97a:	85 30       	cpi	r24, 0x05	; 5
 97c:	09 f4       	brne	.+2      	; 0x980 <__vector_18+0x56>
 97e:	6a c0       	rjmp	.+212    	; 0xa54 <__vector_18+0x12a>
 980:	86 30       	cpi	r24, 0x06	; 6
 982:	09 f0       	breq	.+2      	; 0x986 <__vector_18+0x5c>
 984:	92 c0       	rjmp	.+292    	; 0xaaa <__vector_18+0x180>
 986:	6b c0       	rjmp	.+214    	; 0xa5e <__vector_18+0x134>
 988:	88 30       	cpi	r24, 0x08	; 8
 98a:	09 f4       	brne	.+2      	; 0x98e <__vector_18+0x64>
 98c:	72 c0       	rjmp	.+228    	; 0xa72 <__vector_18+0x148>
 98e:	89 30       	cpi	r24, 0x09	; 9
 990:	09 f0       	breq	.+2      	; 0x994 <__vector_18+0x6a>
 992:	8b c0       	rjmp	.+278    	; 0xaaa <__vector_18+0x180>
 994:	73 c0       	rjmp	.+230    	; 0xa7c <__vector_18+0x152>
	{
		case 0:
		if(UDR0!=255)//байт 255 является синхронизирующим
 996:	80 91 c6 00 	lds	r24, 0x00C6
 99a:	8f 3f       	cpi	r24, 0xFF	; 255
 99c:	31 f0       	breq	.+12     	; 0x9aa <__vector_18+0x80>
		{
			sync=0;
 99e:	10 92 21 01 	sts	0x0121, r1
			ptr--;
			ptr%=7;
 9a2:	83 e0       	ldi	r24, 0x03	; 3
 9a4:	80 93 24 01 	sts	0x0124, r24
 9a8:	80 c0       	rjmp	.+256    	; 0xaaa <__vector_18+0x180>
		}
		else
			sync=1;
 9aa:	81 e0       	ldi	r24, 0x01	; 1
 9ac:	80 93 21 01 	sts	0x0121, r24
 9b0:	7c c0       	rjmp	.+248    	; 0xaaa <__vector_18+0x180>
		break;
		case 1:
		MD=UDR0;
 9b2:	20 91 c6 00 	lds	r18, 0x00C6
 9b6:	20 93 12 01 	sts	0x0112, r18
		if(MD==VAC)
 9ba:	21 30       	cpi	r18, 0x01	; 1
 9bc:	39 f4       	brne	.+14     	; 0x9cc <__vector_18+0xa2>
			time_step=4;//5
 9be:	84 e0       	ldi	r24, 0x04	; 4
 9c0:	90 e0       	ldi	r25, 0x00	; 0
 9c2:	90 93 0f 01 	sts	0x010F, r25
 9c6:	80 93 0e 01 	sts	0x010E, r24
 9ca:	6f c0       	rjmp	.+222    	; 0xaaa <__vector_18+0x180>
		else
			time_step=6;//4
 9cc:	86 e0       	ldi	r24, 0x06	; 6
 9ce:	90 e0       	ldi	r25, 0x00	; 0
 9d0:	90 93 0f 01 	sts	0x010F, r25
 9d4:	80 93 0e 01 	sts	0x010E, r24
		
		if(MD==PROGRAM)
 9d8:	22 30       	cpi	r18, 0x02	; 2
 9da:	09 f0       	breq	.+2      	; 0x9de <__vector_18+0xb4>
 9dc:	66 c0       	rjmp	.+204    	; 0xaaa <__vector_18+0x180>
		{
			//PROGRAM_start=1;
			PROGRAM_done=0;
 9de:	10 92 25 01 	sts	0x0125, r1
			prog_val=0;
 9e2:	10 92 1a 01 	sts	0x011A, r1
 9e6:	10 92 19 01 	sts	0x0119, r1
 9ea:	5f c0       	rjmp	.+190    	; 0xaaa <__vector_18+0x180>
		}
		break;
		case 2:		
		x16_simple = UDR0;
 9ec:	80 91 c6 00 	lds	r24, 0x00C6
 9f0:	90 e0       	ldi	r25, 0x00	; 0
 9f2:	90 93 44 01 	sts	0x0144, r25
 9f6:	80 93 43 01 	sts	0x0143, r24
		x16 = x16_simple<<4;
 9fa:	44 e0       	ldi	r20, 0x04	; 4
 9fc:	88 0f       	add	r24, r24
 9fe:	99 1f       	adc	r25, r25
 a00:	4a 95       	dec	r20
 a02:	e1 f7       	brne	.-8      	; 0x9fc <__vector_18+0xd2>
 a04:	90 93 1c 01 	sts	0x011C, r25
 a08:	80 93 1b 01 	sts	0x011B, r24
 a0c:	4e c0       	rjmp	.+156    	; 0xaaa <__vector_18+0x180>
		break;
		case 3:	
		ref16=UDR0<<4;
 a0e:	80 91 c6 00 	lds	r24, 0x00C6
 a12:	90 e0       	ldi	r25, 0x00	; 0
 a14:	34 e0       	ldi	r19, 0x04	; 4
 a16:	88 0f       	add	r24, r24
 a18:	99 1f       	adc	r25, r25
 a1a:	3a 95       	dec	r19
 a1c:	e1 f7       	brne	.-8      	; 0xa16 <__vector_18+0xec>
 a1e:	90 93 1e 01 	sts	0x011E, r25
 a22:	80 93 1d 01 	sts	0x011D, r24
 a26:	41 c0       	rjmp	.+130    	; 0xaaa <__vector_18+0x180>
		break;
		case 4:
		if(MD==PROGRAM)
 a28:	80 91 12 01 	lds	r24, 0x0112
 a2c:	82 30       	cpi	r24, 0x02	; 2
 a2e:	29 f4       	brne	.+10     	; 0xa3a <__vector_18+0x110>
			t1=UDR0;
 a30:	80 91 c6 00 	lds	r24, 0x00C6
 a34:	80 93 0a 01 	sts	0x010A, r24
 a38:	38 c0       	rjmp	.+112    	; 0xaaa <__vector_18+0x180>
		else
			unset16=UDR0<<4;
 a3a:	80 91 c6 00 	lds	r24, 0x00C6
 a3e:	90 e0       	ldi	r25, 0x00	; 0
 a40:	24 e0       	ldi	r18, 0x04	; 4
 a42:	88 0f       	add	r24, r24
 a44:	99 1f       	adc	r25, r25
 a46:	2a 95       	dec	r18
 a48:	e1 f7       	brne	.-8      	; 0xa42 <__vector_18+0x118>
 a4a:	90 93 20 01 	sts	0x0120, r25
 a4e:	80 93 1f 01 	sts	0x011F, r24
 a52:	2b c0       	rjmp	.+86     	; 0xaaa <__vector_18+0x180>
		break;		
		case 5:
		
		t2=UDR0;
 a54:	80 91 c6 00 	lds	r24, 0x00C6
 a58:	80 93 0b 01 	sts	0x010B, r24
 a5c:	26 c0       	rjmp	.+76     	; 0xaaa <__vector_18+0x180>
	
		
		break;	
		case 6:
		dT=UDR0;
 a5e:	80 91 c6 00 	lds	r24, 0x00C6
 a62:	80 93 3b 01 	sts	0x013B, r24
 a66:	21 c0       	rjmp	.+66     	; 0xaaa <__vector_18+0x180>
		break;
		case 7:
		T=UDR0;
 a68:	80 91 c6 00 	lds	r24, 0x00C6
 a6c:	80 93 41 01 	sts	0x0141, r24
 a70:	1c c0       	rjmp	.+56     	; 0xaaa <__vector_18+0x180>
		break;
		case 8:
		chan=UDR0;
 a72:	80 91 c6 00 	lds	r24, 0x00C6
 a76:	80 93 26 01 	sts	0x0126, r24
 a7a:	17 c0       	rjmp	.+46     	; 0xaaa <__vector_18+0x180>
		break;
		
		case 9:
			reverted[chan]=UDR0;
 a7c:	80 91 c6 00 	lds	r24, 0x00C6
 a80:	e0 91 26 01 	lds	r30, 0x0126
 a84:	f0 e0       	ldi	r31, 0x00	; 0
 a86:	e5 5d       	subi	r30, 0xD5	; 213
 a88:	fe 4f       	sbci	r31, 0xFE	; 254
 a8a:	80 83       	st	Z, r24
		
			event_cnt=0;			
 a8c:	10 92 39 01 	sts	0x0139, r1
 a90:	10 92 38 01 	sts	0x0138, r1
			
			if(MD==GATHER_MULT)
 a94:	80 91 12 01 	lds	r24, 0x0112
 a98:	83 30       	cpi	r24, 0x03	; 3
 a9a:	19 f4       	brne	.+6      	; 0xaa2 <__vector_18+0x178>
			{
			//	PORTD=0b00100000;
			//static int ff=1<<5;
			//if(x16>>4)
			gatherMult();
 a9c:	0e 94 7a 00 	call	0xf4	; 0xf4 <gatherMult>
 aa0:	04 c0       	rjmp	.+8      	; 0xaaa <__vector_18+0x180>
			//PORTD=(1<<5)^PORTD;
			//PORTD=ff;
			}
			else if(MD==SEPAR_MULT)	
 aa2:	84 30       	cpi	r24, 0x04	; 4
 aa4:	11 f4       	brne	.+4      	; 0xaaa <__vector_18+0x180>
			{
			separMult();	
 aa6:	0e 94 83 00 	call	0x106	; 0x106 <separMult>
		break;
	}
	

	
	dTt2=dT+t2;
 aaa:	80 91 0b 01 	lds	r24, 0x010B
 aae:	90 91 3b 01 	lds	r25, 0x013B
 ab2:	89 0f       	add	r24, r25
 ab4:	80 93 0c 01 	sts	0x010C, r24
	//UDR0=x16/16;
	ptr++;
	ptr%=10;
 ab8:	80 91 24 01 	lds	r24, 0x0124
 abc:	8f 5f       	subi	r24, 0xFF	; 255
 abe:	6a e0       	ldi	r22, 0x0A	; 10
 ac0:	0e 94 75 05 	call	0xaea	; 0xaea <__udivmodqi4>
 ac4:	90 93 24 01 	sts	0x0124, r25
 ac8:	ff 91       	pop	r31
 aca:	ef 91       	pop	r30
 acc:	bf 91       	pop	r27
 ace:	af 91       	pop	r26
 ad0:	9f 91       	pop	r25
 ad2:	8f 91       	pop	r24
 ad4:	7f 91       	pop	r23
 ad6:	6f 91       	pop	r22
 ad8:	5f 91       	pop	r21
 ada:	4f 91       	pop	r20
 adc:	3f 91       	pop	r19
 ade:	2f 91       	pop	r18
 ae0:	0f 90       	pop	r0
 ae2:	0f be       	out	0x3f, r0	; 63
 ae4:	0f 90       	pop	r0
 ae6:	1f 90       	pop	r1
 ae8:	18 95       	reti

00000aea <__udivmodqi4>:
 aea:	99 1b       	sub	r25, r25
 aec:	79 e0       	ldi	r23, 0x09	; 9
 aee:	04 c0       	rjmp	.+8      	; 0xaf8 <__udivmodqi4_ep>

00000af0 <__udivmodqi4_loop>:
 af0:	99 1f       	adc	r25, r25
 af2:	96 17       	cp	r25, r22
 af4:	08 f0       	brcs	.+2      	; 0xaf8 <__udivmodqi4_ep>
 af6:	96 1b       	sub	r25, r22

00000af8 <__udivmodqi4_ep>:
 af8:	88 1f       	adc	r24, r24
 afa:	7a 95       	dec	r23
 afc:	c9 f7       	brne	.-14     	; 0xaf0 <__udivmodqi4_loop>
 afe:	80 95       	com	r24
 b00:	08 95       	ret

00000b02 <__udivmodhi4>:
 b02:	aa 1b       	sub	r26, r26
 b04:	bb 1b       	sub	r27, r27
 b06:	51 e1       	ldi	r21, 0x11	; 17
 b08:	07 c0       	rjmp	.+14     	; 0xb18 <__udivmodhi4_ep>

00000b0a <__udivmodhi4_loop>:
 b0a:	aa 1f       	adc	r26, r26
 b0c:	bb 1f       	adc	r27, r27
 b0e:	a6 17       	cp	r26, r22
 b10:	b7 07       	cpc	r27, r23
 b12:	10 f0       	brcs	.+4      	; 0xb18 <__udivmodhi4_ep>
 b14:	a6 1b       	sub	r26, r22
 b16:	b7 0b       	sbc	r27, r23

00000b18 <__udivmodhi4_ep>:
 b18:	88 1f       	adc	r24, r24
 b1a:	99 1f       	adc	r25, r25
 b1c:	5a 95       	dec	r21
 b1e:	a9 f7       	brne	.-22     	; 0xb0a <__udivmodhi4_loop>
 b20:	80 95       	com	r24
 b22:	90 95       	com	r25
 b24:	bc 01       	movw	r22, r24
 b26:	cd 01       	movw	r24, r26
 b28:	08 95       	ret

00000b2a <_exit>:
 b2a:	f8 94       	cli

00000b2c <__stop_program>:
 b2c:	ff cf       	rjmp	.-2      	; 0xb2c <__stop_program>
