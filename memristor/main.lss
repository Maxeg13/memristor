
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000016  00800100  00000bdc  00000c70  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000bdc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000044  00800116  00800116  00000c86  2**0
                  ALLOC
  3 .debug_aranges 00000020  00000000  00000000  00000c86  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 000002d2  00000000  00000000  00000ca6  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000007e9  00000000  00000000  00000f78  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000001f4  00000000  00000000  00001761  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000a76  00000000  00000000  00001955  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000f0  00000000  00000000  000023cc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000002a1  00000000  00000000  000024bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000116  00000000  00000000  0000275d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 75 01 	jmp	0x2ea	; 0x2ea <__vector_9>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 e3 04 	jmp	0x9c6	; 0x9c6 <__vector_18>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ec ed       	ldi	r30, 0xDC	; 220
  7c:	fb e0       	ldi	r31, 0x0B	; 11
  7e:	02 c0       	rjmp	.+4      	; 0x84 <.do_copy_data_start>

00000080 <.do_copy_data_loop>:
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0

00000084 <.do_copy_data_start>:
  84:	a6 31       	cpi	r26, 0x16	; 22
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <.do_copy_data_loop>

0000008a <__do_clear_bss>:
  8a:	11 e0       	ldi	r17, 0x01	; 1
  8c:	a6 e1       	ldi	r26, 0x16	; 22
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	aa 35       	cpi	r26, 0x5A	; 90
  96:	b1 07       	cpc	r27, r17
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 1e 01 	call	0x23c	; 0x23c <main>
  9e:	0c 94 ec 05 	jmp	0xbd8	; 0xbd8 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <ADC_Init>:
uint8_t ADCH_, ADCL_, ADCH__, ADCL__;

//функция инициализаци АЦП
//АЦП используется для регистрации тока, проходящего через мемристор
void ADC_Init(){
 ADCSRA |= (1 << ADEN) // Включаем АЦП
  a6:	ea e7       	ldi	r30, 0x7A	; 122
  a8:	f0 e0       	ldi	r31, 0x00	; 0
  aa:	80 81       	ld	r24, Z
  ac:	83 68       	ori	r24, 0x83	; 131
  ae:	80 83       	st	Z, r24
 //ADCSRA&=~(1 << ADPS1)|(1 << ADPS0)|(1 << ADPS1);
 |(1 << ADPS1)|(1 << ADPS0)|(1 << ADPS1);    // устанавливаем предделитель преобразователя на 8
 ADMUX |= (0 << REFS1)|(1 << REFS0) //выставляем опорное напряжение, как внешний ИОН
  b0:	ec e7       	ldi	r30, 0x7C	; 124
  b2:	f0 e0       	ldi	r31, 0x00	; 0
  b4:	80 81       	ld	r24, Z
  b6:	80 64       	ori	r24, 0x40	; 64
  b8:	80 83       	st	Z, r24
 |(0 << MUX0)|(0 << MUX1)|(0 << MUX2)|(0 << MUX3); // снимать сигнал будем с  входа PC0 
}
  ba:	08 95       	ret

000000bc <timer_init>:

//функция инициализации таймера
// Таймер используется для формирования временной последовательности значений, формируемых с ЦАПа
void timer_init()
{
    TCCR2A = 0;        
  bc:	10 92 b0 00 	sts	0x00B0, r1
    TCCR2B = 0;
  c0:	e1 eb       	ldi	r30, 0xB1	; 177
  c2:	f0 e0       	ldi	r31, 0x00	; 0
  c4:	10 82       	st	Z, r1
    
    TCCR2B |= (1<<CS21) ;    
  c6:	80 81       	ld	r24, Z
  c8:	82 60       	ori	r24, 0x02	; 2
  ca:	80 83       	st	Z, r24
    TIMSK2 = (1 << TOIE2);
  cc:	81 e0       	ldi	r24, 0x01	; 1
  ce:	80 93 70 00 	sts	0x0070, r24
}
  d2:	08 95       	ret

000000d4 <uart_init>:

//функция инициализации UART-интерфейса
void uart_init(unsigned int ubrr)
{	
	UBRR0H = (unsigned char)(ubrr>>8);
  d4:	90 93 c5 00 	sts	0x00C5, r25
	UBRR0L = (unsigned char)ubrr;
  d8:	80 93 c4 00 	sts	0x00C4, r24
	UCSR0B = (1<<RXCIE0)|(1<<RXEN0)|(1<<TXEN0);
  dc:	88 e9       	ldi	r24, 0x98	; 152
  de:	80 93 c1 00 	sts	0x00C1, r24
	UCSR0C = (1<<USBS0)|(3<<UCSZ00);
  e2:	8e e0       	ldi	r24, 0x0E	; 14
  e4:	80 93 c2 00 	sts	0x00C2, r24
}
  e8:	08 95       	ret

000000ea <SPI_MasterInit>:

//функция инициализации SPI
void SPI_MasterInit()
{
	DDR_SPI = (1<<DD_MOSI)|(1<<DD_SCK)|(1<<SPI_SS);
  ea:	8c e2       	ldi	r24, 0x2C	; 44
  ec:	84 b9       	out	0x04, r24	; 4
	SPCR = (1<<SPE)|(0<<DORD)|(1<<MSTR)|(1<<CPOL)|(0<<CPHA);//|(1<<SPR1)|(0<<SPR0);
  ee:	88 e5       	ldi	r24, 0x58	; 88
  f0:	8c bd       	out	0x2c, r24	; 44
}
  f2:	08 95       	ret

000000f4 <gatherMult>:
}

			
void gatherMult()
{
	reset_BYTE(PORTD, 6);
  f4:	5e 98       	cbi	0x0b, 6	; 11
	reset_BYTE(PORTD, 7);				
  f6:	5f 98       	cbi	0x0b, 7	; 11
	reset_BYTE(PORTD, 5);
  f8:	5d 98       	cbi	0x0b, 5	; 11
	reset_BYTE(PORTC, 4);
  fa:	44 98       	cbi	0x08, 4	; 8
	
	
	SET_BYTE(PORTC, 1);				
  fc:	41 9a       	sbi	0x08, 1	; 8
	SET_BYTE(PORTB, 2);
  fe:	2a 9a       	sbi	0x05, 2	; 5
	SET_BYTE(PORTB, 1);
 100:	29 9a       	sbi	0x05, 1	; 5
	SET_BYTE(PORTB, 0);
 102:	28 9a       	sbi	0x05, 0	; 5
}
 104:	08 95       	ret

00000106 <separMult>:
void separMult()
{
	reset_BYTE(PORTB, 1);
 106:	29 98       	cbi	0x05, 1	; 5
	reset_BYTE(PORTB, 2);
 108:	2a 98       	cbi	0x05, 2	; 5
	reset_BYTE(PORTC, 1);
 10a:	41 98       	cbi	0x08, 1	; 8
	
	SET_BYTE(PORTC, 4);						
 10c:	44 9a       	sbi	0x08, 4	; 8
	SET_BYTE(PORTD, 6);
 10e:	5e 9a       	sbi	0x0b, 6	; 11
	SET_BYTE(PORTD, 7);
 110:	5f 9a       	sbi	0x0b, 7	; 11
	SET_BYTE(PORTB, 0);
 112:	28 9a       	sbi	0x05, 0	; 5
	SET_BYTE(PORTD, 5);
 114:	5d 9a       	sbi	0x0b, 5	; 11
}
 116:	08 95       	ret

00000118 <SPI_WriteByte>:



void SPI_WriteByte(uint8_t data)
{
   SPDR = data;
 118:	8e bd       	out	0x2e, r24	; 46
  while(!(SPSR & (1<<SPIF)));
 11a:	0d b4       	in	r0, 0x2d	; 45
 11c:	07 fe       	sbrs	r0, 7
 11e:	fd cf       	rjmp	.-6      	; 0x11a <SPI_WriteByte+0x2>
}
 120:	08 95       	ret

00000122 <prepareResetDAC>:

}


void prepareResetDAC(int8_t chan)//_____________bipolar!!! and <<4 larger
{
 122:	0f 93       	push	r16
 124:	1f 93       	push	r17
 126:	cf 93       	push	r28
 128:	df 93       	push	r29
	PORTD&=~(1<<SYNC_PINS[chan>>3]);
 12a:	9b b1       	in	r25, 0x0b	; 11
 12c:	28 2f       	mov	r18, r24
 12e:	25 95       	asr	r18
 130:	25 95       	asr	r18
 132:	25 95       	asr	r18
 134:	c2 2f       	mov	r28, r18
 136:	dd 27       	eor	r29, r29
 138:	c7 fd       	sbrc	r28, 7
 13a:	d0 95       	com	r29
 13c:	c0 50       	subi	r28, 0x00	; 0
 13e:	df 4f       	sbci	r29, 0xFF	; 255
 140:	01 e0       	ldi	r16, 0x01	; 1
 142:	10 e0       	ldi	r17, 0x00	; 0
 144:	98 01       	movw	r18, r16
 146:	08 80       	ld	r0, Y
 148:	02 c0       	rjmp	.+4      	; 0x14e <prepareResetDAC+0x2c>
 14a:	22 0f       	add	r18, r18
 14c:	33 1f       	adc	r19, r19
 14e:	0a 94       	dec	r0
 150:	e2 f7       	brpl	.-8      	; 0x14a <prepareResetDAC+0x28>
 152:	20 95       	com	r18
 154:	29 23       	and	r18, r25
 156:	2b b9       	out	0x0b, r18	; 11
	SPI_WriteByte(0b00001000|chan_addrs[chan%8]); // magic numbers, fuck
 158:	68 e0       	ldi	r22, 0x08	; 8
 15a:	0e 94 cb 05 	call	0xb96	; 0xb96 <__divmodqi4>
 15e:	e9 2f       	mov	r30, r25
 160:	ff 27       	eor	r31, r31
 162:	e7 fd       	sbrc	r30, 7
 164:	f0 95       	com	r31
 166:	eb 5f       	subi	r30, 0xFB	; 251
 168:	fe 4f       	sbci	r31, 0xFE	; 254
 16a:	80 81       	ld	r24, Z
 16c:	88 60       	ori	r24, 0x08	; 8
 16e:	90 e0       	ldi	r25, 0x00	; 0
 170:	0e 94 8c 00 	call	0x118	; 0x118 <SPI_WriteByte>
	SPI_WriteByte(0);		
 174:	80 e0       	ldi	r24, 0x00	; 0
 176:	90 e0       	ldi	r25, 0x00	; 0
 178:	0e 94 8c 00 	call	0x118	; 0x118 <SPI_WriteByte>
	PORTD|=(1<<SYNC_PINS[chan>>3]);
 17c:	8b b1       	in	r24, 0x0b	; 11
 17e:	08 80       	ld	r0, Y
 180:	02 c0       	rjmp	.+4      	; 0x186 <prepareResetDAC+0x64>
 182:	00 0f       	add	r16, r16
 184:	11 1f       	adc	r17, r17
 186:	0a 94       	dec	r0
 188:	e2 f7       	brpl	.-8      	; 0x182 <prepareResetDAC+0x60>
 18a:	80 2b       	or	r24, r16
 18c:	8b b9       	out	0x0b, r24	; 11
}
 18e:	df 91       	pop	r29
 190:	cf 91       	pop	r28
 192:	1f 91       	pop	r17
 194:	0f 91       	pop	r16
 196:	08 95       	ret

00000198 <prepareSetDAC>:

//функция управления ЦАПом 
// при этом, управление регистром LDAC должно использоваться 
//вне функции в перспепктиве создания многоканальной схемы
void prepareSetDAC(int16_t x,uint8_t chan)//_____________bipolar!!! and <<4 larger
{
 198:	cf 92       	push	r12
 19a:	df 92       	push	r13
 19c:	ef 92       	push	r14
 19e:	ff 92       	push	r15
 1a0:	0f 93       	push	r16
 1a2:	1f 93       	push	r17
 1a4:	e6 2f       	mov	r30, r22
	x=-x;
 1a6:	00 27       	eor	r16, r16
 1a8:	11 27       	eor	r17, r17
 1aa:	08 1b       	sub	r16, r24
 1ac:	19 0b       	sbc	r17, r25
	x+=2048;
 1ae:	00 50       	subi	r16, 0x00	; 0
 1b0:	18 4f       	sbci	r17, 0xF8	; 248
	PORTD&=~(1<<SYNC_PINS[chan>>3]);
 1b2:	2b b1       	in	r18, 0x0b	; 11
 1b4:	86 2f       	mov	r24, r22
 1b6:	86 95       	lsr	r24
 1b8:	86 95       	lsr	r24
 1ba:	86 95       	lsr	r24
 1bc:	30 e0       	ldi	r19, 0x00	; 0
 1be:	c3 2e       	mov	r12, r19
 1c0:	31 e0       	ldi	r19, 0x01	; 1
 1c2:	d3 2e       	mov	r13, r19
 1c4:	c8 0e       	add	r12, r24
 1c6:	d1 1c       	adc	r13, r1
 1c8:	91 e0       	ldi	r25, 0x01	; 1
 1ca:	e9 2e       	mov	r14, r25
 1cc:	f1 2c       	mov	r15, r1
 1ce:	c7 01       	movw	r24, r14
 1d0:	d6 01       	movw	r26, r12
 1d2:	0c 90       	ld	r0, X
 1d4:	02 c0       	rjmp	.+4      	; 0x1da <prepareSetDAC+0x42>
 1d6:	88 0f       	add	r24, r24
 1d8:	99 1f       	adc	r25, r25
 1da:	0a 94       	dec	r0
 1dc:	e2 f7       	brpl	.-8      	; 0x1d6 <prepareSetDAC+0x3e>
 1de:	80 95       	com	r24
 1e0:	82 23       	and	r24, r18
 1e2:	8b b9       	out	0x0b, r24	; 11
	send8 = (x >> 8);
	send8 &= 0b00001111;
	send8|= (chan_addrs[chan%8]);
 1e4:	81 2f       	mov	r24, r17
 1e6:	99 27       	eor	r25, r25
 1e8:	87 fd       	sbrc	r24, 7
 1ea:	9a 95       	dec	r25
 1ec:	8f 70       	andi	r24, 0x0F	; 15
 1ee:	f0 e0       	ldi	r31, 0x00	; 0
 1f0:	e7 70       	andi	r30, 0x07	; 7
 1f2:	f0 70       	andi	r31, 0x00	; 0
 1f4:	eb 5f       	subi	r30, 0xFB	; 251
 1f6:	fe 4f       	sbci	r31, 0xFE	; 254
 1f8:	20 81       	ld	r18, Z
 1fa:	82 2b       	or	r24, r18
 1fc:	80 93 4b 01 	sts	0x014B, r24
	SPI_WriteByte(send8);
 200:	90 e0       	ldi	r25, 0x00	; 0
 202:	0e 94 8c 00 	call	0x118	; 0x118 <SPI_WriteByte>
	send8=x;
 206:	00 93 4b 01 	sts	0x014B, r16
	SPI_WriteByte(send8);		
 20a:	80 2f       	mov	r24, r16
 20c:	90 e0       	ldi	r25, 0x00	; 0
 20e:	0e 94 8c 00 	call	0x118	; 0x118 <SPI_WriteByte>
	PORTD|=(1<<SYNC_PINS[chan>>3]);
 212:	8b b1       	in	r24, 0x0b	; 11
 214:	f6 01       	movw	r30, r12
 216:	00 80       	ld	r0, Z
 218:	02 c0       	rjmp	.+4      	; 0x21e <prepareSetDAC+0x86>
 21a:	ee 0c       	add	r14, r14
 21c:	ff 1c       	adc	r15, r15
 21e:	0a 94       	dec	r0
 220:	e2 f7       	brpl	.-8      	; 0x21a <prepareSetDAC+0x82>
 222:	8e 29       	or	r24, r14
 224:	8b b9       	out	0x0b, r24	; 11

}
 226:	1f 91       	pop	r17
 228:	0f 91       	pop	r16
 22a:	ff 90       	pop	r15
 22c:	ef 90       	pop	r14
 22e:	df 90       	pop	r13
 230:	cf 90       	pop	r12
 232:	08 95       	ret

00000234 <set_reverser>:
		else
			PORTB&=~(1<<4);
		break;

	}
}
 234:	08 95       	ret

00000236 <setDAC>:

void setDAC(){
	PORTD&=~(1<<LDAC);
 236:	5a 98       	cbi	0x0b, 2	; 11
	PORTD|=(1<<LDAC);	
 238:	5a 9a       	sbi	0x0b, 2	; 11
}
 23a:	08 95       	ret

0000023c <main>:


void main(void)
{
 23c:	1f 93       	push	r17
	BIG_STAT_N = STAT_N*STAT_CYCLE;
 23e:	80 91 04 01 	lds	r24, 0x0104
 242:	90 91 03 01 	lds	r25, 0x0103
 246:	89 9f       	mul	r24, r25
 248:	80 2d       	mov	r24, r0
 24a:	11 24       	eor	r1, r1
 24c:	80 93 52 01 	sts	0x0152, r24
 250:	e5 e0       	ldi	r30, 0x05	; 5
 252:	f1 e0       	ldi	r31, 0x01	; 1
	
	for (uint8_t i=0; i< 8;i++)
		chan_addrs[i]=chan_addrs[i]<<4;
 254:	80 81       	ld	r24, Z
 256:	82 95       	swap	r24
 258:	80 7f       	andi	r24, 0xF0	; 240
 25a:	81 93       	st	Z+, r24

void main(void)
{
	BIG_STAT_N = STAT_N*STAT_CYCLE;
	
	for (uint8_t i=0; i< 8;i++)
 25c:	81 e0       	ldi	r24, 0x01	; 1
 25e:	ed 30       	cpi	r30, 0x0D	; 13
 260:	f8 07       	cpc	r31, r24
 262:	c1 f7       	brne	.-16     	; 0x254 <main+0x18>
		chan_addrs[i]=chan_addrs[i]<<4;
	
	PORTC|=0b00000000;
 264:	88 b1       	in	r24, 0x08	; 8
 266:	88 b9       	out	0x08, r24	; 8
	DDRC= 0b00011110;
 268:	8e e1       	ldi	r24, 0x1E	; 30
 26a:	87 b9       	out	0x07, r24	; 7
	DDRD =0b11111111;
 26c:	8f ef       	ldi	r24, 0xFF	; 255
 26e:	8a b9       	out	0x0a, r24	; 10
	//PORTD|=0b00100000;	
	DDRB= 0b00011111;
 270:	8f e1       	ldi	r24, 0x1F	; 31
 272:	84 b9       	out	0x04, r24	; 4
	sei();
 274:	78 94       	sei
}

//функция инициализации SPI
void SPI_MasterInit()
{
	DDR_SPI = (1<<DD_MOSI)|(1<<DD_SCK)|(1<<SPI_SS);
 276:	8c e2       	ldi	r24, 0x2C	; 44
 278:	84 b9       	out	0x04, r24	; 4
	SPCR = (1<<SPE)|(0<<DORD)|(1<<MSTR)|(1<<CPOL)|(0<<CPHA);//|(1<<SPR1)|(0<<SPR0);
 27a:	88 e5       	ldi	r24, 0x58	; 88
 27c:	8c bd       	out	0x2c, r24	; 44

//функция инициализации таймера
// Таймер используется для формирования временной последовательности значений, формируемых с ЦАПа
void timer_init()
{
    TCCR2A = 0;        
 27e:	10 92 b0 00 	sts	0x00B0, r1
    TCCR2B = 0;
 282:	10 92 b1 00 	sts	0x00B1, r1
    
    TCCR2B |= (1<<CS21) ;    
 286:	80 91 b1 00 	lds	r24, 0x00B1
 28a:	82 60       	ori	r24, 0x02	; 2
 28c:	80 93 b1 00 	sts	0x00B1, r24
    TIMSK2 = (1 << TOIE2);
 290:	81 e0       	ldi	r24, 0x01	; 1
 292:	80 93 70 00 	sts	0x0070, r24
}

//функция инициализации UART-интерфейса
void uart_init(unsigned int ubrr)
{	
	UBRR0H = (unsigned char)(ubrr>>8);
 296:	10 92 c5 00 	sts	0x00C5, r1
	UBRR0L = (unsigned char)ubrr;
 29a:	83 e3       	ldi	r24, 0x33	; 51
 29c:	80 93 c4 00 	sts	0x00C4, r24
	UCSR0B = (1<<RXCIE0)|(1<<RXEN0)|(1<<TXEN0);
 2a0:	88 e9       	ldi	r24, 0x98	; 152
 2a2:	80 93 c1 00 	sts	0x00C1, r24
	UCSR0C = (1<<USBS0)|(3<<UCSZ00);
 2a6:	8e e0       	ldi	r24, 0x0E	; 14
 2a8:	80 93 c2 00 	sts	0x00C2, r24
uint8_t ADCH_, ADCL_, ADCH__, ADCL__;

//функция инициализаци АЦП
//АЦП используется для регистрации тока, проходящего через мемристор
void ADC_Init(){
 ADCSRA |= (1 << ADEN) // Включаем АЦП
 2ac:	80 91 7a 00 	lds	r24, 0x007A
 2b0:	83 68       	ori	r24, 0x83	; 131
 2b2:	80 93 7a 00 	sts	0x007A, r24
 //ADCSRA&=~(1 << ADPS1)|(1 << ADPS0)|(1 << ADPS1);
 |(1 << ADPS1)|(1 << ADPS0)|(1 << ADPS1);    // устанавливаем предделитель преобразователя на 8
 ADMUX |= (0 << REFS1)|(1 << REFS0) //выставляем опорное напряжение, как внешний ИОН
 2b6:	80 91 7c 00 	lds	r24, 0x007C
 2ba:	80 64       	ori	r24, 0x40	; 64
 2bc:	80 93 7c 00 	sts	0x007C, r24
    //DDRD = 0b000001100;	
	
	uart_init(BAUDRATE);
	ADC_Init();
	
	ADCSRA |= (1 << ADSC); 
 2c0:	80 91 7a 00 	lds	r24, 0x007A
 2c4:	80 64       	ori	r24, 0x40	; 64
 2c6:	80 93 7a 00 	sts	0x007A, r24
	ADCL;
 2ca:	80 91 78 00 	lds	r24, 0x0078
	ADCL;
 2ce:	80 91 78 00 	lds	r24, 0x0078
 2d2:	10 e0       	ldi	r17, 0x00	; 0
		//set_reverser(i,1);
	
	//set_reverser(0,0);
	for (int i=0;i<CHAN_N;i++)
	{
		prepareSetDAC(0,i);
 2d4:	80 e0       	ldi	r24, 0x00	; 0
 2d6:	90 e0       	ldi	r25, 0x00	; 0
 2d8:	61 2f       	mov	r22, r17
 2da:	0e 94 cc 00 	call	0x198	; 0x198 <prepareSetDAC>
 2de:	1f 5f       	subi	r17, 0xFF	; 255

	//for(int i=0;i<8;i++)
		//set_reverser(i,1);
	
	//set_reverser(0,0);
	for (int i=0;i<CHAN_N;i++)
 2e0:	11 31       	cpi	r17, 0x11	; 17
 2e2:	c1 f7       	brne	.-16     	; 0x2d4 <main+0x98>

	}
}

void setDAC(){
	PORTD&=~(1<<LDAC);
 2e4:	5a 98       	cbi	0x0b, 2	; 11
	PORTD|=(1<<LDAC);	
 2e6:	5a 9a       	sbi	0x0b, 2	; 11
 2e8:	ff cf       	rjmp	.-2      	; 0x2e8 <main+0xac>

000002ea <__vector_9>:
//главный цикл работы контроллера
//Здесь устанавливаются значения ЦАП и передаются данные на компьютер
//через UART-интерфейс
//данный участок кода повторяется при переполнении TIMER2
ISR(TIMER2_OVF_vect)
{
 2ea:	1f 92       	push	r1
 2ec:	0f 92       	push	r0
 2ee:	0f b6       	in	r0, 0x3f	; 63
 2f0:	0f 92       	push	r0
 2f2:	11 24       	eor	r1, r1
 2f4:	2f 93       	push	r18
 2f6:	3f 93       	push	r19
 2f8:	4f 93       	push	r20
 2fa:	5f 93       	push	r21
 2fc:	6f 93       	push	r22
 2fe:	7f 93       	push	r23
 300:	8f 93       	push	r24
 302:	9f 93       	push	r25
 304:	af 93       	push	r26
 306:	bf 93       	push	r27
 308:	ef 93       	push	r30
 30a:	ff 93       	push	r31
	if(ctr>time_step)
 30c:	20 91 48 01 	lds	r18, 0x0148
 310:	30 91 49 01 	lds	r19, 0x0149
 314:	80 91 11 01 	lds	r24, 0x0111
 318:	90 91 12 01 	lds	r25, 0x0112
 31c:	82 17       	cp	r24, r18
 31e:	93 07       	cpc	r25, r19
 320:	0c f0       	brlt	.+2      	; 0x324 <__vector_9+0x3a>
 322:	37 c3       	rjmp	.+1646   	; 0x992 <__stack+0x93>
	{
		if(MD==CUSTOM)
 324:	60 91 16 01 	lds	r22, 0x0116
 328:	66 23       	and	r22, r22
 32a:	09 f0       	breq	.+2      	; 0x32e <__vector_9+0x44>
 32c:	40 c0       	rjmp	.+128    	; 0x3ae <__vector_9+0xc4>
		{
			if(event_cnt==(1))
 32e:	20 91 44 01 	lds	r18, 0x0144
 332:	30 91 45 01 	lds	r19, 0x0145
 336:	21 30       	cpi	r18, 0x01	; 1
 338:	31 05       	cpc	r19, r1
 33a:	59 f4       	brne	.+22     	; 0x352 <__vector_9+0x68>
			{	
			ADCL_=ADCL;
 33c:	90 91 78 00 	lds	r25, 0x0078
 340:	90 93 4d 01 	sts	0x014D, r25
			ADCH_=ADCH;
 344:	80 91 79 00 	lds	r24, 0x0079
 348:	80 93 51 01 	sts	0x0151, r24
			UDR0=ADCL_;			
 34c:	90 93 c6 00 	sts	0x00C6, r25
 350:	0d c0       	rjmp	.+26     	; 0x36c <__vector_9+0x82>
			}
			
			if(event_cnt==(2))
 352:	22 30       	cpi	r18, 0x02	; 2
 354:	31 05       	cpc	r19, r1
 356:	29 f4       	brne	.+10     	; 0x362 <__vector_9+0x78>
			{	
			UDR0=ADCH_;				
 358:	80 91 51 01 	lds	r24, 0x0151
 35c:	80 93 c6 00 	sts	0x00C6, r24
 360:	05 c0       	rjmp	.+10     	; 0x36c <__vector_9+0x82>
			}
			
			
			
			if(event_cnt==0)
 362:	21 15       	cp	r18, r1
 364:	31 05       	cpc	r19, r1
 366:	11 f4       	brne	.+4      	; 0x36c <__vector_9+0x82>
			{
			UDR0=255;
 368:	8f ef       	ldi	r24, 0xFF	; 255
 36a:	bb c2       	rjmp	.+1398   	; 0x8e2 <__vector_9+0x5f8>
			prepareSetDAC(0,chan);
			//prepareSetDAC(x16,2);
			setDAC();
			}
			
			else if(event_cnt==t1)
 36c:	80 91 0d 01 	lds	r24, 0x010D
 370:	90 e0       	ldi	r25, 0x00	; 0
 372:	28 17       	cp	r18, r24
 374:	39 07       	cpc	r19, r25
 376:	09 f4       	brne	.+2      	; 0x37a <__vector_9+0x90>
 378:	e6 c2       	rjmp	.+1484   	; 0x946 <__stack+0x47>
			{
				
			//prepareSetDAC(0,chan);
			//setDAC();
			}
			else if(event_cnt==dT)
 37a:	80 91 47 01 	lds	r24, 0x0147
 37e:	90 e0       	ldi	r25, 0x00	; 0
 380:	28 17       	cp	r18, r24
 382:	39 07       	cpc	r19, r25
 384:	09 f4       	brne	.+2      	; 0x388 <__vector_9+0x9e>
 386:	df c2       	rjmp	.+1470   	; 0x946 <__stack+0x47>
			{		
			//prepareSetDAC(0,chan);
			//setDAC();
		
			}
			else if(event_cnt==(dT+1))
 388:	01 96       	adiw	r24, 0x01	; 1
 38a:	28 17       	cp	r18, r24
 38c:	39 07       	cpc	r19, r25
 38e:	09 f4       	brne	.+2      	; 0x392 <__vector_9+0xa8>
 390:	b8 c2       	rjmp	.+1392   	; 0x902 <__stack+0x3>
				ADCSRA |= (1 << ADSC); 

			else if(event_cnt==dTt2)
 392:	80 91 0f 01 	lds	r24, 0x010F
 396:	90 e0       	ldi	r25, 0x00	; 0
 398:	28 17       	cp	r18, r24
 39a:	39 07       	cpc	r19, r25
 39c:	09 f0       	breq	.+2      	; 0x3a0 <__vector_9+0xb6>
 39e:	d3 c2       	rjmp	.+1446   	; 0x946 <__stack+0x47>
			{
			if ( ( UCSR0A & (1<<UDRE0)) )			
 3a0:	80 91 c0 00 	lds	r24, 0x00C0
 3a4:	85 ff       	sbrs	r24, 5
 3a6:	cf c2       	rjmp	.+1438   	; 0x946 <__stack+0x47>
				UDR0=_adc;			
 3a8:	80 91 53 01 	lds	r24, 0x0153
 3ac:	ca c2       	rjmp	.+1428   	; 0x942 <__stack+0x43>
			//setDAC();

			}		

		}
		else if(MD==VAC)
 3ae:	61 30       	cpi	r22, 0x01	; 1
 3b0:	09 f0       	breq	.+2      	; 0x3b4 <__vector_9+0xca>
 3b2:	86 c0       	rjmp	.+268    	; 0x4c0 <__vector_9+0x1d6>
		{			
			static int i=0;
			i++;						
 3b4:	80 91 42 01 	lds	r24, 0x0142
 3b8:	90 91 43 01 	lds	r25, 0x0143
 3bc:	01 96       	adiw	r24, 0x01	; 1
 3be:	90 93 43 01 	sts	0x0143, r25
 3c2:	80 93 42 01 	sts	0x0142, r24
			
			switch(UDP_cnt)
 3c6:	80 91 59 01 	lds	r24, 0x0159
 3ca:	82 30       	cpi	r24, 0x02	; 2
 3cc:	41 f1       	breq	.+80     	; 0x41e <__vector_9+0x134>
 3ce:	83 30       	cpi	r24, 0x03	; 3
 3d0:	30 f4       	brcc	.+12     	; 0x3de <__vector_9+0xf4>
 3d2:	88 23       	and	r24, r24
 3d4:	51 f0       	breq	.+20     	; 0x3ea <__vector_9+0x100>
 3d6:	81 30       	cpi	r24, 0x01	; 1
 3d8:	09 f0       	breq	.+2      	; 0x3dc <__vector_9+0xf2>
 3da:	69 c0       	rjmp	.+210    	; 0x4ae <__vector_9+0x1c4>
 3dc:	0d c0       	rjmp	.+26     	; 0x3f8 <__vector_9+0x10e>
 3de:	83 30       	cpi	r24, 0x03	; 3
 3e0:	19 f1       	breq	.+70     	; 0x428 <__vector_9+0x13e>
 3e2:	84 30       	cpi	r24, 0x04	; 4
 3e4:	09 f0       	breq	.+2      	; 0x3e8 <__vector_9+0xfe>
 3e6:	63 c0       	rjmp	.+198    	; 0x4ae <__vector_9+0x1c4>
 3e8:	60 c0       	rjmp	.+192    	; 0x4aa <__vector_9+0x1c0>
			{
				case 0:					
				 ADCSRA |= (1 << ADSC); 
 3ea:	80 91 7a 00 	lds	r24, 0x007A
 3ee:	80 64       	ori	r24, 0x40	; 64
 3f0:	80 93 7a 00 	sts	0x007A, r24
				UDR0=255;
 3f4:	8f ef       	ldi	r24, 0xFF	; 255
 3f6:	15 c0       	rjmp	.+42     	; 0x422 <__vector_9+0x138>
				break;
				
				
				
				case 1:	
				ADCL__=	ADCL_;
 3f8:	80 91 4d 01 	lds	r24, 0x014D
 3fc:	80 93 4a 01 	sts	0x014A, r24
				ADCH__ = ADCH_;
 400:	80 91 51 01 	lds	r24, 0x0151
 404:	80 93 46 01 	sts	0x0146, r24
				ADCL_=ADCL;
 408:	90 91 78 00 	lds	r25, 0x0078
 40c:	90 93 4d 01 	sts	0x014D, r25
				ADCH_=ADCH;
 410:	80 91 79 00 	lds	r24, 0x0079
 414:	80 93 51 01 	sts	0x0151, r24
				
				UDR0=ADCL_;
 418:	90 93 c6 00 	sts	0x00C6, r25
 41c:	48 c0       	rjmp	.+144    	; 0x4ae <__vector_9+0x1c4>
				break;
				
				case 2:
				UDR0=ADCH_;
 41e:	80 91 51 01 	lds	r24, 0x0151
 422:	80 93 c6 00 	sts	0x00C6, r24
 426:	43 c0       	rjmp	.+134    	; 0x4ae <__vector_9+0x1c4>
				
				
				case 3:
								
					//VAC16_HH=VAC16_H;
					VAC16_H=VAC16;
 428:	20 91 17 01 	lds	r18, 0x0117
 42c:	30 91 18 01 	lds	r19, 0x0118
 430:	30 93 1a 01 	sts	0x011A, r19
 434:	20 93 19 01 	sts	0x0119, r18
					
					if(pos_phase)
 438:	80 91 10 01 	lds	r24, 0x0110
 43c:	88 23       	and	r24, r24
 43e:	81 f0       	breq	.+32     	; 0x460 <__vector_9+0x176>
					{
								//PORTC=0b00000010;
			//PORTB=0b00011111;
			//PORTD=0b11101100;
						VAC16+=32;
 440:	20 5e       	subi	r18, 0xE0	; 224
 442:	3f 4f       	sbci	r19, 0xFF	; 255
 444:	30 93 18 01 	sts	0x0118, r19
 448:	20 93 17 01 	sts	0x0117, r18
						if(VAC16>(ref16-1))
 44c:	80 91 21 01 	lds	r24, 0x0121
 450:	90 91 22 01 	lds	r25, 0x0122
 454:	28 17       	cp	r18, r24
 456:	39 07       	cpc	r19, r25
 458:	b4 f0       	brlt	.+44     	; 0x486 <__vector_9+0x19c>
						{
						pos_phase=0;				
 45a:	10 92 10 01 	sts	0x0110, r1
 45e:	13 c0       	rjmp	.+38     	; 0x486 <__vector_9+0x19c>
					else
					{
						//PORTB=0;
			//PORTC=0;
			//PORTD=0;
						VAC16-=32;
 460:	c9 01       	movw	r24, r18
 462:	80 97       	sbiw	r24, 0x20	; 32
 464:	90 93 18 01 	sts	0x0118, r25
 468:	80 93 17 01 	sts	0x0117, r24
						if(VAC16<(-x16+1))
 46c:	21 e0       	ldi	r18, 0x01	; 1
 46e:	30 e0       	ldi	r19, 0x00	; 0
 470:	40 91 1f 01 	lds	r20, 0x011F
 474:	50 91 20 01 	lds	r21, 0x0120
 478:	24 1b       	sub	r18, r20
 47a:	35 0b       	sbc	r19, r21
 47c:	82 17       	cp	r24, r18
 47e:	93 07       	cpc	r25, r19
 480:	14 f4       	brge	.+4      	; 0x486 <__vector_9+0x19c>
						{
						pos_phase=1;									
 482:	60 93 10 01 	sts	0x0110, r22
						}
					}	
					
					
					
					UDR0=VAC16>>4;
 486:	80 91 17 01 	lds	r24, 0x0117
 48a:	90 91 18 01 	lds	r25, 0x0118
 48e:	9c 01       	movw	r18, r24
 490:	44 e0       	ldi	r20, 0x04	; 4
 492:	35 95       	asr	r19
 494:	27 95       	ror	r18
 496:	4a 95       	dec	r20
 498:	e1 f7       	brne	.-8      	; 0x492 <__vector_9+0x1a8>
 49a:	20 93 c6 00 	sts	0x00C6, r18
					prepareSetDAC(VAC16,chan);
 49e:	60 91 2a 01 	lds	r22, 0x012A
 4a2:	0e 94 cc 00 	call	0x198	; 0x198 <prepareSetDAC>

	}
}

void setDAC(){
	PORTD&=~(1<<LDAC);
 4a6:	5a 98       	cbi	0x0b, 2	; 11
	PORTD|=(1<<LDAC);	
 4a8:	5a 9a       	sbi	0x0b, 2	; 11
					//prepareSetDAC(VAC16,5);
					//prepareSetDAC(VAC16,6);
					//prepareSetDAC(VAC16,7);				
					setDAC();
				case 4:
					UDR0=DUMMY_BYTE;	
 4aa:	10 92 c6 00 	sts	0x00C6, r1
				
			}
						
			
			UDP_cnt++;
			UDP_cnt%=5;
 4ae:	80 91 59 01 	lds	r24, 0x0159
 4b2:	8f 5f       	subi	r24, 0xFF	; 255
 4b4:	65 e0       	ldi	r22, 0x05	; 5
 4b6:	0e 94 bf 05 	call	0xb7e	; 0xb7e <__udivmodqi4>
 4ba:	90 93 59 01 	sts	0x0159, r25
 4be:	43 c2       	rjmp	.+1158   	; 0x946 <__stack+0x47>

			
		}
		else if(MD==PROGRAM)
 4c0:	62 30       	cpi	r22, 0x02	; 2
 4c2:	09 f0       	breq	.+2      	; 0x4c6 <__vector_9+0x1dc>
 4c4:	a5 c0       	rjmp	.+330    	; 0x610 <__vector_9+0x326>
		{
			T=16;
 4c6:	80 e1       	ldi	r24, 0x10	; 16
 4c8:	80 93 4c 01 	sts	0x014C, r24
			static uint16_t adc_h;
			static uint16_t need_set_limit = 0;
			static uint16_t need_set_optim = 0;
			
			//DACset proging val
			if(event_cnt==0)
 4cc:	80 91 44 01 	lds	r24, 0x0144
 4d0:	90 91 45 01 	lds	r25, 0x0145
 4d4:	00 97       	sbiw	r24, 0x00	; 0
 4d6:	09 f0       	breq	.+2      	; 0x4da <__vector_9+0x1f0>
 4d8:	40 c0       	rjmp	.+128    	; 0x55a <__vector_9+0x270>
			{
				UDR0=255;
 4da:	8f ef       	ldi	r24, 0xFF	; 255
 4dc:	80 93 c6 00 	sts	0x00C6, r24
				
				if(PROGRAM_done)
 4e0:	80 91 29 01 	lds	r24, 0x0129
 4e4:	88 23       	and	r24, r24
 4e6:	21 f0       	breq	.+8      	; 0x4f0 <__vector_9+0x206>
					proging_val=0;	
 4e8:	10 92 1e 01 	sts	0x011E, r1
 4ec:	10 92 1d 01 	sts	0x011D, r1
				
				prepareSetDAC(proging_val,chan);
 4f0:	80 91 1d 01 	lds	r24, 0x011D
 4f4:	90 91 1e 01 	lds	r25, 0x011E
 4f8:	60 91 2a 01 	lds	r22, 0x012A
 4fc:	0e 94 cc 00 	call	0x198	; 0x198 <prepareSetDAC>

	}
}

void setDAC(){
	PORTD&=~(1<<LDAC);
 500:	5a 98       	cbi	0x0b, 2	; 11
	PORTD|=(1<<LDAC);	
 502:	5a 9a       	sbi	0x0b, 2	; 11
					proging_val=0;	
				
				prepareSetDAC(proging_val,chan);
				setDAC();
							
				if(proging_val == -x16)
 504:	20 91 1d 01 	lds	r18, 0x011D
 508:	30 91 1e 01 	lds	r19, 0x011E
 50c:	80 91 1f 01 	lds	r24, 0x011F
 510:	90 91 20 01 	lds	r25, 0x0120
 514:	44 27       	eor	r20, r20
 516:	55 27       	eor	r21, r21
 518:	48 1b       	sub	r20, r24
 51a:	59 0b       	sbc	r21, r25
 51c:	24 17       	cp	r18, r20
 51e:	35 07       	cpc	r19, r21
 520:	29 f4       	brne	.+10     	; 0x52c <__vector_9+0x242>
				{
					proging_val=0;
 522:	10 92 1e 01 	sts	0x011E, r1
 526:	10 92 1d 01 	sts	0x011D, r1
 52a:	0d c2       	rjmp	.+1050   	; 0x946 <__stack+0x47>
				}					
				else
				if(proging_val>(t2<<4))
 52c:	80 91 0e 01 	lds	r24, 0x010E
 530:	90 e0       	ldi	r25, 0x00	; 0
 532:	b4 e0       	ldi	r27, 0x04	; 4
 534:	88 0f       	add	r24, r24
 536:	99 1f       	adc	r25, r25
 538:	ba 95       	dec	r27
 53a:	e1 f7       	brne	.-8      	; 0x534 <__vector_9+0x24a>
 53c:	82 17       	cp	r24, r18
 53e:	93 07       	cpc	r25, r19
 540:	2c f4       	brge	.+10     	; 0x54c <__vector_9+0x262>
				{
					proging_val= -x16;
 542:	50 93 1e 01 	sts	0x011E, r21
 546:	40 93 1d 01 	sts	0x011D, r20
 54a:	fd c1       	rjmp	.+1018   	; 0x946 <__stack+0x47>
				}	
				else
				{
					proging_val+=32;
 54c:	20 5e       	subi	r18, 0xE0	; 224
 54e:	3f 4f       	sbci	r19, 0xFF	; 255
 550:	30 93 1e 01 	sts	0x011E, r19
 554:	20 93 1d 01 	sts	0x011D, r18
 558:	f6 c1       	rjmp	.+1004   	; 0x946 <__stack+0x47>
				}	
		

			}			
			else 
			if(event_cnt==(1))
 55a:	81 30       	cpi	r24, 0x01	; 1
 55c:	91 05       	cpc	r25, r1
 55e:	19 f4       	brne	.+6      	; 0x566 <__vector_9+0x27c>
			{	
				UDR0=PROGRAM_done;
 560:	80 91 29 01 	lds	r24, 0x0129
 564:	ee c1       	rjmp	.+988    	; 0x942 <__stack+0x43>
			}else
			if(event_cnt==(2))//ADC GET 
 566:	82 30       	cpi	r24, 0x02	; 2
 568:	91 05       	cpc	r25, r1
 56a:	09 f4       	brne	.+2      	; 0x56e <__vector_9+0x284>
 56c:	db c1       	rjmp	.+950    	; 0x924 <__stack+0x25>
			}
			
			//ADC make CONTINUE
			//and possibly set PROGRAM_done
			else
			if(event_cnt==(3))
 56e:	83 30       	cpi	r24, 0x03	; 3
 570:	91 05       	cpc	r25, r1
 572:	d1 f5       	brne	.+116    	; 0x5e8 <__vector_9+0x2fe>
			{	
				
				UDR0=ADCH_;
 574:	80 91 51 01 	lds	r24, 0x0151
 578:	80 93 c6 00 	sts	0x00C6, r24
				
				_adc=(ADCL_|(ADCH_ <<8));
 57c:	38 2f       	mov	r19, r24
 57e:	20 e0       	ldi	r18, 0x00	; 0
 580:	80 91 4d 01 	lds	r24, 0x014D
 584:	90 e0       	ldi	r25, 0x00	; 0
 586:	82 2b       	or	r24, r18
 588:	93 2b       	or	r25, r19
 58a:	90 93 54 01 	sts	0x0154, r25
 58e:	80 93 53 01 	sts	0x0153, r24
				adc_h=((uint16_t)(512)-_adc);
 592:	40 e0       	ldi	r20, 0x00	; 0
 594:	52 e0       	ldi	r21, 0x02	; 2
 596:	48 1b       	sub	r20, r24
 598:	59 0b       	sbc	r21, r25
 59a:	50 93 41 01 	sts	0x0141, r21
 59e:	40 93 40 01 	sts	0x0140, r20
				
				//optomization
				if((adc_h)<(uint16_t)(t1-1))
 5a2:	80 91 0d 01 	lds	r24, 0x010D
 5a6:	28 2f       	mov	r18, r24
 5a8:	30 e0       	ldi	r19, 0x00	; 0
 5aa:	c9 01       	movw	r24, r18
 5ac:	01 97       	sbiw	r24, 0x01	; 1
 5ae:	48 17       	cp	r20, r24
 5b0:	59 07       	cpc	r21, r25
 5b2:	60 f4       	brcc	.+24     	; 0x5cc <__vector_9+0x2e2>
				{
					proging_val = -x16;  //set!
 5b4:	80 91 1f 01 	lds	r24, 0x011F
 5b8:	90 91 20 01 	lds	r25, 0x0120
 5bc:	90 95       	com	r25
 5be:	81 95       	neg	r24
 5c0:	9f 4f       	sbci	r25, 0xFF	; 255
 5c2:	90 93 1e 01 	sts	0x011E, r25
 5c6:	80 93 1d 01 	sts	0x011D, r24
 5ca:	bd c1       	rjmp	.+890    	; 0x946 <__stack+0x47>
				}
				else if((adc_h)<(uint16_t)(t1+2)) //done!
 5cc:	2e 5f       	subi	r18, 0xFE	; 254
 5ce:	3f 4f       	sbci	r19, 0xFF	; 255
 5d0:	42 17       	cp	r20, r18
 5d2:	53 07       	cpc	r21, r19
 5d4:	08 f0       	brcs	.+2      	; 0x5d8 <__vector_9+0x2ee>
 5d6:	b7 c1       	rjmp	.+878    	; 0x946 <__stack+0x47>
				{
					PROGRAM_done=1;
 5d8:	81 e0       	ldi	r24, 0x01	; 1
 5da:	80 93 29 01 	sts	0x0129, r24
					proging_val=0;
 5de:	10 92 1e 01 	sts	0x011E, r1
 5e2:	10 92 1d 01 	sts	0x011D, r1
 5e6:	07 c0       	rjmp	.+14     	; 0x5f6 <__vector_9+0x30c>
					prepareSetDAC(ref16,chan);
					setDAC();
				}
			}else		
			if(event_cnt==7)//t1
 5e8:	87 30       	cpi	r24, 0x07	; 7
 5ea:	91 05       	cpc	r25, r1
 5ec:	09 f4       	brne	.+2      	; 0x5f0 <__vector_9+0x306>
 5ee:	a0 c0       	rjmp	.+320    	; 0x730 <__vector_9+0x446>
			{
				prepareSetDAC(0,chan);
				setDAC();
			}
			else if(event_cnt==9)//dT
 5f0:	89 30       	cpi	r24, 0x09	; 9
 5f2:	91 05       	cpc	r25, r1
 5f4:	29 f4       	brne	.+10     	; 0x600 <__vector_9+0x316>
			{		
				prepareSetDAC(ref16,chan);
 5f6:	80 91 21 01 	lds	r24, 0x0121
 5fa:	90 91 22 01 	lds	r25, 0x0122
 5fe:	9a c0       	rjmp	.+308    	; 0x734 <__vector_9+0x44a>
				setDAC();
			}
			else if(event_cnt==(9+1))
 600:	8a 30       	cpi	r24, 0x0A	; 10
 602:	91 05       	cpc	r25, r1
 604:	09 f4       	brne	.+2      	; 0x608 <__vector_9+0x31e>
 606:	7d c1       	rjmp	.+762    	; 0x902 <__stack+0x3>
			{
				ADCSRA |= (1 << ADSC); 
			}		
			else if(event_cnt==14)//
 608:	0e 97       	sbiw	r24, 0x0e	; 14
 60a:	09 f0       	breq	.+2      	; 0x60e <__vector_9+0x324>
 60c:	9c c1       	rjmp	.+824    	; 0x946 <__stack+0x47>
 60e:	90 c0       	rjmp	.+288    	; 0x730 <__vector_9+0x446>
				
				prepareSetDAC(0,chan);
				setDAC();
			}
		}
		else if(MD == ONE_SHOT)
 610:	65 30       	cpi	r22, 0x05	; 5
 612:	09 f0       	breq	.+2      	; 0x616 <__vector_9+0x32c>
 614:	75 c0       	rjmp	.+234    	; 0x700 <__vector_9+0x416>
		{
			//готовим reset
				if(event_cnt==1){
 616:	80 91 44 01 	lds	r24, 0x0144
 61a:	90 91 45 01 	lds	r25, 0x0145
 61e:	81 30       	cpi	r24, 0x01	; 1
 620:	91 05       	cpc	r25, r1
 622:	b1 f1       	breq	.+108    	; 0x690 <__vector_9+0x3a6>
				separMult();
			}//resetting
			else if(event_cnt==2)
 624:	82 30       	cpi	r24, 0x02	; 2
 626:	91 05       	cpc	r25, r1
 628:	61 f4       	brne	.+24     	; 0x642 <__vector_9+0x358>
			{
				prepareSetDAC(reset16,CHAN_4);
 62a:	80 91 23 01 	lds	r24, 0x0123
 62e:	90 91 24 01 	lds	r25, 0x0124
 632:	63 e0       	ldi	r22, 0x03	; 3
 634:	0e 94 cc 00 	call	0x198	; 0x198 <prepareSetDAC>
				prepareSetDAC(reset16,CHAN_3);
 638:	80 91 23 01 	lds	r24, 0x0123
 63c:	90 91 24 01 	lds	r25, 0x0124
 640:	0a c0       	rjmp	.+20     	; 0x656 <__vector_9+0x36c>
				setDAC();
			}
			else if(event_cnt==3)
 642:	83 30       	cpi	r24, 0x03	; 3
 644:	91 05       	cpc	r25, r1
 646:	49 f4       	brne	.+18     	; 0x65a <__vector_9+0x370>
			{
				prepareSetDAC(0,CHAN_4);
 648:	80 e0       	ldi	r24, 0x00	; 0
 64a:	90 e0       	ldi	r25, 0x00	; 0
 64c:	63 e0       	ldi	r22, 0x03	; 3
 64e:	0e 94 cc 00 	call	0x198	; 0x198 <prepareSetDAC>
				prepareSetDAC(0,CHAN_3);
 652:	80 e0       	ldi	r24, 0x00	; 0
 654:	90 e0       	ldi	r25, 0x00	; 0
 656:	62 e0       	ldi	r22, 0x02	; 2
 658:	6f c0       	rjmp	.+222    	; 0x738 <__vector_9+0x44e>
				setDAC();
			}		//is reset		
			else if(event_cnt==4)
 65a:	84 30       	cpi	r24, 0x04	; 4
 65c:	91 05       	cpc	r25, r1
 65e:	19 f4       	brne	.+6      	; 0x666 <__vector_9+0x37c>
			{
				gatherMult();
 660:	0e 94 7a 00 	call	0xf4	; 0xf4 <gatherMult>
 664:	70 c1       	rjmp	.+736    	; 0x946 <__stack+0x47>
			}
			else if(event_cnt==5)
 666:	85 30       	cpi	r24, 0x05	; 5
 668:	91 05       	cpc	r25, r1
 66a:	29 f4       	brne	.+10     	; 0x676 <__vector_9+0x38c>
			{
				prepareSetDAC(x16,CHAN_4);				
 66c:	80 91 1f 01 	lds	r24, 0x011F
 670:	90 91 20 01 	lds	r25, 0x0120
 674:	05 c0       	rjmp	.+10     	; 0x680 <__vector_9+0x396>
				setDAC();
			}		
			else if(event_cnt==6)
 676:	86 30       	cpi	r24, 0x06	; 6
 678:	91 05       	cpc	r25, r1
 67a:	21 f4       	brne	.+8      	; 0x684 <__vector_9+0x39a>
			{
				prepareSetDAC(0,CHAN_4);				
 67c:	80 e0       	ldi	r24, 0x00	; 0
 67e:	90 e0       	ldi	r25, 0x00	; 0
 680:	63 e0       	ldi	r22, 0x03	; 3
 682:	5a c0       	rjmp	.+180    	; 0x738 <__vector_9+0x44e>
				setDAC();
			}	
			
			//пнули		
			//посмотрим, что вышло
			else if(event_cnt==7)
 684:	87 30       	cpi	r24, 0x07	; 7
 686:	91 05       	cpc	r25, r1
 688:	31 f4       	brne	.+12     	; 0x696 <__vector_9+0x3ac>
			{
				UDR0=255;//1
 68a:	8f ef       	ldi	r24, 0xFF	; 255
 68c:	80 93 c6 00 	sts	0x00C6, r24
				separMult();				
 690:	0e 94 83 00 	call	0x106	; 0x106 <separMult>
 694:	58 c1       	rjmp	.+688    	; 0x946 <__stack+0x47>
			}			
			else if(event_cnt==8)
 696:	88 30       	cpi	r24, 0x08	; 8
 698:	91 05       	cpc	r25, r1
 69a:	31 f4       	brne	.+12     	; 0x6a8 <__vector_9+0x3be>
			{
				prepareSetDAC(ref16,CHAN_4);
 69c:	80 91 21 01 	lds	r24, 0x0121
 6a0:	90 91 22 01 	lds	r25, 0x0122
 6a4:	63 e0       	ldi	r22, 0x03	; 3
 6a6:	29 c1       	rjmp	.+594    	; 0x8fa <__vector_9+0x610>
				setDAC();				
				ADCSRA |= (1 << ADSC); 
			}	
			else if(event_cnt==9)
 6a8:	89 30       	cpi	r24, 0x09	; 9
 6aa:	91 05       	cpc	r25, r1
 6ac:	09 f4       	brne	.+2      	; 0x6b0 <__vector_9+0x3c6>
 6ae:	3a c1       	rjmp	.+628    	; 0x924 <__stack+0x25>
				//prepareSetDAC(ref16,3);
				ADCL_=ADCL;	
				ADCH_=ADCH;
				UDR0=ADCL_;//2
			}
			else if(event_cnt==10)
 6b0:	8a 30       	cpi	r24, 0x0A	; 10
 6b2:	91 05       	cpc	r25, r1
 6b4:	29 f4       	brne	.+10     	; 0x6c0 <__vector_9+0x3d6>
			{
				UDR0=ADCH_; //3 1st chan
 6b6:	80 91 51 01 	lds	r24, 0x0151
 6ba:	80 93 c6 00 	sts	0x00C6, r24
 6be:	de cf       	rjmp	.-68     	; 0x67c <__vector_9+0x392>
				
				prepareSetDAC(0,CHAN_4);
				setDAC();
			}		
			//4й просмотрен
			else if(event_cnt==11)
 6c0:	8b 30       	cpi	r24, 0x0B	; 11
 6c2:	91 05       	cpc	r25, r1
 6c4:	31 f4       	brne	.+12     	; 0x6d2 <__vector_9+0x3e8>
			{				 
				prepareSetDAC(ref16,CHAN_3);
 6c6:	80 91 21 01 	lds	r24, 0x0121
 6ca:	90 91 22 01 	lds	r25, 0x0122
 6ce:	62 e0       	ldi	r22, 0x02	; 2
 6d0:	14 c1       	rjmp	.+552    	; 0x8fa <__vector_9+0x610>
				setDAC();
				
				ADCSRA |= (1 << ADSC); 
			}
			else if(event_cnt==12)
 6d2:	8c 30       	cpi	r24, 0x0C	; 12
 6d4:	91 05       	cpc	r25, r1
 6d6:	09 f4       	brne	.+2      	; 0x6da <__vector_9+0x3f0>
 6d8:	25 c1       	rjmp	.+586    	; 0x924 <__stack+0x25>
			{		
				ADCL_=ADCL;	
				ADCH_=ADCH;
				UDR0=ADCL_; //4
			}
			else if(event_cnt == 13)
 6da:	0d 97       	sbiw	r24, 0x0d	; 13
 6dc:	09 f0       	breq	.+2      	; 0x6e0 <__vector_9+0x3f6>
 6de:	33 c1       	rjmp	.+614    	; 0x946 <__stack+0x47>
			{
				UDR0=ADCH_; // 5
 6e0:	80 91 51 01 	lds	r24, 0x0151
 6e4:	80 93 c6 00 	sts	0x00C6, r24
				
				prepareSetDAC(0,CHAN_3);
 6e8:	80 e0       	ldi	r24, 0x00	; 0
 6ea:	90 e0       	ldi	r25, 0x00	; 0
 6ec:	62 e0       	ldi	r22, 0x02	; 2
 6ee:	0e 94 cc 00 	call	0x198	; 0x198 <prepareSetDAC>

	}
}

void setDAC(){
	PORTD&=~(1<<LDAC);
 6f2:	5a 98       	cbi	0x0b, 2	; 11
	PORTD|=(1<<LDAC);	
 6f4:	5a 9a       	sbi	0x0b, 2	; 11
			{
				UDR0=ADCH_; // 5
				
				prepareSetDAC(0,CHAN_3);
				setDAC();
				event_cnt=0;	
 6f6:	10 92 45 01 	sts	0x0145, r1
 6fa:	10 92 44 01 	sts	0x0144, r1
 6fe:	23 c1       	rjmp	.+582    	; 0x946 <__stack+0x47>
			}
			
		}
		
		
		else if(MD == ANALYZE)//5 by 5
 700:	66 30       	cpi	r22, 0x06	; 6
 702:	09 f0       	breq	.+2      	; 0x706 <__vector_9+0x41c>
 704:	20 c1       	rjmp	.+576    	; 0x946 <__stack+0x47>
		{
			//reset
			if(event_cnt==0)
 706:	80 91 44 01 	lds	r24, 0x0144
 70a:	90 91 45 01 	lds	r25, 0x0145
 70e:	00 97       	sbiw	r24, 0x00	; 0
 710:	61 f4       	brne	.+24     	; 0x72a <__vector_9+0x440>
			{
				prepareSetDAC(reset16, chan);
 712:	80 91 23 01 	lds	r24, 0x0123
 716:	90 91 24 01 	lds	r25, 0x0124
 71a:	60 91 2a 01 	lds	r22, 0x012A
 71e:	0e 94 cc 00 	call	0x198	; 0x198 <prepareSetDAC>

	}
}

void setDAC(){
	PORTD&=~(1<<LDAC);
 722:	5a 98       	cbi	0x0b, 2	; 11
	PORTD|=(1<<LDAC);	
 724:	5a 9a       	sbi	0x0b, 2	; 11
			//reset
			if(event_cnt==0)
			{
				prepareSetDAC(reset16, chan);
				setDAC();
				UDR0=255;
 726:	8f ef       	ldi	r24, 0xFF	; 255
 728:	0c c1       	rjmp	.+536    	; 0x942 <__stack+0x43>
			}
			else if(event_cnt==1)
 72a:	81 30       	cpi	r24, 0x01	; 1
 72c:	91 05       	cpc	r25, r1
 72e:	49 f4       	brne	.+18     	; 0x742 <__vector_9+0x458>
			{
				prepareSetDAC(0, chan);				
 730:	80 e0       	ldi	r24, 0x00	; 0
 732:	90 e0       	ldi	r25, 0x00	; 0
 734:	60 91 2a 01 	lds	r22, 0x012A
 738:	0e 94 cc 00 	call	0x198	; 0x198 <prepareSetDAC>

	}
}

void setDAC(){
	PORTD&=~(1<<LDAC);
 73c:	5a 98       	cbi	0x0b, 2	; 11
	PORTD|=(1<<LDAC);	
 73e:	5a 9a       	sbi	0x0b, 2	; 11
 740:	02 c1       	rjmp	.+516    	; 0x946 <__stack+0x47>
			{
				prepareSetDAC(0, chan);				
				setDAC();
			}
			//create set impulse
			else if(event_cnt==3)
 742:	83 30       	cpi	r24, 0x03	; 3
 744:	91 05       	cpc	r25, r1
 746:	09 f0       	breq	.+2      	; 0x74a <__vector_9+0x460>
 748:	c7 c0       	rjmp	.+398    	; 0x8d8 <__vector_9+0x5ee>
			{
				if(an_cnt<(BIG_STAT_N))
 74a:	40 91 2b 01 	lds	r20, 0x012B
 74e:	50 91 2c 01 	lds	r21, 0x012C
 752:	20 91 52 01 	lds	r18, 0x0152
 756:	82 2f       	mov	r24, r18
 758:	90 e0       	ldi	r25, 0x00	; 0
 75a:	48 17       	cp	r20, r24
 75c:	59 07       	cpc	r21, r25
 75e:	18 f4       	brcc	.+6      	; 0x766 <__vector_9+0x47c>
				{
					STAT_V_step=0;					 
 760:	10 92 27 01 	sts	0x0127, r1
 764:	23 c0       	rjmp	.+70     	; 0x7ac <__vector_9+0x4c2>
				}
				else if(an_cnt<(BIG_STAT_N*2))
 766:	82 2f       	mov	r24, r18
 768:	90 e0       	ldi	r25, 0x00	; 0
 76a:	9c 01       	movw	r18, r24
 76c:	22 0f       	add	r18, r18
 76e:	33 1f       	adc	r19, r19
 770:	42 17       	cp	r20, r18
 772:	53 07       	cpc	r21, r19
 774:	10 f4       	brcc	.+4      	; 0x77a <__vector_9+0x490>
				{
					STAT_V_step=1;
 776:	81 e0       	ldi	r24, 0x01	; 1
 778:	17 c0       	rjmp	.+46     	; 0x7a8 <__vector_9+0x4be>
				}
				else if(an_cnt<(BIG_STAT_N*3))
 77a:	28 0f       	add	r18, r24
 77c:	39 1f       	adc	r19, r25
 77e:	42 17       	cp	r20, r18
 780:	53 07       	cpc	r21, r19
 782:	10 f4       	brcc	.+4      	; 0x788 <__vector_9+0x49e>
				{
					STAT_V_step=2;
 784:	82 e0       	ldi	r24, 0x02	; 2
 786:	10 c0       	rjmp	.+32     	; 0x7a8 <__vector_9+0x4be>
				}
				else if(an_cnt<(BIG_STAT_N*4))
 788:	9c 01       	movw	r18, r24
 78a:	22 0f       	add	r18, r18
 78c:	33 1f       	adc	r19, r19
 78e:	22 0f       	add	r18, r18
 790:	33 1f       	adc	r19, r19
 792:	42 17       	cp	r20, r18
 794:	53 07       	cpc	r21, r19
 796:	10 f4       	brcc	.+4      	; 0x79c <__vector_9+0x4b2>
				{
					STAT_V_step=3;
 798:	83 e0       	ldi	r24, 0x03	; 3
 79a:	06 c0       	rjmp	.+12     	; 0x7a8 <__vector_9+0x4be>
				}
				else if(an_cnt<(BIG_STAT_N*5))
 79c:	28 0f       	add	r18, r24
 79e:	39 1f       	adc	r19, r25
 7a0:	42 17       	cp	r20, r18
 7a2:	53 07       	cpc	r21, r19
 7a4:	18 f4       	brcc	.+6      	; 0x7ac <__vector_9+0x4c2>
				{
					STAT_V_step=4;
 7a6:	84 e0       	ldi	r24, 0x04	; 4
 7a8:	80 93 27 01 	sts	0x0127, r24
				}////////////						
				//prepareSetDAC(x16, chan);
				UDR0=STAT_V_step;
 7ac:	80 91 27 01 	lds	r24, 0x0127
 7b0:	80 93 c6 00 	sts	0x00C6, r24
				x16_grad = (-(STAT_V_step+1)*8 )<<4;//16
 7b4:	90 e0       	ldi	r25, 0x00	; 0
 7b6:	80 95       	com	r24
 7b8:	90 95       	com	r25
 7ba:	96 95       	lsr	r25
 7bc:	98 2f       	mov	r25, r24
 7be:	88 27       	eor	r24, r24
 7c0:	97 95       	ror	r25
 7c2:	87 95       	ror	r24
 7c4:	90 93 56 01 	sts	0x0156, r25
 7c8:	80 93 55 01 	sts	0x0155, r24
				prepareSetDAC(x16_grad, chan);
 7cc:	60 91 2a 01 	lds	r22, 0x012A
 7d0:	0e 94 cc 00 	call	0x198	; 0x198 <prepareSetDAC>

	}
}

void setDAC(){
	PORTD&=~(1<<LDAC);
 7d4:	5a 98       	cbi	0x0b, 2	; 11
	PORTD|=(1<<LDAC);	
 7d6:	5a 9a       	sbi	0x0b, 2	; 11
				x16_grad = (-(STAT_V_step+1)*8 )<<4;//16
				prepareSetDAC(x16_grad, chan);
				setDAC();
				
				
				if(an_cnt_fast<(STAT_N))//20 us
 7d8:	40 91 2d 01 	lds	r20, 0x012D
 7dc:	50 91 2e 01 	lds	r21, 0x012E
 7e0:	80 91 03 01 	lds	r24, 0x0103
 7e4:	90 e0       	ldi	r25, 0x00	; 0
 7e6:	48 17       	cp	r20, r24
 7e8:	59 07       	cpc	r21, r25
 7ea:	18 f4       	brcc	.+6      	; 0x7f2 <__vector_9+0x508>
				{
					STAT_dt_step=0;									
 7ec:	10 92 26 01 	sts	0x0126, r1
 7f0:	49 c0       	rjmp	.+146    	; 0x884 <__vector_9+0x59a>
				}
				else if(an_cnt_fast<(STAT_N*2))//80 us
 7f2:	9c 01       	movw	r18, r24
 7f4:	22 0f       	add	r18, r18
 7f6:	33 1f       	adc	r19, r19
 7f8:	42 17       	cp	r20, r18
 7fa:	53 07       	cpc	r21, r19
 7fc:	60 f4       	brcc	.+24     	; 0x816 <__vector_9+0x52c>
				{
					STAT_dt_step=1;
 7fe:	81 e0       	ldi	r24, 0x01	; 1
 800:	80 93 26 01 	sts	0x0126, r24
 804:	80 e0       	ldi	r24, 0x00	; 0
 806:	90 e0       	ldi	r25, 0x00	; 0

	}
}

void setDAC(){
	PORTD&=~(1<<LDAC);
 808:	5a 98       	cbi	0x0b, 2	; 11
	PORTD|=(1<<LDAC);	
 80a:	5a 9a       	sbi	0x0b, 2	; 11
					STAT_dt_step=0;									
				}
				else if(an_cnt_fast<(STAT_N*2))//80 us
				{
					STAT_dt_step=1;
					for(int i=0;i<40;i++)//28
 80c:	01 96       	adiw	r24, 0x01	; 1
 80e:	88 32       	cpi	r24, 0x28	; 40
 810:	91 05       	cpc	r25, r1
 812:	d1 f7       	brne	.-12     	; 0x808 <__vector_9+0x51e>
 814:	37 c0       	rjmp	.+110    	; 0x884 <__vector_9+0x59a>
					{
					setDAC();
					}
				}
				else if(an_cnt_fast<(STAT_N*3))//220 us
 816:	28 0f       	add	r18, r24
 818:	39 1f       	adc	r19, r25
 81a:	42 17       	cp	r20, r18
 81c:	53 07       	cpc	r21, r19
 81e:	60 f4       	brcc	.+24     	; 0x838 <__vector_9+0x54e>
				{
					STAT_dt_step=2;
 820:	82 e0       	ldi	r24, 0x02	; 2
 822:	80 93 26 01 	sts	0x0126, r24
 826:	80 e0       	ldi	r24, 0x00	; 0
 828:	90 e0       	ldi	r25, 0x00	; 0

	}
}

void setDAC(){
	PORTD&=~(1<<LDAC);
 82a:	5a 98       	cbi	0x0b, 2	; 11
	PORTD|=(1<<LDAC);	
 82c:	5a 9a       	sbi	0x0b, 2	; 11
					}
				}
				else if(an_cnt_fast<(STAT_N*3))//220 us
				{
					STAT_dt_step=2;
					for(int i=0;i<160;i++)
 82e:	01 96       	adiw	r24, 0x01	; 1
 830:	80 3a       	cpi	r24, 0xA0	; 160
 832:	91 05       	cpc	r25, r1
 834:	d1 f7       	brne	.-12     	; 0x82a <__vector_9+0x540>
 836:	26 c0       	rjmp	.+76     	; 0x884 <__vector_9+0x59a>
					{
					setDAC();
					}
				}
				else if(an_cnt_fast<(STAT_N*4))//900 us
 838:	88 0f       	add	r24, r24
 83a:	99 1f       	adc	r25, r25
 83c:	88 0f       	add	r24, r24
 83e:	99 1f       	adc	r25, r25
 840:	48 17       	cp	r20, r24
 842:	59 07       	cpc	r21, r25
 844:	68 f4       	brcc	.+26     	; 0x860 <__vector_9+0x576>
				{
					STAT_dt_step=3;
 846:	83 e0       	ldi	r24, 0x03	; 3
 848:	80 93 26 01 	sts	0x0126, r24
 84c:	80 e0       	ldi	r24, 0x00	; 0
 84e:	90 e0       	ldi	r25, 0x00	; 0

	}
}

void setDAC(){
	PORTD&=~(1<<LDAC);
 850:	5a 98       	cbi	0x0b, 2	; 11
	PORTD|=(1<<LDAC);	
 852:	5a 9a       	sbi	0x0b, 2	; 11
					}
				}
				else if(an_cnt_fast<(STAT_N*4))//900 us
				{
					STAT_dt_step=3;
					for(int i=0;i<640;i++)
 854:	01 96       	adiw	r24, 0x01	; 1
 856:	22 e0       	ldi	r18, 0x02	; 2
 858:	80 38       	cpi	r24, 0x80	; 128
 85a:	92 07       	cpc	r25, r18
 85c:	c9 f7       	brne	.-14     	; 0x850 <__vector_9+0x566>
 85e:	12 c0       	rjmp	.+36     	; 0x884 <__vector_9+0x59a>
					{
					setDAC();
					}
				}
				else if(an_cnt_fast<(BIG_STAT_N))//3.5 ms
 860:	80 91 52 01 	lds	r24, 0x0152
 864:	90 e0       	ldi	r25, 0x00	; 0
 866:	48 17       	cp	r20, r24
 868:	59 07       	cpc	r21, r25
 86a:	60 f4       	brcc	.+24     	; 0x884 <__vector_9+0x59a>
				{
					STAT_dt_step=4;
 86c:	84 e0       	ldi	r24, 0x04	; 4
 86e:	80 93 26 01 	sts	0x0126, r24
 872:	80 e0       	ldi	r24, 0x00	; 0
 874:	90 e0       	ldi	r25, 0x00	; 0

	}
}

void setDAC(){
	PORTD&=~(1<<LDAC);
 876:	5a 98       	cbi	0x0b, 2	; 11
	PORTD|=(1<<LDAC);	
 878:	5a 9a       	sbi	0x0b, 2	; 11
					}
				}
				else if(an_cnt_fast<(BIG_STAT_N))//3.5 ms
				{
					STAT_dt_step=4;
					for(int i=0;i<2560;i++)
 87a:	01 96       	adiw	r24, 0x01	; 1
 87c:	2a e0       	ldi	r18, 0x0A	; 10
 87e:	80 30       	cpi	r24, 0x00	; 0
 880:	92 07       	cpc	r25, r18
 882:	c9 f7       	brne	.-14     	; 0x876 <__vector_9+0x58c>
					setDAC();
					}
				}////////////////
									
				
				prepareResetDAC(chan);
 884:	80 91 2a 01 	lds	r24, 0x012A
 888:	0e 94 91 00 	call	0x122	; 0x122 <prepareResetDAC>

	}
}

void setDAC(){
	PORTD&=~(1<<LDAC);
 88c:	5a 98       	cbi	0x0b, 2	; 11
	PORTD|=(1<<LDAC);	
 88e:	5a 9a       	sbi	0x0b, 2	; 11
									
				
				prepareResetDAC(chan);
				setDAC();			
				
				an_cnt++; // upper				
 890:	80 91 2b 01 	lds	r24, 0x012B
 894:	90 91 2c 01 	lds	r25, 0x012C
 898:	01 96       	adiw	r24, 0x01	; 1
 89a:	90 93 2c 01 	sts	0x012C, r25
 89e:	80 93 2b 01 	sts	0x012B, r24
				if(an_cnt>(BIG_STAT_N*5)) an_cnt=0; // lower
 8a2:	20 91 52 01 	lds	r18, 0x0152
 8a6:	45 e0       	ldi	r20, 0x05	; 5
 8a8:	24 9f       	mul	r18, r20
 8aa:	90 01       	movw	r18, r0
 8ac:	11 24       	eor	r1, r1
 8ae:	28 17       	cp	r18, r24
 8b0:	39 07       	cpc	r19, r25
 8b2:	20 f4       	brcc	.+8      	; 0x8bc <__vector_9+0x5d2>
 8b4:	10 92 2c 01 	sts	0x012C, r1
 8b8:	10 92 2b 01 	sts	0x012B, r1
				
				an_cnt_fast = an_cnt%BIG_STAT_N;
 8bc:	60 91 52 01 	lds	r22, 0x0152
 8c0:	80 91 2b 01 	lds	r24, 0x012B
 8c4:	90 91 2c 01 	lds	r25, 0x012C
 8c8:	70 e0       	ldi	r23, 0x00	; 0
 8ca:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <__udivmodhi4>
 8ce:	90 93 2e 01 	sts	0x012E, r25
 8d2:	80 93 2d 01 	sts	0x012D, r24
 8d6:	37 c0       	rjmp	.+110    	; 0x946 <__stack+0x47>
			}
			else if(event_cnt==4)
 8d8:	84 30       	cpi	r24, 0x04	; 4
 8da:	91 05       	cpc	r25, r1
 8dc:	29 f4       	brne	.+10     	; 0x8e8 <__vector_9+0x5fe>
			{
				UDR0=STAT_dt_step;
 8de:	80 91 26 01 	lds	r24, 0x0126
 8e2:	80 93 c6 00 	sts	0x00C6, r24
 8e6:	24 cf       	rjmp	.-440    	; 0x730 <__vector_9+0x446>
				prepareSetDAC(0, chan);
				setDAC();
			}
			else if(event_cnt==6)//start measure
 8e8:	86 30       	cpi	r24, 0x06	; 6
 8ea:	91 05       	cpc	r25, r1
 8ec:	81 f4       	brne	.+32     	; 0x90e <__stack+0xf>
			{
				prepareSetDAC(ref16, chan);
 8ee:	80 91 21 01 	lds	r24, 0x0121
 8f2:	90 91 22 01 	lds	r25, 0x0122
 8f6:	60 91 2a 01 	lds	r22, 0x012A
 8fa:	0e 94 cc 00 	call	0x198	; 0x198 <prepareSetDAC>

	}
}

void setDAC(){
	PORTD&=~(1<<LDAC);
 8fe:	5a 98       	cbi	0x0b, 2	; 11
	PORTD|=(1<<LDAC);	
 900:	5a 9a       	sbi	0x0b, 2	; 11
			}
			else if(event_cnt==6)//start measure
			{
				prepareSetDAC(ref16, chan);
				setDAC();
				ADCSRA |= (1 << ADSC); 
 902:	80 91 7a 00 	lds	r24, 0x007A
 906:	80 64       	ori	r24, 0x40	; 64
 908:	80 93 7a 00 	sts	0x007A, r24
 90c:	1c c0       	rjmp	.+56     	; 0x946 <__stack+0x47>
				
			}
			else if(event_cnt==7)
 90e:	87 30       	cpi	r24, 0x07	; 7
 910:	91 05       	cpc	r25, r1
 912:	99 f4       	brne	.+38     	; 0x93a <__stack+0x3b>
			{
				prepareSetDAC(0, chan);
 914:	80 e0       	ldi	r24, 0x00	; 0
 916:	90 e0       	ldi	r25, 0x00	; 0
 918:	60 91 2a 01 	lds	r22, 0x012A
 91c:	0e 94 cc 00 	call	0x198	; 0x198 <prepareSetDAC>

	}
}

void setDAC(){
	PORTD&=~(1<<LDAC);
 920:	5a 98       	cbi	0x0b, 2	; 11
	PORTD|=(1<<LDAC);	
 922:	5a 9a       	sbi	0x0b, 2	; 11
			else if(event_cnt==7)
			{
				prepareSetDAC(0, chan);
				setDAC();
				
				ADCL_=ADCL;	
 924:	90 91 78 00 	lds	r25, 0x0078
 928:	90 93 4d 01 	sts	0x014D, r25
				ADCH_=ADCH;
 92c:	80 91 79 00 	lds	r24, 0x0079
 930:	80 93 51 01 	sts	0x0151, r24
				UDR0=ADCL_;
 934:	90 93 c6 00 	sts	0x00C6, r25
 938:	06 c0       	rjmp	.+12     	; 0x946 <__stack+0x47>
			}
			else if(event_cnt==8)
 93a:	08 97       	sbiw	r24, 0x08	; 8
 93c:	21 f4       	brne	.+8      	; 0x946 <__stack+0x47>
			{
				UDR0=ADCH_;
 93e:	80 91 51 01 	lds	r24, 0x0151
 942:	80 93 c6 00 	sts	0x00C6, r24
		}
		
		
		
		
		ctr=0;
 946:	10 92 49 01 	sts	0x0149, r1
 94a:	10 92 48 01 	sts	0x0148, r1
		
		
		if(MD!=ONE_SHOT)
 94e:	80 91 16 01 	lds	r24, 0x0116
 952:	20 91 44 01 	lds	r18, 0x0144
 956:	30 91 45 01 	lds	r19, 0x0145
 95a:	85 30       	cpi	r24, 0x05	; 5
 95c:	89 f0       	breq	.+34     	; 0x980 <__stack+0x81>
		{
		event_cnt++;
 95e:	2f 5f       	subi	r18, 0xFF	; 255
 960:	3f 4f       	sbci	r19, 0xFF	; 255
 962:	30 93 45 01 	sts	0x0145, r19
 966:	20 93 44 01 	sts	0x0144, r18
		if(event_cnt>T)
 96a:	80 91 4c 01 	lds	r24, 0x014C
 96e:	90 e0       	ldi	r25, 0x00	; 0
 970:	82 17       	cp	r24, r18
 972:	93 07       	cpc	r25, r19
 974:	74 f4       	brge	.+28     	; 0x992 <__stack+0x93>
			event_cnt=0;
 976:	10 92 45 01 	sts	0x0145, r1
 97a:	10 92 44 01 	sts	0x0144, r1
 97e:	09 c0       	rjmp	.+18     	; 0x992 <__stack+0x93>
		}
		else
		{
			if(event_cnt<16)
 980:	20 31       	cpi	r18, 0x10	; 16
 982:	31 05       	cpc	r19, r1
 984:	34 f4       	brge	.+12     	; 0x992 <__stack+0x93>
				event_cnt++;			
 986:	2f 5f       	subi	r18, 0xFF	; 255
 988:	3f 4f       	sbci	r19, 0xFF	; 255
 98a:	30 93 45 01 	sts	0x0145, r19
 98e:	20 93 44 01 	sts	0x0144, r18
		}
	}
	ctr++;
 992:	80 91 48 01 	lds	r24, 0x0148
 996:	90 91 49 01 	lds	r25, 0x0149
 99a:	01 96       	adiw	r24, 0x01	; 1
 99c:	90 93 49 01 	sts	0x0149, r25
 9a0:	80 93 48 01 	sts	0x0148, r24
}
 9a4:	ff 91       	pop	r31
 9a6:	ef 91       	pop	r30
 9a8:	bf 91       	pop	r27
 9aa:	af 91       	pop	r26
 9ac:	9f 91       	pop	r25
 9ae:	8f 91       	pop	r24
 9b0:	7f 91       	pop	r23
 9b2:	6f 91       	pop	r22
 9b4:	5f 91       	pop	r21
 9b6:	4f 91       	pop	r20
 9b8:	3f 91       	pop	r19
 9ba:	2f 91       	pop	r18
 9bc:	0f 90       	pop	r0
 9be:	0f be       	out	0x3f, r0	; 63
 9c0:	0f 90       	pop	r0
 9c2:	1f 90       	pop	r1
 9c4:	18 95       	reti

000009c6 <__vector_18>:

//прием команд от компьютера по UART в зависимости от режима
ISR(USART_RX_vect)
{
 9c6:	1f 92       	push	r1
 9c8:	0f 92       	push	r0
 9ca:	0f b6       	in	r0, 0x3f	; 63
 9cc:	0f 92       	push	r0
 9ce:	11 24       	eor	r1, r1
 9d0:	2f 93       	push	r18
 9d2:	3f 93       	push	r19
 9d4:	4f 93       	push	r20
 9d6:	5f 93       	push	r21
 9d8:	6f 93       	push	r22
 9da:	7f 93       	push	r23
 9dc:	8f 93       	push	r24
 9de:	9f 93       	push	r25
 9e0:	af 93       	push	r26
 9e2:	bf 93       	push	r27
 9e4:	ef 93       	push	r30
 9e6:	ff 93       	push	r31
	switch(ptr)
 9e8:	80 91 28 01 	lds	r24, 0x0128
 9ec:	84 30       	cpi	r24, 0x04	; 4
 9ee:	09 f4       	brne	.+2      	; 0x9f2 <__vector_18+0x2c>
 9f0:	69 c0       	rjmp	.+210    	; 0xac4 <__vector_18+0xfe>
 9f2:	85 30       	cpi	r24, 0x05	; 5
 9f4:	58 f4       	brcc	.+22     	; 0xa0c <__vector_18+0x46>
 9f6:	81 30       	cpi	r24, 0x01	; 1
 9f8:	51 f1       	breq	.+84     	; 0xa4e <__vector_18+0x88>
 9fa:	81 30       	cpi	r24, 0x01	; 1
 9fc:	d0 f0       	brcs	.+52     	; 0xa32 <__vector_18+0x6c>
 9fe:	82 30       	cpi	r24, 0x02	; 2
 a00:	09 f4       	brne	.+2      	; 0xa04 <__vector_18+0x3e>
 a02:	42 c0       	rjmp	.+132    	; 0xa88 <__vector_18+0xc2>
 a04:	83 30       	cpi	r24, 0x03	; 3
 a06:	09 f0       	breq	.+2      	; 0xa0a <__vector_18+0x44>
 a08:	9a c0       	rjmp	.+308    	; 0xb3e <__vector_18+0x178>
 a0a:	4f c0       	rjmp	.+158    	; 0xaaa <__vector_18+0xe4>
 a0c:	87 30       	cpi	r24, 0x07	; 7
 a0e:	09 f4       	brne	.+2      	; 0xa12 <__vector_18+0x4c>
 a10:	79 c0       	rjmp	.+242    	; 0xb04 <__vector_18+0x13e>
 a12:	88 30       	cpi	r24, 0x08	; 8
 a14:	38 f4       	brcc	.+14     	; 0xa24 <__vector_18+0x5e>
 a16:	85 30       	cpi	r24, 0x05	; 5
 a18:	09 f4       	brne	.+2      	; 0xa1c <__vector_18+0x56>
 a1a:	6a c0       	rjmp	.+212    	; 0xaf0 <__vector_18+0x12a>
 a1c:	86 30       	cpi	r24, 0x06	; 6
 a1e:	09 f0       	breq	.+2      	; 0xa22 <__vector_18+0x5c>
 a20:	8e c0       	rjmp	.+284    	; 0xb3e <__vector_18+0x178>
 a22:	6b c0       	rjmp	.+214    	; 0xafa <__vector_18+0x134>
 a24:	88 30       	cpi	r24, 0x08	; 8
 a26:	09 f4       	brne	.+2      	; 0xa2a <__vector_18+0x64>
 a28:	72 c0       	rjmp	.+228    	; 0xb0e <__vector_18+0x148>
 a2a:	89 30       	cpi	r24, 0x09	; 9
 a2c:	09 f0       	breq	.+2      	; 0xa30 <__vector_18+0x6a>
 a2e:	87 c0       	rjmp	.+270    	; 0xb3e <__vector_18+0x178>
 a30:	73 c0       	rjmp	.+230    	; 0xb18 <__vector_18+0x152>
	{
		case 0:
		if(UDR0!=255)//байт 255 является синхронизирующим
 a32:	80 91 c6 00 	lds	r24, 0x00C6
 a36:	8f 3f       	cpi	r24, 0xFF	; 255
 a38:	31 f0       	breq	.+12     	; 0xa46 <__vector_18+0x80>
		{
			sync=0;
 a3a:	10 92 25 01 	sts	0x0125, r1
			ptr--;
			ptr%=7;
 a3e:	83 e0       	ldi	r24, 0x03	; 3
 a40:	80 93 28 01 	sts	0x0128, r24
 a44:	7c c0       	rjmp	.+248    	; 0xb3e <__vector_18+0x178>
		}
		else
			sync=1;
 a46:	81 e0       	ldi	r24, 0x01	; 1
 a48:	80 93 25 01 	sts	0x0125, r24
 a4c:	78 c0       	rjmp	.+240    	; 0xb3e <__vector_18+0x178>
		break;
		
		
		case 1:
		MD=UDR0;
 a4e:	20 91 c6 00 	lds	r18, 0x00C6
 a52:	20 93 16 01 	sts	0x0116, r18
		if(MD==VAC)
 a56:	21 30       	cpi	r18, 0x01	; 1
 a58:	39 f4       	brne	.+14     	; 0xa68 <__vector_18+0xa2>
			time_step=4;//5
 a5a:	84 e0       	ldi	r24, 0x04	; 4
 a5c:	90 e0       	ldi	r25, 0x00	; 0
 a5e:	90 93 12 01 	sts	0x0112, r25
 a62:	80 93 11 01 	sts	0x0111, r24
 a66:	6b c0       	rjmp	.+214    	; 0xb3e <__vector_18+0x178>
		else
			time_step=6;//4		
 a68:	86 e0       	ldi	r24, 0x06	; 6
 a6a:	90 e0       	ldi	r25, 0x00	; 0
 a6c:	90 93 12 01 	sts	0x0112, r25
 a70:	80 93 11 01 	sts	0x0111, r24
		if(MD==PROGRAM)
 a74:	22 30       	cpi	r18, 0x02	; 2
 a76:	09 f0       	breq	.+2      	; 0xa7a <__vector_18+0xb4>
 a78:	62 c0       	rjmp	.+196    	; 0xb3e <__vector_18+0x178>
		{
			//PROGRAM_start=1;
			PROGRAM_done=0;
 a7a:	10 92 29 01 	sts	0x0129, r1
			proging_val=0;
 a7e:	10 92 1e 01 	sts	0x011E, r1
 a82:	10 92 1d 01 	sts	0x011D, r1
 a86:	5b c0       	rjmp	.+182    	; 0xb3e <__vector_18+0x178>
		}
		break;
		
		
		case 2:		
		x16_simple = UDR0;
 a88:	80 91 c6 00 	lds	r24, 0x00C6
 a8c:	90 e0       	ldi	r25, 0x00	; 0
 a8e:	90 93 4f 01 	sts	0x014F, r25
 a92:	80 93 4e 01 	sts	0x014E, r24
		x16 = x16_simple<<4;
 a96:	74 e0       	ldi	r23, 0x04	; 4
 a98:	88 0f       	add	r24, r24
 a9a:	99 1f       	adc	r25, r25
 a9c:	7a 95       	dec	r23
 a9e:	e1 f7       	brne	.-8      	; 0xa98 <__vector_18+0xd2>
 aa0:	90 93 20 01 	sts	0x0120, r25
 aa4:	80 93 1f 01 	sts	0x011F, r24
 aa8:	4a c0       	rjmp	.+148    	; 0xb3e <__vector_18+0x178>
		break;
		case 3:	
		ref16=UDR0<<4;
 aaa:	80 91 c6 00 	lds	r24, 0x00C6
 aae:	90 e0       	ldi	r25, 0x00	; 0
 ab0:	64 e0       	ldi	r22, 0x04	; 4
 ab2:	88 0f       	add	r24, r24
 ab4:	99 1f       	adc	r25, r25
 ab6:	6a 95       	dec	r22
 ab8:	e1 f7       	brne	.-8      	; 0xab2 <__vector_18+0xec>
 aba:	90 93 22 01 	sts	0x0122, r25
 abe:	80 93 21 01 	sts	0x0121, r24
 ac2:	3d c0       	rjmp	.+122    	; 0xb3e <__vector_18+0x178>
		break;
		case 4:
		if(MD==PROGRAM)
 ac4:	80 91 16 01 	lds	r24, 0x0116
 ac8:	82 30       	cpi	r24, 0x02	; 2
 aca:	29 f4       	brne	.+10     	; 0xad6 <__vector_18+0x110>
			t1=UDR0;
 acc:	80 91 c6 00 	lds	r24, 0x00C6
 ad0:	80 93 0d 01 	sts	0x010D, r24
 ad4:	34 c0       	rjmp	.+104    	; 0xb3e <__vector_18+0x178>
		else
			reset16=UDR0<<4;
 ad6:	80 91 c6 00 	lds	r24, 0x00C6
 ada:	90 e0       	ldi	r25, 0x00	; 0
 adc:	54 e0       	ldi	r21, 0x04	; 4
 ade:	88 0f       	add	r24, r24
 ae0:	99 1f       	adc	r25, r25
 ae2:	5a 95       	dec	r21
 ae4:	e1 f7       	brne	.-8      	; 0xade <__vector_18+0x118>
 ae6:	90 93 24 01 	sts	0x0124, r25
 aea:	80 93 23 01 	sts	0x0123, r24
 aee:	27 c0       	rjmp	.+78     	; 0xb3e <__vector_18+0x178>
		break;		
		case 5:
		
		t2=UDR0;
 af0:	80 91 c6 00 	lds	r24, 0x00C6
 af4:	80 93 0e 01 	sts	0x010E, r24
 af8:	22 c0       	rjmp	.+68     	; 0xb3e <__vector_18+0x178>
	
		
		break;	
		case 6:
		dT=UDR0;
 afa:	80 91 c6 00 	lds	r24, 0x00C6
 afe:	80 93 47 01 	sts	0x0147, r24
 b02:	1d c0       	rjmp	.+58     	; 0xb3e <__vector_18+0x178>
		break;
		case 7:
		T=UDR0;
 b04:	80 91 c6 00 	lds	r24, 0x00C6
 b08:	80 93 4c 01 	sts	0x014C, r24
 b0c:	18 c0       	rjmp	.+48     	; 0xb3e <__vector_18+0x178>
		break;
		case 8:
		chan=UDR0;
 b0e:	80 91 c6 00 	lds	r24, 0x00C6
 b12:	80 93 2a 01 	sts	0x012A, r24
 b16:	13 c0       	rjmp	.+38     	; 0xb3e <__vector_18+0x178>
		break;
		
		case 9:
			reverted[chan]=UDR0;
 b18:	80 91 c6 00 	lds	r24, 0x00C6
 b1c:	e0 91 2a 01 	lds	r30, 0x012A
 b20:	f0 e0       	ldi	r31, 0x00	; 0
 b22:	e1 5d       	subi	r30, 0xD1	; 209
 b24:	fe 4f       	sbci	r31, 0xFE	; 254
 b26:	80 83       	st	Z, r24
		
			//event_cnt=0;			
			
			if(MD==GATHER_MULT)
 b28:	80 91 16 01 	lds	r24, 0x0116
 b2c:	83 30       	cpi	r24, 0x03	; 3
 b2e:	19 f4       	brne	.+6      	; 0xb36 <__vector_18+0x170>
			{
			//	PORTD=0b00100000;
			//static int ff=1<<5;
			//if(x16>>4)
			gatherMult();
 b30:	0e 94 7a 00 	call	0xf4	; 0xf4 <gatherMult>
 b34:	04 c0       	rjmp	.+8      	; 0xb3e <__vector_18+0x178>
			//PORTD=(1<<5)^PORTD;
			//PORTD=ff;
			}
			else if(MD==SEPAR_MULT)	
 b36:	84 30       	cpi	r24, 0x04	; 4
 b38:	11 f4       	brne	.+4      	; 0xb3e <__vector_18+0x178>
			{
			separMult();	
 b3a:	0e 94 83 00 	call	0x106	; 0x106 <separMult>
		break;
	}
	

	
	dTt2=dT+t2;
 b3e:	80 91 0e 01 	lds	r24, 0x010E
 b42:	90 91 47 01 	lds	r25, 0x0147
 b46:	89 0f       	add	r24, r25
 b48:	80 93 0f 01 	sts	0x010F, r24
	//UDR0=x16/16;
	ptr++;
	ptr%=10;
 b4c:	80 91 28 01 	lds	r24, 0x0128
 b50:	8f 5f       	subi	r24, 0xFF	; 255
 b52:	6a e0       	ldi	r22, 0x0A	; 10
 b54:	0e 94 bf 05 	call	0xb7e	; 0xb7e <__udivmodqi4>
 b58:	90 93 28 01 	sts	0x0128, r25
 b5c:	ff 91       	pop	r31
 b5e:	ef 91       	pop	r30
 b60:	bf 91       	pop	r27
 b62:	af 91       	pop	r26
 b64:	9f 91       	pop	r25
 b66:	8f 91       	pop	r24
 b68:	7f 91       	pop	r23
 b6a:	6f 91       	pop	r22
 b6c:	5f 91       	pop	r21
 b6e:	4f 91       	pop	r20
 b70:	3f 91       	pop	r19
 b72:	2f 91       	pop	r18
 b74:	0f 90       	pop	r0
 b76:	0f be       	out	0x3f, r0	; 63
 b78:	0f 90       	pop	r0
 b7a:	1f 90       	pop	r1
 b7c:	18 95       	reti

00000b7e <__udivmodqi4>:
 b7e:	99 1b       	sub	r25, r25
 b80:	79 e0       	ldi	r23, 0x09	; 9
 b82:	04 c0       	rjmp	.+8      	; 0xb8c <__udivmodqi4_ep>

00000b84 <__udivmodqi4_loop>:
 b84:	99 1f       	adc	r25, r25
 b86:	96 17       	cp	r25, r22
 b88:	08 f0       	brcs	.+2      	; 0xb8c <__udivmodqi4_ep>
 b8a:	96 1b       	sub	r25, r22

00000b8c <__udivmodqi4_ep>:
 b8c:	88 1f       	adc	r24, r24
 b8e:	7a 95       	dec	r23
 b90:	c9 f7       	brne	.-14     	; 0xb84 <__udivmodqi4_loop>
 b92:	80 95       	com	r24
 b94:	08 95       	ret

00000b96 <__divmodqi4>:
 b96:	87 fb       	bst	r24, 7
 b98:	08 2e       	mov	r0, r24
 b9a:	06 26       	eor	r0, r22
 b9c:	87 fd       	sbrc	r24, 7
 b9e:	81 95       	neg	r24
 ba0:	67 fd       	sbrc	r22, 7
 ba2:	61 95       	neg	r22
 ba4:	ec df       	rcall	.-40     	; 0xb7e <__udivmodqi4>
 ba6:	0e f4       	brtc	.+2      	; 0xbaa <__divmodqi4_1>
 ba8:	91 95       	neg	r25

00000baa <__divmodqi4_1>:
 baa:	07 fc       	sbrc	r0, 7
 bac:	81 95       	neg	r24

00000bae <__divmodqi4_exit>:
 bae:	08 95       	ret

00000bb0 <__udivmodhi4>:
 bb0:	aa 1b       	sub	r26, r26
 bb2:	bb 1b       	sub	r27, r27
 bb4:	51 e1       	ldi	r21, 0x11	; 17
 bb6:	07 c0       	rjmp	.+14     	; 0xbc6 <__udivmodhi4_ep>

00000bb8 <__udivmodhi4_loop>:
 bb8:	aa 1f       	adc	r26, r26
 bba:	bb 1f       	adc	r27, r27
 bbc:	a6 17       	cp	r26, r22
 bbe:	b7 07       	cpc	r27, r23
 bc0:	10 f0       	brcs	.+4      	; 0xbc6 <__udivmodhi4_ep>
 bc2:	a6 1b       	sub	r26, r22
 bc4:	b7 0b       	sbc	r27, r23

00000bc6 <__udivmodhi4_ep>:
 bc6:	88 1f       	adc	r24, r24
 bc8:	99 1f       	adc	r25, r25
 bca:	5a 95       	dec	r21
 bcc:	a9 f7       	brne	.-22     	; 0xbb8 <__udivmodhi4_loop>
 bce:	80 95       	com	r24
 bd0:	90 95       	com	r25
 bd2:	bc 01       	movw	r22, r24
 bd4:	cd 01       	movw	r24, r26
 bd6:	08 95       	ret

00000bd8 <_exit>:
 bd8:	f8 94       	cli

00000bda <__stop_program>:
 bda:	ff cf       	rjmp	.-2      	; 0xbda <__stop_program>
