
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000008  00800100  000004d8  0000056c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000004d8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000001b  00800108  00800108  00000574  2**0
                  ALLOC
  3 .debug_aranges 00000020  00000000  00000000  00000574  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000173  00000000  00000000  00000594  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000386  00000000  00000000  00000707  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000136  00000000  00000000  00000a8d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000413  00000000  00000000  00000bc3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000a0  00000000  00000000  00000fd8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000152  00000000  00000000  00001078  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000040  00000000  00000000  000011ca  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 c8 00 	jmp	0x190	; 0x190 <__vector_9>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 dc 01 	jmp	0x3b8	; 0x3b8 <__vector_18>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e8 ed       	ldi	r30, 0xD8	; 216
  7c:	f4 e0       	ldi	r31, 0x04	; 4
  7e:	02 c0       	rjmp	.+4      	; 0x84 <.do_copy_data_start>

00000080 <.do_copy_data_loop>:
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0

00000084 <.do_copy_data_start>:
  84:	a8 30       	cpi	r26, 0x08	; 8
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <.do_copy_data_loop>

0000008a <__do_clear_bss>:
  8a:	11 e0       	ldi	r17, 0x01	; 1
  8c:	a8 e0       	ldi	r26, 0x08	; 8
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a3 32       	cpi	r26, 0x23	; 35
  96:	b1 07       	cpc	r27, r17
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 96 00 	call	0x12c	; 0x12c <main>
  9e:	0c 94 6a 02 	jmp	0x4d4	; 0x4d4 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <ADC_Init>:
int ADC_cnt;
uint8_t accum_cnt;

/* Функция инициализация АЦП */
void ADC_Init(){
 ADCSRA |= (1 << ADEN) // Включаем АЦП
  a6:	ea e7       	ldi	r30, 0x7A	; 122
  a8:	f0 e0       	ldi	r31, 0x00	; 0
  aa:	80 81       	ld	r24, Z
  ac:	83 68       	ori	r24, 0x83	; 131
  ae:	80 83       	st	Z, r24
 |(1 << ADPS1)|(1 << ADPS0)|(1 << ADPS1);    // устанавливаем предделитель преобразователя на 8
 ADMUX |= (0 << REFS1)|(1 << REFS0) //выставляем опорное напряжение, как внешний ИОН
  b0:	ec e7       	ldi	r30, 0x7C	; 124
  b2:	f0 e0       	ldi	r31, 0x00	; 0
  b4:	80 81       	ld	r24, Z
  b6:	80 64       	ori	r24, 0x40	; 64
  b8:	80 83       	st	Z, r24
 |(0 << MUX0)|(0 << MUX1)|(0 << MUX2)|(0 << MUX3); // снимать сигнал будем с  входа PC0 
}
  ba:	08 95       	ret

000000bc <timer_init>:


void timer_init()
{
    TCCR2A = 0;        // set entire TCCR1A register to 0
  bc:	10 92 b0 00 	sts	0x00B0, r1
    TCCR2B = 0;
  c0:	e1 eb       	ldi	r30, 0xB1	; 177
  c2:	f0 e0       	ldi	r31, 0x00	; 0
  c4:	10 82       	st	Z, r1
    //    TCCR2B |= (1<<CS22) | (1<<CS20); // PRESCALER 1024
    TCCR2B |= (1<<CS21) ;
  c6:	80 81       	ld	r24, Z
  c8:	82 60       	ori	r24, 0x02	; 2
  ca:	80 83       	st	Z, r24
    // enable Timer1 overflow interrupt:
    TIMSK2 = (1 << TOIE2);
  cc:	81 e0       	ldi	r24, 0x01	; 1
  ce:	80 93 70 00 	sts	0x0070, r24
}
  d2:	08 95       	ret

000000d4 <uart_init>:

void uart_init(unsigned int ubrr)
{
	
	UBRR0H = (unsigned char)(ubrr>>8);
  d4:	90 93 c5 00 	sts	0x00C5, r25
	UBRR0L = (unsigned char)ubrr;
  d8:	80 93 c4 00 	sts	0x00C4, r24
	/*Enable receiver and transmitter */
	UCSR0B = (1<<RXCIE0)|(1<<RXEN0)|(1<<TXEN0);
  dc:	88 e9       	ldi	r24, 0x98	; 152
  de:	80 93 c1 00 	sts	0x00C1, r24
	/* Set frame format: 8data, 2stop bit */
	UCSR0C = (1<<USBS0)|(3<<UCSZ00);
  e2:	8e e0       	ldi	r24, 0x0E	; 14
  e4:	80 93 c2 00 	sts	0x00C2, r24
}
  e8:	08 95       	ret

000000ea <SPI_MasterInit>:

void SPI_MasterInit()
{
/* Set MOSI and SCK output, all others input */
	DDR_SPI = (1<<DD_MOSI)|(1<<DD_SCK)|(1<<SPI_SS);
  ea:	8c e2       	ldi	r24, 0x2C	; 44
  ec:	84 b9       	out	0x04, r24	; 4
/* Enable SPI, Master, set clock rate fck/16 */
	SPCR = (1<<SPE)|(0<<DORD)|(1<<MSTR)|(1<<CPOL)|(0<<CPHA)|(1<<SPR1)|(0<<SPR0);
  ee:	8a e5       	ldi	r24, 0x5A	; 90
  f0:	8c bd       	out	0x2c, r24	; 44
	//SPSR = (0<<SPI2X);
}
  f2:	08 95       	ret

000000f4 <SPI_WriteByte>:


void SPI_WriteByte(uint8_t data)
{
   //PORTB &= ~(1<<SPI_SS);
   SPDR = data;
  f4:	8e bd       	out	0x2e, r24	; 46
  while(!(SPSR & (1<<SPIF)));
  f6:	0d b4       	in	r0, 0x2d	; 45
  f8:	07 fe       	sbrs	r0, 7
  fa:	fd cf       	rjmp	.-6      	; 0xf6 <SPI_WriteByte+0x2>
   //PORTB |= (1<<SPI_SS); 
}
  fc:	08 95       	ret

000000fe <setDAC>:
	SPCR = (1<<SPE)|(0<<DORD)|(1<<MSTR)|(1<<CPOL)|(0<<CPHA)|(1<<SPR1)|(0<<SPR0);
	//SPSR = (0<<SPI2X);
}
//(1<<RXCIE0)|
void setDAC(uint16_t x)
{
  fe:	0f 93       	push	r16
 100:	1f 93       	push	r17
	x+=2048;
 102:	8c 01       	movw	r16, r24
 104:	00 50       	subi	r16, 0x00	; 0
 106:	18 4f       	sbci	r17, 0xF8	; 248
	PORTD&=~(1<<SYNC);
 108:	5b 98       	cbi	0x0b, 3	; 11
	//_delay_us(30);  
	send8 = (x >> 8);
	send8 &= 0b00001111;
 10a:	81 2f       	mov	r24, r17
 10c:	8f 70       	andi	r24, 0x0F	; 15
 10e:	80 93 18 01 	sts	0x0118, r24
	SPI_WriteByte(send8);
 112:	90 e0       	ldi	r25, 0x00	; 0
 114:	0e 94 7a 00 	call	0xf4	; 0xf4 <SPI_WriteByte>
	send8=x;
 118:	00 93 18 01 	sts	0x0118, r16
	//send8&=0b11111111;
	SPI_WriteByte(send8);		
 11c:	80 2f       	mov	r24, r16
 11e:	90 e0       	ldi	r25, 0x00	; 0
 120:	0e 94 7a 00 	call	0xf4	; 0xf4 <SPI_WriteByte>
	PORTD|=(1<<SYNC);
 124:	5b 9a       	sbi	0x0b, 3	; 11

}
 126:	1f 91       	pop	r17
 128:	0f 91       	pop	r16
 12a:	08 95       	ret

0000012c <main>:
   //PORTB |= (1<<SPI_SS); 
}

void main(void)
{
	sei();
 12c:	78 94       	sei
}

void SPI_MasterInit()
{
/* Set MOSI and SCK output, all others input */
	DDR_SPI = (1<<DD_MOSI)|(1<<DD_SCK)|(1<<SPI_SS);
 12e:	8c e2       	ldi	r24, 0x2C	; 44
 130:	84 b9       	out	0x04, r24	; 4
/* Enable SPI, Master, set clock rate fck/16 */
	SPCR = (1<<SPE)|(0<<DORD)|(1<<MSTR)|(1<<CPOL)|(0<<CPHA)|(1<<SPR1)|(0<<SPR0);
 132:	8a e5       	ldi	r24, 0x5A	; 90
 134:	8c bd       	out	0x2c, r24	; 44
}


void timer_init()
{
    TCCR2A = 0;        // set entire TCCR1A register to 0
 136:	10 92 b0 00 	sts	0x00B0, r1
    TCCR2B = 0;
 13a:	10 92 b1 00 	sts	0x00B1, r1
    //    TCCR2B |= (1<<CS22) | (1<<CS20); // PRESCALER 1024
    TCCR2B |= (1<<CS21) ;
 13e:	80 91 b1 00 	lds	r24, 0x00B1
 142:	82 60       	ori	r24, 0x02	; 2
 144:	80 93 b1 00 	sts	0x00B1, r24
    // enable Timer1 overflow interrupt:
    TIMSK2 = (1 << TOIE2);
 148:	81 e0       	ldi	r24, 0x01	; 1
 14a:	80 93 70 00 	sts	0x0070, r24
void main(void)
{
	sei();
	SPI_MasterInit();
	timer_init();
    DDRD = 0b000001100;	
 14e:	8c e0       	ldi	r24, 0x0C	; 12
 150:	8a b9       	out	0x0a, r24	; 10
}

void uart_init(unsigned int ubrr)
{
	
	UBRR0H = (unsigned char)(ubrr>>8);
 152:	10 92 c5 00 	sts	0x00C5, r1
	UBRR0L = (unsigned char)ubrr;
 156:	83 e3       	ldi	r24, 0x33	; 51
 158:	80 93 c4 00 	sts	0x00C4, r24
	/*Enable receiver and transmitter */
	UCSR0B = (1<<RXCIE0)|(1<<RXEN0)|(1<<TXEN0);
 15c:	88 e9       	ldi	r24, 0x98	; 152
 15e:	80 93 c1 00 	sts	0x00C1, r24
	/* Set frame format: 8data, 2stop bit */
	UCSR0C = (1<<USBS0)|(3<<UCSZ00);
 162:	8e e0       	ldi	r24, 0x0E	; 14
 164:	80 93 c2 00 	sts	0x00C2, r24
int ADC_cnt;
uint8_t accum_cnt;

/* Функция инициализация АЦП */
void ADC_Init(){
 ADCSRA |= (1 << ADEN) // Включаем АЦП
 168:	80 91 7a 00 	lds	r24, 0x007A
 16c:	83 68       	ori	r24, 0x83	; 131
 16e:	80 93 7a 00 	sts	0x007A, r24
 |(1 << ADPS1)|(1 << ADPS0)|(1 << ADPS1);    // устанавливаем предделитель преобразователя на 8
 ADMUX |= (0 << REFS1)|(1 << REFS0) //выставляем опорное напряжение, как внешний ИОН
 172:	80 91 7c 00 	lds	r24, 0x007C
 176:	80 64       	ori	r24, 0x40	; 64
 178:	80 93 7c 00 	sts	0x007C, r24
	timer_init();
    DDRD = 0b000001100;	
	uart_init(BAUDRATE);
	ADC_Init();
	
			ADCSRA |= (1 << ADSC); 
 17c:	80 91 7a 00 	lds	r24, 0x007A
 180:	80 64       	ori	r24, 0x40	; 64
 182:	80 93 7a 00 	sts	0x007A, r24
	ADCL;
 186:	80 91 78 00 	lds	r24, 0x0078
	ADCL;
 18a:	80 91 78 00 	lds	r24, 0x0078
 18e:	ff cf       	rjmp	.-2      	; 0x18e <main+0x62>

00000190 <__vector_9>:
    }

}

ISR(TIMER2_OVF_vect)
{
 190:	1f 92       	push	r1
 192:	0f 92       	push	r0
 194:	0f b6       	in	r0, 0x3f	; 63
 196:	0f 92       	push	r0
 198:	11 24       	eor	r1, r1
 19a:	2f 93       	push	r18
 19c:	3f 93       	push	r19
 19e:	4f 93       	push	r20
 1a0:	5f 93       	push	r21
 1a2:	6f 93       	push	r22
 1a4:	7f 93       	push	r23
 1a6:	8f 93       	push	r24
 1a8:	9f 93       	push	r25
 1aa:	af 93       	push	r26
 1ac:	bf 93       	push	r27
 1ae:	ef 93       	push	r30
 1b0:	ff 93       	push	r31

	if(ctr>time_step)
 1b2:	20 91 13 01 	lds	r18, 0x0113
 1b6:	30 91 14 01 	lds	r19, 0x0114
 1ba:	80 91 03 01 	lds	r24, 0x0103
 1be:	90 91 04 01 	lds	r25, 0x0104
 1c2:	82 17       	cp	r24, r18
 1c4:	93 07       	cpc	r25, r19
 1c6:	0c f0       	brlt	.+2      	; 0x1ca <__vector_9+0x3a>
 1c8:	dd c0       	rjmp	.+442    	; 0x384 <__vector_9+0x1f4>
	{
		if(!VAC_mode)
 1ca:	80 91 0e 01 	lds	r24, 0x010E
 1ce:	88 23       	and	r24, r24
 1d0:	09 f0       	breq	.+2      	; 0x1d4 <__vector_9+0x44>
 1d2:	6a c0       	rjmp	.+212    	; 0x2a8 <__vector_9+0x118>
			//{

			//	ADC_cnt=0;
			//}
			//x16++;
			if(event_ctr==(1))//ADC!!!
 1d4:	40 91 20 01 	lds	r20, 0x0120
 1d8:	50 91 21 01 	lds	r21, 0x0121
 1dc:	41 30       	cpi	r20, 0x01	; 1
 1de:	51 05       	cpc	r21, r1
 1e0:	b1 f4       	brne	.+44     	; 0x20e <__vector_9+0x7e>
			{	
			ADC_on=1;			
 1e2:	81 e0       	ldi	r24, 0x01	; 1
 1e4:	80 93 11 01 	sts	0x0111, r24
			_adc=((ADCL>>2)|(ADCH <<6));
 1e8:	90 91 78 00 	lds	r25, 0x0078
 1ec:	80 91 79 00 	lds	r24, 0x0079
 1f0:	82 95       	swap	r24
 1f2:	88 0f       	add	r24, r24
 1f4:	88 0f       	add	r24, r24
 1f6:	80 7c       	andi	r24, 0xC0	; 192
 1f8:	96 95       	lsr	r25
 1fa:	96 95       	lsr	r25
 1fc:	89 2b       	or	r24, r25
 1fe:	80 93 1d 01 	sts	0x011D, r24
			//ADMUX|=(1<<MUX0);
			ADCSRA |= (1 << ADSC); 
 202:	80 91 7a 00 	lds	r24, 0x007A
 206:	80 64       	ori	r24, 0x40	; 64
 208:	80 93 7a 00 	sts	0x007A, r24
 20c:	1d c0       	rjmp	.+58     	; 0x248 <__vector_9+0xb8>
			}
			else if(ADC_on)
 20e:	80 91 11 01 	lds	r24, 0x0111
 212:	88 23       	and	r24, r24
 214:	89 f0       	breq	.+34     	; 0x238 <__vector_9+0xa8>
			{
				accum_cnt++;
 216:	80 91 15 01 	lds	r24, 0x0115
 21a:	8f 5f       	subi	r24, 0xFF	; 255
 21c:	80 93 15 01 	sts	0x0115, r24
				accum+=_adc;
 220:	20 91 1d 01 	lds	r18, 0x011D
 224:	80 91 1b 01 	lds	r24, 0x011B
 228:	90 91 1c 01 	lds	r25, 0x011C
 22c:	82 0f       	add	r24, r18
 22e:	91 1d       	adc	r25, r1
 230:	90 93 1c 01 	sts	0x011C, r25
 234:	80 93 1b 01 	sts	0x011B, r24
			}
			
			
			
			if(event_ctr==0)
 238:	41 15       	cp	r20, r1
 23a:	51 05       	cpc	r21, r1
 23c:	29 f4       	brne	.+10     	; 0x248 <__vector_9+0xb8>
			{
				
			setDAC(x16);
 23e:	80 91 08 01 	lds	r24, 0x0108
 242:	90 91 09 01 	lds	r25, 0x0109
 246:	08 c0       	rjmp	.+16     	; 0x258 <__vector_9+0xc8>
			PORTD&=~(1<<LDAC);
			PORTD|=(1<<LDAC);
			}
			
			else if(event_ctr==t1)
 248:	80 91 00 01 	lds	r24, 0x0100
 24c:	90 e0       	ldi	r25, 0x00	; 0
 24e:	48 17       	cp	r20, r24
 250:	59 07       	cpc	r21, r25
 252:	39 f4       	brne	.+14     	; 0x262 <__vector_9+0xd2>
			{
			//if ( ( UCSR0A & (1<<UDRE0)) )		
			//UDR0=ADCL;	
				
			setDAC(0);
 254:	80 e0       	ldi	r24, 0x00	; 0
 256:	90 e0       	ldi	r25, 0x00	; 0
 258:	0e 94 7f 00 	call	0xfe	; 0xfe <setDAC>
			PORTD&=~(1<<LDAC);
 25c:	5a 98       	cbi	0x0b, 2	; 11
			PORTD|=(1<<LDAC);
 25e:	5a 9a       	sbi	0x0b, 2	; 11
 260:	70 c0       	rjmp	.+224    	; 0x342 <__vector_9+0x1b2>
			}
			else if(event_ctr==dT)
 262:	80 91 12 01 	lds	r24, 0x0112
 266:	90 e0       	ldi	r25, 0x00	; 0
 268:	48 17       	cp	r20, r24
 26a:	59 07       	cpc	r21, r25
 26c:	29 f4       	brne	.+10     	; 0x278 <__vector_9+0xe8>
			{		
			setDAC(y16);
 26e:	80 91 0b 01 	lds	r24, 0x010B
 272:	90 91 0c 01 	lds	r25, 0x010C
 276:	f0 cf       	rjmp	.-32     	; 0x258 <__vector_9+0xc8>
			PORTD&=~(1<<LDAC);
			PORTD|=(1<<LDAC);
		
			}

			else if(event_ctr==dTt2)
 278:	80 91 02 01 	lds	r24, 0x0102
 27c:	90 e0       	ldi	r25, 0x00	; 0
 27e:	48 17       	cp	r20, r24
 280:	59 07       	cpc	r21, r25
 282:	09 f0       	breq	.+2      	; 0x286 <__vector_9+0xf6>
 284:	5e c0       	rjmp	.+188    	; 0x342 <__vector_9+0x1b2>
			{
			if ( ( UCSR0A & (1<<UDRE0)) )			
 286:	80 91 c0 00 	lds	r24, 0x00C0
 28a:	85 ff       	sbrs	r24, 5
 28c:	04 c0       	rjmp	.+8      	; 0x296 <__vector_9+0x106>
				UDR0=_adc;	
 28e:	80 91 1d 01 	lds	r24, 0x011D
 292:	80 93 c6 00 	sts	0x00C6, r24
			//UDR0=(uint8_t)(accum/t2);
			accum=0;
 296:	10 92 1c 01 	sts	0x011C, r1
 29a:	10 92 1b 01 	sts	0x011B, r1
			ADC_on=0;
 29e:	10 92 11 01 	sts	0x0111, r1
			accum_cnt=0;
 2a2:	10 92 15 01 	sts	0x0115, r1
 2a6:	d6 cf       	rjmp	.-84     	; 0x254 <__vector_9+0xc4>

		}
		else//VAC_mode
		{
			static int i=0;
			i++;
 2a8:	80 91 0f 01 	lds	r24, 0x010F
 2ac:	90 91 10 01 	lds	r25, 0x0110
 2b0:	01 96       	adiw	r24, 0x01	; 1
 2b2:	90 93 10 01 	sts	0x0110, r25
 2b6:	80 93 0f 01 	sts	0x010F, r24
			switch(UDP_cnt)
 2ba:	80 91 22 01 	lds	r24, 0x0122
 2be:	81 30       	cpi	r24, 0x01	; 1
 2c0:	39 f0       	breq	.+14     	; 0x2d0 <__vector_9+0x140>
 2c2:	81 30       	cpi	r24, 0x01	; 1
 2c4:	18 f0       	brcs	.+6      	; 0x2cc <__vector_9+0x13c>
 2c6:	82 30       	cpi	r24, 0x02	; 2
 2c8:	89 f4       	brne	.+34     	; 0x2ec <__vector_9+0x15c>
 2ca:	05 c0       	rjmp	.+10     	; 0x2d6 <__vector_9+0x146>
			{
				case 0:
				UDR0=255;
 2cc:	8f ef       	ldi	r24, 0xFF	; 255
 2ce:	0c c0       	rjmp	.+24     	; 0x2e8 <__vector_9+0x158>
				break;
				case 1:
				UDR0=_adc;
 2d0:	80 91 1d 01 	lds	r24, 0x011D
 2d4:	09 c0       	rjmp	.+18     	; 0x2e8 <__vector_9+0x158>
				break;
				case 2:
				UDR0=VAC16>>4;					
 2d6:	80 91 16 01 	lds	r24, 0x0116
 2da:	90 91 17 01 	lds	r25, 0x0117
 2de:	24 e0       	ldi	r18, 0x04	; 4
 2e0:	96 95       	lsr	r25
 2e2:	87 95       	ror	r24
 2e4:	2a 95       	dec	r18
 2e6:	e1 f7       	brne	.-8      	; 0x2e0 <__vector_9+0x150>
 2e8:	80 93 c6 00 	sts	0x00C6, r24
			}
						
			_adc=((ADCL>>2)|(ADCH <<6));
 2ec:	90 91 78 00 	lds	r25, 0x0078
 2f0:	80 91 79 00 	lds	r24, 0x0079
 2f4:	82 95       	swap	r24
 2f6:	88 0f       	add	r24, r24
 2f8:	88 0f       	add	r24, r24
 2fa:	80 7c       	andi	r24, 0xC0	; 192
 2fc:	96 95       	lsr	r25
 2fe:	96 95       	lsr	r25
 300:	89 2b       	or	r24, r25
 302:	80 93 1d 01 	sts	0x011D, r24
			
			//ADMUX|=(1<<MUX0);
			
			
			setDAC(VAC16);
 306:	80 91 16 01 	lds	r24, 0x0116
 30a:	90 91 17 01 	lds	r25, 0x0117
 30e:	0e 94 7f 00 	call	0xfe	; 0xfe <setDAC>
			
			ADCSRA |= (1 << ADSC); 
 312:	80 91 7a 00 	lds	r24, 0x007A
 316:	80 64       	ori	r24, 0x40	; 64
 318:	80 93 7a 00 	sts	0x007A, r24
			
			PORTD&=~(1<<LDAC);
 31c:	5a 98       	cbi	0x0b, 2	; 11
			PORTD|=(1<<LDAC);
 31e:	5a 9a       	sbi	0x0b, 2	; 11
			
			VAC16+=16;
 320:	80 91 16 01 	lds	r24, 0x0116
 324:	90 91 17 01 	lds	r25, 0x0117
 328:	40 96       	adiw	r24, 0x10	; 16
 32a:	90 93 17 01 	sts	0x0117, r25
 32e:	80 93 16 01 	sts	0x0116, r24
			
			
			UDP_cnt++;
			UDP_cnt%=3;
 332:	80 91 22 01 	lds	r24, 0x0122
 336:	8f 5f       	subi	r24, 0xFF	; 255
 338:	63 e0       	ldi	r22, 0x03	; 3
 33a:	0e 94 5e 02 	call	0x4bc	; 0x4bc <__udivmodqi4>
 33e:	90 93 22 01 	sts	0x0122, r25
		
		
		
		
		
		ctr=0;
 342:	10 92 14 01 	sts	0x0114, r1
 346:	10 92 13 01 	sts	0x0113, r1
		event_ctr++;
 34a:	80 91 20 01 	lds	r24, 0x0120
 34e:	90 91 21 01 	lds	r25, 0x0121
 352:	01 96       	adiw	r24, 0x01	; 1
 354:	90 93 21 01 	sts	0x0121, r25
 358:	80 93 20 01 	sts	0x0120, r24
		ADC_cnt++;
 35c:	20 91 1e 01 	lds	r18, 0x011E
 360:	30 91 1f 01 	lds	r19, 0x011F
 364:	2f 5f       	subi	r18, 0xFF	; 255
 366:	3f 4f       	sbci	r19, 0xFF	; 255
 368:	30 93 1f 01 	sts	0x011F, r19
 36c:	20 93 1e 01 	sts	0x011E, r18
		if(event_ctr>T)
 370:	20 91 19 01 	lds	r18, 0x0119
 374:	30 e0       	ldi	r19, 0x00	; 0
 376:	28 17       	cp	r18, r24
 378:	39 07       	cpc	r19, r25
 37a:	24 f4       	brge	.+8      	; 0x384 <__vector_9+0x1f4>
			event_ctr=0;
 37c:	10 92 21 01 	sts	0x0121, r1
 380:	10 92 20 01 	sts	0x0120, r1
	}
	ctr++;
 384:	80 91 13 01 	lds	r24, 0x0113
 388:	90 91 14 01 	lds	r25, 0x0114
 38c:	01 96       	adiw	r24, 0x01	; 1
 38e:	90 93 14 01 	sts	0x0114, r25
 392:	80 93 13 01 	sts	0x0113, r24
	
	
}
 396:	ff 91       	pop	r31
 398:	ef 91       	pop	r30
 39a:	bf 91       	pop	r27
 39c:	af 91       	pop	r26
 39e:	9f 91       	pop	r25
 3a0:	8f 91       	pop	r24
 3a2:	7f 91       	pop	r23
 3a4:	6f 91       	pop	r22
 3a6:	5f 91       	pop	r21
 3a8:	4f 91       	pop	r20
 3aa:	3f 91       	pop	r19
 3ac:	2f 91       	pop	r18
 3ae:	0f 90       	pop	r0
 3b0:	0f be       	out	0x3f, r0	; 63
 3b2:	0f 90       	pop	r0
 3b4:	1f 90       	pop	r1
 3b6:	18 95       	reti

000003b8 <__vector_18>:

ISR(USART_RX_vect)
{
 3b8:	1f 92       	push	r1
 3ba:	0f 92       	push	r0
 3bc:	0f b6       	in	r0, 0x3f	; 63
 3be:	0f 92       	push	r0
 3c0:	11 24       	eor	r1, r1
 3c2:	6f 93       	push	r22
 3c4:	7f 93       	push	r23
 3c6:	8f 93       	push	r24
 3c8:	9f 93       	push	r25
	switch(ptr)
 3ca:	80 91 0d 01 	lds	r24, 0x010D
 3ce:	83 30       	cpi	r24, 0x03	; 3
 3d0:	c1 f1       	breq	.+112    	; 0x442 <__vector_18+0x8a>
 3d2:	84 30       	cpi	r24, 0x04	; 4
 3d4:	28 f4       	brcc	.+10     	; 0x3e0 <__vector_18+0x28>
 3d6:	81 30       	cpi	r24, 0x01	; 1
 3d8:	d1 f0       	breq	.+52     	; 0x40e <__vector_18+0x56>
 3da:	82 30       	cpi	r24, 0x02	; 2
 3dc:	28 f5       	brcc	.+74     	; 0x428 <__vector_18+0x70>
 3de:	09 c0       	rjmp	.+18     	; 0x3f2 <__vector_18+0x3a>
 3e0:	85 30       	cpi	r24, 0x05	; 5
 3e2:	09 f4       	brne	.+2      	; 0x3e6 <__vector_18+0x2e>
 3e4:	4a c0       	rjmp	.+148    	; 0x47a <__vector_18+0xc2>
 3e6:	85 30       	cpi	r24, 0x05	; 5
 3e8:	88 f1       	brcs	.+98     	; 0x44c <__vector_18+0x94>
 3ea:	86 30       	cpi	r24, 0x06	; 6
 3ec:	09 f0       	breq	.+2      	; 0x3f0 <__vector_18+0x38>
 3ee:	4e c0       	rjmp	.+156    	; 0x48c <__vector_18+0xd4>
 3f0:	49 c0       	rjmp	.+146    	; 0x484 <__vector_18+0xcc>
	{
		case 0:
		if(UDR0!=255)
 3f2:	80 91 c6 00 	lds	r24, 0x00C6
 3f6:	8f 3f       	cpi	r24, 0xFF	; 255
 3f8:	31 f0       	breq	.+12     	; 0x406 <__vector_18+0x4e>
		{
			sync=0;
 3fa:	10 92 0a 01 	sts	0x010A, r1
			ptr--;
			ptr%=7;
 3fe:	83 e0       	ldi	r24, 0x03	; 3
 400:	80 93 0d 01 	sts	0x010D, r24
 404:	43 c0       	rjmp	.+134    	; 0x48c <__vector_18+0xd4>
		}
		else
			sync=1;
 406:	81 e0       	ldi	r24, 0x01	; 1
 408:	80 93 0a 01 	sts	0x010A, r24
 40c:	3f c0       	rjmp	.+126    	; 0x48c <__vector_18+0xd4>
		break;
		case 1:
		x16=UDR0<<4;
 40e:	80 91 c6 00 	lds	r24, 0x00C6
 412:	90 e0       	ldi	r25, 0x00	; 0
 414:	74 e0       	ldi	r23, 0x04	; 4
 416:	88 0f       	add	r24, r24
 418:	99 1f       	adc	r25, r25
 41a:	7a 95       	dec	r23
 41c:	e1 f7       	brne	.-8      	; 0x416 <__vector_18+0x5e>
 41e:	90 93 09 01 	sts	0x0109, r25
 422:	80 93 08 01 	sts	0x0108, r24
 426:	32 c0       	rjmp	.+100    	; 0x48c <__vector_18+0xd4>
		break;
		case 2:	
		y16=UDR0<<4;
 428:	80 91 c6 00 	lds	r24, 0x00C6
 42c:	90 e0       	ldi	r25, 0x00	; 0
 42e:	64 e0       	ldi	r22, 0x04	; 4
 430:	88 0f       	add	r24, r24
 432:	99 1f       	adc	r25, r25
 434:	6a 95       	dec	r22
 436:	e1 f7       	brne	.-8      	; 0x430 <__vector_18+0x78>
 438:	90 93 0c 01 	sts	0x010C, r25
 43c:	80 93 0b 01 	sts	0x010B, r24
 440:	25 c0       	rjmp	.+74     	; 0x48c <__vector_18+0xd4>
		break;
		case 3:
		t1=UDR0;
 442:	80 91 c6 00 	lds	r24, 0x00C6
 446:	80 93 00 01 	sts	0x0100, r24
 44a:	20 c0       	rjmp	.+64     	; 0x48c <__vector_18+0xd4>
		break;		
		case 4:
		t2=UDR0;
 44c:	90 91 c6 00 	lds	r25, 0x00C6
 450:	90 93 01 01 	sts	0x0101, r25
		if((t1==0)&&(t2==0))
 454:	80 91 00 01 	lds	r24, 0x0100
 458:	88 23       	and	r24, r24
 45a:	61 f4       	brne	.+24     	; 0x474 <__vector_18+0xbc>
 45c:	99 23       	and	r25, r25
 45e:	51 f4       	brne	.+20     	; 0x474 <__vector_18+0xbc>
		{
			
			VAC_mode=1;
 460:	81 e0       	ldi	r24, 0x01	; 1
 462:	80 93 0e 01 	sts	0x010E, r24
			time_step=4;
 466:	84 e0       	ldi	r24, 0x04	; 4
 468:	90 e0       	ldi	r25, 0x00	; 0
 46a:	90 93 04 01 	sts	0x0104, r25
 46e:	80 93 03 01 	sts	0x0103, r24
 472:	0c c0       	rjmp	.+24     	; 0x48c <__vector_18+0xd4>
		}
		else
			VAC_mode=0;
 474:	10 92 0e 01 	sts	0x010E, r1
 478:	09 c0       	rjmp	.+18     	; 0x48c <__vector_18+0xd4>
			
		break;	
		case 5:
		dT=UDR0;
 47a:	80 91 c6 00 	lds	r24, 0x00C6
 47e:	80 93 12 01 	sts	0x0112, r24
 482:	04 c0       	rjmp	.+8      	; 0x48c <__vector_18+0xd4>
		break;
		case 6:
		T=UDR0;
 484:	80 91 c6 00 	lds	r24, 0x00C6
 488:	80 93 19 01 	sts	0x0119, r24
		break;
	}
	dTt2=dT+t2;
 48c:	80 91 01 01 	lds	r24, 0x0101
 490:	90 91 12 01 	lds	r25, 0x0112
 494:	89 0f       	add	r24, r25
 496:	80 93 02 01 	sts	0x0102, r24
	//UDR0=x16/16;
	ptr++;
	ptr%=7;
 49a:	80 91 0d 01 	lds	r24, 0x010D
 49e:	8f 5f       	subi	r24, 0xFF	; 255
 4a0:	67 e0       	ldi	r22, 0x07	; 7
 4a2:	0e 94 5e 02 	call	0x4bc	; 0x4bc <__udivmodqi4>
 4a6:	90 93 0d 01 	sts	0x010D, r25
 4aa:	9f 91       	pop	r25
 4ac:	8f 91       	pop	r24
 4ae:	7f 91       	pop	r23
 4b0:	6f 91       	pop	r22
 4b2:	0f 90       	pop	r0
 4b4:	0f be       	out	0x3f, r0	; 63
 4b6:	0f 90       	pop	r0
 4b8:	1f 90       	pop	r1
 4ba:	18 95       	reti

000004bc <__udivmodqi4>:
 4bc:	99 1b       	sub	r25, r25
 4be:	79 e0       	ldi	r23, 0x09	; 9
 4c0:	04 c0       	rjmp	.+8      	; 0x4ca <__udivmodqi4_ep>

000004c2 <__udivmodqi4_loop>:
 4c2:	99 1f       	adc	r25, r25
 4c4:	96 17       	cp	r25, r22
 4c6:	08 f0       	brcs	.+2      	; 0x4ca <__udivmodqi4_ep>
 4c8:	96 1b       	sub	r25, r22

000004ca <__udivmodqi4_ep>:
 4ca:	88 1f       	adc	r24, r24
 4cc:	7a 95       	dec	r23
 4ce:	c9 f7       	brne	.-14     	; 0x4c2 <__udivmodqi4_loop>
 4d0:	80 95       	com	r24
 4d2:	08 95       	ret

000004d4 <_exit>:
 4d4:	f8 94       	cli

000004d6 <__stop_program>:
 4d6:	ff cf       	rjmp	.-2      	; 0x4d6 <__stop_program>
