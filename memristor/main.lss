
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000010  00800100  0000087a  0000090e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000087a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000032  00800110  00800110  0000091e  2**0
                  ALLOC
  3 .debug_aranges 00000020  00000000  00000000  0000091e  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 0000022f  00000000  00000000  0000093e  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000554  00000000  00000000  00000b6d  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000001dd  00000000  00000000  000010c1  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000007f2  00000000  00000000  0000129e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000d0  00000000  00000000  00001a90  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000020c  00000000  00000000  00001b60  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000005e  00000000  00000000  00001d6c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 ff 00 	jmp	0x1fe	; 0x1fe <__vector_9>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 60 03 	jmp	0x6c0	; 0x6c0 <__vector_18>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ea e7       	ldi	r30, 0x7A	; 122
  7c:	f8 e0       	ldi	r31, 0x08	; 8
  7e:	02 c0       	rjmp	.+4      	; 0x84 <.do_copy_data_start>

00000080 <.do_copy_data_loop>:
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0

00000084 <.do_copy_data_start>:
  84:	a0 31       	cpi	r26, 0x10	; 16
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <.do_copy_data_loop>

0000008a <__do_clear_bss>:
  8a:	11 e0       	ldi	r17, 0x01	; 1
  8c:	a0 e1       	ldi	r26, 0x10	; 16
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a2 34       	cpi	r26, 0x42	; 66
  96:	b1 07       	cpc	r27, r17
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 b9 00 	call	0x172	; 0x172 <main>
  9e:	0c 94 3b 04 	jmp	0x876	; 0x876 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <ADC_Init>:
uint8_t accum_cnt;

//функция инициализаци АЦП
//АЦП используется для регистрации тока, проходящего через мемристор
void ADC_Init(){
 ADCSRA |= (1 << ADEN) // Включаем АЦП
  a6:	ea e7       	ldi	r30, 0x7A	; 122
  a8:	f0 e0       	ldi	r31, 0x00	; 0
  aa:	80 81       	ld	r24, Z
  ac:	83 68       	ori	r24, 0x83	; 131
  ae:	80 83       	st	Z, r24
 //ADCSRA&=~(1 << ADPS1)|(1 << ADPS0)|(1 << ADPS1);
 |(1 << ADPS1)|(1 << ADPS0)|(1 << ADPS1);    // устанавливаем предделитель преобразователя на 8
 ADMUX |= (0 << REFS1)|(1 << REFS0) //выставляем опорное напряжение, как внешний ИОН
  b0:	ec e7       	ldi	r30, 0x7C	; 124
  b2:	f0 e0       	ldi	r31, 0x00	; 0
  b4:	80 81       	ld	r24, Z
  b6:	80 64       	ori	r24, 0x40	; 64
  b8:	80 83       	st	Z, r24
 |(0 << MUX0)|(0 << MUX1)|(0 << MUX2)|(0 << MUX3); // снимать сигнал будем с  входа PC0 
}
  ba:	08 95       	ret

000000bc <timer_init>:

//функция инициализации таймера
// Таймер используется для формирования временной последовательности значений, формируемых с ЦАПа
void timer_init()
{
    TCCR2A = 0;        
  bc:	10 92 b0 00 	sts	0x00B0, r1
    TCCR2B = 0;
  c0:	e1 eb       	ldi	r30, 0xB1	; 177
  c2:	f0 e0       	ldi	r31, 0x00	; 0
  c4:	10 82       	st	Z, r1
    
    TCCR2B |= (1<<CS21) ;    
  c6:	80 81       	ld	r24, Z
  c8:	82 60       	ori	r24, 0x02	; 2
  ca:	80 83       	st	Z, r24
    TIMSK2 = (1 << TOIE2);
  cc:	81 e0       	ldi	r24, 0x01	; 1
  ce:	80 93 70 00 	sts	0x0070, r24
}
  d2:	08 95       	ret

000000d4 <uart_init>:

//функция инициализации UART-интерфейса
void uart_init(unsigned int ubrr)
{	
	UBRR0H = (unsigned char)(ubrr>>8);
  d4:	90 93 c5 00 	sts	0x00C5, r25
	UBRR0L = (unsigned char)ubrr;
  d8:	80 93 c4 00 	sts	0x00C4, r24
	UCSR0B = (1<<RXCIE0)|(1<<RXEN0)|(1<<TXEN0);
  dc:	88 e9       	ldi	r24, 0x98	; 152
  de:	80 93 c1 00 	sts	0x00C1, r24
	UCSR0C = (1<<USBS0)|(3<<UCSZ00);
  e2:	8e e0       	ldi	r24, 0x0E	; 14
  e4:	80 93 c2 00 	sts	0x00C2, r24
}
  e8:	08 95       	ret

000000ea <SPI_MasterInit>:

//функция инициализации SPI
void SPI_MasterInit()
{
	DDR_SPI = (1<<DD_MOSI)|(1<<DD_SCK)|(1<<SPI_SS);
  ea:	8c e2       	ldi	r24, 0x2C	; 44
  ec:	84 b9       	out	0x04, r24	; 4
	SPCR = (1<<SPE)|(0<<DORD)|(1<<MSTR)|(1<<CPOL)|(0<<CPHA)|(1<<SPR1)|(0<<SPR0);
  ee:	8a e5       	ldi	r24, 0x5A	; 90
  f0:	8c bd       	out	0x2c, r24	; 44
}
  f2:	08 95       	ret

000000f4 <gatherMult>:


			
void gatherMult()
{
		UNSET_BYTE(PORTD, 6);
  f4:	5e 98       	cbi	0x0b, 6	; 11
	UNSET_BYTE(PORTD, 7);				
  f6:	5f 98       	cbi	0x0b, 7	; 11
	UNSET_BYTE(PORTD, 5);
  f8:	5d 98       	cbi	0x0b, 5	; 11
	UNSET_BYTE(PORTC, 4);
  fa:	44 98       	cbi	0x08, 4	; 8
	
	
	SET_BYTE(PORTC, 1);				
  fc:	41 9a       	sbi	0x08, 1	; 8
	SET_BYTE(PORTB, 2);
  fe:	2a 9a       	sbi	0x05, 2	; 5
	SET_BYTE(PORTB, 1);
 100:	29 9a       	sbi	0x05, 1	; 5
	SET_BYTE(PORTB, 0);
 102:	28 9a       	sbi	0x05, 0	; 5
}
 104:	08 95       	ret

00000106 <separMult>:
void separMult()
{
	UNSET_BYTE(PORTB, 1);
 106:	29 98       	cbi	0x05, 1	; 5
	UNSET_BYTE(PORTB, 2);
 108:	2a 98       	cbi	0x05, 2	; 5
	UNSET_BYTE(PORTC, 1);
 10a:	41 98       	cbi	0x08, 1	; 8
	
	SET_BYTE(PORTC, 4);						
 10c:	44 9a       	sbi	0x08, 4	; 8
	SET_BYTE(PORTD, 6);
 10e:	5e 9a       	sbi	0x0b, 6	; 11
	SET_BYTE(PORTD, 7);
 110:	5f 9a       	sbi	0x0b, 7	; 11
	SET_BYTE(PORTB, 0);
 112:	28 9a       	sbi	0x05, 0	; 5
	SET_BYTE(PORTD, 5);
 114:	5d 9a       	sbi	0x0b, 5	; 11
}
 116:	08 95       	ret

00000118 <SPI_WriteByte>:



void SPI_WriteByte(uint8_t data)
{
   SPDR = data;
 118:	8e bd       	out	0x2e, r24	; 46
  while(!(SPSR & (1<<SPIF)));
 11a:	0d b4       	in	r0, 0x2d	; 45
 11c:	07 fe       	sbrs	r0, 7
 11e:	fd cf       	rjmp	.-6      	; 0x11a <SPI_WriteByte+0x2>
}
 120:	08 95       	ret

00000122 <setDAC>:

//функция управления ЦАПом 
// при этом, управление регистром LDAC должно использоваться 
//вне функции в перспепктиве создания многоканальной схемы
void setDAC(int16_t x,int8_t chan)//_____________bipolar!!! and <<4 larger
{
 122:	0f 93       	push	r16
 124:	1f 93       	push	r17
 126:	e6 2f       	mov	r30, r22


	x=-x;
 128:	00 27       	eor	r16, r16
 12a:	11 27       	eor	r17, r17
 12c:	08 1b       	sub	r16, r24
 12e:	19 0b       	sbc	r17, r25
	x+=2048;
 130:	00 50       	subi	r16, 0x00	; 0
 132:	18 4f       	sbci	r17, 0xF8	; 248
	PORTD&=~(1<<SYNC);
 134:	5b 98       	cbi	0x0b, 3	; 11
	send8 = (x >> 8);
	send8 &= 0b00001111;
	send8|=(chan_addrs[chan]<<4);
 136:	ff 27       	eor	r31, r31
 138:	e7 fd       	sbrc	r30, 7
 13a:	f0 95       	com	r31
 13c:	e0 50       	subi	r30, 0x00	; 0
 13e:	ff 4f       	sbci	r31, 0xFF	; 255
 140:	80 81       	ld	r24, Z
 142:	82 95       	swap	r24
 144:	80 7f       	andi	r24, 0xF0	; 240
 146:	21 2f       	mov	r18, r17
 148:	33 27       	eor	r19, r19
 14a:	27 fd       	sbrc	r18, 7
 14c:	3a 95       	dec	r19
 14e:	2f 70       	andi	r18, 0x0F	; 15
 150:	82 2b       	or	r24, r18
 152:	80 93 36 01 	sts	0x0136, r24
	SPI_WriteByte(send8);
 156:	90 e0       	ldi	r25, 0x00	; 0
 158:	0e 94 8c 00 	call	0x118	; 0x118 <SPI_WriteByte>
	send8=x;
 15c:	00 93 36 01 	sts	0x0136, r16
	SPI_WriteByte(send8);		
 160:	80 2f       	mov	r24, r16
 162:	90 e0       	ldi	r25, 0x00	; 0
 164:	0e 94 8c 00 	call	0x118	; 0x118 <SPI_WriteByte>
	PORTD|=(1<<SYNC);
 168:	5b 9a       	sbi	0x0b, 3	; 11

}
 16a:	1f 91       	pop	r17
 16c:	0f 91       	pop	r16
 16e:	08 95       	ret

00000170 <set_reverser>:
		else
			PORTB&=~(1<<4);
		break;

	}
}
 170:	08 95       	ret

00000172 <main>:



void main(void)
{
 172:	1f 93       	push	r17
	PORTC|=0b00000000;
 174:	88 b1       	in	r24, 0x08	; 8
 176:	88 b9       	out	0x08, r24	; 8
	DDRC= 0b00011110;
 178:	8e e1       	ldi	r24, 0x1E	; 30
 17a:	87 b9       	out	0x07, r24	; 7
	DDRD =0b11111110;
 17c:	8e ef       	ldi	r24, 0xFE	; 254
 17e:	8a b9       	out	0x0a, r24	; 10
	//PORTD|=0b00100000;	
	DDRB= 0b00011111;
 180:	8f e1       	ldi	r24, 0x1F	; 31
 182:	84 b9       	out	0x04, r24	; 4
	sei();
 184:	78 94       	sei
}

//функция инициализации SPI
void SPI_MasterInit()
{
	DDR_SPI = (1<<DD_MOSI)|(1<<DD_SCK)|(1<<SPI_SS);
 186:	8c e2       	ldi	r24, 0x2C	; 44
 188:	84 b9       	out	0x04, r24	; 4
	SPCR = (1<<SPE)|(0<<DORD)|(1<<MSTR)|(1<<CPOL)|(0<<CPHA)|(1<<SPR1)|(0<<SPR0);
 18a:	8a e5       	ldi	r24, 0x5A	; 90
 18c:	8c bd       	out	0x2c, r24	; 44

//функция инициализации таймера
// Таймер используется для формирования временной последовательности значений, формируемых с ЦАПа
void timer_init()
{
    TCCR2A = 0;        
 18e:	10 92 b0 00 	sts	0x00B0, r1
    TCCR2B = 0;
 192:	10 92 b1 00 	sts	0x00B1, r1
    
    TCCR2B |= (1<<CS21) ;    
 196:	80 91 b1 00 	lds	r24, 0x00B1
 19a:	82 60       	ori	r24, 0x02	; 2
 19c:	80 93 b1 00 	sts	0x00B1, r24
    TIMSK2 = (1 << TOIE2);
 1a0:	81 e0       	ldi	r24, 0x01	; 1
 1a2:	80 93 70 00 	sts	0x0070, r24
}

//функция инициализации UART-интерфейса
void uart_init(unsigned int ubrr)
{	
	UBRR0H = (unsigned char)(ubrr>>8);
 1a6:	10 92 c5 00 	sts	0x00C5, r1
	UBRR0L = (unsigned char)ubrr;
 1aa:	83 e3       	ldi	r24, 0x33	; 51
 1ac:	80 93 c4 00 	sts	0x00C4, r24
	UCSR0B = (1<<RXCIE0)|(1<<RXEN0)|(1<<TXEN0);
 1b0:	88 e9       	ldi	r24, 0x98	; 152
 1b2:	80 93 c1 00 	sts	0x00C1, r24
	UCSR0C = (1<<USBS0)|(3<<UCSZ00);
 1b6:	8e e0       	ldi	r24, 0x0E	; 14
 1b8:	80 93 c2 00 	sts	0x00C2, r24
uint8_t accum_cnt;

//функция инициализаци АЦП
//АЦП используется для регистрации тока, проходящего через мемристор
void ADC_Init(){
 ADCSRA |= (1 << ADEN) // Включаем АЦП
 1bc:	80 91 7a 00 	lds	r24, 0x007A
 1c0:	83 68       	ori	r24, 0x83	; 131
 1c2:	80 93 7a 00 	sts	0x007A, r24
 //ADCSRA&=~(1 << ADPS1)|(1 << ADPS0)|(1 << ADPS1);
 |(1 << ADPS1)|(1 << ADPS0)|(1 << ADPS1);    // устанавливаем предделитель преобразователя на 8
 ADMUX |= (0 << REFS1)|(1 << REFS0) //выставляем опорное напряжение, как внешний ИОН
 1c6:	80 91 7c 00 	lds	r24, 0x007C
 1ca:	80 64       	ori	r24, 0x40	; 64
 1cc:	80 93 7c 00 	sts	0x007C, r24
    //DDRD = 0b000001100;	
	
	uart_init(BAUDRATE);
	ADC_Init();
	
	ADCSRA |= (1 << ADSC); 
 1d0:	80 91 7a 00 	lds	r24, 0x007A
 1d4:	80 64       	ori	r24, 0x40	; 64
 1d6:	80 93 7a 00 	sts	0x007A, r24
	ADCL;
 1da:	80 91 78 00 	lds	r24, 0x0078
	ADCL;
 1de:	80 91 78 00 	lds	r24, 0x0078
 1e2:	10 e0       	ldi	r17, 0x00	; 0
		//set_reverser(i,1);
	
	//set_reverser(0,0);
	for (int i=0;i<8;i++)
	{
		setDAC(0,i);
 1e4:	80 e0       	ldi	r24, 0x00	; 0
 1e6:	90 e0       	ldi	r25, 0x00	; 0
 1e8:	61 2f       	mov	r22, r17
 1ea:	0e 94 91 00 	call	0x122	; 0x122 <setDAC>
 1ee:	1f 5f       	subi	r17, 0xFF	; 255

	//for(int i=0;i<8;i++)
		//set_reverser(i,1);
	
	//set_reverser(0,0);
	for (int i=0;i<8;i++)
 1f0:	18 30       	cpi	r17, 0x08	; 8
 1f2:	c1 f7       	brne	.-16     	; 0x1e4 <main+0x72>
	{
		setDAC(0,i);
	}
	PORTD&=~(1<<LDAC);
 1f4:	5a 98       	cbi	0x0b, 2	; 11
	PORTD|=(1<<LDAC);
 1f6:	5a 9a       	sbi	0x0b, 2	; 11
	
	separMult();
 1f8:	0e 94 83 00 	call	0x106	; 0x106 <separMult>
 1fc:	ff cf       	rjmp	.-2      	; 0x1fc <main+0x8a>

000001fe <__vector_9>:
//главный цикл работы контроллера
//Здесь устанавливаются значения ЦАП и передаются данные на компьютер
//через UART-интерфейс
//данный участок кода повторяется при переполнении TIMER2
ISR(TIMER2_OVF_vect)
{
 1fe:	1f 92       	push	r1
 200:	0f 92       	push	r0
 202:	0f b6       	in	r0, 0x3f	; 63
 204:	0f 92       	push	r0
 206:	11 24       	eor	r1, r1
 208:	2f 93       	push	r18
 20a:	3f 93       	push	r19
 20c:	4f 93       	push	r20
 20e:	5f 93       	push	r21
 210:	6f 93       	push	r22
 212:	7f 93       	push	r23
 214:	8f 93       	push	r24
 216:	9f 93       	push	r25
 218:	af 93       	push	r26
 21a:	bf 93       	push	r27
 21c:	ef 93       	push	r30
 21e:	ff 93       	push	r31
	if(ctr>time_step)
 220:	20 91 32 01 	lds	r18, 0x0132
 224:	30 91 33 01 	lds	r19, 0x0133
 228:	80 91 0c 01 	lds	r24, 0x010C
 22c:	90 91 0d 01 	lds	r25, 0x010D
 230:	82 17       	cp	r24, r18
 232:	93 07       	cpc	r25, r19
 234:	0c f0       	brlt	.+2      	; 0x238 <__vector_9+0x3a>
 236:	2a c2       	rjmp	.+1108   	; 0x68c <__vector_9+0x48e>
	{
		if(MD==CUSTOM)
 238:	60 91 10 01 	lds	r22, 0x0110
 23c:	66 23       	and	r22, r22
 23e:	09 f0       	breq	.+2      	; 0x242 <__vector_9+0x44>
 240:	5c c0       	rjmp	.+184    	; 0x2fa <__vector_9+0xfc>
		{
			if(event_cnt==(1))
 242:	20 91 2e 01 	lds	r18, 0x012E
 246:	30 91 2f 01 	lds	r19, 0x012F
 24a:	21 30       	cpi	r18, 0x01	; 1
 24c:	31 05       	cpc	r19, r1
 24e:	59 f4       	brne	.+22     	; 0x266 <__vector_9+0x68>
			{	
			ADCL_=ADCL;
 250:	90 91 78 00 	lds	r25, 0x0078
 254:	90 93 38 01 	sts	0x0138, r25
			ADCH_=ADCH;
 258:	80 91 79 00 	lds	r24, 0x0079
 25c:	80 93 3a 01 	sts	0x013A, r24
			UDR0=ADCL_;			
 260:	90 93 c6 00 	sts	0x00C6, r25
 264:	1b c0       	rjmp	.+54     	; 0x29c <__vector_9+0x9e>
			}
			
			if(event_cnt==(2))
 266:	22 30       	cpi	r18, 0x02	; 2
 268:	31 05       	cpc	r19, r1
 26a:	29 f4       	brne	.+10     	; 0x276 <__vector_9+0x78>
			{	
			UDR0=ADCH_;				
 26c:	80 91 3a 01 	lds	r24, 0x013A
 270:	80 93 c6 00 	sts	0x00C6, r24
 274:	13 c0       	rjmp	.+38     	; 0x29c <__vector_9+0x9e>
			}
			
			
			
			if(event_cnt==0)
 276:	21 15       	cp	r18, r1
 278:	31 05       	cpc	r19, r1
 27a:	81 f4       	brne	.+32     	; 0x29c <__vector_9+0x9e>
			{
			UDR0=255;
 27c:	8f ef       	ldi	r24, 0xFF	; 255
 27e:	80 93 c6 00 	sts	0x00C6, r24
			setDAC(x16,chan);
 282:	80 91 19 01 	lds	r24, 0x0119
 286:	90 91 1a 01 	lds	r25, 0x011A
 28a:	60 91 20 01 	lds	r22, 0x0120
 28e:	0e 94 91 00 	call	0x122	; 0x122 <setDAC>
			setDAC(x16,2);
 292:	80 91 19 01 	lds	r24, 0x0119
 296:	90 91 1a 01 	lds	r25, 0x011A
 29a:	cd c1       	rjmp	.+922    	; 0x636 <__vector_9+0x438>
			PORTD&=~(1<<LDAC);
			PORTD|=(1<<LDAC);
			}
			
			else if(event_cnt==t1)
 29c:	80 91 08 01 	lds	r24, 0x0108
 2a0:	90 e0       	ldi	r25, 0x00	; 0
 2a2:	28 17       	cp	r18, r24
 2a4:	39 07       	cpc	r19, r25
 2a6:	09 f4       	brne	.+2      	; 0x2aa <__vector_9+0xac>
 2a8:	4b c1       	rjmp	.+662    	; 0x540 <__vector_9+0x342>
			setDAC(0,chan);
			//setDAC(0,2);
			PORTD&=~(1<<LDAC);
			PORTD|=(1<<LDAC);
			}
			else if(event_cnt==dT)
 2aa:	80 91 31 01 	lds	r24, 0x0131
 2ae:	90 e0       	ldi	r25, 0x00	; 0
 2b0:	28 17       	cp	r18, r24
 2b2:	39 07       	cpc	r19, r25
 2b4:	09 f4       	brne	.+2      	; 0x2b8 <__vector_9+0xba>
 2b6:	2f c1       	rjmp	.+606    	; 0x516 <__vector_9+0x318>
			 //setDAC(y16,2);
			PORTD&=~(1<<LDAC);
			PORTD|=(1<<LDAC);
		
			}
			else if(event_cnt==(dT+1))
 2b8:	01 96       	adiw	r24, 0x01	; 1
 2ba:	28 17       	cp	r18, r24
 2bc:	39 07       	cpc	r19, r25
 2be:	09 f4       	brne	.+2      	; 0x2c2 <__vector_9+0xc4>
 2c0:	87 c1       	rjmp	.+782    	; 0x5d0 <__vector_9+0x3d2>
				ADCSRA |= (1 << ADSC); 

			else if(event_cnt==dTt2)
 2c2:	80 91 0a 01 	lds	r24, 0x010A
 2c6:	90 e0       	ldi	r25, 0x00	; 0
 2c8:	28 17       	cp	r18, r24
 2ca:	39 07       	cpc	r19, r25
 2cc:	09 f0       	breq	.+2      	; 0x2d0 <__vector_9+0xd2>
 2ce:	b8 c1       	rjmp	.+880    	; 0x640 <__vector_9+0x442>
			{
			if ( ( UCSR0A & (1<<UDRE0)) )			
 2d0:	80 91 c0 00 	lds	r24, 0x00C0
 2d4:	85 ff       	sbrs	r24, 5
 2d6:	04 c0       	rjmp	.+8      	; 0x2e0 <__vector_9+0xe2>
				UDR0=_adc;	
 2d8:	80 91 3d 01 	lds	r24, 0x013D
 2dc:	80 93 c6 00 	sts	0x00C6, r24
			accum=0;
 2e0:	10 92 3c 01 	sts	0x013C, r1
 2e4:	10 92 3b 01 	sts	0x013B, r1
			ADC_on=0;
 2e8:	10 92 2d 01 	sts	0x012D, r1
			accum_cnt=0;			
 2ec:	10 92 34 01 	sts	0x0134, r1
			setDAC(0,chan);
 2f0:	80 e0       	ldi	r24, 0x00	; 0
 2f2:	90 e0       	ldi	r25, 0x00	; 0
 2f4:	60 91 20 01 	lds	r22, 0x0120
 2f8:	42 c1       	rjmp	.+644    	; 0x57e <__vector_9+0x380>
			PORTD|=(1<<LDAC);

			}		

		}
		else if(MD==VAC)
 2fa:	61 30       	cpi	r22, 0x01	; 1
 2fc:	09 f0       	breq	.+2      	; 0x300 <__vector_9+0x102>
 2fe:	7c c0       	rjmp	.+248    	; 0x3f8 <__vector_9+0x1fa>
		{			
			static int i=0;
			i++;						
 300:	80 91 2b 01 	lds	r24, 0x012B
 304:	90 91 2c 01 	lds	r25, 0x012C
 308:	01 96       	adiw	r24, 0x01	; 1
 30a:	90 93 2c 01 	sts	0x012C, r25
 30e:	80 93 2b 01 	sts	0x012B, r24
			
			switch(UDP_cnt)
 312:	80 91 41 01 	lds	r24, 0x0141
 316:	81 30       	cpi	r24, 0x01	; 1
 318:	79 f0       	breq	.+30     	; 0x338 <__vector_9+0x13a>
 31a:	81 30       	cpi	r24, 0x01	; 1
 31c:	30 f0       	brcs	.+12     	; 0x32a <__vector_9+0x12c>
 31e:	82 30       	cpi	r24, 0x02	; 2
 320:	f1 f0       	breq	.+60     	; 0x35e <__vector_9+0x160>
 322:	83 30       	cpi	r24, 0x03	; 3
 324:	09 f0       	breq	.+2      	; 0x328 <__vector_9+0x12a>
 326:	61 c0       	rjmp	.+194    	; 0x3ea <__vector_9+0x1ec>
 328:	1f c0       	rjmp	.+62     	; 0x368 <__vector_9+0x16a>
			{
				case 0:					
				 ADCSRA |= (1 << ADSC); 
 32a:	80 91 7a 00 	lds	r24, 0x007A
 32e:	80 64       	ori	r24, 0x40	; 64
 330:	80 93 7a 00 	sts	0x007A, r24
				UDR0=255;
 334:	8f ef       	ldi	r24, 0xFF	; 255
 336:	15 c0       	rjmp	.+42     	; 0x362 <__vector_9+0x164>
				break;
				
				
				
				case 1:	
				ADCL__=	ADCL_;
 338:	80 91 38 01 	lds	r24, 0x0138
 33c:	80 93 35 01 	sts	0x0135, r24
				ADCH__ = ADCH_;
 340:	80 91 3a 01 	lds	r24, 0x013A
 344:	80 93 30 01 	sts	0x0130, r24
				ADCL_=ADCL;
 348:	90 91 78 00 	lds	r25, 0x0078
 34c:	90 93 38 01 	sts	0x0138, r25
				ADCH_=ADCH;
 350:	80 91 79 00 	lds	r24, 0x0079
 354:	80 93 3a 01 	sts	0x013A, r24
				
				UDR0=ADCL_;
 358:	90 93 c6 00 	sts	0x00C6, r25
 35c:	46 c0       	rjmp	.+140    	; 0x3ea <__vector_9+0x1ec>
				break;
				
				case 2:
				UDR0=ADCH_;
 35e:	80 91 3a 01 	lds	r24, 0x013A
 362:	80 93 c6 00 	sts	0x00C6, r24
 366:	41 c0       	rjmp	.+130    	; 0x3ea <__vector_9+0x1ec>
				
				
				case 3:
								
				//VAC16_HH=VAC16_H;
				VAC16_H=VAC16;
 368:	20 91 11 01 	lds	r18, 0x0111
 36c:	30 91 12 01 	lds	r19, 0x0112
 370:	30 93 14 01 	sts	0x0114, r19
 374:	20 93 13 01 	sts	0x0113, r18
				
				if(pos_phase)
 378:	80 91 0b 01 	lds	r24, 0x010B
 37c:	88 23       	and	r24, r24
 37e:	81 f0       	breq	.+32     	; 0x3a0 <__vector_9+0x1a2>
				{
							//PORTC=0b00000010;
		//PORTB=0b00011111;
		//PORTD=0b11101100;
					VAC16+=32;
 380:	20 5e       	subi	r18, 0xE0	; 224
 382:	3f 4f       	sbci	r19, 0xFF	; 255
 384:	30 93 12 01 	sts	0x0112, r19
 388:	20 93 11 01 	sts	0x0111, r18
					if(VAC16>(y16-1))
 38c:	80 91 1b 01 	lds	r24, 0x011B
 390:	90 91 1c 01 	lds	r25, 0x011C
 394:	28 17       	cp	r18, r24
 396:	39 07       	cpc	r19, r25
 398:	b4 f0       	brlt	.+44     	; 0x3c6 <__vector_9+0x1c8>
					{
					pos_phase=0;				
 39a:	10 92 0b 01 	sts	0x010B, r1
 39e:	13 c0       	rjmp	.+38     	; 0x3c6 <__vector_9+0x1c8>
				else
				{
					//PORTB=0;
		//PORTC=0;
		//PORTD=0;
					VAC16-=32;
 3a0:	c9 01       	movw	r24, r18
 3a2:	80 97       	sbiw	r24, 0x20	; 32
 3a4:	90 93 12 01 	sts	0x0112, r25
 3a8:	80 93 11 01 	sts	0x0111, r24
					if(VAC16<(-x16+1))
 3ac:	21 e0       	ldi	r18, 0x01	; 1
 3ae:	30 e0       	ldi	r19, 0x00	; 0
 3b0:	40 91 19 01 	lds	r20, 0x0119
 3b4:	50 91 1a 01 	lds	r21, 0x011A
 3b8:	24 1b       	sub	r18, r20
 3ba:	35 0b       	sbc	r19, r21
 3bc:	82 17       	cp	r24, r18
 3be:	93 07       	cpc	r25, r19
 3c0:	14 f4       	brge	.+4      	; 0x3c6 <__vector_9+0x1c8>
					{
					pos_phase=1;									
 3c2:	60 93 0b 01 	sts	0x010B, r22
					}
				}	
				
				
				
				UDR0=VAC16>>4;
 3c6:	80 91 11 01 	lds	r24, 0x0111
 3ca:	90 91 12 01 	lds	r25, 0x0112
 3ce:	9c 01       	movw	r18, r24
 3d0:	74 e0       	ldi	r23, 0x04	; 4
 3d2:	35 95       	asr	r19
 3d4:	27 95       	ror	r18
 3d6:	7a 95       	dec	r23
 3d8:	e1 f7       	brne	.-8      	; 0x3d2 <__vector_9+0x1d4>
 3da:	20 93 c6 00 	sts	0x00C6, r18
				setDAC(VAC16,chan);
 3de:	60 91 20 01 	lds	r22, 0x0120
 3e2:	0e 94 91 00 	call	0x122	; 0x122 <setDAC>
				//setDAC(VAC16,3);
				//setDAC(VAC16,4);
				//setDAC(VAC16,5);
				//setDAC(VAC16,6);
				//setDAC(VAC16,7);				
				PORTD&=~(1<<LDAC);
 3e6:	5a 98       	cbi	0x0b, 2	; 11
				PORTD|=(1<<LDAC);
 3e8:	5a 9a       	sbi	0x0b, 2	; 11
				
			}
						
			
			UDP_cnt++;
			UDP_cnt%=4;
 3ea:	80 91 41 01 	lds	r24, 0x0141
 3ee:	8f 5f       	subi	r24, 0xFF	; 255
 3f0:	83 70       	andi	r24, 0x03	; 3
 3f2:	80 93 41 01 	sts	0x0141, r24
 3f6:	24 c1       	rjmp	.+584    	; 0x640 <__vector_9+0x442>

			
		}
		else if(MD==PROGRAM)
 3f8:	62 30       	cpi	r22, 0x02	; 2
 3fa:	09 f0       	breq	.+2      	; 0x3fe <__vector_9+0x200>
 3fc:	a6 c0       	rjmp	.+332    	; 0x54a <__vector_9+0x34c>
		{
			T=16;
 3fe:	80 e1       	ldi	r24, 0x10	; 16
 400:	80 93 37 01 	sts	0x0137, r24
			static uint16_t adc_h;
			
			if(event_cnt==(1))
 404:	40 91 2e 01 	lds	r20, 0x012E
 408:	50 91 2f 01 	lds	r21, 0x012F
 40c:	41 30       	cpi	r20, 0x01	; 1
 40e:	51 05       	cpc	r21, r1
 410:	29 f4       	brne	.+10     	; 0x41c <__vector_9+0x21e>
			{	
				UDR0=PROGRAM_done;
 412:	80 91 1f 01 	lds	r24, 0x011F
 416:	80 93 c6 00 	sts	0x00C6, r24
 41a:	77 c0       	rjmp	.+238    	; 0x50a <__vector_9+0x30c>
			}

			if(event_cnt==(2))//ADC GET 
 41c:	42 30       	cpi	r20, 0x02	; 2
 41e:	51 05       	cpc	r21, r1
 420:	59 f4       	brne	.+22     	; 0x438 <__vector_9+0x23a>
			{	
				ADCL_=ADCL;	
 422:	90 91 78 00 	lds	r25, 0x0078
 426:	90 93 38 01 	sts	0x0138, r25
				ADCH_=ADCH;
 42a:	80 91 79 00 	lds	r24, 0x0079
 42e:	80 93 3a 01 	sts	0x013A, r24
				UDR0=ADCL_;
 432:	90 93 c6 00 	sts	0x00C6, r25
 436:	6c c0       	rjmp	.+216    	; 0x510 <__vector_9+0x312>
			}
			
			if(event_cnt==(3))//ADC GET CONTINUE
 438:	43 30       	cpi	r20, 0x03	; 3
 43a:	51 05       	cpc	r21, r1
 43c:	31 f5       	brne	.+76     	; 0x48a <__vector_9+0x28c>
			{	
				
				UDR0=ADCH_;
 43e:	80 91 3a 01 	lds	r24, 0x013A
 442:	80 93 c6 00 	sts	0x00C6, r24
				
				_adc=(ADCL_|(ADCH_ <<8));
 446:	38 2f       	mov	r19, r24
 448:	20 e0       	ldi	r18, 0x00	; 0
 44a:	80 91 38 01 	lds	r24, 0x0138
 44e:	90 e0       	ldi	r25, 0x00	; 0
 450:	82 2b       	or	r24, r18
 452:	93 2b       	or	r25, r19
 454:	90 93 3e 01 	sts	0x013E, r25
 458:	80 93 3d 01 	sts	0x013D, r24
				adc_h=((uint16_t)(512)-_adc);
 45c:	20 e0       	ldi	r18, 0x00	; 0
 45e:	32 e0       	ldi	r19, 0x02	; 2
 460:	28 1b       	sub	r18, r24
 462:	39 0b       	sbc	r19, r25
 464:	30 93 2a 01 	sts	0x012A, r19
 468:	20 93 29 01 	sts	0x0129, r18
				
				if((adc_h)==(uint16_t)(t1))
 46c:	80 91 08 01 	lds	r24, 0x0108
 470:	90 e0       	ldi	r25, 0x00	; 0
 472:	28 17       	cp	r18, r24
 474:	39 07       	cpc	r19, r25
 476:	09 f0       	breq	.+2      	; 0x47a <__vector_9+0x27c>
 478:	48 c0       	rjmp	.+144    	; 0x50a <__vector_9+0x30c>
				{
					PROGRAM_done=1;
 47a:	81 e0       	ldi	r24, 0x01	; 1
 47c:	80 93 1f 01 	sts	0x011F, r24
					prog_val=0;
 480:	10 92 18 01 	sts	0x0118, r1
 484:	10 92 17 01 	sts	0x0117, r1
 488:	4b c0       	rjmp	.+150    	; 0x520 <__vector_9+0x322>
				}
			}
			
			if(event_cnt==0)
 48a:	41 15       	cp	r20, r1
 48c:	51 05       	cpc	r21, r1
 48e:	e9 f5       	brne	.+122    	; 0x50a <__vector_9+0x30c>
			{
				UDR0=255;
 490:	8f ef       	ldi	r24, 0xFF	; 255
 492:	80 93 c6 00 	sts	0x00C6, r24
				
				
				prog_val+=32;
 496:	20 91 17 01 	lds	r18, 0x0117
 49a:	30 91 18 01 	lds	r19, 0x0118
 49e:	20 5e       	subi	r18, 0xE0	; 224
 4a0:	3f 4f       	sbci	r19, 0xFF	; 255
 4a2:	30 93 18 01 	sts	0x0118, r19
 4a6:	20 93 17 01 	sts	0x0117, r18
				
				if(prog_val==(-x16+32))
 4aa:	40 91 19 01 	lds	r20, 0x0119
 4ae:	50 91 1a 01 	lds	r21, 0x011A
 4b2:	80 e2       	ldi	r24, 0x20	; 32
 4b4:	90 e0       	ldi	r25, 0x00	; 0
 4b6:	84 1b       	sub	r24, r20
 4b8:	95 0b       	sbc	r25, r21
 4ba:	28 17       	cp	r18, r24
 4bc:	39 07       	cpc	r19, r25
 4be:	29 f4       	brne	.+10     	; 0x4ca <__vector_9+0x2cc>
					prog_val=0;
 4c0:	10 92 18 01 	sts	0x0118, r1
 4c4:	10 92 17 01 	sts	0x0117, r1
 4c8:	13 c0       	rjmp	.+38     	; 0x4f0 <__vector_9+0x2f2>
				else
				if(prog_val>(t2<<4))
 4ca:	80 91 09 01 	lds	r24, 0x0109
 4ce:	90 e0       	ldi	r25, 0x00	; 0
 4d0:	64 e0       	ldi	r22, 0x04	; 4
 4d2:	88 0f       	add	r24, r24
 4d4:	99 1f       	adc	r25, r25
 4d6:	6a 95       	dec	r22
 4d8:	e1 f7       	brne	.-8      	; 0x4d2 <__vector_9+0x2d4>
 4da:	82 17       	cp	r24, r18
 4dc:	93 07       	cpc	r25, r19
 4de:	44 f4       	brge	.+16     	; 0x4f0 <__vector_9+0x2f2>
					prog_val=-x16;
 4e0:	88 27       	eor	r24, r24
 4e2:	99 27       	eor	r25, r25
 4e4:	84 1b       	sub	r24, r20
 4e6:	95 0b       	sbc	r25, r21
 4e8:	90 93 18 01 	sts	0x0118, r25
 4ec:	80 93 17 01 	sts	0x0117, r24
				
				if(PROGRAM_done)
 4f0:	80 91 1f 01 	lds	r24, 0x011F
 4f4:	88 23       	and	r24, r24
 4f6:	21 f0       	breq	.+8      	; 0x500 <__vector_9+0x302>
					prog_val=0;
 4f8:	10 92 18 01 	sts	0x0118, r1
 4fc:	10 92 17 01 	sts	0x0117, r1
				
				setDAC(prog_val,chan);
 500:	80 91 17 01 	lds	r24, 0x0117
 504:	90 91 18 01 	lds	r25, 0x0118
 508:	1d c0       	rjmp	.+58     	; 0x544 <__vector_9+0x346>
				PORTD&=~(1<<LDAC);
				PORTD|=(1<<LDAC);
			}			
			else if(event_cnt==7)//t1
 50a:	47 30       	cpi	r20, 0x07	; 7
 50c:	51 05       	cpc	r21, r1
 50e:	c1 f0       	breq	.+48     	; 0x540 <__vector_9+0x342>
			{
				setDAC(0,chan);
				PORTD&=~(1<<LDAC);
				PORTD|=(1<<LDAC);
			}
			else if(event_cnt==9)//dT
 510:	49 30       	cpi	r20, 0x09	; 9
 512:	51 05       	cpc	r21, r1
 514:	29 f4       	brne	.+10     	; 0x520 <__vector_9+0x322>
			{		
				setDAC(y16,chan);
 516:	80 91 1b 01 	lds	r24, 0x011B
 51a:	90 91 1c 01 	lds	r25, 0x011C
 51e:	12 c0       	rjmp	.+36     	; 0x544 <__vector_9+0x346>
				PORTD&=~(1<<LDAC);
				PORTD|=(1<<LDAC);
			}
			else if(event_cnt==(9+1))
 520:	4a 30       	cpi	r20, 0x0A	; 10
 522:	51 05       	cpc	r21, r1
 524:	09 f4       	brne	.+2      	; 0x528 <__vector_9+0x32a>
 526:	54 c0       	rjmp	.+168    	; 0x5d0 <__vector_9+0x3d2>
				ADCSRA |= (1 << ADSC); 

			else if(event_cnt==14)//
 528:	4e 30       	cpi	r20, 0x0E	; 14
 52a:	51 05       	cpc	r21, r1
 52c:	09 f0       	breq	.+2      	; 0x530 <__vector_9+0x332>
 52e:	88 c0       	rjmp	.+272    	; 0x640 <__vector_9+0x442>
			{

			accum=0;
 530:	10 92 3c 01 	sts	0x013C, r1
 534:	10 92 3b 01 	sts	0x013B, r1
			ADC_on=0;
 538:	10 92 2d 01 	sts	0x012D, r1
			accum_cnt=0;
 53c:	10 92 34 01 	sts	0x0134, r1
			
			setDAC(0,chan);
 540:	80 e0       	ldi	r24, 0x00	; 0
 542:	90 e0       	ldi	r25, 0x00	; 0
 544:	60 91 20 01 	lds	r22, 0x0120
 548:	77 c0       	rjmp	.+238    	; 0x638 <__vector_9+0x43a>
			PORTD&=~(1<<LDAC);
			PORTD|=(1<<LDAC);
			}
		}
		else if(MD == ONE_SHOT)
 54a:	65 30       	cpi	r22, 0x05	; 5
 54c:	09 f0       	breq	.+2      	; 0x550 <__vector_9+0x352>
 54e:	78 c0       	rjmp	.+240    	; 0x640 <__vector_9+0x442>
		{
			//готовим сброс
			if(event_cnt==0)
 550:	80 91 2e 01 	lds	r24, 0x012E
 554:	90 91 2f 01 	lds	r25, 0x012F
 558:	00 97       	sbiw	r24, 0x00	; 0
 55a:	59 f1       	breq	.+86     	; 0x5b2 <__vector_9+0x3b4>
			{
				separMult();
			}//сброс
			else if(event_cnt==1)
 55c:	81 30       	cpi	r24, 0x01	; 1
 55e:	91 05       	cpc	r25, r1
 560:	41 f4       	brne	.+16     	; 0x572 <__vector_9+0x374>
			{
				setDAC(120<<4,3);
 562:	80 e8       	ldi	r24, 0x80	; 128
 564:	97 e0       	ldi	r25, 0x07	; 7
 566:	63 e0       	ldi	r22, 0x03	; 3
 568:	0e 94 91 00 	call	0x122	; 0x122 <setDAC>
				setDAC(120<<4,2);
 56c:	80 e8       	ldi	r24, 0x80	; 128
 56e:	97 e0       	ldi	r25, 0x07	; 7
 570:	62 c0       	rjmp	.+196    	; 0x636 <__vector_9+0x438>
				PORTD&=~(1<<LDAC);
				PORTD|=(1<<LDAC);
			}
			else if(event_cnt==2)
 572:	82 30       	cpi	r24, 0x02	; 2
 574:	91 05       	cpc	r25, r1
 576:	31 f4       	brne	.+12     	; 0x584 <__vector_9+0x386>
			{
				setDAC(0,3);
 578:	80 e0       	ldi	r24, 0x00	; 0
 57a:	90 e0       	ldi	r25, 0x00	; 0
 57c:	63 e0       	ldi	r22, 0x03	; 3
 57e:	0e 94 91 00 	call	0x122	; 0x122 <setDAC>
 582:	57 c0       	rjmp	.+174    	; 0x632 <__vector_9+0x434>
				setDAC(0,2);
				PORTD&=~(1<<LDAC);
				PORTD|=(1<<LDAC);
			}		//reseted		
			else if(event_cnt==3)
 584:	83 30       	cpi	r24, 0x03	; 3
 586:	91 05       	cpc	r25, r1
 588:	19 f4       	brne	.+6      	; 0x590 <__vector_9+0x392>
			{
				gatherMult();
 58a:	0e 94 7a 00 	call	0xf4	; 0xf4 <gatherMult>
 58e:	58 c0       	rjmp	.+176    	; 0x640 <__vector_9+0x442>
			}
			else if(event_cnt==4)
 590:	84 30       	cpi	r24, 0x04	; 4
 592:	91 05       	cpc	r25, r1
 594:	29 f4       	brne	.+10     	; 0x5a0 <__vector_9+0x3a2>
			{
				setDAC(x16,3);				
 596:	80 91 19 01 	lds	r24, 0x0119
 59a:	90 91 1a 01 	lds	r25, 0x011A
 59e:	2a c0       	rjmp	.+84     	; 0x5f4 <__vector_9+0x3f6>
				PORTD&=~(1<<LDAC);
				PORTD|=(1<<LDAC);
			}		
			else if(event_cnt==5)
 5a0:	85 30       	cpi	r24, 0x05	; 5
 5a2:	91 05       	cpc	r25, r1
 5a4:	29 f1       	breq	.+74     	; 0x5f0 <__vector_9+0x3f2>
				setDAC(0,3);				
				PORTD&=~(1<<LDAC);
				PORTD|=(1<<LDAC);
			}	//пнули		
				//посмотрим, что вышло
			else if(event_cnt==6)
 5a6:	86 30       	cpi	r24, 0x06	; 6
 5a8:	91 05       	cpc	r25, r1
 5aa:	31 f4       	brne	.+12     	; 0x5b8 <__vector_9+0x3ba>
			{
				UDR0=255;
 5ac:	8f ef       	ldi	r24, 0xFF	; 255
 5ae:	80 93 c6 00 	sts	0x00C6, r24
				separMult();				
 5b2:	0e 94 83 00 	call	0x106	; 0x106 <separMult>
 5b6:	44 c0       	rjmp	.+136    	; 0x640 <__vector_9+0x442>
			}			
			else if(event_cnt==7)
 5b8:	87 30       	cpi	r24, 0x07	; 7
 5ba:	91 05       	cpc	r25, r1
 5bc:	79 f4       	brne	.+30     	; 0x5dc <__vector_9+0x3de>
			{
				setDAC(y16,3);
 5be:	80 91 1b 01 	lds	r24, 0x011B
 5c2:	90 91 1c 01 	lds	r25, 0x011C
 5c6:	63 e0       	ldi	r22, 0x03	; 3
 5c8:	0e 94 91 00 	call	0x122	; 0x122 <setDAC>
				PORTD&=~(1<<LDAC);
 5cc:	5a 98       	cbi	0x0b, 2	; 11
				PORTD|=(1<<LDAC);
 5ce:	5a 9a       	sbi	0x0b, 2	; 11
				
				ADCSRA |= (1 << ADSC); 
 5d0:	80 91 7a 00 	lds	r24, 0x007A
 5d4:	80 64       	ori	r24, 0x40	; 64
 5d6:	80 93 7a 00 	sts	0x007A, r24
 5da:	32 c0       	rjmp	.+100    	; 0x640 <__vector_9+0x442>
			}	
			else if(event_cnt==9)
 5dc:	89 30       	cpi	r24, 0x09	; 9
 5de:	91 05       	cpc	r25, r1
 5e0:	b9 f0       	breq	.+46     	; 0x610 <__vector_9+0x412>
				//setDAC(y16,3);
				ADCL_=ADCL;	
				ADCH_=ADCH;
				UDR0=ADCL_;
			}
			else if(event_cnt==10)
 5e2:	8a 30       	cpi	r24, 0x0A	; 10
 5e4:	91 05       	cpc	r25, r1
 5e6:	41 f4       	brne	.+16     	; 0x5f8 <__vector_9+0x3fa>
			{
				UDR0=ADCH_; 
 5e8:	80 91 3a 01 	lds	r24, 0x013A
 5ec:	80 93 c6 00 	sts	0x00C6, r24
				
				setDAC(0,3);
 5f0:	80 e0       	ldi	r24, 0x00	; 0
 5f2:	90 e0       	ldi	r25, 0x00	; 0
 5f4:	63 e0       	ldi	r22, 0x03	; 3
 5f6:	20 c0       	rjmp	.+64     	; 0x638 <__vector_9+0x43a>
				PORTD&=~(1<<LDAC);
				PORTD|=(1<<LDAC);
			}		
			//3й просмотрен
			else if(event_cnt==11)
 5f8:	8b 30       	cpi	r24, 0x0B	; 11
 5fa:	91 05       	cpc	r25, r1
 5fc:	31 f4       	brne	.+12     	; 0x60a <__vector_9+0x40c>
			{				 
				setDAC(y16,2);
 5fe:	80 91 1b 01 	lds	r24, 0x011B
 602:	90 91 1c 01 	lds	r25, 0x011C
 606:	62 e0       	ldi	r22, 0x02	; 2
 608:	df cf       	rjmp	.-66     	; 0x5c8 <__vector_9+0x3ca>
				PORTD&=~(1<<LDAC);
				PORTD|=(1<<LDAC);
				
				ADCSRA |= (1 << ADSC); 
			}
			else if(event_cnt==13)
 60a:	8d 30       	cpi	r24, 0x0D	; 13
 60c:	91 05       	cpc	r25, r1
 60e:	59 f4       	brne	.+22     	; 0x626 <__vector_9+0x428>
			{		
				ADCL_=ADCL;	
 610:	90 91 78 00 	lds	r25, 0x0078
 614:	90 93 38 01 	sts	0x0138, r25
				ADCH_=ADCH;
 618:	80 91 79 00 	lds	r24, 0x0079
 61c:	80 93 3a 01 	sts	0x013A, r24
				UDR0=ADCL_;
 620:	90 93 c6 00 	sts	0x00C6, r25
 624:	0d c0       	rjmp	.+26     	; 0x640 <__vector_9+0x442>
			}
			else if(event_cnt == 14)
 626:	0e 97       	sbiw	r24, 0x0e	; 14
 628:	59 f4       	brne	.+22     	; 0x640 <__vector_9+0x442>
			{
				UDR0=ADCH_; 
 62a:	80 91 3a 01 	lds	r24, 0x013A
 62e:	80 93 c6 00 	sts	0x00C6, r24
				
				setDAC(0,2);
 632:	80 e0       	ldi	r24, 0x00	; 0
 634:	90 e0       	ldi	r25, 0x00	; 0
 636:	62 e0       	ldi	r22, 0x02	; 2
 638:	0e 94 91 00 	call	0x122	; 0x122 <setDAC>
				PORTD&=~(1<<LDAC);
 63c:	5a 98       	cbi	0x0b, 2	; 11
				PORTD|=(1<<LDAC);
 63e:	5a 9a       	sbi	0x0b, 2	; 11
		
		
		
		
		
		ctr=0;
 640:	10 92 33 01 	sts	0x0133, r1
 644:	10 92 32 01 	sts	0x0132, r1
		
		
		if(MD!=ONE_SHOT)
 648:	80 91 10 01 	lds	r24, 0x0110
 64c:	20 91 2e 01 	lds	r18, 0x012E
 650:	30 91 2f 01 	lds	r19, 0x012F
 654:	85 30       	cpi	r24, 0x05	; 5
 656:	89 f0       	breq	.+34     	; 0x67a <__vector_9+0x47c>
		{
		event_cnt++;
 658:	2f 5f       	subi	r18, 0xFF	; 255
 65a:	3f 4f       	sbci	r19, 0xFF	; 255
 65c:	30 93 2f 01 	sts	0x012F, r19
 660:	20 93 2e 01 	sts	0x012E, r18
		if(event_cnt>T)
 664:	80 91 37 01 	lds	r24, 0x0137
 668:	90 e0       	ldi	r25, 0x00	; 0
 66a:	82 17       	cp	r24, r18
 66c:	93 07       	cpc	r25, r19
 66e:	74 f4       	brge	.+28     	; 0x68c <__vector_9+0x48e>
			event_cnt=0;
 670:	10 92 2f 01 	sts	0x012F, r1
 674:	10 92 2e 01 	sts	0x012E, r1
 678:	09 c0       	rjmp	.+18     	; 0x68c <__vector_9+0x48e>
		}
		else
		{
			if(event_cnt<30)
 67a:	2e 31       	cpi	r18, 0x1E	; 30
 67c:	31 05       	cpc	r19, r1
 67e:	34 f4       	brge	.+12     	; 0x68c <__vector_9+0x48e>
				event_cnt++;			
 680:	2f 5f       	subi	r18, 0xFF	; 255
 682:	3f 4f       	sbci	r19, 0xFF	; 255
 684:	30 93 2f 01 	sts	0x012F, r19
 688:	20 93 2e 01 	sts	0x012E, r18
		}
	}
	ctr++;
 68c:	80 91 32 01 	lds	r24, 0x0132
 690:	90 91 33 01 	lds	r25, 0x0133
 694:	01 96       	adiw	r24, 0x01	; 1
 696:	90 93 33 01 	sts	0x0133, r25
 69a:	80 93 32 01 	sts	0x0132, r24
}
 69e:	ff 91       	pop	r31
 6a0:	ef 91       	pop	r30
 6a2:	bf 91       	pop	r27
 6a4:	af 91       	pop	r26
 6a6:	9f 91       	pop	r25
 6a8:	8f 91       	pop	r24
 6aa:	7f 91       	pop	r23
 6ac:	6f 91       	pop	r22
 6ae:	5f 91       	pop	r21
 6b0:	4f 91       	pop	r20
 6b2:	3f 91       	pop	r19
 6b4:	2f 91       	pop	r18
 6b6:	0f 90       	pop	r0
 6b8:	0f be       	out	0x3f, r0	; 63
 6ba:	0f 90       	pop	r0
 6bc:	1f 90       	pop	r1
 6be:	18 95       	reti

000006c0 <__vector_18>:

//прием команд от компьютера по UART в зависимости от режима
ISR(USART_RX_vect)
{
 6c0:	1f 92       	push	r1
 6c2:	0f 92       	push	r0
 6c4:	0f b6       	in	r0, 0x3f	; 63
 6c6:	0f 92       	push	r0
 6c8:	11 24       	eor	r1, r1
 6ca:	2f 93       	push	r18
 6cc:	3f 93       	push	r19
 6ce:	4f 93       	push	r20
 6d0:	5f 93       	push	r21
 6d2:	6f 93       	push	r22
 6d4:	7f 93       	push	r23
 6d6:	8f 93       	push	r24
 6d8:	9f 93       	push	r25
 6da:	af 93       	push	r26
 6dc:	bf 93       	push	r27
 6de:	ef 93       	push	r30
 6e0:	ff 93       	push	r31
	switch(ptr)
 6e2:	80 91 1e 01 	lds	r24, 0x011E
 6e6:	84 30       	cpi	r24, 0x04	; 4
 6e8:	09 f4       	brne	.+2      	; 0x6ec <__vector_18+0x2c>
 6ea:	65 c0       	rjmp	.+202    	; 0x7b6 <__vector_18+0xf6>
 6ec:	85 30       	cpi	r24, 0x05	; 5
 6ee:	58 f4       	brcc	.+22     	; 0x706 <__vector_18+0x46>
 6f0:	81 30       	cpi	r24, 0x01	; 1
 6f2:	51 f1       	breq	.+84     	; 0x748 <__vector_18+0x88>
 6f4:	81 30       	cpi	r24, 0x01	; 1
 6f6:	d0 f0       	brcs	.+52     	; 0x72c <__vector_18+0x6c>
 6f8:	82 30       	cpi	r24, 0x02	; 2
 6fa:	09 f4       	brne	.+2      	; 0x6fe <__vector_18+0x3e>
 6fc:	42 c0       	rjmp	.+132    	; 0x782 <__vector_18+0xc2>
 6fe:	83 30       	cpi	r24, 0x03	; 3
 700:	09 f0       	breq	.+2      	; 0x704 <__vector_18+0x44>
 702:	8d c0       	rjmp	.+282    	; 0x81e <__vector_18+0x15e>
 704:	4b c0       	rjmp	.+150    	; 0x79c <__vector_18+0xdc>
 706:	87 30       	cpi	r24, 0x07	; 7
 708:	09 f4       	brne	.+2      	; 0x70c <__vector_18+0x4c>
 70a:	64 c0       	rjmp	.+200    	; 0x7d4 <__vector_18+0x114>
 70c:	88 30       	cpi	r24, 0x08	; 8
 70e:	38 f4       	brcc	.+14     	; 0x71e <__vector_18+0x5e>
 710:	85 30       	cpi	r24, 0x05	; 5
 712:	09 f4       	brne	.+2      	; 0x716 <__vector_18+0x56>
 714:	55 c0       	rjmp	.+170    	; 0x7c0 <__vector_18+0x100>
 716:	86 30       	cpi	r24, 0x06	; 6
 718:	09 f0       	breq	.+2      	; 0x71c <__vector_18+0x5c>
 71a:	81 c0       	rjmp	.+258    	; 0x81e <__vector_18+0x15e>
 71c:	56 c0       	rjmp	.+172    	; 0x7ca <__vector_18+0x10a>
 71e:	88 30       	cpi	r24, 0x08	; 8
 720:	09 f4       	brne	.+2      	; 0x724 <__vector_18+0x64>
 722:	5d c0       	rjmp	.+186    	; 0x7de <__vector_18+0x11e>
 724:	89 30       	cpi	r24, 0x09	; 9
 726:	09 f0       	breq	.+2      	; 0x72a <__vector_18+0x6a>
 728:	7a c0       	rjmp	.+244    	; 0x81e <__vector_18+0x15e>
 72a:	5e c0       	rjmp	.+188    	; 0x7e8 <__vector_18+0x128>
	{
		case 0:
		if(UDR0!=255)//байт 255 является синхронизирующим
 72c:	80 91 c6 00 	lds	r24, 0x00C6
 730:	8f 3f       	cpi	r24, 0xFF	; 255
 732:	31 f0       	breq	.+12     	; 0x740 <__vector_18+0x80>
		{
			sync=0;
 734:	10 92 1d 01 	sts	0x011D, r1
			ptr--;
			ptr%=7;
 738:	83 e0       	ldi	r24, 0x03	; 3
 73a:	80 93 1e 01 	sts	0x011E, r24
 73e:	6f c0       	rjmp	.+222    	; 0x81e <__vector_18+0x15e>
		}
		else
			sync=1;
 740:	81 e0       	ldi	r24, 0x01	; 1
 742:	80 93 1d 01 	sts	0x011D, r24
 746:	6b c0       	rjmp	.+214    	; 0x81e <__vector_18+0x15e>
		break;
		case 1:
		MD=UDR0;
 748:	20 91 c6 00 	lds	r18, 0x00C6
 74c:	20 93 10 01 	sts	0x0110, r18
		if(MD==VAC)
 750:	21 30       	cpi	r18, 0x01	; 1
 752:	39 f4       	brne	.+14     	; 0x762 <__vector_18+0xa2>
			time_step=4;//5
 754:	84 e0       	ldi	r24, 0x04	; 4
 756:	90 e0       	ldi	r25, 0x00	; 0
 758:	90 93 0d 01 	sts	0x010D, r25
 75c:	80 93 0c 01 	sts	0x010C, r24
 760:	5e c0       	rjmp	.+188    	; 0x81e <__vector_18+0x15e>
		else
			time_step=6;//4
 762:	86 e0       	ldi	r24, 0x06	; 6
 764:	90 e0       	ldi	r25, 0x00	; 0
 766:	90 93 0d 01 	sts	0x010D, r25
 76a:	80 93 0c 01 	sts	0x010C, r24
		
		if(MD==PROGRAM)
 76e:	22 30       	cpi	r18, 0x02	; 2
 770:	09 f0       	breq	.+2      	; 0x774 <__vector_18+0xb4>
 772:	55 c0       	rjmp	.+170    	; 0x81e <__vector_18+0x15e>
		{
			//PROGRAM_start=1;
			PROGRAM_done=0;
 774:	10 92 1f 01 	sts	0x011F, r1
			prog_val=0;
 778:	10 92 18 01 	sts	0x0118, r1
 77c:	10 92 17 01 	sts	0x0117, r1
 780:	4e c0       	rjmp	.+156    	; 0x81e <__vector_18+0x15e>
		}
		break;
		case 2:
		x16=UDR0<<4;
 782:	80 91 c6 00 	lds	r24, 0x00C6
 786:	90 e0       	ldi	r25, 0x00	; 0
 788:	f4 e0       	ldi	r31, 0x04	; 4
 78a:	88 0f       	add	r24, r24
 78c:	99 1f       	adc	r25, r25
 78e:	fa 95       	dec	r31
 790:	e1 f7       	brne	.-8      	; 0x78a <__vector_18+0xca>
 792:	90 93 1a 01 	sts	0x011A, r25
 796:	80 93 19 01 	sts	0x0119, r24
 79a:	41 c0       	rjmp	.+130    	; 0x81e <__vector_18+0x15e>
		break;
		case 3:	
		y16=UDR0<<4;
 79c:	80 91 c6 00 	lds	r24, 0x00C6
 7a0:	90 e0       	ldi	r25, 0x00	; 0
 7a2:	e4 e0       	ldi	r30, 0x04	; 4
 7a4:	88 0f       	add	r24, r24
 7a6:	99 1f       	adc	r25, r25
 7a8:	ea 95       	dec	r30
 7aa:	e1 f7       	brne	.-8      	; 0x7a4 <__vector_18+0xe4>
 7ac:	90 93 1c 01 	sts	0x011C, r25
 7b0:	80 93 1b 01 	sts	0x011B, r24
 7b4:	34 c0       	rjmp	.+104    	; 0x81e <__vector_18+0x15e>
		break;
		case 4:
		t1=UDR0;
 7b6:	80 91 c6 00 	lds	r24, 0x00C6
 7ba:	80 93 08 01 	sts	0x0108, r24
 7be:	2f c0       	rjmp	.+94     	; 0x81e <__vector_18+0x15e>
		break;		
		case 5:
		t2=UDR0;
 7c0:	80 91 c6 00 	lds	r24, 0x00C6
 7c4:	80 93 09 01 	sts	0x0109, r24
 7c8:	2a c0       	rjmp	.+84     	; 0x81e <__vector_18+0x15e>
		break;	
		case 6:
		dT=UDR0;
 7ca:	80 91 c6 00 	lds	r24, 0x00C6
 7ce:	80 93 31 01 	sts	0x0131, r24
 7d2:	25 c0       	rjmp	.+74     	; 0x81e <__vector_18+0x15e>
		break;
		case 7:
		T=UDR0;
 7d4:	80 91 c6 00 	lds	r24, 0x00C6
 7d8:	80 93 37 01 	sts	0x0137, r24
 7dc:	20 c0       	rjmp	.+64     	; 0x81e <__vector_18+0x15e>
		break;
		case 8:
		chan=UDR0;
 7de:	80 91 c6 00 	lds	r24, 0x00C6
 7e2:	80 93 20 01 	sts	0x0120, r24
 7e6:	1b c0       	rjmp	.+54     	; 0x81e <__vector_18+0x15e>
		break;
		
		case 9:
		reverted[chan]=UDR0;
 7e8:	80 91 c6 00 	lds	r24, 0x00C6
 7ec:	e0 91 20 01 	lds	r30, 0x0120
 7f0:	f0 e0       	ldi	r31, 0x00	; 0
 7f2:	ef 5d       	subi	r30, 0xDF	; 223
 7f4:	fe 4f       	sbci	r31, 0xFE	; 254
 7f6:	80 83       	st	Z, r24
			
			
			if(MD==GATHER_MULT)
 7f8:	80 91 10 01 	lds	r24, 0x0110
 7fc:	83 30       	cpi	r24, 0x03	; 3
 7fe:	19 f4       	brne	.+6      	; 0x806 <__vector_18+0x146>
			{
			//	PORTD=0b00100000;
			//static int ff=1<<5;
			//if(x16>>4)
			gatherMult();
 800:	0e 94 7a 00 	call	0xf4	; 0xf4 <gatherMult>
 804:	04 c0       	rjmp	.+8      	; 0x80e <__vector_18+0x14e>
			//PORTD=(1<<5)^PORTD;
			//PORTD=ff;
			}else if(MD==SEPAR_MULT)	
 806:	84 30       	cpi	r24, 0x04	; 4
 808:	11 f4       	brne	.+4      	; 0x80e <__vector_18+0x14e>
			{
			separMult();	
 80a:	0e 94 83 00 	call	0x106	; 0x106 <separMult>
			}
			if(MD == ONE_SHOT)
 80e:	80 91 10 01 	lds	r24, 0x0110
 812:	85 30       	cpi	r24, 0x05	; 5
 814:	21 f4       	brne	.+8      	; 0x81e <__vector_18+0x15e>
			{
				event_cnt=0;
 816:	10 92 2f 01 	sts	0x012F, r1
 81a:	10 92 2e 01 	sts	0x012E, r1
		break;
	}
	

	
	dTt2=dT+t2;
 81e:	80 91 09 01 	lds	r24, 0x0109
 822:	90 91 31 01 	lds	r25, 0x0131
 826:	89 0f       	add	r24, r25
 828:	80 93 0a 01 	sts	0x010A, r24
	//UDR0=x16/16;
	ptr++;
	ptr%=10;
 82c:	80 91 1e 01 	lds	r24, 0x011E
 830:	8f 5f       	subi	r24, 0xFF	; 255
 832:	6a e0       	ldi	r22, 0x0A	; 10
 834:	0e 94 2f 04 	call	0x85e	; 0x85e <__udivmodqi4>
 838:	90 93 1e 01 	sts	0x011E, r25
 83c:	ff 91       	pop	r31
 83e:	ef 91       	pop	r30
 840:	bf 91       	pop	r27
 842:	af 91       	pop	r26
 844:	9f 91       	pop	r25
 846:	8f 91       	pop	r24
 848:	7f 91       	pop	r23
 84a:	6f 91       	pop	r22
 84c:	5f 91       	pop	r21
 84e:	4f 91       	pop	r20
 850:	3f 91       	pop	r19
 852:	2f 91       	pop	r18
 854:	0f 90       	pop	r0
 856:	0f be       	out	0x3f, r0	; 63
 858:	0f 90       	pop	r0
 85a:	1f 90       	pop	r1
 85c:	18 95       	reti

0000085e <__udivmodqi4>:
 85e:	99 1b       	sub	r25, r25
 860:	79 e0       	ldi	r23, 0x09	; 9
 862:	04 c0       	rjmp	.+8      	; 0x86c <__udivmodqi4_ep>

00000864 <__udivmodqi4_loop>:
 864:	99 1f       	adc	r25, r25
 866:	96 17       	cp	r25, r22
 868:	08 f0       	brcs	.+2      	; 0x86c <__udivmodqi4_ep>
 86a:	96 1b       	sub	r25, r22

0000086c <__udivmodqi4_ep>:
 86c:	88 1f       	adc	r24, r24
 86e:	7a 95       	dec	r23
 870:	c9 f7       	brne	.-14     	; 0x864 <__udivmodqi4_loop>
 872:	80 95       	com	r24
 874:	08 95       	ret

00000876 <_exit>:
 876:	f8 94       	cli

00000878 <__stop_program>:
 878:	ff cf       	rjmp	.-2      	; 0x878 <__stop_program>
