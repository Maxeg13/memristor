
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000012  00800100  00000b0c  00000ba0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000b0c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000003f  00800112  00800112  00000bb2  2**0
                  ALLOC
  3 .debug_aranges 00000020  00000000  00000000  00000bb2  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 000002e4  00000000  00000000  00000bd2  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000007c8  00000000  00000000  00000eb6  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000001fd  00000000  00000000  0000167e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000a7d  00000000  00000000  0000187b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000f0  00000000  00000000  000022f8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000002ab  00000000  00000000  000023e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000010c  00000000  00000000  00002693  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 25 01 	jmp	0x24a	; 0x24a <__vector_9>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 84 04 	jmp	0x908	; 0x908 <__vector_18>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ec e0       	ldi	r30, 0x0C	; 12
  7c:	fb e0       	ldi	r31, 0x0B	; 11
  7e:	02 c0       	rjmp	.+4      	; 0x84 <.do_copy_data_start>

00000080 <.do_copy_data_loop>:
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0

00000084 <.do_copy_data_start>:
  84:	a2 31       	cpi	r26, 0x12	; 18
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <.do_copy_data_loop>

0000008a <__do_clear_bss>:
  8a:	11 e0       	ldi	r17, 0x01	; 1
  8c:	a2 e1       	ldi	r26, 0x12	; 18
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a1 35       	cpi	r26, 0x51	; 81
  96:	b1 07       	cpc	r27, r17
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 cc 00 	call	0x198	; 0x198 <main>
  9e:	0c 94 84 05 	jmp	0xb08	; 0xb08 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <ADC_Init>:
uint8_t accum_cnt;

//функция инициализаци АЦП
//АЦП используется для регистрации тока, проходящего через мемристор
void ADC_Init(){
 ADCSRA |= (1 << ADEN) // Включаем АЦП
  a6:	ea e7       	ldi	r30, 0x7A	; 122
  a8:	f0 e0       	ldi	r31, 0x00	; 0
  aa:	80 81       	ld	r24, Z
  ac:	83 68       	ori	r24, 0x83	; 131
  ae:	80 83       	st	Z, r24
 //ADCSRA&=~(1 << ADPS1)|(1 << ADPS0)|(1 << ADPS1);
 |(1 << ADPS1)|(1 << ADPS0)|(1 << ADPS1);    // устанавливаем предделитель преобразователя на 8
 ADMUX |= (0 << REFS1)|(1 << REFS0) //выставляем опорное напряжение, как внешний ИОН
  b0:	ec e7       	ldi	r30, 0x7C	; 124
  b2:	f0 e0       	ldi	r31, 0x00	; 0
  b4:	80 81       	ld	r24, Z
  b6:	80 64       	ori	r24, 0x40	; 64
  b8:	80 83       	st	Z, r24
 |(0 << MUX0)|(0 << MUX1)|(0 << MUX2)|(0 << MUX3); // снимать сигнал будем с  входа PC0 
}
  ba:	08 95       	ret

000000bc <timer_init>:

//функция инициализации таймера
// Таймер используется для формирования временной последовательности значений, формируемых с ЦАПа
void timer_init()
{
    TCCR2A = 0;        
  bc:	10 92 b0 00 	sts	0x00B0, r1
    TCCR2B = 0;
  c0:	e1 eb       	ldi	r30, 0xB1	; 177
  c2:	f0 e0       	ldi	r31, 0x00	; 0
  c4:	10 82       	st	Z, r1
    
    TCCR2B |= (1<<CS21) ;    
  c6:	80 81       	ld	r24, Z
  c8:	82 60       	ori	r24, 0x02	; 2
  ca:	80 83       	st	Z, r24
    TIMSK2 = (1 << TOIE2);
  cc:	81 e0       	ldi	r24, 0x01	; 1
  ce:	80 93 70 00 	sts	0x0070, r24
}
  d2:	08 95       	ret

000000d4 <uart_init>:

//функция инициализации UART-интерфейса
void uart_init(unsigned int ubrr)
{	
	UBRR0H = (unsigned char)(ubrr>>8);
  d4:	90 93 c5 00 	sts	0x00C5, r25
	UBRR0L = (unsigned char)ubrr;
  d8:	80 93 c4 00 	sts	0x00C4, r24
	UCSR0B = (1<<RXCIE0)|(1<<RXEN0)|(1<<TXEN0);
  dc:	88 e9       	ldi	r24, 0x98	; 152
  de:	80 93 c1 00 	sts	0x00C1, r24
	UCSR0C = (1<<USBS0)|(3<<UCSZ00);
  e2:	8e e0       	ldi	r24, 0x0E	; 14
  e4:	80 93 c2 00 	sts	0x00C2, r24
}
  e8:	08 95       	ret

000000ea <SPI_MasterInit>:

//функция инициализации SPI
void SPI_MasterInit()
{
	DDR_SPI = (1<<DD_MOSI)|(1<<DD_SCK)|(1<<SPI_SS);
  ea:	8c e2       	ldi	r24, 0x2C	; 44
  ec:	84 b9       	out	0x04, r24	; 4
	SPCR = (1<<SPE)|(0<<DORD)|(1<<MSTR)|(1<<CPOL)|(0<<CPHA);//|(1<<SPR1)|(0<<SPR0);
  ee:	88 e5       	ldi	r24, 0x58	; 88
  f0:	8c bd       	out	0x2c, r24	; 44
}
  f2:	08 95       	ret

000000f4 <gatherMult>:
}

			
void gatherMult()
{
	UNSET_BYTE(PORTD, 6);
  f4:	5e 98       	cbi	0x0b, 6	; 11
	UNSET_BYTE(PORTD, 7);				
  f6:	5f 98       	cbi	0x0b, 7	; 11
	UNSET_BYTE(PORTD, 5);
  f8:	5d 98       	cbi	0x0b, 5	; 11
	UNSET_BYTE(PORTC, 4);
  fa:	44 98       	cbi	0x08, 4	; 8
	
	
	SET_BYTE(PORTC, 1);				
  fc:	41 9a       	sbi	0x08, 1	; 8
	SET_BYTE(PORTB, 2);
  fe:	2a 9a       	sbi	0x05, 2	; 5
	SET_BYTE(PORTB, 1);
 100:	29 9a       	sbi	0x05, 1	; 5
	SET_BYTE(PORTB, 0);
 102:	28 9a       	sbi	0x05, 0	; 5
}
 104:	08 95       	ret

00000106 <separMult>:
void separMult()
{
	UNSET_BYTE(PORTB, 1);
 106:	29 98       	cbi	0x05, 1	; 5
	UNSET_BYTE(PORTB, 2);
 108:	2a 98       	cbi	0x05, 2	; 5
	UNSET_BYTE(PORTC, 1);
 10a:	41 98       	cbi	0x08, 1	; 8
	
	SET_BYTE(PORTC, 4);						
 10c:	44 9a       	sbi	0x08, 4	; 8
	SET_BYTE(PORTD, 6);
 10e:	5e 9a       	sbi	0x0b, 6	; 11
	SET_BYTE(PORTD, 7);
 110:	5f 9a       	sbi	0x0b, 7	; 11
	SET_BYTE(PORTB, 0);
 112:	28 9a       	sbi	0x05, 0	; 5
	SET_BYTE(PORTD, 5);
 114:	5d 9a       	sbi	0x0b, 5	; 11
}
 116:	08 95       	ret

00000118 <SPI_WriteByte>:



void SPI_WriteByte(uint8_t data)
{
   SPDR = data;
 118:	8e bd       	out	0x2e, r24	; 46
  while(!(SPSR & (1<<SPIF)));
 11a:	0d b4       	in	r0, 0x2d	; 45
 11c:	07 fe       	sbrs	r0, 7
 11e:	fd cf       	rjmp	.-6      	; 0x11a <SPI_WriteByte+0x2>
}
 120:	08 95       	ret

00000122 <prepareResetDAC>:

void prepareResetDAC(int8_t chan)//_____________bipolar!!! and <<4 larger
{
    // static int16_t x;
	//x+=2048;
	PORTD&=~(1<<SYNC);
 122:	5b 98       	cbi	0x0b, 3	; 11
	//send8 = (x >> 8);
	// send8 = 0b00001000;
	// send8|=(chan_addrs[chan]);
	SPI_WriteByte(0b00001000|chan_addrs[chan]);
 124:	e8 2f       	mov	r30, r24
 126:	ff 27       	eor	r31, r31
 128:	e7 fd       	sbrc	r30, 7
 12a:	f0 95       	com	r31
 12c:	ee 5f       	subi	r30, 0xFE	; 254
 12e:	fe 4f       	sbci	r31, 0xFE	; 254
 130:	80 81       	ld	r24, Z
 132:	88 60       	ori	r24, 0x08	; 8
 134:	90 e0       	ldi	r25, 0x00	; 0
 136:	0e 94 8c 00 	call	0x118	; 0x118 <SPI_WriteByte>
	// send8=x;
	SPI_WriteByte(0);		
 13a:	80 e0       	ldi	r24, 0x00	; 0
 13c:	90 e0       	ldi	r25, 0x00	; 0
 13e:	0e 94 8c 00 	call	0x118	; 0x118 <SPI_WriteByte>
	PORTD|=(1<<SYNC);
 142:	5b 9a       	sbi	0x0b, 3	; 11
}
 144:	08 95       	ret

00000146 <prepareSetDAC>:

//функция управления ЦАПом 
// при этом, управление регистром LDAC должно использоваться 
//вне функции в перспепктиве создания многоканальной схемы
void prepareSetDAC(int16_t x,int8_t chan)//_____________bipolar!!! and <<4 larger
{
 146:	0f 93       	push	r16
 148:	1f 93       	push	r17
 14a:	e6 2f       	mov	r30, r22


	x=-x;
 14c:	00 27       	eor	r16, r16
 14e:	11 27       	eor	r17, r17
 150:	08 1b       	sub	r16, r24
 152:	19 0b       	sbc	r17, r25
	x+=2048;
 154:	00 50       	subi	r16, 0x00	; 0
 156:	18 4f       	sbci	r17, 0xF8	; 248
	PORTD&=~(1<<SYNC);
 158:	5b 98       	cbi	0x0b, 3	; 11
	send8 = (x >> 8);
	send8 &= 0b00001111;
	send8|=(chan_addrs[chan]);
 15a:	81 2f       	mov	r24, r17
 15c:	99 27       	eor	r25, r25
 15e:	87 fd       	sbrc	r24, 7
 160:	9a 95       	dec	r25
 162:	8f 70       	andi	r24, 0x0F	; 15
 164:	ff 27       	eor	r31, r31
 166:	e7 fd       	sbrc	r30, 7
 168:	f0 95       	com	r31
 16a:	ee 5f       	subi	r30, 0xFE	; 254
 16c:	fe 4f       	sbci	r31, 0xFE	; 254
 16e:	20 81       	ld	r18, Z
 170:	82 2b       	or	r24, r18
 172:	80 93 40 01 	sts	0x0140, r24
	SPI_WriteByte(send8);
 176:	90 e0       	ldi	r25, 0x00	; 0
 178:	0e 94 8c 00 	call	0x118	; 0x118 <SPI_WriteByte>
	send8=x;
 17c:	00 93 40 01 	sts	0x0140, r16
	SPI_WriteByte(send8);		
 180:	80 2f       	mov	r24, r16
 182:	90 e0       	ldi	r25, 0x00	; 0
 184:	0e 94 8c 00 	call	0x118	; 0x118 <SPI_WriteByte>
	PORTD|=(1<<SYNC);
 188:	5b 9a       	sbi	0x0b, 3	; 11

}
 18a:	1f 91       	pop	r17
 18c:	0f 91       	pop	r16
 18e:	08 95       	ret

00000190 <set_reverser>:
		else
			PORTB&=~(1<<4);
		break;

	}
}
 190:	08 95       	ret

00000192 <setDAC>:

void setDAC(){
	PORTD&=~(1<<LDAC);
 192:	5a 98       	cbi	0x0b, 2	; 11
	PORTD|=(1<<LDAC);	
 194:	5a 9a       	sbi	0x0b, 2	; 11
}
 196:	08 95       	ret

00000198 <main>:


void main(void)
{
 198:	1f 93       	push	r17
	BIG_STAT_N = STAT_N*STAT_CYCLE;
 19a:	80 91 01 01 	lds	r24, 0x0101
 19e:	90 91 00 01 	lds	r25, 0x0100
 1a2:	89 9f       	mul	r24, r25
 1a4:	80 2d       	mov	r24, r0
 1a6:	11 24       	eor	r1, r1
 1a8:	80 93 49 01 	sts	0x0149, r24
 1ac:	e2 e0       	ldi	r30, 0x02	; 2
 1ae:	f1 e0       	ldi	r31, 0x01	; 1
	
	for (uint8_t i=0; i<8;i++)
		chan_addrs[i]=chan_addrs[i]<<4;
 1b0:	80 81       	ld	r24, Z
 1b2:	82 95       	swap	r24
 1b4:	80 7f       	andi	r24, 0xF0	; 240
 1b6:	81 93       	st	Z+, r24

void main(void)
{
	BIG_STAT_N = STAT_N*STAT_CYCLE;
	
	for (uint8_t i=0; i<8;i++)
 1b8:	81 e0       	ldi	r24, 0x01	; 1
 1ba:	ea 30       	cpi	r30, 0x0A	; 10
 1bc:	f8 07       	cpc	r31, r24
 1be:	c1 f7       	brne	.-16     	; 0x1b0 <main+0x18>
		chan_addrs[i]=chan_addrs[i]<<4;
	
	PORTC|=0b00000000;
 1c0:	88 b1       	in	r24, 0x08	; 8
 1c2:	88 b9       	out	0x08, r24	; 8
	DDRC= 0b00011110;
 1c4:	8e e1       	ldi	r24, 0x1E	; 30
 1c6:	87 b9       	out	0x07, r24	; 7
	DDRD =0b11111110;
 1c8:	8e ef       	ldi	r24, 0xFE	; 254
 1ca:	8a b9       	out	0x0a, r24	; 10
	//PORTD|=0b00100000;	
	DDRB= 0b00011111;
 1cc:	8f e1       	ldi	r24, 0x1F	; 31
 1ce:	84 b9       	out	0x04, r24	; 4
	sei();
 1d0:	78 94       	sei
}

//функция инициализации SPI
void SPI_MasterInit()
{
	DDR_SPI = (1<<DD_MOSI)|(1<<DD_SCK)|(1<<SPI_SS);
 1d2:	8c e2       	ldi	r24, 0x2C	; 44
 1d4:	84 b9       	out	0x04, r24	; 4
	SPCR = (1<<SPE)|(0<<DORD)|(1<<MSTR)|(1<<CPOL)|(0<<CPHA);//|(1<<SPR1)|(0<<SPR0);
 1d6:	88 e5       	ldi	r24, 0x58	; 88
 1d8:	8c bd       	out	0x2c, r24	; 44

//функция инициализации таймера
// Таймер используется для формирования временной последовательности значений, формируемых с ЦАПа
void timer_init()
{
    TCCR2A = 0;        
 1da:	10 92 b0 00 	sts	0x00B0, r1
    TCCR2B = 0;
 1de:	10 92 b1 00 	sts	0x00B1, r1
    
    TCCR2B |= (1<<CS21) ;    
 1e2:	80 91 b1 00 	lds	r24, 0x00B1
 1e6:	82 60       	ori	r24, 0x02	; 2
 1e8:	80 93 b1 00 	sts	0x00B1, r24
    TIMSK2 = (1 << TOIE2);
 1ec:	81 e0       	ldi	r24, 0x01	; 1
 1ee:	80 93 70 00 	sts	0x0070, r24
}

//функция инициализации UART-интерфейса
void uart_init(unsigned int ubrr)
{	
	UBRR0H = (unsigned char)(ubrr>>8);
 1f2:	10 92 c5 00 	sts	0x00C5, r1
	UBRR0L = (unsigned char)ubrr;
 1f6:	83 e3       	ldi	r24, 0x33	; 51
 1f8:	80 93 c4 00 	sts	0x00C4, r24
	UCSR0B = (1<<RXCIE0)|(1<<RXEN0)|(1<<TXEN0);
 1fc:	88 e9       	ldi	r24, 0x98	; 152
 1fe:	80 93 c1 00 	sts	0x00C1, r24
	UCSR0C = (1<<USBS0)|(3<<UCSZ00);
 202:	8e e0       	ldi	r24, 0x0E	; 14
 204:	80 93 c2 00 	sts	0x00C2, r24
uint8_t accum_cnt;

//функция инициализаци АЦП
//АЦП используется для регистрации тока, проходящего через мемристор
void ADC_Init(){
 ADCSRA |= (1 << ADEN) // Включаем АЦП
 208:	80 91 7a 00 	lds	r24, 0x007A
 20c:	83 68       	ori	r24, 0x83	; 131
 20e:	80 93 7a 00 	sts	0x007A, r24
 //ADCSRA&=~(1 << ADPS1)|(1 << ADPS0)|(1 << ADPS1);
 |(1 << ADPS1)|(1 << ADPS0)|(1 << ADPS1);    // устанавливаем предделитель преобразователя на 8
 ADMUX |= (0 << REFS1)|(1 << REFS0) //выставляем опорное напряжение, как внешний ИОН
 212:	80 91 7c 00 	lds	r24, 0x007C
 216:	80 64       	ori	r24, 0x40	; 64
 218:	80 93 7c 00 	sts	0x007C, r24
    //DDRD = 0b000001100;	
	
	uart_init(BAUDRATE);
	ADC_Init();
	
	ADCSRA |= (1 << ADSC); 
 21c:	80 91 7a 00 	lds	r24, 0x007A
 220:	80 64       	ori	r24, 0x40	; 64
 222:	80 93 7a 00 	sts	0x007A, r24
	ADCL;
 226:	80 91 78 00 	lds	r24, 0x0078
	ADCL;
 22a:	80 91 78 00 	lds	r24, 0x0078
 22e:	10 e0       	ldi	r17, 0x00	; 0
		//set_reverser(i,1);
	
	//set_reverser(0,0);
	for (int i=0;i<8;i++)
	{
		prepareSetDAC(0,i);
 230:	80 e0       	ldi	r24, 0x00	; 0
 232:	90 e0       	ldi	r25, 0x00	; 0
 234:	61 2f       	mov	r22, r17
 236:	0e 94 a3 00 	call	0x146	; 0x146 <prepareSetDAC>
 23a:	1f 5f       	subi	r17, 0xFF	; 255

	//for(int i=0;i<8;i++)
		//set_reverser(i,1);
	
	//set_reverser(0,0);
	for (int i=0;i<8;i++)
 23c:	18 30       	cpi	r17, 0x08	; 8
 23e:	c1 f7       	brne	.-16     	; 0x230 <main+0x98>

	}
}

void setDAC(){
	PORTD&=~(1<<LDAC);
 240:	5a 98       	cbi	0x0b, 2	; 11
	PORTD|=(1<<LDAC);	
 242:	5a 9a       	sbi	0x0b, 2	; 11
	for (int i=0;i<8;i++)
	{
		prepareSetDAC(0,i);
	}
setDAC();	
	separMult();
 244:	0e 94 83 00 	call	0x106	; 0x106 <separMult>
 248:	ff cf       	rjmp	.-2      	; 0x248 <main+0xb0>

0000024a <__vector_9>:
//главный цикл работы контроллера
//Здесь устанавливаются значения ЦАП и передаются данные на компьютер
//через UART-интерфейс
//данный участок кода повторяется при переполнении TIMER2
ISR(TIMER2_OVF_vect)
{
 24a:	1f 92       	push	r1
 24c:	0f 92       	push	r0
 24e:	0f b6       	in	r0, 0x3f	; 63
 250:	0f 92       	push	r0
 252:	11 24       	eor	r1, r1
 254:	2f 93       	push	r18
 256:	3f 93       	push	r19
 258:	4f 93       	push	r20
 25a:	5f 93       	push	r21
 25c:	6f 93       	push	r22
 25e:	7f 93       	push	r23
 260:	8f 93       	push	r24
 262:	9f 93       	push	r25
 264:	af 93       	push	r26
 266:	bf 93       	push	r27
 268:	ef 93       	push	r30
 26a:	ff 93       	push	r31
	if(ctr>time_step)
 26c:	20 91 3c 01 	lds	r18, 0x013C
 270:	30 91 3d 01 	lds	r19, 0x013D
 274:	80 91 0e 01 	lds	r24, 0x010E
 278:	90 91 0f 01 	lds	r25, 0x010F
 27c:	82 17       	cp	r24, r18
 27e:	93 07       	cpc	r25, r19
 280:	0c f0       	brlt	.+2      	; 0x284 <__vector_9+0x3a>
 282:	28 c3       	rjmp	.+1616   	; 0x8d4 <__vector_9+0x68a>
	{
		if(MD==CUSTOM)
 284:	60 91 12 01 	lds	r22, 0x0112
 288:	66 23       	and	r22, r22
 28a:	09 f0       	breq	.+2      	; 0x28e <__vector_9+0x44>
 28c:	4a c0       	rjmp	.+148    	; 0x322 <__vector_9+0xd8>
		{
			if(event_cnt==(1))
 28e:	20 91 38 01 	lds	r18, 0x0138
 292:	30 91 39 01 	lds	r19, 0x0139
 296:	21 30       	cpi	r18, 0x01	; 1
 298:	31 05       	cpc	r19, r1
 29a:	59 f4       	brne	.+22     	; 0x2b2 <__vector_9+0x68>
			{	
			ADCL_=ADCL;
 29c:	90 91 78 00 	lds	r25, 0x0078
 2a0:	90 93 42 01 	sts	0x0142, r25
			ADCH_=ADCH;
 2a4:	80 91 79 00 	lds	r24, 0x0079
 2a8:	80 93 46 01 	sts	0x0146, r24
			UDR0=ADCL_;			
 2ac:	90 93 c6 00 	sts	0x00C6, r25
 2b0:	0d c0       	rjmp	.+26     	; 0x2cc <__vector_9+0x82>
			}
			
			if(event_cnt==(2))
 2b2:	22 30       	cpi	r18, 0x02	; 2
 2b4:	31 05       	cpc	r19, r1
 2b6:	29 f4       	brne	.+10     	; 0x2c2 <__vector_9+0x78>
			{	
			UDR0=ADCH_;				
 2b8:	80 91 46 01 	lds	r24, 0x0146
 2bc:	80 93 c6 00 	sts	0x00C6, r24
 2c0:	05 c0       	rjmp	.+10     	; 0x2cc <__vector_9+0x82>
			}
			
			
			
			if(event_cnt==0)
 2c2:	21 15       	cp	r18, r1
 2c4:	31 05       	cpc	r19, r1
 2c6:	11 f4       	brne	.+4      	; 0x2cc <__vector_9+0x82>
			{
			UDR0=255;
 2c8:	8f ef       	ldi	r24, 0xFF	; 255
 2ca:	ac c2       	rjmp	.+1368   	; 0x824 <__vector_9+0x5da>
			prepareSetDAC(0,chan);
			//prepareSetDAC(x16,2);
			setDAC();
			}
			
			else if(event_cnt==t1)
 2cc:	80 91 0a 01 	lds	r24, 0x010A
 2d0:	90 e0       	ldi	r25, 0x00	; 0
 2d2:	28 17       	cp	r18, r24
 2d4:	39 07       	cpc	r19, r25
 2d6:	09 f4       	brne	.+2      	; 0x2da <__vector_9+0x90>
 2d8:	d7 c2       	rjmp	.+1454   	; 0x888 <__vector_9+0x63e>
			{
				
			//prepareSetDAC(0,chan);
			//setDAC();
			}
			else if(event_cnt==dT)
 2da:	80 91 3b 01 	lds	r24, 0x013B
 2de:	90 e0       	ldi	r25, 0x00	; 0
 2e0:	28 17       	cp	r18, r24
 2e2:	39 07       	cpc	r19, r25
 2e4:	09 f4       	brne	.+2      	; 0x2e8 <__vector_9+0x9e>
 2e6:	d0 c2       	rjmp	.+1440   	; 0x888 <__vector_9+0x63e>
			{		
			//prepareSetDAC(0,chan);
			//setDAC();
		
			}
			else if(event_cnt==(dT+1))
 2e8:	01 96       	adiw	r24, 0x01	; 1
 2ea:	28 17       	cp	r18, r24
 2ec:	39 07       	cpc	r19, r25
 2ee:	09 f4       	brne	.+2      	; 0x2f2 <__vector_9+0xa8>
 2f0:	a9 c2       	rjmp	.+1362   	; 0x844 <__vector_9+0x5fa>
				ADCSRA |= (1 << ADSC); 

			else if(event_cnt==dTt2)
 2f2:	80 91 0c 01 	lds	r24, 0x010C
 2f6:	90 e0       	ldi	r25, 0x00	; 0
 2f8:	28 17       	cp	r18, r24
 2fa:	39 07       	cpc	r19, r25
 2fc:	09 f0       	breq	.+2      	; 0x300 <__vector_9+0xb6>
 2fe:	c4 c2       	rjmp	.+1416   	; 0x888 <__vector_9+0x63e>
			{
			if ( ( UCSR0A & (1<<UDRE0)) )			
 300:	80 91 c0 00 	lds	r24, 0x00C0
 304:	85 ff       	sbrs	r24, 5
 306:	04 c0       	rjmp	.+8      	; 0x310 <__vector_9+0xc6>
				UDR0=_adc;	
 308:	80 91 4a 01 	lds	r24, 0x014A
 30c:	80 93 c6 00 	sts	0x00C6, r24
			accum=0;
 310:	10 92 48 01 	sts	0x0148, r1
 314:	10 92 47 01 	sts	0x0147, r1
			ADC_on=0;
 318:	10 92 37 01 	sts	0x0137, r1
			accum_cnt=0;			
 31c:	10 92 3e 01 	sts	0x013E, r1
 320:	b3 c2       	rjmp	.+1382   	; 0x888 <__vector_9+0x63e>
			//setDAC();

			}		

		}
		else if(MD==VAC)
 322:	61 30       	cpi	r22, 0x01	; 1
 324:	09 f0       	breq	.+2      	; 0x328 <__vector_9+0xde>
 326:	7c c0       	rjmp	.+248    	; 0x420 <__vector_9+0x1d6>
		{			
			static int i=0;
			i++;						
 328:	80 91 35 01 	lds	r24, 0x0135
 32c:	90 91 36 01 	lds	r25, 0x0136
 330:	01 96       	adiw	r24, 0x01	; 1
 332:	90 93 36 01 	sts	0x0136, r25
 336:	80 93 35 01 	sts	0x0135, r24
			
			switch(UDP_cnt)
 33a:	80 91 50 01 	lds	r24, 0x0150
 33e:	81 30       	cpi	r24, 0x01	; 1
 340:	79 f0       	breq	.+30     	; 0x360 <__vector_9+0x116>
 342:	81 30       	cpi	r24, 0x01	; 1
 344:	30 f0       	brcs	.+12     	; 0x352 <__vector_9+0x108>
 346:	82 30       	cpi	r24, 0x02	; 2
 348:	f1 f0       	breq	.+60     	; 0x386 <__vector_9+0x13c>
 34a:	83 30       	cpi	r24, 0x03	; 3
 34c:	09 f0       	breq	.+2      	; 0x350 <__vector_9+0x106>
 34e:	61 c0       	rjmp	.+194    	; 0x412 <__vector_9+0x1c8>
 350:	1f c0       	rjmp	.+62     	; 0x390 <__vector_9+0x146>
			{
				case 0:					
				 ADCSRA |= (1 << ADSC); 
 352:	80 91 7a 00 	lds	r24, 0x007A
 356:	80 64       	ori	r24, 0x40	; 64
 358:	80 93 7a 00 	sts	0x007A, r24
				UDR0=255;
 35c:	8f ef       	ldi	r24, 0xFF	; 255
 35e:	15 c0       	rjmp	.+42     	; 0x38a <__vector_9+0x140>
				break;
				
				
				
				case 1:	
				ADCL__=	ADCL_;
 360:	80 91 42 01 	lds	r24, 0x0142
 364:	80 93 3f 01 	sts	0x013F, r24
				ADCH__ = ADCH_;
 368:	80 91 46 01 	lds	r24, 0x0146
 36c:	80 93 3a 01 	sts	0x013A, r24
				ADCL_=ADCL;
 370:	90 91 78 00 	lds	r25, 0x0078
 374:	90 93 42 01 	sts	0x0142, r25
				ADCH_=ADCH;
 378:	80 91 79 00 	lds	r24, 0x0079
 37c:	80 93 46 01 	sts	0x0146, r24
				
				UDR0=ADCL_;
 380:	90 93 c6 00 	sts	0x00C6, r25
 384:	46 c0       	rjmp	.+140    	; 0x412 <__vector_9+0x1c8>
				break;
				
				case 2:
				UDR0=ADCH_;
 386:	80 91 46 01 	lds	r24, 0x0146
 38a:	80 93 c6 00 	sts	0x00C6, r24
 38e:	41 c0       	rjmp	.+130    	; 0x412 <__vector_9+0x1c8>
				
				
				case 3:
								
				//VAC16_HH=VAC16_H;
				VAC16_H=VAC16;
 390:	20 91 13 01 	lds	r18, 0x0113
 394:	30 91 14 01 	lds	r19, 0x0114
 398:	30 93 16 01 	sts	0x0116, r19
 39c:	20 93 15 01 	sts	0x0115, r18
				
				if(pos_phase)
 3a0:	80 91 0d 01 	lds	r24, 0x010D
 3a4:	88 23       	and	r24, r24
 3a6:	81 f0       	breq	.+32     	; 0x3c8 <__vector_9+0x17e>
				{
							//PORTC=0b00000010;
		//PORTB=0b00011111;
		//PORTD=0b11101100;
					VAC16+=32;
 3a8:	20 5e       	subi	r18, 0xE0	; 224
 3aa:	3f 4f       	sbci	r19, 0xFF	; 255
 3ac:	30 93 14 01 	sts	0x0114, r19
 3b0:	20 93 13 01 	sts	0x0113, r18
					if(VAC16>(ref16-1))
 3b4:	80 91 1d 01 	lds	r24, 0x011D
 3b8:	90 91 1e 01 	lds	r25, 0x011E
 3bc:	28 17       	cp	r18, r24
 3be:	39 07       	cpc	r19, r25
 3c0:	b4 f0       	brlt	.+44     	; 0x3ee <__vector_9+0x1a4>
					{
					pos_phase=0;				
 3c2:	10 92 0d 01 	sts	0x010D, r1
 3c6:	13 c0       	rjmp	.+38     	; 0x3ee <__vector_9+0x1a4>
				else
				{
					//PORTB=0;
		//PORTC=0;
		//PORTD=0;
					VAC16-=32;
 3c8:	c9 01       	movw	r24, r18
 3ca:	80 97       	sbiw	r24, 0x20	; 32
 3cc:	90 93 14 01 	sts	0x0114, r25
 3d0:	80 93 13 01 	sts	0x0113, r24
					if(VAC16<(-x16+1))
 3d4:	21 e0       	ldi	r18, 0x01	; 1
 3d6:	30 e0       	ldi	r19, 0x00	; 0
 3d8:	40 91 1b 01 	lds	r20, 0x011B
 3dc:	50 91 1c 01 	lds	r21, 0x011C
 3e0:	24 1b       	sub	r18, r20
 3e2:	35 0b       	sbc	r19, r21
 3e4:	82 17       	cp	r24, r18
 3e6:	93 07       	cpc	r25, r19
 3e8:	14 f4       	brge	.+4      	; 0x3ee <__vector_9+0x1a4>
					{
					pos_phase=1;									
 3ea:	60 93 0d 01 	sts	0x010D, r22
					}
				}	
				
				
				
				UDR0=VAC16>>4;
 3ee:	80 91 13 01 	lds	r24, 0x0113
 3f2:	90 91 14 01 	lds	r25, 0x0114
 3f6:	9c 01       	movw	r18, r24
 3f8:	b4 e0       	ldi	r27, 0x04	; 4
 3fa:	35 95       	asr	r19
 3fc:	27 95       	ror	r18
 3fe:	ba 95       	dec	r27
 400:	e1 f7       	brne	.-8      	; 0x3fa <__vector_9+0x1b0>
 402:	20 93 c6 00 	sts	0x00C6, r18
				prepareSetDAC(VAC16,chan);
 406:	60 91 26 01 	lds	r22, 0x0126
 40a:	0e 94 a3 00 	call	0x146	; 0x146 <prepareSetDAC>

	}
}

void setDAC(){
	PORTD&=~(1<<LDAC);
 40e:	5a 98       	cbi	0x0b, 2	; 11
	PORTD|=(1<<LDAC);	
 410:	5a 9a       	sbi	0x0b, 2	; 11
				
			}
						
			
			UDP_cnt++;
			UDP_cnt%=4;
 412:	80 91 50 01 	lds	r24, 0x0150
 416:	8f 5f       	subi	r24, 0xFF	; 255
 418:	83 70       	andi	r24, 0x03	; 3
 41a:	80 93 50 01 	sts	0x0150, r24
 41e:	34 c2       	rjmp	.+1128   	; 0x888 <__vector_9+0x63e>

			
		}
		else if(MD==PROGRAM)
 420:	62 30       	cpi	r22, 0x02	; 2
 422:	09 f0       	breq	.+2      	; 0x426 <__vector_9+0x1dc>
 424:	a3 c0       	rjmp	.+326    	; 0x56c <__vector_9+0x322>
		{
			T=16;
 426:	80 e1       	ldi	r24, 0x10	; 16
 428:	80 93 41 01 	sts	0x0141, r24
			static uint16_t adc_h;
			
			if(event_cnt==(1))
 42c:	40 91 38 01 	lds	r20, 0x0138
 430:	50 91 39 01 	lds	r21, 0x0139
 434:	41 30       	cpi	r20, 0x01	; 1
 436:	51 05       	cpc	r21, r1
 438:	29 f4       	brne	.+10     	; 0x444 <__vector_9+0x1fa>
			{	
				UDR0=PROGRAM_done;
 43a:	80 91 25 01 	lds	r24, 0x0125
 43e:	80 93 c6 00 	sts	0x00C6, r24
 442:	77 c0       	rjmp	.+238    	; 0x532 <__vector_9+0x2e8>
			}

			if(event_cnt==(2))//ADC GET 
 444:	42 30       	cpi	r20, 0x02	; 2
 446:	51 05       	cpc	r21, r1
 448:	59 f4       	brne	.+22     	; 0x460 <__vector_9+0x216>
			{	
				ADCL_=ADCL;	
 44a:	90 91 78 00 	lds	r25, 0x0078
 44e:	90 93 42 01 	sts	0x0142, r25
				ADCH_=ADCH;
 452:	80 91 79 00 	lds	r24, 0x0079
 456:	80 93 46 01 	sts	0x0146, r24
				UDR0=ADCL_;
 45a:	90 93 c6 00 	sts	0x00C6, r25
 45e:	6d c0       	rjmp	.+218    	; 0x53a <__vector_9+0x2f0>
			}
			
			if(event_cnt==(3))//ADC GET CONTINUE
 460:	43 30       	cpi	r20, 0x03	; 3
 462:	51 05       	cpc	r21, r1
 464:	31 f5       	brne	.+76     	; 0x4b2 <__vector_9+0x268>
			{	
				
				UDR0=ADCH_;
 466:	80 91 46 01 	lds	r24, 0x0146
 46a:	80 93 c6 00 	sts	0x00C6, r24
				
				_adc=(ADCL_|(ADCH_ <<8));
 46e:	38 2f       	mov	r19, r24
 470:	20 e0       	ldi	r18, 0x00	; 0
 472:	80 91 42 01 	lds	r24, 0x0142
 476:	90 e0       	ldi	r25, 0x00	; 0
 478:	82 2b       	or	r24, r18
 47a:	93 2b       	or	r25, r19
 47c:	90 93 4b 01 	sts	0x014B, r25
 480:	80 93 4a 01 	sts	0x014A, r24
				adc_h=((uint16_t)(512)-_adc);
 484:	20 e0       	ldi	r18, 0x00	; 0
 486:	32 e0       	ldi	r19, 0x02	; 2
 488:	28 1b       	sub	r18, r24
 48a:	39 0b       	sbc	r19, r25
 48c:	30 93 34 01 	sts	0x0134, r19
 490:	20 93 33 01 	sts	0x0133, r18
				
				if((adc_h)==(uint16_t)(t1))
 494:	80 91 0a 01 	lds	r24, 0x010A
 498:	90 e0       	ldi	r25, 0x00	; 0
 49a:	28 17       	cp	r18, r24
 49c:	39 07       	cpc	r19, r25
 49e:	09 f0       	breq	.+2      	; 0x4a2 <__vector_9+0x258>
 4a0:	48 c0       	rjmp	.+144    	; 0x532 <__vector_9+0x2e8>
				{
					PROGRAM_done=1;
 4a2:	81 e0       	ldi	r24, 0x01	; 1
 4a4:	80 93 25 01 	sts	0x0125, r24
					prog_val=0;
 4a8:	10 92 1a 01 	sts	0x011A, r1
 4ac:	10 92 19 01 	sts	0x0119, r1
 4b0:	4c c0       	rjmp	.+152    	; 0x54a <__vector_9+0x300>
				}
			}
			
			if(event_cnt==0)
 4b2:	41 15       	cp	r20, r1
 4b4:	51 05       	cpc	r21, r1
 4b6:	e9 f5       	brne	.+122    	; 0x532 <__vector_9+0x2e8>
			{
				UDR0=255;
 4b8:	8f ef       	ldi	r24, 0xFF	; 255
 4ba:	80 93 c6 00 	sts	0x00C6, r24
				
				
				prog_val+=32;
 4be:	20 91 19 01 	lds	r18, 0x0119
 4c2:	30 91 1a 01 	lds	r19, 0x011A
 4c6:	20 5e       	subi	r18, 0xE0	; 224
 4c8:	3f 4f       	sbci	r19, 0xFF	; 255
 4ca:	30 93 1a 01 	sts	0x011A, r19
 4ce:	20 93 19 01 	sts	0x0119, r18
				
				if(prog_val==(-x16+32))
 4d2:	40 91 1b 01 	lds	r20, 0x011B
 4d6:	50 91 1c 01 	lds	r21, 0x011C
 4da:	80 e2       	ldi	r24, 0x20	; 32
 4dc:	90 e0       	ldi	r25, 0x00	; 0
 4de:	84 1b       	sub	r24, r20
 4e0:	95 0b       	sbc	r25, r21
 4e2:	28 17       	cp	r18, r24
 4e4:	39 07       	cpc	r19, r25
 4e6:	29 f4       	brne	.+10     	; 0x4f2 <__vector_9+0x2a8>
					prog_val=0;
 4e8:	10 92 1a 01 	sts	0x011A, r1
 4ec:	10 92 19 01 	sts	0x0119, r1
 4f0:	13 c0       	rjmp	.+38     	; 0x518 <__vector_9+0x2ce>
				else
				if(prog_val>(t2<<4))
 4f2:	80 91 0b 01 	lds	r24, 0x010B
 4f6:	90 e0       	ldi	r25, 0x00	; 0
 4f8:	a4 e0       	ldi	r26, 0x04	; 4
 4fa:	88 0f       	add	r24, r24
 4fc:	99 1f       	adc	r25, r25
 4fe:	aa 95       	dec	r26
 500:	e1 f7       	brne	.-8      	; 0x4fa <__vector_9+0x2b0>
 502:	82 17       	cp	r24, r18
 504:	93 07       	cpc	r25, r19
 506:	44 f4       	brge	.+16     	; 0x518 <__vector_9+0x2ce>
					prog_val=-x16;
 508:	88 27       	eor	r24, r24
 50a:	99 27       	eor	r25, r25
 50c:	84 1b       	sub	r24, r20
 50e:	95 0b       	sbc	r25, r21
 510:	90 93 1a 01 	sts	0x011A, r25
 514:	80 93 19 01 	sts	0x0119, r24
				
				if(PROGRAM_done)
 518:	80 91 25 01 	lds	r24, 0x0125
 51c:	88 23       	and	r24, r24
 51e:	21 f0       	breq	.+8      	; 0x528 <__vector_9+0x2de>
					prog_val=0;
 520:	10 92 1a 01 	sts	0x011A, r1
 524:	10 92 19 01 	sts	0x0119, r1
				
				prepareSetDAC(prog_val,chan);
 528:	80 91 19 01 	lds	r24, 0x0119
 52c:	90 91 1a 01 	lds	r25, 0x011A
 530:	a6 c0       	rjmp	.+332    	; 0x67e <__vector_9+0x434>
				setDAC();
			}			
			else if(event_cnt==7)//t1
 532:	47 30       	cpi	r20, 0x07	; 7
 534:	51 05       	cpc	r21, r1
 536:	09 f4       	brne	.+2      	; 0x53a <__vector_9+0x2f0>
 538:	a0 c0       	rjmp	.+320    	; 0x67a <__vector_9+0x430>
			{
				prepareSetDAC(0,chan);
				setDAC();
			}
			else if(event_cnt==9)//dT
 53a:	49 30       	cpi	r20, 0x09	; 9
 53c:	51 05       	cpc	r21, r1
 53e:	29 f4       	brne	.+10     	; 0x54a <__vector_9+0x300>
			{		
				prepareSetDAC(ref16,chan);
 540:	80 91 1d 01 	lds	r24, 0x011D
 544:	90 91 1e 01 	lds	r25, 0x011E
 548:	9a c0       	rjmp	.+308    	; 0x67e <__vector_9+0x434>
				setDAC();
			}
			else if(event_cnt==(9+1))
 54a:	4a 30       	cpi	r20, 0x0A	; 10
 54c:	51 05       	cpc	r21, r1
 54e:	09 f4       	brne	.+2      	; 0x552 <__vector_9+0x308>
 550:	79 c1       	rjmp	.+754    	; 0x844 <__vector_9+0x5fa>
				ADCSRA |= (1 << ADSC); 

			else if(event_cnt==14)//
 552:	4e 30       	cpi	r20, 0x0E	; 14
 554:	51 05       	cpc	r21, r1
 556:	09 f0       	breq	.+2      	; 0x55a <__vector_9+0x310>
 558:	97 c1       	rjmp	.+814    	; 0x888 <__vector_9+0x63e>
			{
				accum=0;
 55a:	10 92 48 01 	sts	0x0148, r1
 55e:	10 92 47 01 	sts	0x0147, r1
				ADC_on=0;
 562:	10 92 37 01 	sts	0x0137, r1
				accum_cnt=0;
 566:	10 92 3e 01 	sts	0x013E, r1
 56a:	87 c0       	rjmp	.+270    	; 0x67a <__vector_9+0x430>
				
				prepareSetDAC(0,chan);
				setDAC();
			}
		}
		else if(MD == ONE_SHOT)
 56c:	65 30       	cpi	r22, 0x05	; 5
 56e:	09 f0       	breq	.+2      	; 0x572 <__vector_9+0x328>
 570:	6c c0       	rjmp	.+216    	; 0x64a <__vector_9+0x400>
		{
			//готовим unset
			if(event_cnt==0)
 572:	80 91 38 01 	lds	r24, 0x0138
 576:	90 91 39 01 	lds	r25, 0x0139
 57a:	00 97       	sbiw	r24, 0x00	; 0
 57c:	79 f1       	breq	.+94     	; 0x5dc <__vector_9+0x392>
			{
				separMult();
			}//unsetting
			else if(event_cnt==1)
 57e:	81 30       	cpi	r24, 0x01	; 1
 580:	91 05       	cpc	r25, r1
 582:	61 f4       	brne	.+24     	; 0x59c <__vector_9+0x352>
			{
				prepareSetDAC(unset16,CHAN_4);
 584:	80 91 1f 01 	lds	r24, 0x011F
 588:	90 91 20 01 	lds	r25, 0x0120
 58c:	63 e0       	ldi	r22, 0x03	; 3
 58e:	0e 94 a3 00 	call	0x146	; 0x146 <prepareSetDAC>
				prepareSetDAC(unset16,CHAN_3);
 592:	80 91 1f 01 	lds	r24, 0x011F
 596:	90 91 20 01 	lds	r25, 0x0120
 59a:	51 c0       	rjmp	.+162    	; 0x63e <__vector_9+0x3f4>
				setDAC();
			}
			else if(event_cnt==2)
 59c:	82 30       	cpi	r24, 0x02	; 2
 59e:	91 05       	cpc	r25, r1
 5a0:	31 f4       	brne	.+12     	; 0x5ae <__vector_9+0x364>
			{
				prepareSetDAC(0,CHAN_4);
 5a2:	80 e0       	ldi	r24, 0x00	; 0
 5a4:	90 e0       	ldi	r25, 0x00	; 0
 5a6:	63 e0       	ldi	r22, 0x03	; 3
 5a8:	0e 94 a3 00 	call	0x146	; 0x146 <prepareSetDAC>
 5ac:	46 c0       	rjmp	.+140    	; 0x63a <__vector_9+0x3f0>
				prepareSetDAC(0,CHAN_3);
				setDAC();
			}		//is unset		
			else if(event_cnt==3)
 5ae:	83 30       	cpi	r24, 0x03	; 3
 5b0:	91 05       	cpc	r25, r1
 5b2:	19 f4       	brne	.+6      	; 0x5ba <__vector_9+0x370>
			{
				gatherMult();
 5b4:	0e 94 7a 00 	call	0xf4	; 0xf4 <gatherMult>
 5b8:	67 c1       	rjmp	.+718    	; 0x888 <__vector_9+0x63e>
			}
			else if(event_cnt==4)
 5ba:	84 30       	cpi	r24, 0x04	; 4
 5bc:	91 05       	cpc	r25, r1
 5be:	29 f4       	brne	.+10     	; 0x5ca <__vector_9+0x380>
			{
				prepareSetDAC(x16,CHAN_4);				
 5c0:	80 91 1b 01 	lds	r24, 0x011B
 5c4:	90 91 1c 01 	lds	r25, 0x011C
 5c8:	22 c0       	rjmp	.+68     	; 0x60e <__vector_9+0x3c4>
				setDAC();
			}		
			else if(event_cnt==5)
 5ca:	85 30       	cpi	r24, 0x05	; 5
 5cc:	91 05       	cpc	r25, r1
 5ce:	e9 f0       	breq	.+58     	; 0x60a <__vector_9+0x3c0>
			{
				prepareSetDAC(0,CHAN_4);				
				setDAC();
			}	//пнули		
				//посмотрим, что вышло
			else if(event_cnt==6)
 5d0:	86 30       	cpi	r24, 0x06	; 6
 5d2:	91 05       	cpc	r25, r1
 5d4:	31 f4       	brne	.+12     	; 0x5e2 <__vector_9+0x398>
			{
				UDR0=255;
 5d6:	8f ef       	ldi	r24, 0xFF	; 255
 5d8:	80 93 c6 00 	sts	0x00C6, r24
				separMult();				
 5dc:	0e 94 83 00 	call	0x106	; 0x106 <separMult>
 5e0:	53 c1       	rjmp	.+678    	; 0x888 <__vector_9+0x63e>
			}			
			else if(event_cnt==7)
 5e2:	87 30       	cpi	r24, 0x07	; 7
 5e4:	91 05       	cpc	r25, r1
 5e6:	31 f4       	brne	.+12     	; 0x5f4 <__vector_9+0x3aa>
			{
				prepareSetDAC(ref16,CHAN_4);
 5e8:	80 91 1d 01 	lds	r24, 0x011D
 5ec:	90 91 1e 01 	lds	r25, 0x011E
 5f0:	63 e0       	ldi	r22, 0x03	; 3
 5f2:	24 c1       	rjmp	.+584    	; 0x83c <__vector_9+0x5f2>
				setDAC();				
				ADCSRA |= (1 << ADSC); 
			}	
			else if(event_cnt==9)
 5f4:	89 30       	cpi	r24, 0x09	; 9
 5f6:	91 05       	cpc	r25, r1
 5f8:	09 f4       	brne	.+2      	; 0x5fc <__vector_9+0x3b2>
 5fa:	35 c1       	rjmp	.+618    	; 0x866 <__vector_9+0x61c>
				//prepareSetDAC(ref16,3);
				ADCL_=ADCL;	
				ADCH_=ADCH;
				UDR0=ADCL_;
			}
			else if(event_cnt==10)
 5fc:	8a 30       	cpi	r24, 0x0A	; 10
 5fe:	91 05       	cpc	r25, r1
 600:	41 f4       	brne	.+16     	; 0x612 <__vector_9+0x3c8>
			{
				UDR0=ADCH_; 
 602:	80 91 46 01 	lds	r24, 0x0146
 606:	80 93 c6 00 	sts	0x00C6, r24
				
				prepareSetDAC(0,CHAN_4);
 60a:	80 e0       	ldi	r24, 0x00	; 0
 60c:	90 e0       	ldi	r25, 0x00	; 0
 60e:	63 e0       	ldi	r22, 0x03	; 3
 610:	17 c0       	rjmp	.+46     	; 0x640 <__vector_9+0x3f6>
				setDAC();
			}		
			//4й просмотрен
			else if(event_cnt==11)
 612:	8b 30       	cpi	r24, 0x0B	; 11
 614:	91 05       	cpc	r25, r1
 616:	31 f4       	brne	.+12     	; 0x624 <__vector_9+0x3da>
			{				 
				prepareSetDAC(ref16,CHAN_3);
 618:	80 91 1d 01 	lds	r24, 0x011D
 61c:	90 91 1e 01 	lds	r25, 0x011E
 620:	62 e0       	ldi	r22, 0x02	; 2
 622:	0c c1       	rjmp	.+536    	; 0x83c <__vector_9+0x5f2>
				setDAC();
				
				ADCSRA |= (1 << ADSC); 
			}
			else if(event_cnt==13)
 624:	8d 30       	cpi	r24, 0x0D	; 13
 626:	91 05       	cpc	r25, r1
 628:	09 f4       	brne	.+2      	; 0x62c <__vector_9+0x3e2>
 62a:	1d c1       	rjmp	.+570    	; 0x866 <__vector_9+0x61c>
			{		
				ADCL_=ADCL;	
				ADCH_=ADCH;
				UDR0=ADCL_;
			}
			else if(event_cnt == 14)
 62c:	0e 97       	sbiw	r24, 0x0e	; 14
 62e:	09 f0       	breq	.+2      	; 0x632 <__vector_9+0x3e8>
 630:	2b c1       	rjmp	.+598    	; 0x888 <__vector_9+0x63e>
			{
				UDR0=ADCH_; 
 632:	80 91 46 01 	lds	r24, 0x0146
 636:	80 93 c6 00 	sts	0x00C6, r24
				
				prepareSetDAC(0,CHAN_3);
 63a:	80 e0       	ldi	r24, 0x00	; 0
 63c:	90 e0       	ldi	r25, 0x00	; 0
 63e:	62 e0       	ldi	r22, 0x02	; 2
 640:	0e 94 a3 00 	call	0x146	; 0x146 <prepareSetDAC>

	}
}

void setDAC(){
	PORTD&=~(1<<LDAC);
 644:	5a 98       	cbi	0x0b, 2	; 11
	PORTD|=(1<<LDAC);	
 646:	5a 9a       	sbi	0x0b, 2	; 11
 648:	1f c1       	rjmp	.+574    	; 0x888 <__vector_9+0x63e>
			}
			
		}
		
		
		else if(MD == ANALYZE)//5 by 5
 64a:	66 30       	cpi	r22, 0x06	; 6
 64c:	09 f0       	breq	.+2      	; 0x650 <__vector_9+0x406>
 64e:	1c c1       	rjmp	.+568    	; 0x888 <__vector_9+0x63e>
		{
			//unset
			if(event_cnt==0)
 650:	80 91 38 01 	lds	r24, 0x0138
 654:	90 91 39 01 	lds	r25, 0x0139
 658:	00 97       	sbiw	r24, 0x00	; 0
 65a:	61 f4       	brne	.+24     	; 0x674 <__vector_9+0x42a>
			{
				prepareSetDAC(unset16, chan);
 65c:	80 91 1f 01 	lds	r24, 0x011F
 660:	90 91 20 01 	lds	r25, 0x0120
 664:	60 91 26 01 	lds	r22, 0x0126
 668:	0e 94 a3 00 	call	0x146	; 0x146 <prepareSetDAC>

	}
}

void setDAC(){
	PORTD&=~(1<<LDAC);
 66c:	5a 98       	cbi	0x0b, 2	; 11
	PORTD|=(1<<LDAC);	
 66e:	5a 9a       	sbi	0x0b, 2	; 11
			//unset
			if(event_cnt==0)
			{
				prepareSetDAC(unset16, chan);
				setDAC();
				UDR0=255;
 670:	8f ef       	ldi	r24, 0xFF	; 255
 672:	08 c1       	rjmp	.+528    	; 0x884 <__vector_9+0x63a>
			}
			else if(event_cnt==1)
 674:	81 30       	cpi	r24, 0x01	; 1
 676:	91 05       	cpc	r25, r1
 678:	29 f4       	brne	.+10     	; 0x684 <__vector_9+0x43a>
			{
				prepareSetDAC(0, chan);				
 67a:	80 e0       	ldi	r24, 0x00	; 0
 67c:	90 e0       	ldi	r25, 0x00	; 0
 67e:	60 91 26 01 	lds	r22, 0x0126
 682:	de cf       	rjmp	.-68     	; 0x640 <__vector_9+0x3f6>
				setDAC();
			}
			//create set impulse
			else if(event_cnt==3)
 684:	83 30       	cpi	r24, 0x03	; 3
 686:	91 05       	cpc	r25, r1
 688:	09 f0       	breq	.+2      	; 0x68c <__vector_9+0x442>
 68a:	c7 c0       	rjmp	.+398    	; 0x81a <__vector_9+0x5d0>
			{
				if(an_cnt<(BIG_STAT_N))
 68c:	40 91 27 01 	lds	r20, 0x0127
 690:	50 91 28 01 	lds	r21, 0x0128
 694:	20 91 49 01 	lds	r18, 0x0149
 698:	82 2f       	mov	r24, r18
 69a:	90 e0       	ldi	r25, 0x00	; 0
 69c:	48 17       	cp	r20, r24
 69e:	59 07       	cpc	r21, r25
 6a0:	18 f4       	brcc	.+6      	; 0x6a8 <__vector_9+0x45e>
				{
					STAT_V_step=0;					 
 6a2:	10 92 23 01 	sts	0x0123, r1
 6a6:	23 c0       	rjmp	.+70     	; 0x6ee <__vector_9+0x4a4>
				}
				else if(an_cnt<(BIG_STAT_N*2))
 6a8:	82 2f       	mov	r24, r18
 6aa:	90 e0       	ldi	r25, 0x00	; 0
 6ac:	9c 01       	movw	r18, r24
 6ae:	22 0f       	add	r18, r18
 6b0:	33 1f       	adc	r19, r19
 6b2:	42 17       	cp	r20, r18
 6b4:	53 07       	cpc	r21, r19
 6b6:	10 f4       	brcc	.+4      	; 0x6bc <__vector_9+0x472>
				{
					STAT_V_step=1;
 6b8:	81 e0       	ldi	r24, 0x01	; 1
 6ba:	17 c0       	rjmp	.+46     	; 0x6ea <__vector_9+0x4a0>
				}
				else if(an_cnt<(BIG_STAT_N*3))
 6bc:	28 0f       	add	r18, r24
 6be:	39 1f       	adc	r19, r25
 6c0:	42 17       	cp	r20, r18
 6c2:	53 07       	cpc	r21, r19
 6c4:	10 f4       	brcc	.+4      	; 0x6ca <__vector_9+0x480>
				{
					STAT_V_step=2;
 6c6:	82 e0       	ldi	r24, 0x02	; 2
 6c8:	10 c0       	rjmp	.+32     	; 0x6ea <__vector_9+0x4a0>
				}
				else if(an_cnt<(BIG_STAT_N*4))
 6ca:	9c 01       	movw	r18, r24
 6cc:	22 0f       	add	r18, r18
 6ce:	33 1f       	adc	r19, r19
 6d0:	22 0f       	add	r18, r18
 6d2:	33 1f       	adc	r19, r19
 6d4:	42 17       	cp	r20, r18
 6d6:	53 07       	cpc	r21, r19
 6d8:	10 f4       	brcc	.+4      	; 0x6de <__vector_9+0x494>
				{
					STAT_V_step=3;
 6da:	83 e0       	ldi	r24, 0x03	; 3
 6dc:	06 c0       	rjmp	.+12     	; 0x6ea <__vector_9+0x4a0>
				}
				else if(an_cnt<(BIG_STAT_N*5))
 6de:	28 0f       	add	r18, r24
 6e0:	39 1f       	adc	r19, r25
 6e2:	42 17       	cp	r20, r18
 6e4:	53 07       	cpc	r21, r19
 6e6:	18 f4       	brcc	.+6      	; 0x6ee <__vector_9+0x4a4>
				{
					STAT_V_step=4;
 6e8:	84 e0       	ldi	r24, 0x04	; 4
 6ea:	80 93 23 01 	sts	0x0123, r24
				}////////////						
				//prepareSetDAC(x16, chan);
				UDR0=STAT_V_step;
 6ee:	80 91 23 01 	lds	r24, 0x0123
 6f2:	80 93 c6 00 	sts	0x00C6, r24
				x16_grad = (-(STAT_V_step+1)*8 )<<4;//16
 6f6:	90 e0       	ldi	r25, 0x00	; 0
 6f8:	80 95       	com	r24
 6fa:	90 95       	com	r25
 6fc:	96 95       	lsr	r25
 6fe:	98 2f       	mov	r25, r24
 700:	88 27       	eor	r24, r24
 702:	97 95       	ror	r25
 704:	87 95       	ror	r24
 706:	90 93 4d 01 	sts	0x014D, r25
 70a:	80 93 4c 01 	sts	0x014C, r24
				prepareSetDAC(x16_grad, chan);
 70e:	60 91 26 01 	lds	r22, 0x0126
 712:	0e 94 a3 00 	call	0x146	; 0x146 <prepareSetDAC>

	}
}

void setDAC(){
	PORTD&=~(1<<LDAC);
 716:	5a 98       	cbi	0x0b, 2	; 11
	PORTD|=(1<<LDAC);	
 718:	5a 9a       	sbi	0x0b, 2	; 11
				x16_grad = (-(STAT_V_step+1)*8 )<<4;//16
				prepareSetDAC(x16_grad, chan);
				setDAC();
				
				
				if(an_cnt_fast<(STAT_N))//20 us
 71a:	40 91 29 01 	lds	r20, 0x0129
 71e:	50 91 2a 01 	lds	r21, 0x012A
 722:	80 91 00 01 	lds	r24, 0x0100
 726:	90 e0       	ldi	r25, 0x00	; 0
 728:	48 17       	cp	r20, r24
 72a:	59 07       	cpc	r21, r25
 72c:	18 f4       	brcc	.+6      	; 0x734 <__vector_9+0x4ea>
				{
					STAT_dt_step=0;									
 72e:	10 92 22 01 	sts	0x0122, r1
 732:	49 c0       	rjmp	.+146    	; 0x7c6 <__vector_9+0x57c>
				}
				else if(an_cnt_fast<(STAT_N*2))//80 us
 734:	9c 01       	movw	r18, r24
 736:	22 0f       	add	r18, r18
 738:	33 1f       	adc	r19, r19
 73a:	42 17       	cp	r20, r18
 73c:	53 07       	cpc	r21, r19
 73e:	60 f4       	brcc	.+24     	; 0x758 <__vector_9+0x50e>
				{
					STAT_dt_step=1;
 740:	81 e0       	ldi	r24, 0x01	; 1
 742:	80 93 22 01 	sts	0x0122, r24
 746:	80 e0       	ldi	r24, 0x00	; 0
 748:	90 e0       	ldi	r25, 0x00	; 0

	}
}

void setDAC(){
	PORTD&=~(1<<LDAC);
 74a:	5a 98       	cbi	0x0b, 2	; 11
	PORTD|=(1<<LDAC);	
 74c:	5a 9a       	sbi	0x0b, 2	; 11
					STAT_dt_step=0;									
				}
				else if(an_cnt_fast<(STAT_N*2))//80 us
				{
					STAT_dt_step=1;
					for(int i=0;i<40;i++)//28
 74e:	01 96       	adiw	r24, 0x01	; 1
 750:	88 32       	cpi	r24, 0x28	; 40
 752:	91 05       	cpc	r25, r1
 754:	d1 f7       	brne	.-12     	; 0x74a <__vector_9+0x500>
 756:	37 c0       	rjmp	.+110    	; 0x7c6 <__vector_9+0x57c>
					{
					setDAC();
					}
				}
				else if(an_cnt_fast<(STAT_N*3))//220 us
 758:	28 0f       	add	r18, r24
 75a:	39 1f       	adc	r19, r25
 75c:	42 17       	cp	r20, r18
 75e:	53 07       	cpc	r21, r19
 760:	60 f4       	brcc	.+24     	; 0x77a <__vector_9+0x530>
				{
					STAT_dt_step=2;
 762:	82 e0       	ldi	r24, 0x02	; 2
 764:	80 93 22 01 	sts	0x0122, r24
 768:	80 e0       	ldi	r24, 0x00	; 0
 76a:	90 e0       	ldi	r25, 0x00	; 0

	}
}

void setDAC(){
	PORTD&=~(1<<LDAC);
 76c:	5a 98       	cbi	0x0b, 2	; 11
	PORTD|=(1<<LDAC);	
 76e:	5a 9a       	sbi	0x0b, 2	; 11
					}
				}
				else if(an_cnt_fast<(STAT_N*3))//220 us
				{
					STAT_dt_step=2;
					for(int i=0;i<160;i++)
 770:	01 96       	adiw	r24, 0x01	; 1
 772:	80 3a       	cpi	r24, 0xA0	; 160
 774:	91 05       	cpc	r25, r1
 776:	d1 f7       	brne	.-12     	; 0x76c <__vector_9+0x522>
 778:	26 c0       	rjmp	.+76     	; 0x7c6 <__vector_9+0x57c>
					{
					setDAC();
					}
				}
				else if(an_cnt_fast<(STAT_N*4))//900 us
 77a:	88 0f       	add	r24, r24
 77c:	99 1f       	adc	r25, r25
 77e:	88 0f       	add	r24, r24
 780:	99 1f       	adc	r25, r25
 782:	48 17       	cp	r20, r24
 784:	59 07       	cpc	r21, r25
 786:	68 f4       	brcc	.+26     	; 0x7a2 <__vector_9+0x558>
				{
					STAT_dt_step=3;
 788:	83 e0       	ldi	r24, 0x03	; 3
 78a:	80 93 22 01 	sts	0x0122, r24
 78e:	80 e0       	ldi	r24, 0x00	; 0
 790:	90 e0       	ldi	r25, 0x00	; 0

	}
}

void setDAC(){
	PORTD&=~(1<<LDAC);
 792:	5a 98       	cbi	0x0b, 2	; 11
	PORTD|=(1<<LDAC);	
 794:	5a 9a       	sbi	0x0b, 2	; 11
					}
				}
				else if(an_cnt_fast<(STAT_N*4))//900 us
				{
					STAT_dt_step=3;
					for(int i=0;i<640;i++)
 796:	01 96       	adiw	r24, 0x01	; 1
 798:	22 e0       	ldi	r18, 0x02	; 2
 79a:	80 38       	cpi	r24, 0x80	; 128
 79c:	92 07       	cpc	r25, r18
 79e:	c9 f7       	brne	.-14     	; 0x792 <__vector_9+0x548>
 7a0:	12 c0       	rjmp	.+36     	; 0x7c6 <__vector_9+0x57c>
					{
					setDAC();
					}
				}
				else if(an_cnt_fast<(BIG_STAT_N))//3.5 ms
 7a2:	80 91 49 01 	lds	r24, 0x0149
 7a6:	90 e0       	ldi	r25, 0x00	; 0
 7a8:	48 17       	cp	r20, r24
 7aa:	59 07       	cpc	r21, r25
 7ac:	60 f4       	brcc	.+24     	; 0x7c6 <__vector_9+0x57c>
				{
					STAT_dt_step=4;
 7ae:	84 e0       	ldi	r24, 0x04	; 4
 7b0:	80 93 22 01 	sts	0x0122, r24
 7b4:	80 e0       	ldi	r24, 0x00	; 0
 7b6:	90 e0       	ldi	r25, 0x00	; 0

	}
}

void setDAC(){
	PORTD&=~(1<<LDAC);
 7b8:	5a 98       	cbi	0x0b, 2	; 11
	PORTD|=(1<<LDAC);	
 7ba:	5a 9a       	sbi	0x0b, 2	; 11
					}
				}
				else if(an_cnt_fast<(BIG_STAT_N))//3.5 ms
				{
					STAT_dt_step=4;
					for(int i=0;i<2560;i++)
 7bc:	01 96       	adiw	r24, 0x01	; 1
 7be:	2a e0       	ldi	r18, 0x0A	; 10
 7c0:	80 30       	cpi	r24, 0x00	; 0
 7c2:	92 07       	cpc	r25, r18
 7c4:	c9 f7       	brne	.-14     	; 0x7b8 <__vector_9+0x56e>
					setDAC();
					}
				}////////////////
									
				
				prepareResetDAC(chan);
 7c6:	80 91 26 01 	lds	r24, 0x0126
 7ca:	0e 94 91 00 	call	0x122	; 0x122 <prepareResetDAC>

	}
}

void setDAC(){
	PORTD&=~(1<<LDAC);
 7ce:	5a 98       	cbi	0x0b, 2	; 11
	PORTD|=(1<<LDAC);	
 7d0:	5a 9a       	sbi	0x0b, 2	; 11
									
				
				prepareResetDAC(chan);
				setDAC();			
				
				an_cnt++; // upper				
 7d2:	80 91 27 01 	lds	r24, 0x0127
 7d6:	90 91 28 01 	lds	r25, 0x0128
 7da:	01 96       	adiw	r24, 0x01	; 1
 7dc:	90 93 28 01 	sts	0x0128, r25
 7e0:	80 93 27 01 	sts	0x0127, r24
				if(an_cnt>(BIG_STAT_N*5)) an_cnt=0; // lower
 7e4:	20 91 49 01 	lds	r18, 0x0149
 7e8:	45 e0       	ldi	r20, 0x05	; 5
 7ea:	24 9f       	mul	r18, r20
 7ec:	90 01       	movw	r18, r0
 7ee:	11 24       	eor	r1, r1
 7f0:	28 17       	cp	r18, r24
 7f2:	39 07       	cpc	r19, r25
 7f4:	20 f4       	brcc	.+8      	; 0x7fe <__vector_9+0x5b4>
 7f6:	10 92 28 01 	sts	0x0128, r1
 7fa:	10 92 27 01 	sts	0x0127, r1
				
				an_cnt_fast = an_cnt%BIG_STAT_N;
 7fe:	60 91 49 01 	lds	r22, 0x0149
 802:	80 91 27 01 	lds	r24, 0x0127
 806:	90 91 28 01 	lds	r25, 0x0128
 80a:	70 e0       	ldi	r23, 0x00	; 0
 80c:	0e 94 70 05 	call	0xae0	; 0xae0 <__udivmodhi4>
 810:	90 93 2a 01 	sts	0x012A, r25
 814:	80 93 29 01 	sts	0x0129, r24
 818:	37 c0       	rjmp	.+110    	; 0x888 <__vector_9+0x63e>
			}
			else if(event_cnt==4)
 81a:	84 30       	cpi	r24, 0x04	; 4
 81c:	91 05       	cpc	r25, r1
 81e:	29 f4       	brne	.+10     	; 0x82a <__vector_9+0x5e0>
			{
				UDR0=STAT_dt_step;
 820:	80 91 22 01 	lds	r24, 0x0122
 824:	80 93 c6 00 	sts	0x00C6, r24
 828:	28 cf       	rjmp	.-432    	; 0x67a <__vector_9+0x430>
				prepareSetDAC(0, chan);
				setDAC();
			}
			else if(event_cnt==6)//start measure
 82a:	86 30       	cpi	r24, 0x06	; 6
 82c:	91 05       	cpc	r25, r1
 82e:	81 f4       	brne	.+32     	; 0x850 <__vector_9+0x606>
			{
				prepareSetDAC(ref16, chan);
 830:	80 91 1d 01 	lds	r24, 0x011D
 834:	90 91 1e 01 	lds	r25, 0x011E
 838:	60 91 26 01 	lds	r22, 0x0126
 83c:	0e 94 a3 00 	call	0x146	; 0x146 <prepareSetDAC>

	}
}

void setDAC(){
	PORTD&=~(1<<LDAC);
 840:	5a 98       	cbi	0x0b, 2	; 11
	PORTD|=(1<<LDAC);	
 842:	5a 9a       	sbi	0x0b, 2	; 11
			}
			else if(event_cnt==6)//start measure
			{
				prepareSetDAC(ref16, chan);
				setDAC();
				ADCSRA |= (1 << ADSC); 
 844:	80 91 7a 00 	lds	r24, 0x007A
 848:	80 64       	ori	r24, 0x40	; 64
 84a:	80 93 7a 00 	sts	0x007A, r24
 84e:	1c c0       	rjmp	.+56     	; 0x888 <__vector_9+0x63e>
				
			}
			else if(event_cnt==7)
 850:	87 30       	cpi	r24, 0x07	; 7
 852:	91 05       	cpc	r25, r1
 854:	99 f4       	brne	.+38     	; 0x87c <__vector_9+0x632>
			{
				prepareSetDAC(0, chan);
 856:	80 e0       	ldi	r24, 0x00	; 0
 858:	90 e0       	ldi	r25, 0x00	; 0
 85a:	60 91 26 01 	lds	r22, 0x0126
 85e:	0e 94 a3 00 	call	0x146	; 0x146 <prepareSetDAC>

	}
}

void setDAC(){
	PORTD&=~(1<<LDAC);
 862:	5a 98       	cbi	0x0b, 2	; 11
	PORTD|=(1<<LDAC);	
 864:	5a 9a       	sbi	0x0b, 2	; 11
			else if(event_cnt==7)
			{
				prepareSetDAC(0, chan);
				setDAC();
				
				ADCL_=ADCL;	
 866:	90 91 78 00 	lds	r25, 0x0078
 86a:	90 93 42 01 	sts	0x0142, r25
				ADCH_=ADCH;
 86e:	80 91 79 00 	lds	r24, 0x0079
 872:	80 93 46 01 	sts	0x0146, r24
				UDR0=ADCL_;
 876:	90 93 c6 00 	sts	0x00C6, r25
 87a:	06 c0       	rjmp	.+12     	; 0x888 <__vector_9+0x63e>
			}
			else if(event_cnt==8)
 87c:	08 97       	sbiw	r24, 0x08	; 8
 87e:	21 f4       	brne	.+8      	; 0x888 <__vector_9+0x63e>
			{
				UDR0=ADCH_;
 880:	80 91 46 01 	lds	r24, 0x0146
 884:	80 93 c6 00 	sts	0x00C6, r24
		}
		
		
		
		
		ctr=0;
 888:	10 92 3d 01 	sts	0x013D, r1
 88c:	10 92 3c 01 	sts	0x013C, r1
		
		
		if(MD!=ONE_SHOT)
 890:	80 91 12 01 	lds	r24, 0x0112
 894:	20 91 38 01 	lds	r18, 0x0138
 898:	30 91 39 01 	lds	r19, 0x0139
 89c:	85 30       	cpi	r24, 0x05	; 5
 89e:	89 f0       	breq	.+34     	; 0x8c2 <__vector_9+0x678>
		{
		event_cnt++;
 8a0:	2f 5f       	subi	r18, 0xFF	; 255
 8a2:	3f 4f       	sbci	r19, 0xFF	; 255
 8a4:	30 93 39 01 	sts	0x0139, r19
 8a8:	20 93 38 01 	sts	0x0138, r18
		if(event_cnt>T)
 8ac:	80 91 41 01 	lds	r24, 0x0141
 8b0:	90 e0       	ldi	r25, 0x00	; 0
 8b2:	82 17       	cp	r24, r18
 8b4:	93 07       	cpc	r25, r19
 8b6:	74 f4       	brge	.+28     	; 0x8d4 <__vector_9+0x68a>
			event_cnt=0;
 8b8:	10 92 39 01 	sts	0x0139, r1
 8bc:	10 92 38 01 	sts	0x0138, r1
 8c0:	09 c0       	rjmp	.+18     	; 0x8d4 <__vector_9+0x68a>
		}
		else
		{
			if(event_cnt<30)
 8c2:	2e 31       	cpi	r18, 0x1E	; 30
 8c4:	31 05       	cpc	r19, r1
 8c6:	34 f4       	brge	.+12     	; 0x8d4 <__vector_9+0x68a>
				event_cnt++;			
 8c8:	2f 5f       	subi	r18, 0xFF	; 255
 8ca:	3f 4f       	sbci	r19, 0xFF	; 255
 8cc:	30 93 39 01 	sts	0x0139, r19
 8d0:	20 93 38 01 	sts	0x0138, r18
		}
	}
	ctr++;
 8d4:	80 91 3c 01 	lds	r24, 0x013C
 8d8:	90 91 3d 01 	lds	r25, 0x013D
 8dc:	01 96       	adiw	r24, 0x01	; 1
 8de:	90 93 3d 01 	sts	0x013D, r25
 8e2:	80 93 3c 01 	sts	0x013C, r24
}
 8e6:	ff 91       	pop	r31
 8e8:	ef 91       	pop	r30
 8ea:	bf 91       	pop	r27
 8ec:	af 91       	pop	r26
 8ee:	9f 91       	pop	r25
 8f0:	8f 91       	pop	r24
 8f2:	7f 91       	pop	r23
 8f4:	6f 91       	pop	r22
 8f6:	5f 91       	pop	r21
 8f8:	4f 91       	pop	r20
 8fa:	3f 91       	pop	r19
 8fc:	2f 91       	pop	r18
 8fe:	0f 90       	pop	r0
 900:	0f be       	out	0x3f, r0	; 63
 902:	0f 90       	pop	r0
 904:	1f 90       	pop	r1
 906:	18 95       	reti

00000908 <__vector_18>:

//прием команд от компьютера по UART в зависимости от режима
ISR(USART_RX_vect)
{
 908:	1f 92       	push	r1
 90a:	0f 92       	push	r0
 90c:	0f b6       	in	r0, 0x3f	; 63
 90e:	0f 92       	push	r0
 910:	11 24       	eor	r1, r1
 912:	2f 93       	push	r18
 914:	3f 93       	push	r19
 916:	4f 93       	push	r20
 918:	5f 93       	push	r21
 91a:	6f 93       	push	r22
 91c:	7f 93       	push	r23
 91e:	8f 93       	push	r24
 920:	9f 93       	push	r25
 922:	af 93       	push	r26
 924:	bf 93       	push	r27
 926:	ef 93       	push	r30
 928:	ff 93       	push	r31
	switch(ptr)
 92a:	80 91 24 01 	lds	r24, 0x0124
 92e:	84 30       	cpi	r24, 0x04	; 4
 930:	09 f4       	brne	.+2      	; 0x934 <__vector_18+0x2c>
 932:	69 c0       	rjmp	.+210    	; 0xa06 <__vector_18+0xfe>
 934:	85 30       	cpi	r24, 0x05	; 5
 936:	58 f4       	brcc	.+22     	; 0x94e <__vector_18+0x46>
 938:	81 30       	cpi	r24, 0x01	; 1
 93a:	51 f1       	breq	.+84     	; 0x990 <__vector_18+0x88>
 93c:	81 30       	cpi	r24, 0x01	; 1
 93e:	d0 f0       	brcs	.+52     	; 0x974 <__vector_18+0x6c>
 940:	82 30       	cpi	r24, 0x02	; 2
 942:	09 f4       	brne	.+2      	; 0x946 <__vector_18+0x3e>
 944:	42 c0       	rjmp	.+132    	; 0x9ca <__vector_18+0xc2>
 946:	83 30       	cpi	r24, 0x03	; 3
 948:	09 f0       	breq	.+2      	; 0x94c <__vector_18+0x44>
 94a:	9e c0       	rjmp	.+316    	; 0xa88 <__vector_18+0x180>
 94c:	4f c0       	rjmp	.+158    	; 0x9ec <__vector_18+0xe4>
 94e:	87 30       	cpi	r24, 0x07	; 7
 950:	09 f4       	brne	.+2      	; 0x954 <__vector_18+0x4c>
 952:	79 c0       	rjmp	.+242    	; 0xa46 <__vector_18+0x13e>
 954:	88 30       	cpi	r24, 0x08	; 8
 956:	38 f4       	brcc	.+14     	; 0x966 <__vector_18+0x5e>
 958:	85 30       	cpi	r24, 0x05	; 5
 95a:	09 f4       	brne	.+2      	; 0x95e <__vector_18+0x56>
 95c:	6a c0       	rjmp	.+212    	; 0xa32 <__vector_18+0x12a>
 95e:	86 30       	cpi	r24, 0x06	; 6
 960:	09 f0       	breq	.+2      	; 0x964 <__vector_18+0x5c>
 962:	92 c0       	rjmp	.+292    	; 0xa88 <__vector_18+0x180>
 964:	6b c0       	rjmp	.+214    	; 0xa3c <__vector_18+0x134>
 966:	88 30       	cpi	r24, 0x08	; 8
 968:	09 f4       	brne	.+2      	; 0x96c <__vector_18+0x64>
 96a:	72 c0       	rjmp	.+228    	; 0xa50 <__vector_18+0x148>
 96c:	89 30       	cpi	r24, 0x09	; 9
 96e:	09 f0       	breq	.+2      	; 0x972 <__vector_18+0x6a>
 970:	8b c0       	rjmp	.+278    	; 0xa88 <__vector_18+0x180>
 972:	73 c0       	rjmp	.+230    	; 0xa5a <__vector_18+0x152>
	{
		case 0:
		if(UDR0!=255)//байт 255 является синхронизирующим
 974:	80 91 c6 00 	lds	r24, 0x00C6
 978:	8f 3f       	cpi	r24, 0xFF	; 255
 97a:	31 f0       	breq	.+12     	; 0x988 <__vector_18+0x80>
		{
			sync=0;
 97c:	10 92 21 01 	sts	0x0121, r1
			ptr--;
			ptr%=7;
 980:	83 e0       	ldi	r24, 0x03	; 3
 982:	80 93 24 01 	sts	0x0124, r24
 986:	80 c0       	rjmp	.+256    	; 0xa88 <__vector_18+0x180>
		}
		else
			sync=1;
 988:	81 e0       	ldi	r24, 0x01	; 1
 98a:	80 93 21 01 	sts	0x0121, r24
 98e:	7c c0       	rjmp	.+248    	; 0xa88 <__vector_18+0x180>
		break;
		
		
		case 1:
		MD=UDR0;
 990:	20 91 c6 00 	lds	r18, 0x00C6
 994:	20 93 12 01 	sts	0x0112, r18
		if(MD==VAC)
 998:	21 30       	cpi	r18, 0x01	; 1
 99a:	39 f4       	brne	.+14     	; 0x9aa <__vector_18+0xa2>
			time_step=4;//5
 99c:	84 e0       	ldi	r24, 0x04	; 4
 99e:	90 e0       	ldi	r25, 0x00	; 0
 9a0:	90 93 0f 01 	sts	0x010F, r25
 9a4:	80 93 0e 01 	sts	0x010E, r24
 9a8:	6f c0       	rjmp	.+222    	; 0xa88 <__vector_18+0x180>
		else
			time_step=6;//4		
 9aa:	86 e0       	ldi	r24, 0x06	; 6
 9ac:	90 e0       	ldi	r25, 0x00	; 0
 9ae:	90 93 0f 01 	sts	0x010F, r25
 9b2:	80 93 0e 01 	sts	0x010E, r24
		if(MD==PROGRAM)
 9b6:	22 30       	cpi	r18, 0x02	; 2
 9b8:	09 f0       	breq	.+2      	; 0x9bc <__vector_18+0xb4>
 9ba:	66 c0       	rjmp	.+204    	; 0xa88 <__vector_18+0x180>
		{
			//PROGRAM_start=1;
			PROGRAM_done=0;
 9bc:	10 92 25 01 	sts	0x0125, r1
			prog_val=0;
 9c0:	10 92 1a 01 	sts	0x011A, r1
 9c4:	10 92 19 01 	sts	0x0119, r1
 9c8:	5f c0       	rjmp	.+190    	; 0xa88 <__vector_18+0x180>
		}
		break;
		
		
		case 2:		
		x16_simple = UDR0;
 9ca:	80 91 c6 00 	lds	r24, 0x00C6
 9ce:	90 e0       	ldi	r25, 0x00	; 0
 9d0:	90 93 44 01 	sts	0x0144, r25
 9d4:	80 93 43 01 	sts	0x0143, r24
		x16 = x16_simple<<4;
 9d8:	44 e0       	ldi	r20, 0x04	; 4
 9da:	88 0f       	add	r24, r24
 9dc:	99 1f       	adc	r25, r25
 9de:	4a 95       	dec	r20
 9e0:	e1 f7       	brne	.-8      	; 0x9da <__vector_18+0xd2>
 9e2:	90 93 1c 01 	sts	0x011C, r25
 9e6:	80 93 1b 01 	sts	0x011B, r24
 9ea:	4e c0       	rjmp	.+156    	; 0xa88 <__vector_18+0x180>
		break;
		case 3:	
		ref16=UDR0<<4;
 9ec:	80 91 c6 00 	lds	r24, 0x00C6
 9f0:	90 e0       	ldi	r25, 0x00	; 0
 9f2:	34 e0       	ldi	r19, 0x04	; 4
 9f4:	88 0f       	add	r24, r24
 9f6:	99 1f       	adc	r25, r25
 9f8:	3a 95       	dec	r19
 9fa:	e1 f7       	brne	.-8      	; 0x9f4 <__vector_18+0xec>
 9fc:	90 93 1e 01 	sts	0x011E, r25
 a00:	80 93 1d 01 	sts	0x011D, r24
 a04:	41 c0       	rjmp	.+130    	; 0xa88 <__vector_18+0x180>
		break;
		case 4:
		if(MD==PROGRAM)
 a06:	80 91 12 01 	lds	r24, 0x0112
 a0a:	82 30       	cpi	r24, 0x02	; 2
 a0c:	29 f4       	brne	.+10     	; 0xa18 <__vector_18+0x110>
			t1=UDR0;
 a0e:	80 91 c6 00 	lds	r24, 0x00C6
 a12:	80 93 0a 01 	sts	0x010A, r24
 a16:	38 c0       	rjmp	.+112    	; 0xa88 <__vector_18+0x180>
		else
			unset16=UDR0<<4;
 a18:	80 91 c6 00 	lds	r24, 0x00C6
 a1c:	90 e0       	ldi	r25, 0x00	; 0
 a1e:	24 e0       	ldi	r18, 0x04	; 4
 a20:	88 0f       	add	r24, r24
 a22:	99 1f       	adc	r25, r25
 a24:	2a 95       	dec	r18
 a26:	e1 f7       	brne	.-8      	; 0xa20 <__vector_18+0x118>
 a28:	90 93 20 01 	sts	0x0120, r25
 a2c:	80 93 1f 01 	sts	0x011F, r24
 a30:	2b c0       	rjmp	.+86     	; 0xa88 <__vector_18+0x180>
		break;		
		case 5:
		
		t2=UDR0;
 a32:	80 91 c6 00 	lds	r24, 0x00C6
 a36:	80 93 0b 01 	sts	0x010B, r24
 a3a:	26 c0       	rjmp	.+76     	; 0xa88 <__vector_18+0x180>
	
		
		break;	
		case 6:
		dT=UDR0;
 a3c:	80 91 c6 00 	lds	r24, 0x00C6
 a40:	80 93 3b 01 	sts	0x013B, r24
 a44:	21 c0       	rjmp	.+66     	; 0xa88 <__vector_18+0x180>
		break;
		case 7:
		T=UDR0;
 a46:	80 91 c6 00 	lds	r24, 0x00C6
 a4a:	80 93 41 01 	sts	0x0141, r24
 a4e:	1c c0       	rjmp	.+56     	; 0xa88 <__vector_18+0x180>
		break;
		case 8:
		chan=UDR0;
 a50:	80 91 c6 00 	lds	r24, 0x00C6
 a54:	80 93 26 01 	sts	0x0126, r24
 a58:	17 c0       	rjmp	.+46     	; 0xa88 <__vector_18+0x180>
		break;
		
		case 9:
			reverted[chan]=UDR0;
 a5a:	80 91 c6 00 	lds	r24, 0x00C6
 a5e:	e0 91 26 01 	lds	r30, 0x0126
 a62:	f0 e0       	ldi	r31, 0x00	; 0
 a64:	e5 5d       	subi	r30, 0xD5	; 213
 a66:	fe 4f       	sbci	r31, 0xFE	; 254
 a68:	80 83       	st	Z, r24
		
			event_cnt=0;			
 a6a:	10 92 39 01 	sts	0x0139, r1
 a6e:	10 92 38 01 	sts	0x0138, r1
			
			if(MD==GATHER_MULT)
 a72:	80 91 12 01 	lds	r24, 0x0112
 a76:	83 30       	cpi	r24, 0x03	; 3
 a78:	19 f4       	brne	.+6      	; 0xa80 <__vector_18+0x178>
			{
			//	PORTD=0b00100000;
			//static int ff=1<<5;
			//if(x16>>4)
			gatherMult();
 a7a:	0e 94 7a 00 	call	0xf4	; 0xf4 <gatherMult>
 a7e:	04 c0       	rjmp	.+8      	; 0xa88 <__vector_18+0x180>
			//PORTD=(1<<5)^PORTD;
			//PORTD=ff;
			}
			else if(MD==SEPAR_MULT)	
 a80:	84 30       	cpi	r24, 0x04	; 4
 a82:	11 f4       	brne	.+4      	; 0xa88 <__vector_18+0x180>
			{
			separMult();	
 a84:	0e 94 83 00 	call	0x106	; 0x106 <separMult>
		break;
	}
	

	
	dTt2=dT+t2;
 a88:	80 91 0b 01 	lds	r24, 0x010B
 a8c:	90 91 3b 01 	lds	r25, 0x013B
 a90:	89 0f       	add	r24, r25
 a92:	80 93 0c 01 	sts	0x010C, r24
	//UDR0=x16/16;
	ptr++;
	ptr%=10;
 a96:	80 91 24 01 	lds	r24, 0x0124
 a9a:	8f 5f       	subi	r24, 0xFF	; 255
 a9c:	6a e0       	ldi	r22, 0x0A	; 10
 a9e:	0e 94 64 05 	call	0xac8	; 0xac8 <__udivmodqi4>
 aa2:	90 93 24 01 	sts	0x0124, r25
 aa6:	ff 91       	pop	r31
 aa8:	ef 91       	pop	r30
 aaa:	bf 91       	pop	r27
 aac:	af 91       	pop	r26
 aae:	9f 91       	pop	r25
 ab0:	8f 91       	pop	r24
 ab2:	7f 91       	pop	r23
 ab4:	6f 91       	pop	r22
 ab6:	5f 91       	pop	r21
 ab8:	4f 91       	pop	r20
 aba:	3f 91       	pop	r19
 abc:	2f 91       	pop	r18
 abe:	0f 90       	pop	r0
 ac0:	0f be       	out	0x3f, r0	; 63
 ac2:	0f 90       	pop	r0
 ac4:	1f 90       	pop	r1
 ac6:	18 95       	reti

00000ac8 <__udivmodqi4>:
 ac8:	99 1b       	sub	r25, r25
 aca:	79 e0       	ldi	r23, 0x09	; 9
 acc:	04 c0       	rjmp	.+8      	; 0xad6 <__udivmodqi4_ep>

00000ace <__udivmodqi4_loop>:
 ace:	99 1f       	adc	r25, r25
 ad0:	96 17       	cp	r25, r22
 ad2:	08 f0       	brcs	.+2      	; 0xad6 <__udivmodqi4_ep>
 ad4:	96 1b       	sub	r25, r22

00000ad6 <__udivmodqi4_ep>:
 ad6:	88 1f       	adc	r24, r24
 ad8:	7a 95       	dec	r23
 ada:	c9 f7       	brne	.-14     	; 0xace <__udivmodqi4_loop>
 adc:	80 95       	com	r24
 ade:	08 95       	ret

00000ae0 <__udivmodhi4>:
 ae0:	aa 1b       	sub	r26, r26
 ae2:	bb 1b       	sub	r27, r27
 ae4:	51 e1       	ldi	r21, 0x11	; 17
 ae6:	07 c0       	rjmp	.+14     	; 0xaf6 <__udivmodhi4_ep>

00000ae8 <__udivmodhi4_loop>:
 ae8:	aa 1f       	adc	r26, r26
 aea:	bb 1f       	adc	r27, r27
 aec:	a6 17       	cp	r26, r22
 aee:	b7 07       	cpc	r27, r23
 af0:	10 f0       	brcs	.+4      	; 0xaf6 <__udivmodhi4_ep>
 af2:	a6 1b       	sub	r26, r22
 af4:	b7 0b       	sbc	r27, r23

00000af6 <__udivmodhi4_ep>:
 af6:	88 1f       	adc	r24, r24
 af8:	99 1f       	adc	r25, r25
 afa:	5a 95       	dec	r21
 afc:	a9 f7       	brne	.-22     	; 0xae8 <__udivmodhi4_loop>
 afe:	80 95       	com	r24
 b00:	90 95       	com	r25
 b02:	bc 01       	movw	r22, r24
 b04:	cd 01       	movw	r24, r26
 b06:	08 95       	ret

00000b08 <_exit>:
 b08:	f8 94       	cli

00000b0a <__stop_program>:
 b0a:	ff cf       	rjmp	.-2      	; 0xb0a <__stop_program>
