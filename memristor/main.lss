
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000646  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          0000000a  00800100  00800100  000006ba  2**0
                  ALLOC
  2 .debug_aranges 00000020  00000000  00000000  000006ba  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 000000a6  00000000  00000000  000006da  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   000003b7  00000000  00000000  00000780  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 0000017f  00000000  00000000  00000b37  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   000003cb  00000000  00000000  00000cb6  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000070  00000000  00000000  00001084  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    0000010e  00000000  00000000  000010f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    000001f8  00000000  00000000  00001202  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000048  00000000  00000000  000013fa  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 79 01 	jmp	0x2f2	; 0x2f2 <__vector_18>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	aa 30       	cpi	r26, 0x0A	; 10
  80:	b1 07       	cpc	r27, r17
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 74 00 	call	0xe8	; 0xe8 <main>
  88:	0c 94 21 03 	jmp	0x642	; 0x642 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <uart_init>:
char c;

void uart_init(unsigned int ubrr)
{
	
	UBRR0H = (unsigned char)(ubrr>>8);
  90:	90 93 c5 00 	sts	0x00C5, r25
	UBRR0L = (unsigned char)ubrr;
  94:	80 93 c4 00 	sts	0x00C4, r24
	/*Enable receiver and transmitter */
	UCSR0B = (1<<RXCIE0)|(1<<RXEN0);
  98:	80 e9       	ldi	r24, 0x90	; 144
  9a:	80 93 c1 00 	sts	0x00C1, r24
	/* Set frame format: 8data, 2stop bit */
	UCSR0C = (1<<USBS0)|(3<<UCSZ00);
  9e:	8e e0       	ldi	r24, 0x0E	; 14
  a0:	80 93 c2 00 	sts	0x00C2, r24
}
  a4:	08 95       	ret

000000a6 <SPI_MasterInit>:

void SPI_MasterInit()
{
/* Set MOSI and SCK output, all others input */
	DDR_SPI = (1<<DD_MOSI)|(1<<DD_SCK)|(1<<SPI_SS);
  a6:	8c e2       	ldi	r24, 0x2C	; 44
  a8:	84 b9       	out	0x04, r24	; 4
/* Enable SPI, Master, set clock rate fck/16 */
	SPCR = (1<<SPE)|(0<<DORD)|(1<<MSTR)|(1<<CPOL)|(0<<CPHA)|(1<<SPR1)|(0<<SPR0);
  aa:	8a e5       	ldi	r24, 0x5A	; 90
  ac:	8c bd       	out	0x2c, r24	; 44
	//SPSR = (0<<SPI2X);
}
  ae:	08 95       	ret

000000b0 <SPI_WriteByte>:


void SPI_WriteByte(uint8_t data)
{
   //PORTB &= ~(1<<SPI_SS);
   SPDR = data;
  b0:	8e bd       	out	0x2e, r24	; 46
  while(!(SPSR & (1<<SPIF)));
  b2:	0d b4       	in	r0, 0x2d	; 45
  b4:	07 fe       	sbrs	r0, 7
  b6:	fd cf       	rjmp	.-6      	; 0xb2 <SPI_WriteByte+0x2>
   //PORTB |= (1<<SPI_SS); 
}
  b8:	08 95       	ret

000000ba <OneSend>:
	SPCR = (1<<SPE)|(0<<DORD)|(1<<MSTR)|(1<<CPOL)|(0<<CPHA)|(1<<SPR1)|(0<<SPR0);
	//SPSR = (0<<SPI2X);
}
//(1<<RXCIE0)|
void OneSend(uint16_t x)
{
  ba:	0f 93       	push	r16
  bc:	1f 93       	push	r17
	x+=2048;
  be:	8c 01       	movw	r16, r24
  c0:	00 50       	subi	r16, 0x00	; 0
  c2:	18 4f       	sbci	r17, 0xF8	; 248
	PORTD&=~(1<<SYNC);
  c4:	5a 98       	cbi	0x0b, 2	; 11
	//_delay_us(30);  
	send8 = (x >> 8);
	send8 &= 0b00001111;
  c6:	81 2f       	mov	r24, r17
  c8:	8f 70       	andi	r24, 0x0F	; 15
  ca:	80 93 06 01 	sts	0x0106, r24
	SPI_WriteByte(send8);
  ce:	90 e0       	ldi	r25, 0x00	; 0
  d0:	0e 94 58 00 	call	0xb0	; 0xb0 <SPI_WriteByte>
	send8=x;
  d4:	00 93 06 01 	sts	0x0106, r16
	//send8&=0b11111111;
	SPI_WriteByte(send8);		
  d8:	80 2f       	mov	r24, r16
  da:	90 e0       	ldi	r25, 0x00	; 0
  dc:	0e 94 58 00 	call	0xb0	; 0xb0 <SPI_WriteByte>
	PORTD|=(1<<SYNC);
  e0:	5a 9a       	sbi	0x0b, 2	; 11

}
  e2:	1f 91       	pop	r17
  e4:	0f 91       	pop	r16
  e6:	08 95       	ret

000000e8 <main>:
  while(!(SPSR & (1<<SPIF)));
   //PORTB |= (1<<SPI_SS); 
}

void main(void)
{
  e8:	af 92       	push	r10
  ea:	bf 92       	push	r11
  ec:	cf 92       	push	r12
  ee:	df 92       	push	r13
  f0:	ef 92       	push	r14
  f2:	ff 92       	push	r15
  f4:	0f 93       	push	r16
  f6:	1f 93       	push	r17
  f8:	cf 93       	push	r28
  fa:	df 93       	push	r29
	sei();
  fc:	78 94       	sei
}

void SPI_MasterInit()
{
/* Set MOSI and SCK output, all others input */
	DDR_SPI = (1<<DD_MOSI)|(1<<DD_SCK)|(1<<SPI_SS);
  fe:	8c e2       	ldi	r24, 0x2C	; 44
 100:	84 b9       	out	0x04, r24	; 4
/* Enable SPI, Master, set clock rate fck/16 */
	SPCR = (1<<SPE)|(0<<DORD)|(1<<MSTR)|(1<<CPOL)|(0<<CPHA)|(1<<SPR1)|(0<<SPR0);
 102:	8a e5       	ldi	r24, 0x5A	; 90
 104:	8c bd       	out	0x2c, r24	; 44

void main(void)
{
	sei();
	SPI_MasterInit();
    DDRD = 0b000000110;	
 106:	86 e0       	ldi	r24, 0x06	; 6
 108:	8a b9       	out	0x0a, r24	; 10
char c;

void uart_init(unsigned int ubrr)
{
	
	UBRR0H = (unsigned char)(ubrr>>8);
 10a:	10 92 c5 00 	sts	0x00C5, r1
	UBRR0L = (unsigned char)ubrr;
 10e:	83 e3       	ldi	r24, 0x33	; 51
 110:	80 93 c4 00 	sts	0x00C4, r24
	/*Enable receiver and transmitter */
	UCSR0B = (1<<RXCIE0)|(1<<RXEN0);
 114:	80 e9       	ldi	r24, 0x90	; 144
 116:	80 93 c1 00 	sts	0x00C1, r24
	/* Set frame format: 8data, 2stop bit */
	UCSR0C = (1<<USBS0)|(3<<UCSZ00);
 11a:	8e e0       	ldi	r24, 0x0E	; 14
 11c:	80 93 c2 00 	sts	0x00C2, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 120:	c0 e9       	ldi	r28, 0x90	; 144
 122:	d1 e0       	ldi	r29, 0x01	; 1
		//	x16=UDR0*16;
		//	UDR0=x16/16;
		}
		
		//x16+=1;		
		OneSend(x16);
 124:	80 91 00 01 	lds	r24, 0x0100
 128:	90 91 01 01 	lds	r25, 0x0101
 12c:	0e 94 5d 00 	call	0xba	; 0xba <OneSend>
		PORTD&=~(1<<LDAC);
 130:	59 98       	cbi	0x0b, 1	; 11
		PORTD|=(1<<LDAC);
 132:	59 9a       	sbi	0x0b, 1	; 11
		
		_delay_ms(t1);
 134:	60 91 09 01 	lds	r22, 0x0109
 138:	70 e0       	ldi	r23, 0x00	; 0
 13a:	80 e0       	ldi	r24, 0x00	; 0
 13c:	90 e0       	ldi	r25, 0x00	; 0
 13e:	0e 94 fc 01 	call	0x3f8	; 0x3f8 <__floatunsisf>
 142:	5b 01       	movw	r10, r22
 144:	6c 01       	movw	r12, r24
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
 146:	20 e0       	ldi	r18, 0x00	; 0
 148:	30 e0       	ldi	r19, 0x00	; 0
 14a:	4a e7       	ldi	r20, 0x7A	; 122
 14c:	55 e4       	ldi	r21, 0x45	; 69
 14e:	0e 94 8a 02 	call	0x514	; 0x514 <__mulsf3>
 152:	7b 01       	movw	r14, r22
 154:	8c 01       	movw	r16, r24
	if (__tmp < 1.0)
 156:	20 e0       	ldi	r18, 0x00	; 0
 158:	30 e0       	ldi	r19, 0x00	; 0
 15a:	40 e8       	ldi	r20, 0x80	; 128
 15c:	5f e3       	ldi	r21, 0x3F	; 63
 15e:	0e 94 cc 01 	call	0x398	; 0x398 <__cmpsf2>
 162:	88 23       	and	r24, r24
 164:	1c f4       	brge	.+6      	; 0x16c <main+0x84>
 166:	61 e0       	ldi	r22, 0x01	; 1
 168:	70 e0       	ldi	r23, 0x00	; 0
 16a:	22 c0       	rjmp	.+68     	; 0x1b0 <main+0xc8>
		__ticks = 1;
	else if (__tmp > 65535)
 16c:	c8 01       	movw	r24, r16
 16e:	b7 01       	movw	r22, r14
 170:	20 e0       	ldi	r18, 0x00	; 0
 172:	3f ef       	ldi	r19, 0xFF	; 255
 174:	4f e7       	ldi	r20, 0x7F	; 127
 176:	57 e4       	ldi	r21, 0x47	; 71
 178:	0e 94 86 02 	call	0x50c	; 0x50c <__gesf2>
 17c:	18 16       	cp	r1, r24
 17e:	a4 f4       	brge	.+40     	; 0x1a8 <main+0xc0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 180:	c6 01       	movw	r24, r12
 182:	b5 01       	movw	r22, r10
 184:	20 e0       	ldi	r18, 0x00	; 0
 186:	30 e0       	ldi	r19, 0x00	; 0
 188:	40 e2       	ldi	r20, 0x20	; 32
 18a:	51 e4       	ldi	r21, 0x41	; 65
 18c:	0e 94 8a 02 	call	0x514	; 0x514 <__mulsf3>
 190:	0e 94 d0 01 	call	0x3a0	; 0x3a0 <__fixunssfsi>
 194:	05 c0       	rjmp	.+10     	; 0x1a0 <main+0xb8>
 196:	ce 01       	movw	r24, r28
 198:	01 97       	sbiw	r24, 0x01	; 1
 19a:	f1 f7       	brne	.-4      	; 0x198 <main+0xb0>
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 19c:	61 50       	subi	r22, 0x01	; 1
 19e:	70 40       	sbci	r23, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 1a0:	61 15       	cp	r22, r1
 1a2:	71 05       	cpc	r23, r1
 1a4:	c1 f7       	brne	.-16     	; 0x196 <main+0xae>
 1a6:	07 c0       	rjmp	.+14     	; 0x1b6 <main+0xce>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 1a8:	c8 01       	movw	r24, r16
 1aa:	b7 01       	movw	r22, r14
 1ac:	0e 94 d0 01 	call	0x3a0	; 0x3a0 <__fixunssfsi>
 1b0:	cb 01       	movw	r24, r22
 1b2:	01 97       	sbiw	r24, 0x01	; 1
 1b4:	f1 f7       	brne	.-4      	; 0x1b2 <main+0xca>
		
		OneSend(0);
 1b6:	80 e0       	ldi	r24, 0x00	; 0
 1b8:	90 e0       	ldi	r25, 0x00	; 0
 1ba:	0e 94 5d 00 	call	0xba	; 0xba <OneSend>
				PORTD&=~(1<<LDAC);
 1be:	59 98       	cbi	0x0b, 1	; 11
		PORTD|=(1<<LDAC);
 1c0:	59 9a       	sbi	0x0b, 1	; 11
		
		_delay_ms(T);
 1c2:	60 91 07 01 	lds	r22, 0x0107
 1c6:	70 e0       	ldi	r23, 0x00	; 0
 1c8:	80 e0       	ldi	r24, 0x00	; 0
 1ca:	90 e0       	ldi	r25, 0x00	; 0
 1cc:	0e 94 fc 01 	call	0x3f8	; 0x3f8 <__floatunsisf>
 1d0:	5b 01       	movw	r10, r22
 1d2:	6c 01       	movw	r12, r24
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
 1d4:	20 e0       	ldi	r18, 0x00	; 0
 1d6:	30 e0       	ldi	r19, 0x00	; 0
 1d8:	4a e7       	ldi	r20, 0x7A	; 122
 1da:	55 e4       	ldi	r21, 0x45	; 69
 1dc:	0e 94 8a 02 	call	0x514	; 0x514 <__mulsf3>
 1e0:	7b 01       	movw	r14, r22
 1e2:	8c 01       	movw	r16, r24
	if (__tmp < 1.0)
 1e4:	20 e0       	ldi	r18, 0x00	; 0
 1e6:	30 e0       	ldi	r19, 0x00	; 0
 1e8:	40 e8       	ldi	r20, 0x80	; 128
 1ea:	5f e3       	ldi	r21, 0x3F	; 63
 1ec:	0e 94 cc 01 	call	0x398	; 0x398 <__cmpsf2>
 1f0:	88 23       	and	r24, r24
 1f2:	1c f4       	brge	.+6      	; 0x1fa <main+0x112>
 1f4:	61 e0       	ldi	r22, 0x01	; 1
 1f6:	70 e0       	ldi	r23, 0x00	; 0
 1f8:	22 c0       	rjmp	.+68     	; 0x23e <main+0x156>
		__ticks = 1;
	else if (__tmp > 65535)
 1fa:	c8 01       	movw	r24, r16
 1fc:	b7 01       	movw	r22, r14
 1fe:	20 e0       	ldi	r18, 0x00	; 0
 200:	3f ef       	ldi	r19, 0xFF	; 255
 202:	4f e7       	ldi	r20, 0x7F	; 127
 204:	57 e4       	ldi	r21, 0x47	; 71
 206:	0e 94 86 02 	call	0x50c	; 0x50c <__gesf2>
 20a:	18 16       	cp	r1, r24
 20c:	a4 f4       	brge	.+40     	; 0x236 <main+0x14e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 20e:	c6 01       	movw	r24, r12
 210:	b5 01       	movw	r22, r10
 212:	20 e0       	ldi	r18, 0x00	; 0
 214:	30 e0       	ldi	r19, 0x00	; 0
 216:	40 e2       	ldi	r20, 0x20	; 32
 218:	51 e4       	ldi	r21, 0x41	; 65
 21a:	0e 94 8a 02 	call	0x514	; 0x514 <__mulsf3>
 21e:	0e 94 d0 01 	call	0x3a0	; 0x3a0 <__fixunssfsi>
 222:	05 c0       	rjmp	.+10     	; 0x22e <main+0x146>
 224:	ce 01       	movw	r24, r28
 226:	01 97       	sbiw	r24, 0x01	; 1
 228:	f1 f7       	brne	.-4      	; 0x226 <main+0x13e>
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 22a:	61 50       	subi	r22, 0x01	; 1
 22c:	70 40       	sbci	r23, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 22e:	61 15       	cp	r22, r1
 230:	71 05       	cpc	r23, r1
 232:	c1 f7       	brne	.-16     	; 0x224 <main+0x13c>
 234:	07 c0       	rjmp	.+14     	; 0x244 <main+0x15c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 236:	c8 01       	movw	r24, r16
 238:	b7 01       	movw	r22, r14
 23a:	0e 94 d0 01 	call	0x3a0	; 0x3a0 <__fixunssfsi>
 23e:	cb 01       	movw	r24, r22
 240:	01 97       	sbiw	r24, 0x01	; 1
 242:	f1 f7       	brne	.-4      	; 0x240 <main+0x158>
		
				OneSend(y16);				
 244:	80 91 02 01 	lds	r24, 0x0102
 248:	90 91 03 01 	lds	r25, 0x0103
 24c:	0e 94 5d 00 	call	0xba	; 0xba <OneSend>
		PORTD&=~(1<<LDAC);
 250:	59 98       	cbi	0x0b, 1	; 11
		PORTD|=(1<<LDAC);
 252:	59 9a       	sbi	0x0b, 1	; 11
		
		_delay_ms(t2);
 254:	60 91 05 01 	lds	r22, 0x0105
 258:	70 e0       	ldi	r23, 0x00	; 0
 25a:	80 e0       	ldi	r24, 0x00	; 0
 25c:	90 e0       	ldi	r25, 0x00	; 0
 25e:	0e 94 fc 01 	call	0x3f8	; 0x3f8 <__floatunsisf>
 262:	5b 01       	movw	r10, r22
 264:	6c 01       	movw	r12, r24
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
 266:	20 e0       	ldi	r18, 0x00	; 0
 268:	30 e0       	ldi	r19, 0x00	; 0
 26a:	4a e7       	ldi	r20, 0x7A	; 122
 26c:	55 e4       	ldi	r21, 0x45	; 69
 26e:	0e 94 8a 02 	call	0x514	; 0x514 <__mulsf3>
 272:	7b 01       	movw	r14, r22
 274:	8c 01       	movw	r16, r24
	if (__tmp < 1.0)
 276:	20 e0       	ldi	r18, 0x00	; 0
 278:	30 e0       	ldi	r19, 0x00	; 0
 27a:	40 e8       	ldi	r20, 0x80	; 128
 27c:	5f e3       	ldi	r21, 0x3F	; 63
 27e:	0e 94 cc 01 	call	0x398	; 0x398 <__cmpsf2>
 282:	88 23       	and	r24, r24
 284:	1c f4       	brge	.+6      	; 0x28c <main+0x1a4>
 286:	61 e0       	ldi	r22, 0x01	; 1
 288:	70 e0       	ldi	r23, 0x00	; 0
 28a:	22 c0       	rjmp	.+68     	; 0x2d0 <main+0x1e8>
		__ticks = 1;
	else if (__tmp > 65535)
 28c:	c8 01       	movw	r24, r16
 28e:	b7 01       	movw	r22, r14
 290:	20 e0       	ldi	r18, 0x00	; 0
 292:	3f ef       	ldi	r19, 0xFF	; 255
 294:	4f e7       	ldi	r20, 0x7F	; 127
 296:	57 e4       	ldi	r21, 0x47	; 71
 298:	0e 94 86 02 	call	0x50c	; 0x50c <__gesf2>
 29c:	18 16       	cp	r1, r24
 29e:	a4 f4       	brge	.+40     	; 0x2c8 <main+0x1e0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 2a0:	c6 01       	movw	r24, r12
 2a2:	b5 01       	movw	r22, r10
 2a4:	20 e0       	ldi	r18, 0x00	; 0
 2a6:	30 e0       	ldi	r19, 0x00	; 0
 2a8:	40 e2       	ldi	r20, 0x20	; 32
 2aa:	51 e4       	ldi	r21, 0x41	; 65
 2ac:	0e 94 8a 02 	call	0x514	; 0x514 <__mulsf3>
 2b0:	0e 94 d0 01 	call	0x3a0	; 0x3a0 <__fixunssfsi>
 2b4:	05 c0       	rjmp	.+10     	; 0x2c0 <main+0x1d8>
 2b6:	ce 01       	movw	r24, r28
 2b8:	01 97       	sbiw	r24, 0x01	; 1
 2ba:	f1 f7       	brne	.-4      	; 0x2b8 <main+0x1d0>
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 2bc:	61 50       	subi	r22, 0x01	; 1
 2be:	70 40       	sbci	r23, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 2c0:	61 15       	cp	r22, r1
 2c2:	71 05       	cpc	r23, r1
 2c4:	c1 f7       	brne	.-16     	; 0x2b6 <main+0x1ce>
 2c6:	07 c0       	rjmp	.+14     	; 0x2d6 <main+0x1ee>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 2c8:	c8 01       	movw	r24, r16
 2ca:	b7 01       	movw	r22, r14
 2cc:	0e 94 d0 01 	call	0x3a0	; 0x3a0 <__fixunssfsi>
 2d0:	cb 01       	movw	r24, r22
 2d2:	01 97       	sbiw	r24, 0x01	; 1
 2d4:	f1 f7       	brne	.-4      	; 0x2d2 <main+0x1ea>
		OneSend(0);
 2d6:	80 e0       	ldi	r24, 0x00	; 0
 2d8:	90 e0       	ldi	r25, 0x00	; 0
 2da:	0e 94 5d 00 	call	0xba	; 0xba <OneSend>
		PORTD&=~(1<<LDAC);
 2de:	59 98       	cbi	0x0b, 1	; 11
		PORTD|=(1<<LDAC);
 2e0:	59 9a       	sbi	0x0b, 1	; 11
 2e2:	84 ef       	ldi	r24, 0xF4	; 244
 2e4:	91 e0       	ldi	r25, 0x01	; 1
 2e6:	fe 01       	movw	r30, r28
 2e8:	31 97       	sbiw	r30, 0x01	; 1
 2ea:	f1 f7       	brne	.-4      	; 0x2e8 <main+0x200>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 2ec:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 2ee:	d9 f7       	brne	.-10     	; 0x2e6 <main+0x1fe>
 2f0:	19 cf       	rjmp	.-462    	; 0x124 <main+0x3c>

000002f2 <__vector_18>:
    }

}

ISR(USART_RX_vect)
{
 2f2:	1f 92       	push	r1
 2f4:	0f 92       	push	r0
 2f6:	0f b6       	in	r0, 0x3f	; 63
 2f8:	0f 92       	push	r0
 2fa:	11 24       	eor	r1, r1
 2fc:	2f 93       	push	r18
 2fe:	6f 93       	push	r22
 300:	7f 93       	push	r23
 302:	8f 93       	push	r24
 304:	9f 93       	push	r25
	switch(ptr)
 306:	20 91 04 01 	lds	r18, 0x0104
 30a:	22 30       	cpi	r18, 0x02	; 2
 30c:	31 f1       	breq	.+76     	; 0x35a <__vector_18+0x68>
 30e:	23 30       	cpi	r18, 0x03	; 3
 310:	28 f4       	brcc	.+10     	; 0x31c <__vector_18+0x2a>
 312:	22 23       	and	r18, r18
 314:	41 f0       	breq	.+16     	; 0x326 <__vector_18+0x34>
 316:	21 30       	cpi	r18, 0x01	; 1
 318:	71 f5       	brne	.+92     	; 0x376 <__vector_18+0x84>
 31a:	12 c0       	rjmp	.+36     	; 0x340 <__vector_18+0x4e>
 31c:	23 30       	cpi	r18, 0x03	; 3
 31e:	11 f1       	breq	.+68     	; 0x364 <__vector_18+0x72>
 320:	24 30       	cpi	r18, 0x04	; 4
 322:	49 f5       	brne	.+82     	; 0x376 <__vector_18+0x84>
 324:	24 c0       	rjmp	.+72     	; 0x36e <__vector_18+0x7c>
	{
		case 0:
		x16=UDR0*16;
 326:	80 91 c6 00 	lds	r24, 0x00C6
 32a:	90 e0       	ldi	r25, 0x00	; 0
 32c:	74 e0       	ldi	r23, 0x04	; 4
 32e:	88 0f       	add	r24, r24
 330:	99 1f       	adc	r25, r25
 332:	7a 95       	dec	r23
 334:	e1 f7       	brne	.-8      	; 0x32e <__vector_18+0x3c>
 336:	90 93 01 01 	sts	0x0101, r25
 33a:	80 93 00 01 	sts	0x0100, r24
 33e:	1b c0       	rjmp	.+54     	; 0x376 <__vector_18+0x84>
		break;
		case 1:	
		y16=UDR0*16;
 340:	80 91 c6 00 	lds	r24, 0x00C6
 344:	90 e0       	ldi	r25, 0x00	; 0
 346:	64 e0       	ldi	r22, 0x04	; 4
 348:	88 0f       	add	r24, r24
 34a:	99 1f       	adc	r25, r25
 34c:	6a 95       	dec	r22
 34e:	e1 f7       	brne	.-8      	; 0x348 <__vector_18+0x56>
 350:	90 93 03 01 	sts	0x0103, r25
 354:	80 93 02 01 	sts	0x0102, r24
 358:	0e c0       	rjmp	.+28     	; 0x376 <__vector_18+0x84>
		break;
		case 2:
		t1=UDR0;
 35a:	80 91 c6 00 	lds	r24, 0x00C6
 35e:	80 93 09 01 	sts	0x0109, r24
 362:	09 c0       	rjmp	.+18     	; 0x376 <__vector_18+0x84>
		break;		
		case 3:
		t2=UDR0;
 364:	80 91 c6 00 	lds	r24, 0x00C6
 368:	80 93 05 01 	sts	0x0105, r24
 36c:	04 c0       	rjmp	.+8      	; 0x376 <__vector_18+0x84>
		break;	
		case 4:
		T=UDR0;
 36e:	80 91 c6 00 	lds	r24, 0x00C6
 372:	80 93 07 01 	sts	0x0107, r24
		break;
	}
	//UDR0=x16/16;
	ptr++;
	ptr%=5;
 376:	82 2f       	mov	r24, r18
 378:	8f 5f       	subi	r24, 0xFF	; 255
 37a:	65 e0       	ldi	r22, 0x05	; 5
 37c:	0e 94 15 03 	call	0x62a	; 0x62a <__udivmodqi4>
 380:	90 93 04 01 	sts	0x0104, r25
 384:	9f 91       	pop	r25
 386:	8f 91       	pop	r24
 388:	7f 91       	pop	r23
 38a:	6f 91       	pop	r22
 38c:	2f 91       	pop	r18
 38e:	0f 90       	pop	r0
 390:	0f be       	out	0x3f, r0	; 63
 392:	0f 90       	pop	r0
 394:	1f 90       	pop	r1
 396:	18 95       	reti

00000398 <__cmpsf2>:
 398:	6c d0       	rcall	.+216    	; 0x472 <__fp_cmp>
 39a:	08 f4       	brcc	.+2      	; 0x39e <__cmpsf2+0x6>
 39c:	81 e0       	ldi	r24, 0x01	; 1
 39e:	08 95       	ret

000003a0 <__fixunssfsi>:
 3a0:	94 d0       	rcall	.+296    	; 0x4ca <__fp_splitA>
 3a2:	88 f0       	brcs	.+34     	; 0x3c6 <__fixunssfsi+0x26>
 3a4:	9f 57       	subi	r25, 0x7F	; 127
 3a6:	90 f0       	brcs	.+36     	; 0x3cc <__fixunssfsi+0x2c>
 3a8:	b9 2f       	mov	r27, r25
 3aa:	99 27       	eor	r25, r25
 3ac:	b7 51       	subi	r27, 0x17	; 23
 3ae:	a0 f0       	brcs	.+40     	; 0x3d8 <__fixunssfsi+0x38>
 3b0:	d1 f0       	breq	.+52     	; 0x3e6 <__fixunssfsi+0x46>
 3b2:	66 0f       	add	r22, r22
 3b4:	77 1f       	adc	r23, r23
 3b6:	88 1f       	adc	r24, r24
 3b8:	99 1f       	adc	r25, r25
 3ba:	1a f0       	brmi	.+6      	; 0x3c2 <__fixunssfsi+0x22>
 3bc:	ba 95       	dec	r27
 3be:	c9 f7       	brne	.-14     	; 0x3b2 <__fixunssfsi+0x12>
 3c0:	12 c0       	rjmp	.+36     	; 0x3e6 <__fixunssfsi+0x46>
 3c2:	b1 30       	cpi	r27, 0x01	; 1
 3c4:	81 f0       	breq	.+32     	; 0x3e6 <__fixunssfsi+0x46>
 3c6:	9b d0       	rcall	.+310    	; 0x4fe <__fp_zero>
 3c8:	b1 e0       	ldi	r27, 0x01	; 1
 3ca:	08 95       	ret
 3cc:	98 c0       	rjmp	.+304    	; 0x4fe <__fp_zero>
 3ce:	67 2f       	mov	r22, r23
 3d0:	78 2f       	mov	r23, r24
 3d2:	88 27       	eor	r24, r24
 3d4:	b8 5f       	subi	r27, 0xF8	; 248
 3d6:	39 f0       	breq	.+14     	; 0x3e6 <__fixunssfsi+0x46>
 3d8:	b9 3f       	cpi	r27, 0xF9	; 249
 3da:	cc f3       	brlt	.-14     	; 0x3ce <__fixunssfsi+0x2e>
 3dc:	86 95       	lsr	r24
 3de:	77 95       	ror	r23
 3e0:	67 95       	ror	r22
 3e2:	b3 95       	inc	r27
 3e4:	d9 f7       	brne	.-10     	; 0x3dc <__fixunssfsi+0x3c>
 3e6:	3e f4       	brtc	.+14     	; 0x3f6 <__fixunssfsi+0x56>
 3e8:	90 95       	com	r25
 3ea:	80 95       	com	r24
 3ec:	70 95       	com	r23
 3ee:	61 95       	neg	r22
 3f0:	7f 4f       	sbci	r23, 0xFF	; 255
 3f2:	8f 4f       	sbci	r24, 0xFF	; 255
 3f4:	9f 4f       	sbci	r25, 0xFF	; 255
 3f6:	08 95       	ret

000003f8 <__floatunsisf>:
 3f8:	e8 94       	clt
 3fa:	09 c0       	rjmp	.+18     	; 0x40e <__floatsisf+0x12>

000003fc <__floatsisf>:
 3fc:	97 fb       	bst	r25, 7
 3fe:	3e f4       	brtc	.+14     	; 0x40e <__floatsisf+0x12>
 400:	90 95       	com	r25
 402:	80 95       	com	r24
 404:	70 95       	com	r23
 406:	61 95       	neg	r22
 408:	7f 4f       	sbci	r23, 0xFF	; 255
 40a:	8f 4f       	sbci	r24, 0xFF	; 255
 40c:	9f 4f       	sbci	r25, 0xFF	; 255
 40e:	99 23       	and	r25, r25
 410:	a9 f0       	breq	.+42     	; 0x43c <__floatsisf+0x40>
 412:	f9 2f       	mov	r31, r25
 414:	96 e9       	ldi	r25, 0x96	; 150
 416:	bb 27       	eor	r27, r27
 418:	93 95       	inc	r25
 41a:	f6 95       	lsr	r31
 41c:	87 95       	ror	r24
 41e:	77 95       	ror	r23
 420:	67 95       	ror	r22
 422:	b7 95       	ror	r27
 424:	f1 11       	cpse	r31, r1
 426:	f8 cf       	rjmp	.-16     	; 0x418 <__floatsisf+0x1c>
 428:	fa f4       	brpl	.+62     	; 0x468 <__floatsisf+0x6c>
 42a:	bb 0f       	add	r27, r27
 42c:	11 f4       	brne	.+4      	; 0x432 <__floatsisf+0x36>
 42e:	60 ff       	sbrs	r22, 0
 430:	1b c0       	rjmp	.+54     	; 0x468 <__floatsisf+0x6c>
 432:	6f 5f       	subi	r22, 0xFF	; 255
 434:	7f 4f       	sbci	r23, 0xFF	; 255
 436:	8f 4f       	sbci	r24, 0xFF	; 255
 438:	9f 4f       	sbci	r25, 0xFF	; 255
 43a:	16 c0       	rjmp	.+44     	; 0x468 <__floatsisf+0x6c>
 43c:	88 23       	and	r24, r24
 43e:	11 f0       	breq	.+4      	; 0x444 <__floatsisf+0x48>
 440:	96 e9       	ldi	r25, 0x96	; 150
 442:	11 c0       	rjmp	.+34     	; 0x466 <__floatsisf+0x6a>
 444:	77 23       	and	r23, r23
 446:	21 f0       	breq	.+8      	; 0x450 <__floatsisf+0x54>
 448:	9e e8       	ldi	r25, 0x8E	; 142
 44a:	87 2f       	mov	r24, r23
 44c:	76 2f       	mov	r23, r22
 44e:	05 c0       	rjmp	.+10     	; 0x45a <__floatsisf+0x5e>
 450:	66 23       	and	r22, r22
 452:	71 f0       	breq	.+28     	; 0x470 <__floatsisf+0x74>
 454:	96 e8       	ldi	r25, 0x86	; 134
 456:	86 2f       	mov	r24, r22
 458:	70 e0       	ldi	r23, 0x00	; 0
 45a:	60 e0       	ldi	r22, 0x00	; 0
 45c:	2a f0       	brmi	.+10     	; 0x468 <__floatsisf+0x6c>
 45e:	9a 95       	dec	r25
 460:	66 0f       	add	r22, r22
 462:	77 1f       	adc	r23, r23
 464:	88 1f       	adc	r24, r24
 466:	da f7       	brpl	.-10     	; 0x45e <__floatsisf+0x62>
 468:	88 0f       	add	r24, r24
 46a:	96 95       	lsr	r25
 46c:	87 95       	ror	r24
 46e:	97 f9       	bld	r25, 7
 470:	08 95       	ret

00000472 <__fp_cmp>:
 472:	99 0f       	add	r25, r25
 474:	00 08       	sbc	r0, r0
 476:	55 0f       	add	r21, r21
 478:	aa 0b       	sbc	r26, r26
 47a:	e0 e8       	ldi	r30, 0x80	; 128
 47c:	fe ef       	ldi	r31, 0xFE	; 254
 47e:	16 16       	cp	r1, r22
 480:	17 06       	cpc	r1, r23
 482:	e8 07       	cpc	r30, r24
 484:	f9 07       	cpc	r31, r25
 486:	c0 f0       	brcs	.+48     	; 0x4b8 <__fp_cmp+0x46>
 488:	12 16       	cp	r1, r18
 48a:	13 06       	cpc	r1, r19
 48c:	e4 07       	cpc	r30, r20
 48e:	f5 07       	cpc	r31, r21
 490:	98 f0       	brcs	.+38     	; 0x4b8 <__fp_cmp+0x46>
 492:	62 1b       	sub	r22, r18
 494:	73 0b       	sbc	r23, r19
 496:	84 0b       	sbc	r24, r20
 498:	95 0b       	sbc	r25, r21
 49a:	39 f4       	brne	.+14     	; 0x4aa <__fp_cmp+0x38>
 49c:	0a 26       	eor	r0, r26
 49e:	61 f0       	breq	.+24     	; 0x4b8 <__fp_cmp+0x46>
 4a0:	23 2b       	or	r18, r19
 4a2:	24 2b       	or	r18, r20
 4a4:	25 2b       	or	r18, r21
 4a6:	21 f4       	brne	.+8      	; 0x4b0 <__fp_cmp+0x3e>
 4a8:	08 95       	ret
 4aa:	0a 26       	eor	r0, r26
 4ac:	09 f4       	brne	.+2      	; 0x4b0 <__fp_cmp+0x3e>
 4ae:	a1 40       	sbci	r26, 0x01	; 1
 4b0:	a6 95       	lsr	r26
 4b2:	8f ef       	ldi	r24, 0xFF	; 255
 4b4:	81 1d       	adc	r24, r1
 4b6:	81 1d       	adc	r24, r1
 4b8:	08 95       	ret

000004ba <__fp_split3>:
 4ba:	57 fd       	sbrc	r21, 7
 4bc:	90 58       	subi	r25, 0x80	; 128
 4be:	44 0f       	add	r20, r20
 4c0:	55 1f       	adc	r21, r21
 4c2:	59 f0       	breq	.+22     	; 0x4da <__fp_splitA+0x10>
 4c4:	5f 3f       	cpi	r21, 0xFF	; 255
 4c6:	71 f0       	breq	.+28     	; 0x4e4 <__fp_splitA+0x1a>
 4c8:	47 95       	ror	r20

000004ca <__fp_splitA>:
 4ca:	88 0f       	add	r24, r24
 4cc:	97 fb       	bst	r25, 7
 4ce:	99 1f       	adc	r25, r25
 4d0:	61 f0       	breq	.+24     	; 0x4ea <__fp_splitA+0x20>
 4d2:	9f 3f       	cpi	r25, 0xFF	; 255
 4d4:	79 f0       	breq	.+30     	; 0x4f4 <__fp_splitA+0x2a>
 4d6:	87 95       	ror	r24
 4d8:	08 95       	ret
 4da:	12 16       	cp	r1, r18
 4dc:	13 06       	cpc	r1, r19
 4de:	14 06       	cpc	r1, r20
 4e0:	55 1f       	adc	r21, r21
 4e2:	f2 cf       	rjmp	.-28     	; 0x4c8 <__fp_split3+0xe>
 4e4:	46 95       	lsr	r20
 4e6:	f1 df       	rcall	.-30     	; 0x4ca <__fp_splitA>
 4e8:	08 c0       	rjmp	.+16     	; 0x4fa <__fp_splitA+0x30>
 4ea:	16 16       	cp	r1, r22
 4ec:	17 06       	cpc	r1, r23
 4ee:	18 06       	cpc	r1, r24
 4f0:	99 1f       	adc	r25, r25
 4f2:	f1 cf       	rjmp	.-30     	; 0x4d6 <__fp_splitA+0xc>
 4f4:	86 95       	lsr	r24
 4f6:	71 05       	cpc	r23, r1
 4f8:	61 05       	cpc	r22, r1
 4fa:	08 94       	sec
 4fc:	08 95       	ret

000004fe <__fp_zero>:
 4fe:	e8 94       	clt

00000500 <__fp_szero>:
 500:	bb 27       	eor	r27, r27
 502:	66 27       	eor	r22, r22
 504:	77 27       	eor	r23, r23
 506:	cb 01       	movw	r24, r22
 508:	97 f9       	bld	r25, 7
 50a:	08 95       	ret

0000050c <__gesf2>:
 50c:	b2 df       	rcall	.-156    	; 0x472 <__fp_cmp>
 50e:	08 f4       	brcc	.+2      	; 0x512 <__gesf2+0x6>
 510:	8f ef       	ldi	r24, 0xFF	; 255
 512:	08 95       	ret

00000514 <__mulsf3>:
 514:	0b d0       	rcall	.+22     	; 0x52c <__mulsf3x>
 516:	78 c0       	rjmp	.+240    	; 0x608 <__fp_round>
 518:	69 d0       	rcall	.+210    	; 0x5ec <__fp_pscA>
 51a:	28 f0       	brcs	.+10     	; 0x526 <__mulsf3+0x12>
 51c:	6e d0       	rcall	.+220    	; 0x5fa <__fp_pscB>
 51e:	18 f0       	brcs	.+6      	; 0x526 <__mulsf3+0x12>
 520:	95 23       	and	r25, r21
 522:	09 f0       	breq	.+2      	; 0x526 <__mulsf3+0x12>
 524:	5a c0       	rjmp	.+180    	; 0x5da <__fp_inf>
 526:	5f c0       	rjmp	.+190    	; 0x5e6 <__fp_nan>
 528:	11 24       	eor	r1, r1
 52a:	ea cf       	rjmp	.-44     	; 0x500 <__fp_szero>

0000052c <__mulsf3x>:
 52c:	c6 df       	rcall	.-116    	; 0x4ba <__fp_split3>
 52e:	a0 f3       	brcs	.-24     	; 0x518 <__mulsf3+0x4>

00000530 <__mulsf3_pse>:
 530:	95 9f       	mul	r25, r21
 532:	d1 f3       	breq	.-12     	; 0x528 <__mulsf3+0x14>
 534:	95 0f       	add	r25, r21
 536:	50 e0       	ldi	r21, 0x00	; 0
 538:	55 1f       	adc	r21, r21
 53a:	62 9f       	mul	r22, r18
 53c:	f0 01       	movw	r30, r0
 53e:	72 9f       	mul	r23, r18
 540:	bb 27       	eor	r27, r27
 542:	f0 0d       	add	r31, r0
 544:	b1 1d       	adc	r27, r1
 546:	63 9f       	mul	r22, r19
 548:	aa 27       	eor	r26, r26
 54a:	f0 0d       	add	r31, r0
 54c:	b1 1d       	adc	r27, r1
 54e:	aa 1f       	adc	r26, r26
 550:	64 9f       	mul	r22, r20
 552:	66 27       	eor	r22, r22
 554:	b0 0d       	add	r27, r0
 556:	a1 1d       	adc	r26, r1
 558:	66 1f       	adc	r22, r22
 55a:	82 9f       	mul	r24, r18
 55c:	22 27       	eor	r18, r18
 55e:	b0 0d       	add	r27, r0
 560:	a1 1d       	adc	r26, r1
 562:	62 1f       	adc	r22, r18
 564:	73 9f       	mul	r23, r19
 566:	b0 0d       	add	r27, r0
 568:	a1 1d       	adc	r26, r1
 56a:	62 1f       	adc	r22, r18
 56c:	83 9f       	mul	r24, r19
 56e:	a0 0d       	add	r26, r0
 570:	61 1d       	adc	r22, r1
 572:	22 1f       	adc	r18, r18
 574:	74 9f       	mul	r23, r20
 576:	33 27       	eor	r19, r19
 578:	a0 0d       	add	r26, r0
 57a:	61 1d       	adc	r22, r1
 57c:	23 1f       	adc	r18, r19
 57e:	84 9f       	mul	r24, r20
 580:	60 0d       	add	r22, r0
 582:	21 1d       	adc	r18, r1
 584:	82 2f       	mov	r24, r18
 586:	76 2f       	mov	r23, r22
 588:	6a 2f       	mov	r22, r26
 58a:	11 24       	eor	r1, r1
 58c:	9f 57       	subi	r25, 0x7F	; 127
 58e:	50 40       	sbci	r21, 0x00	; 0
 590:	8a f0       	brmi	.+34     	; 0x5b4 <__mulsf3_pse+0x84>
 592:	e1 f0       	breq	.+56     	; 0x5cc <__mulsf3_pse+0x9c>
 594:	88 23       	and	r24, r24
 596:	4a f0       	brmi	.+18     	; 0x5aa <__mulsf3_pse+0x7a>
 598:	ee 0f       	add	r30, r30
 59a:	ff 1f       	adc	r31, r31
 59c:	bb 1f       	adc	r27, r27
 59e:	66 1f       	adc	r22, r22
 5a0:	77 1f       	adc	r23, r23
 5a2:	88 1f       	adc	r24, r24
 5a4:	91 50       	subi	r25, 0x01	; 1
 5a6:	50 40       	sbci	r21, 0x00	; 0
 5a8:	a9 f7       	brne	.-22     	; 0x594 <__mulsf3_pse+0x64>
 5aa:	9e 3f       	cpi	r25, 0xFE	; 254
 5ac:	51 05       	cpc	r21, r1
 5ae:	70 f0       	brcs	.+28     	; 0x5cc <__mulsf3_pse+0x9c>
 5b0:	14 c0       	rjmp	.+40     	; 0x5da <__fp_inf>
 5b2:	a6 cf       	rjmp	.-180    	; 0x500 <__fp_szero>
 5b4:	5f 3f       	cpi	r21, 0xFF	; 255
 5b6:	ec f3       	brlt	.-6      	; 0x5b2 <__mulsf3_pse+0x82>
 5b8:	98 3e       	cpi	r25, 0xE8	; 232
 5ba:	dc f3       	brlt	.-10     	; 0x5b2 <__mulsf3_pse+0x82>
 5bc:	86 95       	lsr	r24
 5be:	77 95       	ror	r23
 5c0:	67 95       	ror	r22
 5c2:	b7 95       	ror	r27
 5c4:	f7 95       	ror	r31
 5c6:	e7 95       	ror	r30
 5c8:	9f 5f       	subi	r25, 0xFF	; 255
 5ca:	c1 f7       	brne	.-16     	; 0x5bc <__mulsf3_pse+0x8c>
 5cc:	fe 2b       	or	r31, r30
 5ce:	88 0f       	add	r24, r24
 5d0:	91 1d       	adc	r25, r1
 5d2:	96 95       	lsr	r25
 5d4:	87 95       	ror	r24
 5d6:	97 f9       	bld	r25, 7
 5d8:	08 95       	ret

000005da <__fp_inf>:
 5da:	97 f9       	bld	r25, 7
 5dc:	9f 67       	ori	r25, 0x7F	; 127
 5de:	80 e8       	ldi	r24, 0x80	; 128
 5e0:	70 e0       	ldi	r23, 0x00	; 0
 5e2:	60 e0       	ldi	r22, 0x00	; 0
 5e4:	08 95       	ret

000005e6 <__fp_nan>:
 5e6:	9f ef       	ldi	r25, 0xFF	; 255
 5e8:	80 ec       	ldi	r24, 0xC0	; 192
 5ea:	08 95       	ret

000005ec <__fp_pscA>:
 5ec:	00 24       	eor	r0, r0
 5ee:	0a 94       	dec	r0
 5f0:	16 16       	cp	r1, r22
 5f2:	17 06       	cpc	r1, r23
 5f4:	18 06       	cpc	r1, r24
 5f6:	09 06       	cpc	r0, r25
 5f8:	08 95       	ret

000005fa <__fp_pscB>:
 5fa:	00 24       	eor	r0, r0
 5fc:	0a 94       	dec	r0
 5fe:	12 16       	cp	r1, r18
 600:	13 06       	cpc	r1, r19
 602:	14 06       	cpc	r1, r20
 604:	05 06       	cpc	r0, r21
 606:	08 95       	ret

00000608 <__fp_round>:
 608:	09 2e       	mov	r0, r25
 60a:	03 94       	inc	r0
 60c:	00 0c       	add	r0, r0
 60e:	11 f4       	brne	.+4      	; 0x614 <__fp_round+0xc>
 610:	88 23       	and	r24, r24
 612:	52 f0       	brmi	.+20     	; 0x628 <__fp_round+0x20>
 614:	bb 0f       	add	r27, r27
 616:	40 f4       	brcc	.+16     	; 0x628 <__fp_round+0x20>
 618:	bf 2b       	or	r27, r31
 61a:	11 f4       	brne	.+4      	; 0x620 <__fp_round+0x18>
 61c:	60 ff       	sbrs	r22, 0
 61e:	04 c0       	rjmp	.+8      	; 0x628 <__fp_round+0x20>
 620:	6f 5f       	subi	r22, 0xFF	; 255
 622:	7f 4f       	sbci	r23, 0xFF	; 255
 624:	8f 4f       	sbci	r24, 0xFF	; 255
 626:	9f 4f       	sbci	r25, 0xFF	; 255
 628:	08 95       	ret

0000062a <__udivmodqi4>:
 62a:	99 1b       	sub	r25, r25
 62c:	79 e0       	ldi	r23, 0x09	; 9
 62e:	04 c0       	rjmp	.+8      	; 0x638 <__udivmodqi4_ep>

00000630 <__udivmodqi4_loop>:
 630:	99 1f       	adc	r25, r25
 632:	96 17       	cp	r25, r22
 634:	08 f0       	brcs	.+2      	; 0x638 <__udivmodqi4_ep>
 636:	96 1b       	sub	r25, r22

00000638 <__udivmodqi4_ep>:
 638:	88 1f       	adc	r24, r24
 63a:	7a 95       	dec	r23
 63c:	c9 f7       	brne	.-14     	; 0x630 <__udivmodqi4_loop>
 63e:	80 95       	com	r24
 640:	08 95       	ret

00000642 <_exit>:
 642:	f8 94       	cli

00000644 <__stop_program>:
 644:	ff cf       	rjmp	.-2      	; 0x644 <__stop_program>
