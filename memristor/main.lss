
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000004  00800100  000003a6  0000043a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000003a6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000013  00800104  00800104  0000043e  2**0
                  ALLOC
  3 .debug_aranges 00000020  00000000  00000000  0000043e  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000125  00000000  00000000  0000045e  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000002ea  00000000  00000000  00000583  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000011e  00000000  00000000  0000086d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000333  00000000  00000000  0000098b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000a0  00000000  00000000  00000cc0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000120  00000000  00000000  00000d60  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000040  00000000  00000000  00000e80  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 c8 00 	jmp	0x190	; 0x190 <__vector_9>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 65 01 	jmp	0x2ca	; 0x2ca <__vector_18>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e6 ea       	ldi	r30, 0xA6	; 166
  7c:	f3 e0       	ldi	r31, 0x03	; 3
  7e:	02 c0       	rjmp	.+4      	; 0x84 <.do_copy_data_start>

00000080 <.do_copy_data_loop>:
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0

00000084 <.do_copy_data_start>:
  84:	a4 30       	cpi	r26, 0x04	; 4
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <.do_copy_data_loop>

0000008a <__do_clear_bss>:
  8a:	11 e0       	ldi	r17, 0x01	; 1
  8c:	a4 e0       	ldi	r26, 0x04	; 4
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a7 31       	cpi	r26, 0x17	; 23
  96:	b1 07       	cpc	r27, r17
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 96 00 	call	0x12c	; 0x12c <main>
  9e:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <ADC_Init>:
int eventN=100;
int ADC_cnt;

/* Функция инициализация АЦП */
void ADC_Init(){
 ADCSRA |= (1 << ADEN) // Включаем АЦП
  a6:	ea e7       	ldi	r30, 0x7A	; 122
  a8:	f0 e0       	ldi	r31, 0x00	; 0
  aa:	80 81       	ld	r24, Z
  ac:	83 68       	ori	r24, 0x83	; 131
  ae:	80 83       	st	Z, r24
 |(1 << ADPS1)|(1 << ADPS0)|(1 << ADPS1);    // устанавливаем предделитель преобразователя на 8
 ADMUX |= (0 << REFS1)|(1 << REFS0) //выставляем опорное напряжение, как внешний ИОН
  b0:	ec e7       	ldi	r30, 0x7C	; 124
  b2:	f0 e0       	ldi	r31, 0x00	; 0
  b4:	80 81       	ld	r24, Z
  b6:	80 64       	ori	r24, 0x40	; 64
  b8:	80 83       	st	Z, r24
 |(0 << MUX0)|(0 << MUX1)|(0 << MUX2)|(0 << MUX3); // снимать сигнал будем с  входа PC0 
}
  ba:	08 95       	ret

000000bc <timer_init>:


void timer_init()
{
    TCCR2A = 0;        // set entire TCCR1A register to 0
  bc:	10 92 b0 00 	sts	0x00B0, r1
    TCCR2B = 0;
  c0:	e1 eb       	ldi	r30, 0xB1	; 177
  c2:	f0 e0       	ldi	r31, 0x00	; 0
  c4:	10 82       	st	Z, r1
    //    TCCR2B |= (1<<CS22) | (1<<CS20); // PRESCALER 1024
    TCCR2B |= (1<<CS21) ;
  c6:	80 81       	ld	r24, Z
  c8:	82 60       	ori	r24, 0x02	; 2
  ca:	80 83       	st	Z, r24
    // enable Timer1 overflow interrupt:
    TIMSK2 = (1 << TOIE2);
  cc:	81 e0       	ldi	r24, 0x01	; 1
  ce:	80 93 70 00 	sts	0x0070, r24
}
  d2:	08 95       	ret

000000d4 <uart_init>:

void uart_init(unsigned int ubrr)
{
	
	UBRR0H = (unsigned char)(ubrr>>8);
  d4:	90 93 c5 00 	sts	0x00C5, r25
	UBRR0L = (unsigned char)ubrr;
  d8:	80 93 c4 00 	sts	0x00C4, r24
	/*Enable receiver and transmitter */
	UCSR0B = (1<<RXCIE0)|(1<<RXEN0)|(1<<TXEN0);
  dc:	88 e9       	ldi	r24, 0x98	; 152
  de:	80 93 c1 00 	sts	0x00C1, r24
	/* Set frame format: 8data, 2stop bit */
	UCSR0C = (1<<USBS0)|(3<<UCSZ00);
  e2:	8e e0       	ldi	r24, 0x0E	; 14
  e4:	80 93 c2 00 	sts	0x00C2, r24
}
  e8:	08 95       	ret

000000ea <SPI_MasterInit>:

void SPI_MasterInit()
{
/* Set MOSI and SCK output, all others input */
	DDR_SPI = (1<<DD_MOSI)|(1<<DD_SCK)|(1<<SPI_SS);
  ea:	8c e2       	ldi	r24, 0x2C	; 44
  ec:	84 b9       	out	0x04, r24	; 4
/* Enable SPI, Master, set clock rate fck/16 */
	SPCR = (1<<SPE)|(0<<DORD)|(1<<MSTR)|(1<<CPOL)|(0<<CPHA)|(1<<SPR1)|(0<<SPR0);
  ee:	8a e5       	ldi	r24, 0x5A	; 90
  f0:	8c bd       	out	0x2c, r24	; 44
	//SPSR = (0<<SPI2X);
}
  f2:	08 95       	ret

000000f4 <SPI_WriteByte>:


void SPI_WriteByte(uint8_t data)
{
   //PORTB &= ~(1<<SPI_SS);
   SPDR = data;
  f4:	8e bd       	out	0x2e, r24	; 46
  while(!(SPSR & (1<<SPIF)));
  f6:	0d b4       	in	r0, 0x2d	; 45
  f8:	07 fe       	sbrs	r0, 7
  fa:	fd cf       	rjmp	.-6      	; 0xf6 <SPI_WriteByte+0x2>
   //PORTB |= (1<<SPI_SS); 
}
  fc:	08 95       	ret

000000fe <OneSend>:
	SPCR = (1<<SPE)|(0<<DORD)|(1<<MSTR)|(1<<CPOL)|(0<<CPHA)|(1<<SPR1)|(0<<SPR0);
	//SPSR = (0<<SPI2X);
}
//(1<<RXCIE0)|
void OneSend(uint16_t x)
{
  fe:	0f 93       	push	r16
 100:	1f 93       	push	r17
	x+=2048;
 102:	8c 01       	movw	r16, r24
 104:	00 50       	subi	r16, 0x00	; 0
 106:	18 4f       	sbci	r17, 0xF8	; 248
	PORTD&=~(1<<SYNC);
 108:	5b 98       	cbi	0x0b, 3	; 11
	//_delay_us(30);  
	send8 = (x >> 8);
	send8 &= 0b00001111;
 10a:	81 2f       	mov	r24, r17
 10c:	8f 70       	andi	r24, 0x0F	; 15
 10e:	80 93 0d 01 	sts	0x010D, r24
	SPI_WriteByte(send8);
 112:	90 e0       	ldi	r25, 0x00	; 0
 114:	0e 94 7a 00 	call	0xf4	; 0xf4 <SPI_WriteByte>
	send8=x;
 118:	00 93 0d 01 	sts	0x010D, r16
	//send8&=0b11111111;
	SPI_WriteByte(send8);		
 11c:	80 2f       	mov	r24, r16
 11e:	90 e0       	ldi	r25, 0x00	; 0
 120:	0e 94 7a 00 	call	0xf4	; 0xf4 <SPI_WriteByte>
	PORTD|=(1<<SYNC);
 124:	5b 9a       	sbi	0x0b, 3	; 11

}
 126:	1f 91       	pop	r17
 128:	0f 91       	pop	r16
 12a:	08 95       	ret

0000012c <main>:
   //PORTB |= (1<<SPI_SS); 
}

void main(void)
{
	sei();
 12c:	78 94       	sei
}

void SPI_MasterInit()
{
/* Set MOSI and SCK output, all others input */
	DDR_SPI = (1<<DD_MOSI)|(1<<DD_SCK)|(1<<SPI_SS);
 12e:	8c e2       	ldi	r24, 0x2C	; 44
 130:	84 b9       	out	0x04, r24	; 4
/* Enable SPI, Master, set clock rate fck/16 */
	SPCR = (1<<SPE)|(0<<DORD)|(1<<MSTR)|(1<<CPOL)|(0<<CPHA)|(1<<SPR1)|(0<<SPR0);
 132:	8a e5       	ldi	r24, 0x5A	; 90
 134:	8c bd       	out	0x2c, r24	; 44
}


void timer_init()
{
    TCCR2A = 0;        // set entire TCCR1A register to 0
 136:	10 92 b0 00 	sts	0x00B0, r1
    TCCR2B = 0;
 13a:	10 92 b1 00 	sts	0x00B1, r1
    //    TCCR2B |= (1<<CS22) | (1<<CS20); // PRESCALER 1024
    TCCR2B |= (1<<CS21) ;
 13e:	80 91 b1 00 	lds	r24, 0x00B1
 142:	82 60       	ori	r24, 0x02	; 2
 144:	80 93 b1 00 	sts	0x00B1, r24
    // enable Timer1 overflow interrupt:
    TIMSK2 = (1 << TOIE2);
 148:	81 e0       	ldi	r24, 0x01	; 1
 14a:	80 93 70 00 	sts	0x0070, r24
void main(void)
{
	sei();
	SPI_MasterInit();
	timer_init();
    DDRD = 0b000001100;	
 14e:	8c e0       	ldi	r24, 0x0C	; 12
 150:	8a b9       	out	0x0a, r24	; 10
}

void uart_init(unsigned int ubrr)
{
	
	UBRR0H = (unsigned char)(ubrr>>8);
 152:	10 92 c5 00 	sts	0x00C5, r1
	UBRR0L = (unsigned char)ubrr;
 156:	83 e3       	ldi	r24, 0x33	; 51
 158:	80 93 c4 00 	sts	0x00C4, r24
	/*Enable receiver and transmitter */
	UCSR0B = (1<<RXCIE0)|(1<<RXEN0)|(1<<TXEN0);
 15c:	88 e9       	ldi	r24, 0x98	; 152
 15e:	80 93 c1 00 	sts	0x00C1, r24
	/* Set frame format: 8data, 2stop bit */
	UCSR0C = (1<<USBS0)|(3<<UCSZ00);
 162:	8e e0       	ldi	r24, 0x0E	; 14
 164:	80 93 c2 00 	sts	0x00C2, r24
int eventN=100;
int ADC_cnt;

/* Функция инициализация АЦП */
void ADC_Init(){
 ADCSRA |= (1 << ADEN) // Включаем АЦП
 168:	80 91 7a 00 	lds	r24, 0x007A
 16c:	83 68       	ori	r24, 0x83	; 131
 16e:	80 93 7a 00 	sts	0x007A, r24
 |(1 << ADPS1)|(1 << ADPS0)|(1 << ADPS1);    // устанавливаем предделитель преобразователя на 8
 ADMUX |= (0 << REFS1)|(1 << REFS0) //выставляем опорное напряжение, как внешний ИОН
 172:	80 91 7c 00 	lds	r24, 0x007C
 176:	80 64       	ori	r24, 0x40	; 64
 178:	80 93 7c 00 	sts	0x007C, r24
	timer_init();
    DDRD = 0b000001100;	
	uart_init(BAUDRATE);
	ADC_Init();
	
			ADCSRA |= (1 << ADSC); 
 17c:	80 91 7a 00 	lds	r24, 0x007A
 180:	80 64       	ori	r24, 0x40	; 64
 182:	80 93 7a 00 	sts	0x007A, r24
	ADCL;
 186:	80 91 78 00 	lds	r24, 0x0078
	ADCL;
 18a:	80 91 78 00 	lds	r24, 0x0078
 18e:	ff cf       	rjmp	.-2      	; 0x18e <main+0x62>

00000190 <__vector_9>:
    }

}

ISR(TIMER2_OVF_vect)
{
 190:	1f 92       	push	r1
 192:	0f 92       	push	r0
 194:	0f b6       	in	r0, 0x3f	; 63
 196:	0f 92       	push	r0
 198:	11 24       	eor	r1, r1
 19a:	2f 93       	push	r18
 19c:	3f 93       	push	r19
 19e:	4f 93       	push	r20
 1a0:	5f 93       	push	r21
 1a2:	6f 93       	push	r22
 1a4:	7f 93       	push	r23
 1a6:	8f 93       	push	r24
 1a8:	9f 93       	push	r25
 1aa:	af 93       	push	r26
 1ac:	bf 93       	push	r27
 1ae:	ef 93       	push	r30
 1b0:	ff 93       	push	r31

	if(ctr==time_step)
 1b2:	20 91 0a 01 	lds	r18, 0x010A
 1b6:	30 91 0b 01 	lds	r19, 0x010B
 1ba:	80 91 00 01 	lds	r24, 0x0100
 1be:	90 91 01 01 	lds	r25, 0x0101
 1c2:	28 17       	cp	r18, r24
 1c4:	39 07       	cpc	r19, r25
 1c6:	09 f0       	breq	.+2      	; 0x1ca <__vector_9+0x3a>
 1c8:	66 c0       	rjmp	.+204    	; 0x296 <__vector_9+0x106>
		//{

		//	ADC_cnt=0;
		//}
		//x16++;
		if(event_ctr==(1))//ADC!!!
 1ca:	20 91 15 01 	lds	r18, 0x0115
 1ce:	30 91 16 01 	lds	r19, 0x0116
 1d2:	21 30       	cpi	r18, 0x01	; 1
 1d4:	31 05       	cpc	r19, r1
 1d6:	c9 f4       	brne	.+50     	; 0x20a <__vector_9+0x7a>
		{
			
		_adc=((ADCL>>2)|(ADCH <<6));
 1d8:	80 91 78 00 	lds	r24, 0x0078
 1dc:	90 91 79 00 	lds	r25, 0x0079
 1e0:	92 95       	swap	r25
 1e2:	99 0f       	add	r25, r25
 1e4:	99 0f       	add	r25, r25
 1e6:	90 7c       	andi	r25, 0xC0	; 192
 1e8:	86 95       	lsr	r24
 1ea:	86 95       	lsr	r24
 1ec:	98 2b       	or	r25, r24
 1ee:	90 93 12 01 	sts	0x0112, r25
		if ( ( UCSR0A & (1<<UDRE0)) )			
 1f2:	80 91 c0 00 	lds	r24, 0x00C0
 1f6:	85 ff       	sbrs	r24, 5
 1f8:	02 c0       	rjmp	.+4      	; 0x1fe <__vector_9+0x6e>
			UDR0=_adc;
 1fa:	90 93 c6 00 	sts	0x00C6, r25

		ADCSRA |= (1 << ADSC); 
 1fe:	80 91 7a 00 	lds	r24, 0x007A
 202:	80 64       	ori	r24, 0x40	; 64
 204:	80 93 7a 00 	sts	0x007A, r24
 208:	08 c0       	rjmp	.+16     	; 0x21a <__vector_9+0x8a>
		}
		
		
		
		if(event_ctr==0)
 20a:	21 15       	cp	r18, r1
 20c:	31 05       	cpc	r19, r1
 20e:	29 f4       	brne	.+10     	; 0x21a <__vector_9+0x8a>
		{
			
		OneSend(x16);
 210:	80 91 04 01 	lds	r24, 0x0104
 214:	90 91 05 01 	lds	r25, 0x0105
 218:	19 c0       	rjmp	.+50     	; 0x24c <__vector_9+0xbc>
		PORTD&=~(1<<LDAC);
		PORTD|=(1<<LDAC);
		}
		
		else if(event_ctr==t1)
 21a:	80 91 10 01 	lds	r24, 0x0110
 21e:	90 e0       	ldi	r25, 0x00	; 0
 220:	28 17       	cp	r18, r24
 222:	39 07       	cpc	r19, r25
 224:	89 f0       	breq	.+34     	; 0x248 <__vector_9+0xb8>
			
		OneSend(0);
		PORTD&=~(1<<LDAC);
		PORTD|=(1<<LDAC);
		}
		else if(event_ctr==dT)
 226:	80 91 09 01 	lds	r24, 0x0109
 22a:	90 e0       	ldi	r25, 0x00	; 0
 22c:	28 17       	cp	r18, r24
 22e:	39 07       	cpc	r19, r25
 230:	29 f4       	brne	.+10     	; 0x23c <__vector_9+0xac>
		{		
		OneSend(y16);
 232:	80 91 06 01 	lds	r24, 0x0106
 236:	90 91 07 01 	lds	r25, 0x0107
 23a:	08 c0       	rjmp	.+16     	; 0x24c <__vector_9+0xbc>
		PORTD&=~(1<<LDAC);
		PORTD|=(1<<LDAC);
	
		}

		else if(event_ctr==dTt2)
 23c:	80 91 11 01 	lds	r24, 0x0111
 240:	90 e0       	ldi	r25, 0x00	; 0
 242:	28 17       	cp	r18, r24
 244:	39 07       	cpc	r19, r25
 246:	31 f4       	brne	.+12     	; 0x254 <__vector_9+0xc4>
		{
		//if ( ( UCSR0A & (1<<UDRE0)) )		
		//UDR0=ADCH;	
		//ADCSRA |= (1 << ADSC); 			
		OneSend(0);
 248:	80 e0       	ldi	r24, 0x00	; 0
 24a:	90 e0       	ldi	r25, 0x00	; 0
 24c:	0e 94 7f 00 	call	0xfe	; 0xfe <OneSend>
		PORTD&=~(1<<LDAC);
 250:	5a 98       	cbi	0x0b, 2	; 11
		PORTD|=(1<<LDAC);
 252:	5a 9a       	sbi	0x0b, 2	; 11
		}	
		ctr=0;
 254:	10 92 0b 01 	sts	0x010B, r1
 258:	10 92 0a 01 	sts	0x010A, r1
		event_ctr++;
 25c:	80 91 15 01 	lds	r24, 0x0115
 260:	90 91 16 01 	lds	r25, 0x0116
 264:	01 96       	adiw	r24, 0x01	; 1
 266:	90 93 16 01 	sts	0x0116, r25
 26a:	80 93 15 01 	sts	0x0115, r24
		ADC_cnt++;
 26e:	20 91 13 01 	lds	r18, 0x0113
 272:	30 91 14 01 	lds	r19, 0x0114
 276:	2f 5f       	subi	r18, 0xFF	; 255
 278:	3f 4f       	sbci	r19, 0xFF	; 255
 27a:	30 93 14 01 	sts	0x0114, r19
 27e:	20 93 13 01 	sts	0x0113, r18
		if(event_ctr>T)
 282:	20 91 0e 01 	lds	r18, 0x010E
 286:	30 e0       	ldi	r19, 0x00	; 0
 288:	28 17       	cp	r18, r24
 28a:	39 07       	cpc	r19, r25
 28c:	24 f4       	brge	.+8      	; 0x296 <__vector_9+0x106>
			event_ctr=0;
 28e:	10 92 16 01 	sts	0x0116, r1
 292:	10 92 15 01 	sts	0x0115, r1
	}
	ctr++;
 296:	80 91 0a 01 	lds	r24, 0x010A
 29a:	90 91 0b 01 	lds	r25, 0x010B
 29e:	01 96       	adiw	r24, 0x01	; 1
 2a0:	90 93 0b 01 	sts	0x010B, r25
 2a4:	80 93 0a 01 	sts	0x010A, r24
	
	
}
 2a8:	ff 91       	pop	r31
 2aa:	ef 91       	pop	r30
 2ac:	bf 91       	pop	r27
 2ae:	af 91       	pop	r26
 2b0:	9f 91       	pop	r25
 2b2:	8f 91       	pop	r24
 2b4:	7f 91       	pop	r23
 2b6:	6f 91       	pop	r22
 2b8:	5f 91       	pop	r21
 2ba:	4f 91       	pop	r20
 2bc:	3f 91       	pop	r19
 2be:	2f 91       	pop	r18
 2c0:	0f 90       	pop	r0
 2c2:	0f be       	out	0x3f, r0	; 63
 2c4:	0f 90       	pop	r0
 2c6:	1f 90       	pop	r1
 2c8:	18 95       	reti

000002ca <__vector_18>:

ISR(USART_RX_vect)
{
 2ca:	1f 92       	push	r1
 2cc:	0f 92       	push	r0
 2ce:	0f b6       	in	r0, 0x3f	; 63
 2d0:	0f 92       	push	r0
 2d2:	11 24       	eor	r1, r1
 2d4:	2f 93       	push	r18
 2d6:	6f 93       	push	r22
 2d8:	7f 93       	push	r23
 2da:	8f 93       	push	r24
 2dc:	9f 93       	push	r25
	switch(ptr)
 2de:	20 91 08 01 	lds	r18, 0x0108
 2e2:	22 30       	cpi	r18, 0x02	; 2
 2e4:	41 f1       	breq	.+80     	; 0x336 <__vector_18+0x6c>
 2e6:	23 30       	cpi	r18, 0x03	; 3
 2e8:	28 f4       	brcc	.+10     	; 0x2f4 <__vector_18+0x2a>
 2ea:	22 23       	and	r18, r18
 2ec:	51 f0       	breq	.+20     	; 0x302 <__vector_18+0x38>
 2ee:	21 30       	cpi	r18, 0x01	; 1
 2f0:	a1 f5       	brne	.+104    	; 0x35a <__vector_18+0x90>
 2f2:	14 c0       	rjmp	.+40     	; 0x31c <__vector_18+0x52>
 2f4:	24 30       	cpi	r18, 0x04	; 4
 2f6:	49 f1       	breq	.+82     	; 0x34a <__vector_18+0x80>
 2f8:	24 30       	cpi	r18, 0x04	; 4
 2fa:	10 f1       	brcs	.+68     	; 0x340 <__vector_18+0x76>
 2fc:	25 30       	cpi	r18, 0x05	; 5
 2fe:	69 f5       	brne	.+90     	; 0x35a <__vector_18+0x90>
 300:	28 c0       	rjmp	.+80     	; 0x352 <__vector_18+0x88>
	{
		case 0:
		x16=UDR0*16;
 302:	80 91 c6 00 	lds	r24, 0x00C6
 306:	90 e0       	ldi	r25, 0x00	; 0
 308:	74 e0       	ldi	r23, 0x04	; 4
 30a:	88 0f       	add	r24, r24
 30c:	99 1f       	adc	r25, r25
 30e:	7a 95       	dec	r23
 310:	e1 f7       	brne	.-8      	; 0x30a <__vector_18+0x40>
 312:	90 93 05 01 	sts	0x0105, r25
 316:	80 93 04 01 	sts	0x0104, r24
 31a:	1f c0       	rjmp	.+62     	; 0x35a <__vector_18+0x90>
		break;
		case 1:	
		y16=UDR0*16;
 31c:	80 91 c6 00 	lds	r24, 0x00C6
 320:	90 e0       	ldi	r25, 0x00	; 0
 322:	64 e0       	ldi	r22, 0x04	; 4
 324:	88 0f       	add	r24, r24
 326:	99 1f       	adc	r25, r25
 328:	6a 95       	dec	r22
 32a:	e1 f7       	brne	.-8      	; 0x324 <__vector_18+0x5a>
 32c:	90 93 07 01 	sts	0x0107, r25
 330:	80 93 06 01 	sts	0x0106, r24
 334:	12 c0       	rjmp	.+36     	; 0x35a <__vector_18+0x90>
		break;
		case 2:
		t1=UDR0;
 336:	80 91 c6 00 	lds	r24, 0x00C6
 33a:	80 93 10 01 	sts	0x0110, r24
 33e:	0d c0       	rjmp	.+26     	; 0x35a <__vector_18+0x90>
		break;		
		case 3:
		t2=UDR0;
 340:	80 91 c6 00 	lds	r24, 0x00C6
 344:	80 93 0c 01 	sts	0x010C, r24
 348:	08 c0       	rjmp	.+16     	; 0x35a <__vector_18+0x90>
		break;	
		case 4:
		dT=UDR0;
 34a:	80 91 c6 00 	lds	r24, 0x00C6
 34e:	80 93 09 01 	sts	0x0109, r24
		case 5:
		T=UDR0;
 352:	80 91 c6 00 	lds	r24, 0x00C6
 356:	80 93 0e 01 	sts	0x010E, r24
		break;
	}
	dTt2=dT+t2;
 35a:	80 91 0c 01 	lds	r24, 0x010C
 35e:	90 91 09 01 	lds	r25, 0x0109
 362:	89 0f       	add	r24, r25
 364:	80 93 11 01 	sts	0x0111, r24
	//UDR0=x16/16;
	ptr++;
	ptr%=6;
 368:	82 2f       	mov	r24, r18
 36a:	8f 5f       	subi	r24, 0xFF	; 255
 36c:	66 e0       	ldi	r22, 0x06	; 6
 36e:	0e 94 c5 01 	call	0x38a	; 0x38a <__udivmodqi4>
 372:	90 93 08 01 	sts	0x0108, r25
 376:	9f 91       	pop	r25
 378:	8f 91       	pop	r24
 37a:	7f 91       	pop	r23
 37c:	6f 91       	pop	r22
 37e:	2f 91       	pop	r18
 380:	0f 90       	pop	r0
 382:	0f be       	out	0x3f, r0	; 63
 384:	0f 90       	pop	r0
 386:	1f 90       	pop	r1
 388:	18 95       	reti

0000038a <__udivmodqi4>:
 38a:	99 1b       	sub	r25, r25
 38c:	79 e0       	ldi	r23, 0x09	; 9
 38e:	04 c0       	rjmp	.+8      	; 0x398 <__udivmodqi4_ep>

00000390 <__udivmodqi4_loop>:
 390:	99 1f       	adc	r25, r25
 392:	96 17       	cp	r25, r22
 394:	08 f0       	brcs	.+2      	; 0x398 <__udivmodqi4_ep>
 396:	96 1b       	sub	r25, r22

00000398 <__udivmodqi4_ep>:
 398:	88 1f       	adc	r24, r24
 39a:	7a 95       	dec	r23
 39c:	c9 f7       	brne	.-14     	; 0x390 <__udivmodqi4_loop>
 39e:	80 95       	com	r24
 3a0:	08 95       	ret

000003a2 <_exit>:
 3a2:	f8 94       	cli

000003a4 <__stop_program>:
 3a4:	ff cf       	rjmp	.-2      	; 0x3a4 <__stop_program>
