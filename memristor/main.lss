
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000002a  00800100  00000c78  00000d0c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000c78  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000071  0080012a  0080012a  00000d36  2**0
                  ALLOC
  3 .debug_aranges 00000020  00000000  00000000  00000d36  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 000002ee  00000000  00000000  00000d56  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000008c3  00000000  00000000  00001044  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000238  00000000  00000000  00001907  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000b02  00000000  00000000  00001b3f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000110  00000000  00000000  00002644  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000002ce  00000000  00000000  00002754  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000111  00000000  00000000  00002a22  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 c3 01 	jmp	0x386	; 0x386 <__vector_9>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 31 05 	jmp	0xa62	; 0xa62 <__vector_18>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e8 e7       	ldi	r30, 0x78	; 120
  7c:	fc e0       	ldi	r31, 0x0C	; 12
  7e:	02 c0       	rjmp	.+4      	; 0x84 <.do_copy_data_start>

00000080 <.do_copy_data_loop>:
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0

00000084 <.do_copy_data_start>:
  84:	aa 32       	cpi	r26, 0x2A	; 42
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <.do_copy_data_loop>

0000008a <__do_clear_bss>:
  8a:	11 e0       	ldi	r17, 0x01	; 1
  8c:	aa e2       	ldi	r26, 0x2A	; 42
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	ab 39       	cpi	r26, 0x9B	; 155
  96:	b1 07       	cpc	r27, r17
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 6d 01 	call	0x2da	; 0x2da <main>
  9e:	0c 94 3a 06 	jmp	0xc74	; 0xc74 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <set_pin>:
};
					
struct Pin_t SYNC_PINS[] = {	{&PORTD, PD3}, {&PORTD, PD6}, {&PORTD, PD7}, {&PORTB, PB0}, 		//pd3 for multiplexing or pd5 for 64
						{&PORTB, PB1}, {&PORTC, PC2}, {&PORTC, PC3}, {&PORTC, PC4} };

void set_pin(struct Pin_t pin) {
  a6:	df 93       	push	r29
  a8:	cf 93       	push	r28
  aa:	00 d0       	rcall	.+0      	; 0xac <set_pin+0x6>
  ac:	0f 92       	push	r0
  ae:	cd b7       	in	r28, 0x3d	; 61
  b0:	de b7       	in	r29, 0x3e	; 62
  b2:	69 83       	std	Y+1, r22	; 0x01
  b4:	7a 83       	std	Y+2, r23	; 0x02
  b6:	8b 83       	std	Y+3, r24	; 0x03
  b8:	e9 81       	ldd	r30, Y+1	; 0x01
  ba:	fa 81       	ldd	r31, Y+2	; 0x02
	SET_PIN(*pin.reg_out, pin.pin);
  bc:	21 e0       	ldi	r18, 0x01	; 1
  be:	30 e0       	ldi	r19, 0x00	; 0
  c0:	02 c0       	rjmp	.+4      	; 0xc6 <set_pin+0x20>
  c2:	22 0f       	add	r18, r18
  c4:	33 1f       	adc	r19, r19
  c6:	8a 95       	dec	r24
  c8:	e2 f7       	brpl	.-8      	; 0xc2 <set_pin+0x1c>
  ca:	80 81       	ld	r24, Z
  cc:	82 2b       	or	r24, r18
  ce:	80 83       	st	Z, r24
}
  d0:	0f 90       	pop	r0
  d2:	0f 90       	pop	r0
  d4:	0f 90       	pop	r0
  d6:	cf 91       	pop	r28
  d8:	df 91       	pop	r29
  da:	08 95       	ret

000000dc <reset_pin>:

void reset_pin(struct Pin_t pin) {
  dc:	df 93       	push	r29
  de:	cf 93       	push	r28
  e0:	00 d0       	rcall	.+0      	; 0xe2 <reset_pin+0x6>
  e2:	0f 92       	push	r0
  e4:	cd b7       	in	r28, 0x3d	; 61
  e6:	de b7       	in	r29, 0x3e	; 62
  e8:	69 83       	std	Y+1, r22	; 0x01
  ea:	7a 83       	std	Y+2, r23	; 0x02
  ec:	8b 83       	std	Y+3, r24	; 0x03
  ee:	e9 81       	ldd	r30, Y+1	; 0x01
  f0:	fa 81       	ldd	r31, Y+2	; 0x02
	RESET_PIN(*pin.reg_out, pin.pin);
  f2:	21 e0       	ldi	r18, 0x01	; 1
  f4:	30 e0       	ldi	r19, 0x00	; 0
  f6:	02 c0       	rjmp	.+4      	; 0xfc <reset_pin+0x20>
  f8:	22 0f       	add	r18, r18
  fa:	33 1f       	adc	r19, r19
  fc:	8a 95       	dec	r24
  fe:	e2 f7       	brpl	.-8      	; 0xf8 <reset_pin+0x1c>
 100:	20 95       	com	r18
 102:	80 81       	ld	r24, Z
 104:	82 23       	and	r24, r18
 106:	80 83       	st	Z, r24
}
 108:	0f 90       	pop	r0
 10a:	0f 90       	pop	r0
 10c:	0f 90       	pop	r0
 10e:	cf 91       	pop	r28
 110:	df 91       	pop	r29
 112:	08 95       	ret

00000114 <gatherMult>:
						
void gatherMult()
{
	RESET_PIN(PORTD, 6);
 114:	5e 98       	cbi	0x0b, 6	; 11
	RESET_PIN(PORTD, 7);				
 116:	5f 98       	cbi	0x0b, 7	; 11
	RESET_PIN(PORTD, 5);
 118:	5d 98       	cbi	0x0b, 5	; 11
	RESET_PIN(PORTC, 4);
 11a:	44 98       	cbi	0x08, 4	; 8
	
	
	SET_PIN(PORTC, 1);				
 11c:	41 9a       	sbi	0x08, 1	; 8
	SET_PIN(PORTB, 2);
 11e:	2a 9a       	sbi	0x05, 2	; 5
	SET_PIN(PORTB, 1);
 120:	29 9a       	sbi	0x05, 1	; 5
	SET_PIN(PORTB, 0);
 122:	28 9a       	sbi	0x05, 0	; 5
}
 124:	08 95       	ret

00000126 <separMult>:
void separMult()
{
	//RESET_PIN(PORTB, 1);
	RESET_PIN(PORTB, 2);
 126:	2a 98       	cbi	0x05, 2	; 5
	RESET_PIN(PORTC, 1);
 128:	41 98       	cbi	0x08, 1	; 8
	
	SET_PIN(PORTC, 4);						
 12a:	44 9a       	sbi	0x08, 4	; 8
	SET_PIN(PORTD, 6);
 12c:	5e 9a       	sbi	0x0b, 6	; 11
	SET_PIN(PORTD, 7);
 12e:	5f 9a       	sbi	0x0b, 7	; 11
	SET_PIN(PORTB, 0);
 130:	28 9a       	sbi	0x05, 0	; 5
	SET_PIN(PORTD, 5);
 132:	5d 9a       	sbi	0x0b, 5	; 11
}
 134:	08 95       	ret

00000136 <set_reverser>:
		else
			PORTB&=~(1<<4);
		break;

	}
}
 136:	08 95       	ret

00000138 <ADC_Init>:
}

//функция инициализаци АЦП
//АЦП используется для регистрации тока, проходящего через мемристор
void ADC_Init(){
 ADCSRA |= (1 << ADEN) // Включаем АЦП
 138:	ea e7       	ldi	r30, 0x7A	; 122
 13a:	f0 e0       	ldi	r31, 0x00	; 0
 13c:	80 81       	ld	r24, Z
 13e:	83 68       	ori	r24, 0x83	; 131
 140:	80 83       	st	Z, r24
 //ADCSRA&=~(1 << ADPS1)|(1 << ADPS0)|(1 << ADPS1);
 |(1 << ADPS1)|(1 << ADPS0)|(1 << ADPS1);    // устанавливаем предделитель преобразователя на 8
 ADMUX |= (0 << REFS1)|(1 << REFS0) //выставляем опорное напряжение, как внешний ИОН
 142:	ec e7       	ldi	r30, 0x7C	; 124
 144:	f0 e0       	ldi	r31, 0x00	; 0
 146:	80 81       	ld	r24, Z
 148:	80 64       	ori	r24, 0x40	; 64
 14a:	80 83       	st	Z, r24
 |(0 << MUX0)|(0 << MUX1)|(0 << MUX2)|(0 << MUX3); // снимать сигнал будем с  входа PC0 
}
 14c:	08 95       	ret

0000014e <timer_init>:

//функция инициализации таймера
// Таймер используется для формирования временной последовательности значений, формируемых с ЦАПа
void timer_init()
{
    TCCR2A = 0;        
 14e:	10 92 b0 00 	sts	0x00B0, r1
    TCCR2B = 0;
 152:	e1 eb       	ldi	r30, 0xB1	; 177
 154:	f0 e0       	ldi	r31, 0x00	; 0
 156:	10 82       	st	Z, r1
    
    TCCR2B |= (1<<CS21) ;    
 158:	80 81       	ld	r24, Z
 15a:	82 60       	ori	r24, 0x02	; 2
 15c:	80 83       	st	Z, r24
    TIMSK2 = (1 << TOIE2);
 15e:	81 e0       	ldi	r24, 0x01	; 1
 160:	80 93 70 00 	sts	0x0070, r24
}
 164:	08 95       	ret

00000166 <uart_init>:

//функция инициализации UART-интерфейса
void uart_init(unsigned int ubrr)
{	
	UBRR0H = (unsigned char)(ubrr>>8);
 166:	90 93 c5 00 	sts	0x00C5, r25
	UBRR0L = (unsigned char)ubrr;
 16a:	80 93 c4 00 	sts	0x00C4, r24
	UCSR0B = (1<<RXCIE0)|(1<<RXEN0)|(1<<TXEN0);
 16e:	88 e9       	ldi	r24, 0x98	; 152
 170:	80 93 c1 00 	sts	0x00C1, r24
	UCSR0C = (1<<USBS0)|(3<<UCSZ00);
 174:	8e e0       	ldi	r24, 0x0E	; 14
 176:	80 93 c2 00 	sts	0x00C2, r24
}
 17a:	08 95       	ret

0000017c <SPI_MasterInit>:

//функция инициализации SPI
void SPI_MasterInit()
{
	DDR_SPI |= (1<<DD_MOSI)|(1<<DD_SCK)|(1<<SPI_SS);
 17c:	84 b1       	in	r24, 0x04	; 4
 17e:	8c 62       	ori	r24, 0x2C	; 44
 180:	84 b9       	out	0x04, r24	; 4
	SPCR = (1<<SPE)|(0<<DORD)|(1<<MSTR)|(1<<CPOL)|(0<<CPHA);//|(1<<SPR1)|(0<<SPR0);
 182:	88 e5       	ldi	r24, 0x58	; 88
 184:	8c bd       	out	0x2c, r24	; 44
}
 186:	08 95       	ret

00000188 <SPI_WriteByte>:



void SPI_WriteByte(uint8_t data)
{
   SPDR = data;
 188:	8e bd       	out	0x2e, r24	; 46
  while(!(SPSR & (1<<SPIF)));
 18a:	0d b4       	in	r0, 0x2d	; 45
 18c:	07 fe       	sbrs	r0, 7
 18e:	fd cf       	rjmp	.-6      	; 0x18a <SPI_WriteByte+0x2>
}
 190:	08 95       	ret

00000192 <prepareResetDAC>:




void prepareResetDAC(int8_t chan)//_____________bipolar!!! and <<4 larger
{
 192:	ef 92       	push	r14
 194:	ff 92       	push	r15
 196:	0f 93       	push	r16
 198:	1f 93       	push	r17
	reset_pin(SYNC_PINS[chan>>3]);
 19a:	28 2f       	mov	r18, r24
 19c:	25 95       	asr	r18
 19e:	25 95       	asr	r18
 1a0:	25 95       	asr	r18
 1a2:	33 27       	eor	r19, r19
 1a4:	27 fd       	sbrc	r18, 7
 1a6:	30 95       	com	r19
 1a8:	89 01       	movw	r16, r18
 1aa:	00 0f       	add	r16, r16
 1ac:	11 1f       	adc	r17, r17
 1ae:	02 0f       	add	r16, r18
 1b0:	13 1f       	adc	r17, r19
 1b2:	08 5f       	subi	r16, 0xF8	; 248
 1b4:	1e 4f       	sbci	r17, 0xFE	; 254
 1b6:	d8 01       	movw	r26, r16
 1b8:	ed 91       	ld	r30, X+
 1ba:	fc 91       	ld	r31, X
 1bc:	11 97       	sbiw	r26, 0x01	; 1
void set_pin(struct Pin_t pin) {
	SET_PIN(*pin.reg_out, pin.pin);
}

void reset_pin(struct Pin_t pin) {
	RESET_PIN(*pin.reg_out, pin.pin);
 1be:	91 e0       	ldi	r25, 0x01	; 1
 1c0:	e9 2e       	mov	r14, r25
 1c2:	f1 2c       	mov	r15, r1
 1c4:	97 01       	movw	r18, r14
 1c6:	12 96       	adiw	r26, 0x02	; 2
 1c8:	0c 90       	ld	r0, X
 1ca:	02 c0       	rjmp	.+4      	; 0x1d0 <prepareResetDAC+0x3e>
 1cc:	22 0f       	add	r18, r18
 1ce:	33 1f       	adc	r19, r19
 1d0:	0a 94       	dec	r0
 1d2:	e2 f7       	brpl	.-8      	; 0x1cc <prepareResetDAC+0x3a>
 1d4:	20 95       	com	r18
 1d6:	90 81       	ld	r25, Z
 1d8:	92 23       	and	r25, r18
 1da:	90 83       	st	Z, r25
	SPI_WriteByte(0b00001000|chan_addrs[chan%8]); // magic numbers, fuck
 1dc:	68 e0       	ldi	r22, 0x08	; 8
 1de:	0e 94 19 06 	call	0xc32	; 0xc32 <__divmodqi4>
 1e2:	e9 2f       	mov	r30, r25
 1e4:	ff 27       	eor	r31, r31
 1e6:	e7 fd       	sbrc	r30, 7
 1e8:	f0 95       	com	r31
 1ea:	e0 50       	subi	r30, 0x00	; 0
 1ec:	ff 4f       	sbci	r31, 0xFF	; 255
 1ee:	80 81       	ld	r24, Z
 1f0:	88 60       	ori	r24, 0x08	; 8
 1f2:	90 e0       	ldi	r25, 0x00	; 0
 1f4:	0e 94 c4 00 	call	0x188	; 0x188 <SPI_WriteByte>
	SPI_WriteByte(0);		
 1f8:	80 e0       	ldi	r24, 0x00	; 0
 1fa:	90 e0       	ldi	r25, 0x00	; 0
 1fc:	0e 94 c4 00 	call	0x188	; 0x188 <SPI_WriteByte>
	set_pin(SYNC_PINS[chan>>3]);
 200:	d8 01       	movw	r26, r16
 202:	ed 91       	ld	r30, X+
 204:	fc 91       	ld	r31, X
 206:	11 97       	sbiw	r26, 0x01	; 1
					
struct Pin_t SYNC_PINS[] = {	{&PORTD, PD3}, {&PORTD, PD6}, {&PORTD, PD7}, {&PORTB, PB0}, 		//pd3 for multiplexing or pd5 for 64
						{&PORTB, PB1}, {&PORTC, PC2}, {&PORTC, PC3}, {&PORTC, PC4} };

void set_pin(struct Pin_t pin) {
	SET_PIN(*pin.reg_out, pin.pin);
 208:	12 96       	adiw	r26, 0x02	; 2
 20a:	0c 90       	ld	r0, X
 20c:	02 c0       	rjmp	.+4      	; 0x212 <prepareResetDAC+0x80>
 20e:	ee 0c       	add	r14, r14
 210:	ff 1c       	adc	r15, r15
 212:	0a 94       	dec	r0
 214:	e2 f7       	brpl	.-8      	; 0x20e <prepareResetDAC+0x7c>
 216:	80 81       	ld	r24, Z
 218:	8e 29       	or	r24, r14
 21a:	80 83       	st	Z, r24
}
 21c:	1f 91       	pop	r17
 21e:	0f 91       	pop	r16
 220:	ff 90       	pop	r15
 222:	ef 90       	pop	r14
 224:	08 95       	ret

00000226 <prepareSetDAC>:

//функция управления ЦАПом 
// при этом, управление регистром LDAC должно использоваться 
//вне функции в перспепктиве создания многоканальной схемы
void prepareSetDAC(int16_t x,uint8_t chan)//_____________bipolar!!! and <<4 larger
{
 226:	cf 92       	push	r12
 228:	df 92       	push	r13
 22a:	ef 92       	push	r14
 22c:	ff 92       	push	r15
 22e:	0f 93       	push	r16
 230:	1f 93       	push	r17
 232:	cf 93       	push	r28
 234:	df 93       	push	r29
 236:	e6 2f       	mov	r30, r22
	static uint8_t send8;
	
	x=-x;
 238:	ee 24       	eor	r14, r14
 23a:	ff 24       	eor	r15, r15
 23c:	e8 1a       	sub	r14, r24
 23e:	f9 0a       	sbc	r15, r25
	x+=2048;
 240:	80 e0       	ldi	r24, 0x00	; 0
 242:	98 e0       	ldi	r25, 0x08	; 8
 244:	e8 0e       	add	r14, r24
 246:	f9 1e       	adc	r15, r25
	//*(REGS_OUT[chan>>3])&=~(1<<SYNC_PINS[chan>>3]);
	reset_pin(SYNC_PINS[chan>>3]);
 248:	86 2f       	mov	r24, r22
 24a:	86 95       	lsr	r24
 24c:	86 95       	lsr	r24
 24e:	86 95       	lsr	r24
 250:	90 e0       	ldi	r25, 0x00	; 0
 252:	8c 01       	movw	r16, r24
 254:	00 0f       	add	r16, r16
 256:	11 1f       	adc	r17, r17
 258:	08 0f       	add	r16, r24
 25a:	19 1f       	adc	r17, r25
 25c:	08 5f       	subi	r16, 0xF8	; 248
 25e:	1e 4f       	sbci	r17, 0xFE	; 254
 260:	e8 01       	movw	r28, r16
 262:	a8 81       	ld	r26, Y
 264:	b9 81       	ldd	r27, Y+1	; 0x01
}

void reset_pin(struct Pin_t pin) {
	RESET_PIN(*pin.reg_out, pin.pin);
 266:	61 e0       	ldi	r22, 0x01	; 1
 268:	c6 2e       	mov	r12, r22
 26a:	d1 2c       	mov	r13, r1
 26c:	c6 01       	movw	r24, r12
 26e:	0a 80       	ldd	r0, Y+2	; 0x02
 270:	02 c0       	rjmp	.+4      	; 0x276 <prepareSetDAC+0x50>
 272:	88 0f       	add	r24, r24
 274:	99 1f       	adc	r25, r25
 276:	0a 94       	dec	r0
 278:	e2 f7       	brpl	.-8      	; 0x272 <prepareSetDAC+0x4c>
 27a:	80 95       	com	r24
 27c:	2c 91       	ld	r18, X
 27e:	28 23       	and	r18, r24
 280:	2c 93       	st	X, r18
	send8 = (x >> 8);
	send8 &= 0b00001111;
	send8|= (chan_addrs[chan%8]);
	SPI_WriteByte(send8);
 282:	8f 2d       	mov	r24, r15
 284:	99 27       	eor	r25, r25
 286:	87 fd       	sbrc	r24, 7
 288:	9a 95       	dec	r25
 28a:	8f 70       	andi	r24, 0x0F	; 15
 28c:	f0 e0       	ldi	r31, 0x00	; 0
 28e:	e7 70       	andi	r30, 0x07	; 7
 290:	f0 70       	andi	r31, 0x00	; 0
 292:	e0 50       	subi	r30, 0x00	; 0
 294:	ff 4f       	sbci	r31, 0xFF	; 255
 296:	20 81       	ld	r18, Z
 298:	82 2b       	or	r24, r18
 29a:	90 e0       	ldi	r25, 0x00	; 0
 29c:	0e 94 c4 00 	call	0x188	; 0x188 <SPI_WriteByte>
	send8=x;
 2a0:	e0 92 85 01 	sts	0x0185, r14
	SPI_WriteByte(send8);		
 2a4:	8e 2d       	mov	r24, r14
 2a6:	90 e0       	ldi	r25, 0x00	; 0
 2a8:	0e 94 c4 00 	call	0x188	; 0x188 <SPI_WriteByte>
	set_pin(SYNC_PINS[chan>>3]);
 2ac:	e8 81       	ld	r30, Y
 2ae:	f9 81       	ldd	r31, Y+1	; 0x01
					
struct Pin_t SYNC_PINS[] = {	{&PORTD, PD3}, {&PORTD, PD6}, {&PORTD, PD7}, {&PORTB, PB0}, 		//pd3 for multiplexing or pd5 for 64
						{&PORTB, PB1}, {&PORTC, PC2}, {&PORTC, PC3}, {&PORTC, PC4} };

void set_pin(struct Pin_t pin) {
	SET_PIN(*pin.reg_out, pin.pin);
 2b0:	0a 80       	ldd	r0, Y+2	; 0x02
 2b2:	02 c0       	rjmp	.+4      	; 0x2b8 <prepareSetDAC+0x92>
 2b4:	cc 0c       	add	r12, r12
 2b6:	dd 1c       	adc	r13, r13
 2b8:	0a 94       	dec	r0
 2ba:	e2 f7       	brpl	.-8      	; 0x2b4 <prepareSetDAC+0x8e>
 2bc:	80 81       	ld	r24, Z
 2be:	8c 29       	or	r24, r12
 2c0:	80 83       	st	Z, r24
}
 2c2:	df 91       	pop	r29
 2c4:	cf 91       	pop	r28
 2c6:	1f 91       	pop	r17
 2c8:	0f 91       	pop	r16
 2ca:	ff 90       	pop	r15
 2cc:	ef 90       	pop	r14
 2ce:	df 90       	pop	r13
 2d0:	cf 90       	pop	r12
 2d2:	08 95       	ret

000002d4 <setDAC>:
  while(!(SPSR & (1<<SPIF)));
}


void setDAC(){
	PORTD&=~(1<<LDAC);
 2d4:	5a 98       	cbi	0x0b, 2	; 11
	PORTD|=(1<<LDAC);	
 2d6:	5a 9a       	sbi	0x0b, 2	; 11
}
 2d8:	08 95       	ret

000002da <main>:


void main(void)
{
 2da:	1f 93       	push	r17
	BIG_STAT_N = STAT_N*STAT_CYCLE;
 2dc:	80 91 21 01 	lds	r24, 0x0121
 2e0:	90 91 20 01 	lds	r25, 0x0120
 2e4:	89 9f       	mul	r24, r25
 2e6:	80 2d       	mov	r24, r0
 2e8:	11 24       	eor	r1, r1
 2ea:	80 93 93 01 	sts	0x0193, r24
 2ee:	e0 e0       	ldi	r30, 0x00	; 0
 2f0:	f1 e0       	ldi	r31, 0x01	; 1
	
	for (uint8_t i=0; i< 8;i++)
		chan_addrs[i]=chan_addrs[i]<<4;
 2f2:	80 81       	ld	r24, Z
 2f4:	82 95       	swap	r24
 2f6:	80 7f       	andi	r24, 0xF0	; 240
 2f8:	81 93       	st	Z+, r24

void main(void)
{
	BIG_STAT_N = STAT_N*STAT_CYCLE;
	
	for (uint8_t i=0; i< 8;i++)
 2fa:	81 e0       	ldi	r24, 0x01	; 1
 2fc:	e8 30       	cpi	r30, 0x08	; 8
 2fe:	f8 07       	cpc	r31, r24
 300:	c1 f7       	brne	.-16     	; 0x2f2 <main+0x18>
		chan_addrs[i]=chan_addrs[i]<<4;
	
	DDRC= 0b00011110;
 302:	8e e1       	ldi	r24, 0x1E	; 30
 304:	87 b9       	out	0x07, r24	; 7
	DDRD =0b11111111;	
 306:	8f ef       	ldi	r24, 0xFF	; 255
 308:	8a b9       	out	0x0a, r24	; 10
	DDRB= 0b00011111;
 30a:	8f e1       	ldi	r24, 0x1F	; 31
 30c:	84 b9       	out	0x04, r24	; 4
	sei();
 30e:	78 94       	sei
}

//функция инициализации SPI
void SPI_MasterInit()
{
	DDR_SPI |= (1<<DD_MOSI)|(1<<DD_SCK)|(1<<SPI_SS);
 310:	84 b1       	in	r24, 0x04	; 4
 312:	8c 62       	ori	r24, 0x2C	; 44
 314:	84 b9       	out	0x04, r24	; 4
	SPCR = (1<<SPE)|(0<<DORD)|(1<<MSTR)|(1<<CPOL)|(0<<CPHA);//|(1<<SPR1)|(0<<SPR0);
 316:	88 e5       	ldi	r24, 0x58	; 88
 318:	8c bd       	out	0x2c, r24	; 44

//функция инициализации таймера
// Таймер используется для формирования временной последовательности значений, формируемых с ЦАПа
void timer_init()
{
    TCCR2A = 0;        
 31a:	10 92 b0 00 	sts	0x00B0, r1
    TCCR2B = 0;
 31e:	10 92 b1 00 	sts	0x00B1, r1
    
    TCCR2B |= (1<<CS21) ;    
 322:	80 91 b1 00 	lds	r24, 0x00B1
 326:	82 60       	ori	r24, 0x02	; 2
 328:	80 93 b1 00 	sts	0x00B1, r24
    TIMSK2 = (1 << TOIE2);
 32c:	81 e0       	ldi	r24, 0x01	; 1
 32e:	80 93 70 00 	sts	0x0070, r24
}

//функция инициализации UART-интерфейса
void uart_init(unsigned int ubrr)
{	
	UBRR0H = (unsigned char)(ubrr>>8);
 332:	10 92 c5 00 	sts	0x00C5, r1
	UBRR0L = (unsigned char)ubrr;
 336:	83 e3       	ldi	r24, 0x33	; 51
 338:	80 93 c4 00 	sts	0x00C4, r24
	UCSR0B = (1<<RXCIE0)|(1<<RXEN0)|(1<<TXEN0);
 33c:	88 e9       	ldi	r24, 0x98	; 152
 33e:	80 93 c1 00 	sts	0x00C1, r24
	UCSR0C = (1<<USBS0)|(3<<UCSZ00);
 342:	8e e0       	ldi	r24, 0x0E	; 14
 344:	80 93 c2 00 	sts	0x00C2, r24
}

//функция инициализаци АЦП
//АЦП используется для регистрации тока, проходящего через мемристор
void ADC_Init(){
 ADCSRA |= (1 << ADEN) // Включаем АЦП
 348:	80 91 7a 00 	lds	r24, 0x007A
 34c:	83 68       	ori	r24, 0x83	; 131
 34e:	80 93 7a 00 	sts	0x007A, r24
 //ADCSRA&=~(1 << ADPS1)|(1 << ADPS0)|(1 << ADPS1);
 |(1 << ADPS1)|(1 << ADPS0)|(1 << ADPS1);    // устанавливаем предделитель преобразователя на 8
 ADMUX |= (0 << REFS1)|(1 << REFS0) //выставляем опорное напряжение, как внешний ИОН
 352:	80 91 7c 00 	lds	r24, 0x007C
 356:	80 64       	ori	r24, 0x40	; 64
 358:	80 93 7c 00 	sts	0x007C, r24
	timer_init();
	
	uart_init(BAUDRATE);
	ADC_Init();
	
	ADCSRA |= (1 << ADSC); 
 35c:	80 91 7a 00 	lds	r24, 0x007A
 360:	80 64       	ori	r24, 0x40	; 64
 362:	80 93 7a 00 	sts	0x007A, r24
	ADCL;
 366:	80 91 78 00 	lds	r24, 0x0078
	ADCL;
 36a:	80 91 78 00 	lds	r24, 0x0078
 36e:	10 e0       	ldi	r17, 0x00	; 0
		//set_reverser(i,1);
	
	//set_reverser(0,0);
	for (int i=0;i<CHAN_N;i++)
	{
		prepareSetDAC(0,i);
 370:	80 e0       	ldi	r24, 0x00	; 0
 372:	90 e0       	ldi	r25, 0x00	; 0
 374:	61 2f       	mov	r22, r17
 376:	0e 94 13 01 	call	0x226	; 0x226 <prepareSetDAC>
 37a:	1f 5f       	subi	r17, 0xFF	; 255

	//for(int i=0;i<8;i++)
		//set_reverser(i,1);
	
	//set_reverser(0,0);
	for (int i=0;i<CHAN_N;i++)
 37c:	10 34       	cpi	r17, 0x40	; 64
 37e:	c1 f7       	brne	.-16     	; 0x370 <main+0x96>
  while(!(SPSR & (1<<SPIF)));
}


void setDAC(){
	PORTD&=~(1<<LDAC);
 380:	5a 98       	cbi	0x0b, 2	; 11
	PORTD|=(1<<LDAC);	
 382:	5a 9a       	sbi	0x0b, 2	; 11
 384:	ff cf       	rjmp	.-2      	; 0x384 <main+0xaa>

00000386 <__vector_9>:
//главный цикл работы контроллера
//Здесь устанавливаются значения ЦАП и передаются данные на компьютер
//через UART-интерфейс
//данный участок кода повторяется при переполнении TIMER2
ISR(TIMER2_OVF_vect)
{
 386:	1f 92       	push	r1
 388:	0f 92       	push	r0
 38a:	0f b6       	in	r0, 0x3f	; 63
 38c:	0f 92       	push	r0
 38e:	11 24       	eor	r1, r1
 390:	2f 93       	push	r18
 392:	3f 93       	push	r19
 394:	4f 93       	push	r20
 396:	5f 93       	push	r21
 398:	6f 93       	push	r22
 39a:	7f 93       	push	r23
 39c:	8f 93       	push	r24
 39e:	9f 93       	push	r25
 3a0:	af 93       	push	r26
 3a2:	bf 93       	push	r27
 3a4:	ef 93       	push	r30
 3a6:	ff 93       	push	r31
	if(ctr>time_step)
 3a8:	20 91 8a 01 	lds	r18, 0x018A
 3ac:	30 91 8b 01 	lds	r19, 0x018B
 3b0:	80 91 26 01 	lds	r24, 0x0126
 3b4:	90 91 27 01 	lds	r25, 0x0127
 3b8:	82 17       	cp	r24, r18
 3ba:	93 07       	cpc	r25, r19
 3bc:	0c f0       	brlt	.+2      	; 0x3c0 <__vector_9+0x3a>
 3be:	37 c3       	rjmp	.+1646   	; 0xa2e <__stack+0x12f>
	{
		if(MD==CUSTOM)
 3c0:	60 91 2a 01 	lds	r22, 0x012A
 3c4:	66 23       	and	r22, r22
 3c6:	09 f0       	breq	.+2      	; 0x3ca <__vector_9+0x44>
 3c8:	40 c0       	rjmp	.+128    	; 0x44a <__vector_9+0xc4>
		{
			if(event_cnt==(1))
 3ca:	20 91 86 01 	lds	r18, 0x0186
 3ce:	30 91 87 01 	lds	r19, 0x0187
 3d2:	21 30       	cpi	r18, 0x01	; 1
 3d4:	31 05       	cpc	r19, r1
 3d6:	59 f4       	brne	.+22     	; 0x3ee <__vector_9+0x68>
			{	
			ADCL_=ADCL;
 3d8:	90 91 78 00 	lds	r25, 0x0078
 3dc:	90 93 8e 01 	sts	0x018E, r25
			ADCH_=ADCH;
 3e0:	80 91 79 00 	lds	r24, 0x0079
 3e4:	80 93 92 01 	sts	0x0192, r24
			UDR0=ADCL_;			
 3e8:	90 93 c6 00 	sts	0x00C6, r25
 3ec:	0d c0       	rjmp	.+26     	; 0x408 <__vector_9+0x82>
			}
			
			if(event_cnt==(2))
 3ee:	22 30       	cpi	r18, 0x02	; 2
 3f0:	31 05       	cpc	r19, r1
 3f2:	29 f4       	brne	.+10     	; 0x3fe <__vector_9+0x78>
			{	
			UDR0=ADCH_;				
 3f4:	80 91 92 01 	lds	r24, 0x0192
 3f8:	80 93 c6 00 	sts	0x00C6, r24
 3fc:	05 c0       	rjmp	.+10     	; 0x408 <__vector_9+0x82>
			}
			
			
			
			if(event_cnt==0)
 3fe:	21 15       	cp	r18, r1
 400:	31 05       	cpc	r19, r1
 402:	11 f4       	brne	.+4      	; 0x408 <__vector_9+0x82>
			{
			UDR0=255;
 404:	8f ef       	ldi	r24, 0xFF	; 255
 406:	ad c2       	rjmp	.+1370   	; 0x962 <__stack+0x63>
			prepareSetDAC(0,chan);
			//prepareSetDAC(x16,2);
			setDAC();
			}
			
			else if(event_cnt==t1)
 408:	80 91 22 01 	lds	r24, 0x0122
 40c:	90 e0       	ldi	r25, 0x00	; 0
 40e:	28 17       	cp	r18, r24
 410:	39 07       	cpc	r19, r25
 412:	09 f4       	brne	.+2      	; 0x416 <__vector_9+0x90>
 414:	d8 c2       	rjmp	.+1456   	; 0x9c6 <__stack+0xc7>
			{
				
			//prepareSetDAC(0,chan);
			//setDAC();
			}
			else if(event_cnt==dT)
 416:	80 91 89 01 	lds	r24, 0x0189
 41a:	90 e0       	ldi	r25, 0x00	; 0
 41c:	28 17       	cp	r18, r24
 41e:	39 07       	cpc	r19, r25
 420:	09 f4       	brne	.+2      	; 0x424 <__vector_9+0x9e>
 422:	d1 c2       	rjmp	.+1442   	; 0x9c6 <__stack+0xc7>
			{		
			//prepareSetDAC(0,chan);
			//setDAC();
		
			}
			else if(event_cnt==(dT+1))
 424:	01 96       	adiw	r24, 0x01	; 1
 426:	28 17       	cp	r18, r24
 428:	39 07       	cpc	r19, r25
 42a:	09 f4       	brne	.+2      	; 0x42e <__vector_9+0xa8>
 42c:	aa c2       	rjmp	.+1364   	; 0x982 <__stack+0x83>
				ADCSRA |= (1 << ADSC); 

			else if(event_cnt==dTt2)
 42e:	80 91 24 01 	lds	r24, 0x0124
 432:	90 e0       	ldi	r25, 0x00	; 0
 434:	28 17       	cp	r18, r24
 436:	39 07       	cpc	r19, r25
 438:	09 f0       	breq	.+2      	; 0x43c <__vector_9+0xb6>
 43a:	c5 c2       	rjmp	.+1418   	; 0x9c6 <__stack+0xc7>
			{
			if ( ( UCSR0A & (1<<UDRE0)) )			
 43c:	80 91 c0 00 	lds	r24, 0x00C0
 440:	85 ff       	sbrs	r24, 5
 442:	c1 c2       	rjmp	.+1410   	; 0x9c6 <__stack+0xc7>
				UDR0=_adc;			
 444:	80 91 94 01 	lds	r24, 0x0194
 448:	bc c2       	rjmp	.+1400   	; 0x9c2 <__stack+0xc3>
			//setDAC();

			}		

		}
		else if(MD == MODE_SET) {
 44a:	67 30       	cpi	r22, 0x07	; 7
 44c:	09 f4       	brne	.+2      	; 0x450 <__vector_9+0xca>
 44e:	bb c2       	rjmp	.+1398   	; 0x9c6 <__stack+0xc7>
			
		}
		else if(MD==VAC)
 450:	61 30       	cpi	r22, 0x01	; 1
 452:	09 f0       	breq	.+2      	; 0x456 <__vector_9+0xd0>
 454:	7d c0       	rjmp	.+250    	; 0x550 <__vector_9+0x1ca>
		{			
			//static int i=0;
			//i++;						
			
			switch(UDP_cnt)
 456:	80 91 9a 01 	lds	r24, 0x019A
 45a:	82 30       	cpi	r24, 0x02	; 2
 45c:	41 f1       	breq	.+80     	; 0x4ae <__vector_9+0x128>
 45e:	83 30       	cpi	r24, 0x03	; 3
 460:	30 f4       	brcc	.+12     	; 0x46e <__vector_9+0xe8>
 462:	88 23       	and	r24, r24
 464:	51 f0       	breq	.+20     	; 0x47a <__vector_9+0xf4>
 466:	81 30       	cpi	r24, 0x01	; 1
 468:	09 f0       	breq	.+2      	; 0x46c <__vector_9+0xe6>
 46a:	69 c0       	rjmp	.+210    	; 0x53e <__vector_9+0x1b8>
 46c:	0d c0       	rjmp	.+26     	; 0x488 <__vector_9+0x102>
 46e:	83 30       	cpi	r24, 0x03	; 3
 470:	19 f1       	breq	.+70     	; 0x4b8 <__vector_9+0x132>
 472:	84 30       	cpi	r24, 0x04	; 4
 474:	09 f0       	breq	.+2      	; 0x478 <__vector_9+0xf2>
 476:	63 c0       	rjmp	.+198    	; 0x53e <__vector_9+0x1b8>
 478:	60 c0       	rjmp	.+192    	; 0x53a <__vector_9+0x1b4>
			{
				case 0:					
				 ADCSRA |= (1 << ADSC); 
 47a:	80 91 7a 00 	lds	r24, 0x007A
 47e:	80 64       	ori	r24, 0x40	; 64
 480:	80 93 7a 00 	sts	0x007A, r24
				UDR0=255;
 484:	8f ef       	ldi	r24, 0xFF	; 255
 486:	15 c0       	rjmp	.+42     	; 0x4b2 <__vector_9+0x12c>
				break;
				
				
				
				case 1:	
				ADCL__=	ADCL_;
 488:	80 91 8e 01 	lds	r24, 0x018E
 48c:	80 93 8c 01 	sts	0x018C, r24
				ADCH__ = ADCH_;
 490:	80 91 92 01 	lds	r24, 0x0192
 494:	80 93 88 01 	sts	0x0188, r24
				ADCL_=ADCL;
 498:	90 91 78 00 	lds	r25, 0x0078
 49c:	90 93 8e 01 	sts	0x018E, r25
				ADCH_=ADCH;
 4a0:	80 91 79 00 	lds	r24, 0x0079
 4a4:	80 93 92 01 	sts	0x0192, r24
				
				UDR0=ADCL_;
 4a8:	90 93 c6 00 	sts	0x00C6, r25
 4ac:	48 c0       	rjmp	.+144    	; 0x53e <__vector_9+0x1b8>
				break;
				
				case 2:
				UDR0=ADCH_;				
 4ae:	80 91 92 01 	lds	r24, 0x0192
 4b2:	80 93 c6 00 	sts	0x00C6, r24
 4b6:	43 c0       	rjmp	.+134    	; 0x53e <__vector_9+0x1b8>
				break;				
				
				case 3:								
					
					voltage16_h=voltage16;
 4b8:	20 91 2b 01 	lds	r18, 0x012B
 4bc:	30 91 2c 01 	lds	r19, 0x012C
 4c0:	30 93 2e 01 	sts	0x012E, r19
 4c4:	20 93 2d 01 	sts	0x012D, r18
					
					if(pos_phase)
 4c8:	80 91 25 01 	lds	r24, 0x0125
 4cc:	88 23       	and	r24, r24
 4ce:	81 f0       	breq	.+32     	; 0x4f0 <__vector_9+0x16a>
					{
								//PORTC=0b00000010;
			//PORTB=0b00011111;
			//PORTD=0b11101100;
						voltage16+=32;
 4d0:	20 5e       	subi	r18, 0xE0	; 224
 4d2:	3f 4f       	sbci	r19, 0xFF	; 255
 4d4:	30 93 2c 01 	sts	0x012C, r19
 4d8:	20 93 2b 01 	sts	0x012B, r18
						if(voltage16>(ref16-1))
 4dc:	80 91 35 01 	lds	r24, 0x0135
 4e0:	90 91 36 01 	lds	r25, 0x0136
 4e4:	28 17       	cp	r18, r24
 4e6:	39 07       	cpc	r19, r25
 4e8:	b4 f0       	brlt	.+44     	; 0x516 <__vector_9+0x190>
						{
						pos_phase=0;				
 4ea:	10 92 25 01 	sts	0x0125, r1
 4ee:	13 c0       	rjmp	.+38     	; 0x516 <__vector_9+0x190>
					else
					{
						//PORTB=0;
			//PORTC=0;
			//PORTD=0;
						voltage16-=32;
 4f0:	c9 01       	movw	r24, r18
 4f2:	80 97       	sbiw	r24, 0x20	; 32
 4f4:	90 93 2c 01 	sts	0x012C, r25
 4f8:	80 93 2b 01 	sts	0x012B, r24
						if(voltage16<(-x16+1))
 4fc:	21 e0       	ldi	r18, 0x01	; 1
 4fe:	30 e0       	ldi	r19, 0x00	; 0
 500:	40 91 33 01 	lds	r20, 0x0133
 504:	50 91 34 01 	lds	r21, 0x0134
 508:	24 1b       	sub	r18, r20
 50a:	35 0b       	sbc	r19, r21
 50c:	82 17       	cp	r24, r18
 50e:	93 07       	cpc	r25, r19
 510:	14 f4       	brge	.+4      	; 0x516 <__vector_9+0x190>
						{
						pos_phase=1;									
 512:	60 93 25 01 	sts	0x0125, r22
						}
					}	
					
					
					
					UDR0=voltage16>>4;
 516:	80 91 2b 01 	lds	r24, 0x012B
 51a:	90 91 2c 01 	lds	r25, 0x012C
 51e:	9c 01       	movw	r18, r24
 520:	e4 e0       	ldi	r30, 0x04	; 4
 522:	35 95       	asr	r19
 524:	27 95       	ror	r18
 526:	ea 95       	dec	r30
 528:	e1 f7       	brne	.-8      	; 0x522 <__vector_9+0x19c>
 52a:	20 93 c6 00 	sts	0x00C6, r18
					prepareSetDAC(voltage16,chan);
 52e:	60 91 3e 01 	lds	r22, 0x013E
 532:	0e 94 13 01 	call	0x226	; 0x226 <prepareSetDAC>
  while(!(SPSR & (1<<SPIF)));
}


void setDAC(){
	PORTD&=~(1<<LDAC);
 536:	5a 98       	cbi	0x0b, 2	; 11
	PORTD|=(1<<LDAC);	
 538:	5a 9a       	sbi	0x0b, 2	; 11
					//prepareSetDAC(voltage16,5);
					//prepareSetDAC(voltage16,6);
					//prepareSetDAC(voltage16,7);				
					setDAC();
				case 4:
					UDR0=DUMMY_BYTE;	
 53a:	10 92 c6 00 	sts	0x00C6, r1
				
			}
						
			
			UDP_cnt++;
			UDP_cnt%=5;
 53e:	80 91 9a 01 	lds	r24, 0x019A
 542:	8f 5f       	subi	r24, 0xFF	; 255
 544:	65 e0       	ldi	r22, 0x05	; 5
 546:	0e 94 0d 06 	call	0xc1a	; 0xc1a <__udivmodqi4>
 54a:	90 93 9a 01 	sts	0x019A, r25
 54e:	3b c2       	rjmp	.+1142   	; 0x9c6 <__stack+0xc7>
		}
		else if(MD==PROGRAM)
 550:	62 30       	cpi	r22, 0x02	; 2
 552:	09 f0       	breq	.+2      	; 0x556 <__vector_9+0x1d0>
 554:	a0 c0       	rjmp	.+320    	; 0x696 <__vector_9+0x310>
		{
			T=16;
 556:	80 e1       	ldi	r24, 0x10	; 16
 558:	80 93 8d 01 	sts	0x018D, r24
			static uint16_t adc_h;
			

			if(event_cnt==0)//dT
 55c:	80 91 86 01 	lds	r24, 0x0186
 560:	90 91 87 01 	lds	r25, 0x0187
 564:	00 97       	sbiw	r24, 0x00	; 0
 566:	21 f4       	brne	.+8      	; 0x570 <__vector_9+0x1ea>
			{		
				UDR0=255;
 568:	8f ef       	ldi	r24, 0xFF	; 255
 56a:	80 93 c6 00 	sts	0x00C6, r24
 56e:	ff c1       	rjmp	.+1022   	; 0x96e <__stack+0x6f>
			
				prepareSetDAC(ref16,chan);
				setDAC();
				ADCSRA |= (1 << ADSC); 
			}
			else if(event_cnt == 1)
 570:	81 30       	cpi	r24, 0x01	; 1
 572:	91 05       	cpc	r25, r1
 574:	19 f4       	brne	.+6      	; 0x57c <__vector_9+0x1f6>
			{
				UDR0 =PROGRAM_done;
 576:	80 91 3d 01 	lds	r24, 0x013D
 57a:	23 c2       	rjmp	.+1094   	; 0x9c2 <__stack+0xc3>
			}	

			else
			if(event_cnt==2)//ADC GET 
 57c:	82 30       	cpi	r24, 0x02	; 2
 57e:	91 05       	cpc	r25, r1
 580:	09 f4       	brne	.+2      	; 0x584 <__vector_9+0x1fe>
 582:	10 c2       	rjmp	.+1056   	; 0x9a4 <__stack+0xa5>
			}
			
			//ADC make CONTINUE
			//make decision
			else
			if(event_cnt==3)
 584:	83 30       	cpi	r24, 0x03	; 3
 586:	91 05       	cpc	r25, r1
 588:	e9 f5       	brne	.+122    	; 0x604 <__vector_9+0x27e>
			{	
				
				UDR0=ADCH_; //3
 58a:	80 91 92 01 	lds	r24, 0x0192
 58e:	80 93 c6 00 	sts	0x00C6, r24
				
				_adc=(ADCL_|(ADCH_ <<8));
 592:	38 2f       	mov	r19, r24
 594:	20 e0       	ldi	r18, 0x00	; 0
 596:	80 91 8e 01 	lds	r24, 0x018E
 59a:	90 e0       	ldi	r25, 0x00	; 0
 59c:	82 2b       	or	r24, r18
 59e:	93 2b       	or	r25, r19
 5a0:	90 93 95 01 	sts	0x0195, r25
 5a4:	80 93 94 01 	sts	0x0194, r24
				adc_h=((uint16_t)(512)-_adc);
 5a8:	20 e0       	ldi	r18, 0x00	; 0
 5aa:	32 e0       	ldi	r19, 0x02	; 2
 5ac:	28 1b       	sub	r18, r24
 5ae:	39 0b       	sbc	r19, r25
 5b0:	30 93 84 01 	sts	0x0184, r19
 5b4:	20 93 83 01 	sts	0x0183, r18
				
				//optimization
				//put some window val here maybe?
				//be  carefull with -
				if((adc_h)<(uint16_t)(t1))
 5b8:	40 91 22 01 	lds	r20, 0x0122
 5bc:	84 2f       	mov	r24, r20
 5be:	90 e0       	ldi	r25, 0x00	; 0
 5c0:	28 17       	cp	r18, r24
 5c2:	39 07       	cpc	r19, r25
 5c4:	60 f4       	brcc	.+24     	; 0x5de <__vector_9+0x258>
				{
					proging_val = -x16;  //set!
 5c6:	80 91 33 01 	lds	r24, 0x0133
 5ca:	90 91 34 01 	lds	r25, 0x0134
 5ce:	90 95       	com	r25
 5d0:	81 95       	neg	r24
 5d2:	9f 4f       	sbci	r25, 0xFF	; 255
 5d4:	90 93 32 01 	sts	0x0132, r25
 5d8:	80 93 31 01 	sts	0x0131, r24
 5dc:	f4 c1       	rjmp	.+1000   	; 0x9c6 <__stack+0xc7>
				}
				else if((adc_h)<(uint16_t)(t1+1)) //done!
 5de:	84 2f       	mov	r24, r20
 5e0:	90 e0       	ldi	r25, 0x00	; 0
 5e2:	01 96       	adiw	r24, 0x01	; 1
 5e4:	28 17       	cp	r18, r24
 5e6:	39 07       	cpc	r19, r25
 5e8:	08 f0       	brcs	.+2      	; 0x5ec <__vector_9+0x266>
 5ea:	ed c1       	rjmp	.+986    	; 0x9c6 <__stack+0xc7>
				{

					PROGRAM_done=1;
 5ec:	81 e0       	ldi	r24, 0x01	; 1
 5ee:	80 93 3d 01 	sts	0x013D, r24
					proging_val=0;
 5f2:	10 92 32 01 	sts	0x0132, r1
 5f6:	10 92 31 01 	sts	0x0131, r1
					prepareSetDAC(ref16,chan);
 5fa:	80 91 35 01 	lds	r24, 0x0135
 5fe:	90 91 36 01 	lds	r25, 0x0136
 602:	db c0       	rjmp	.+438    	; 0x7ba <__vector_9+0x434>
					setDAC();
				}
				
			}
			//DACset proging val
			else if(event_cnt==4)
 604:	84 30       	cpi	r24, 0x04	; 4
 606:	91 05       	cpc	r25, r1
 608:	09 f0       	breq	.+2      	; 0x60c <__vector_9+0x286>
 60a:	3f c0       	rjmp	.+126    	; 0x68a <__vector_9+0x304>
			{
				UDR0 =DUMMY_BYTE;		
 60c:	10 92 c6 00 	sts	0x00C6, r1
				if(PROGRAM_done)
 610:	80 91 3d 01 	lds	r24, 0x013D
 614:	88 23       	and	r24, r24
 616:	21 f0       	breq	.+8      	; 0x620 <__vector_9+0x29a>
					proging_val=0;	
 618:	10 92 32 01 	sts	0x0132, r1
 61c:	10 92 31 01 	sts	0x0131, r1
				
				prepareSetDAC(proging_val,chan);
 620:	80 91 31 01 	lds	r24, 0x0131
 624:	90 91 32 01 	lds	r25, 0x0132
 628:	60 91 3e 01 	lds	r22, 0x013E
 62c:	0e 94 13 01 	call	0x226	; 0x226 <prepareSetDAC>
  while(!(SPSR & (1<<SPIF)));
}


void setDAC(){
	PORTD&=~(1<<LDAC);
 630:	5a 98       	cbi	0x0b, 2	; 11
	PORTD|=(1<<LDAC);	
 632:	5a 9a       	sbi	0x0b, 2	; 11
					proging_val=0;	
				
				prepareSetDAC(proging_val,chan);
				setDAC();
							
				if(proging_val == -x16)
 634:	20 91 31 01 	lds	r18, 0x0131
 638:	30 91 32 01 	lds	r19, 0x0132
 63c:	80 91 33 01 	lds	r24, 0x0133
 640:	90 91 34 01 	lds	r25, 0x0134
 644:	44 27       	eor	r20, r20
 646:	55 27       	eor	r21, r21
 648:	48 1b       	sub	r20, r24
 64a:	59 0b       	sbc	r21, r25
 64c:	24 17       	cp	r18, r20
 64e:	35 07       	cpc	r19, r21
 650:	29 f4       	brne	.+10     	; 0x65c <__vector_9+0x2d6>
				{
					proging_val=0;
 652:	10 92 32 01 	sts	0x0132, r1
 656:	10 92 31 01 	sts	0x0131, r1
 65a:	b5 c1       	rjmp	.+874    	; 0x9c6 <__stack+0xc7>
				}					
				else
				if(proging_val>(t2<<4))
 65c:	80 91 23 01 	lds	r24, 0x0123
 660:	90 e0       	ldi	r25, 0x00	; 0
 662:	74 e0       	ldi	r23, 0x04	; 4
 664:	88 0f       	add	r24, r24
 666:	99 1f       	adc	r25, r25
 668:	7a 95       	dec	r23
 66a:	e1 f7       	brne	.-8      	; 0x664 <__vector_9+0x2de>
 66c:	82 17       	cp	r24, r18
 66e:	93 07       	cpc	r25, r19
 670:	2c f4       	brge	.+10     	; 0x67c <__vector_9+0x2f6>
				{
					proging_val= -x16;
 672:	50 93 32 01 	sts	0x0132, r21
 676:	40 93 31 01 	sts	0x0131, r20
 67a:	a5 c1       	rjmp	.+842    	; 0x9c6 <__stack+0xc7>
				}	
				else
				{
					proging_val+=32;
 67c:	20 5e       	subi	r18, 0xE0	; 224
 67e:	3f 4f       	sbci	r19, 0xFF	; 255
 680:	30 93 32 01 	sts	0x0132, r19
 684:	20 93 31 01 	sts	0x0131, r18
 688:	9e c1       	rjmp	.+828    	; 0x9c6 <__stack+0xc7>
				}	
			}
			else if(event_cnt==5)//
 68a:	05 97       	sbiw	r24, 0x05	; 5
 68c:	09 f0       	breq	.+2      	; 0x690 <__vector_9+0x30a>
 68e:	9b c1       	rjmp	.+822    	; 0x9c6 <__stack+0xc7>
			{	
				UDR0 =DUMMY_BYTE;			
 690:	10 92 c6 00 	sts	0x00C6, r1
 694:	90 c0       	rjmp	.+288    	; 0x7b6 <__vector_9+0x430>
			}
			
			

		}
		else if(MD == ONE_SHOT)
 696:	65 30       	cpi	r22, 0x05	; 5
 698:	09 f0       	breq	.+2      	; 0x69c <__vector_9+0x316>
 69a:	75 c0       	rjmp	.+234    	; 0x786 <__vector_9+0x400>
		{
			//готовим reset
				if(event_cnt==1){
 69c:	80 91 86 01 	lds	r24, 0x0186
 6a0:	90 91 87 01 	lds	r25, 0x0187
 6a4:	81 30       	cpi	r24, 0x01	; 1
 6a6:	91 05       	cpc	r25, r1
 6a8:	b1 f1       	breq	.+108    	; 0x716 <__vector_9+0x390>
				separMult();
			}//reseting
			else if(event_cnt==2)
 6aa:	82 30       	cpi	r24, 0x02	; 2
 6ac:	91 05       	cpc	r25, r1
 6ae:	61 f4       	brne	.+24     	; 0x6c8 <__vector_9+0x342>
			{
				prepareSetDAC(reset16,CHAN_4);
 6b0:	80 91 37 01 	lds	r24, 0x0137
 6b4:	90 91 38 01 	lds	r25, 0x0138
 6b8:	63 e0       	ldi	r22, 0x03	; 3
 6ba:	0e 94 13 01 	call	0x226	; 0x226 <prepareSetDAC>
				prepareSetDAC(reset16,CHAN_3);
 6be:	80 91 37 01 	lds	r24, 0x0137
 6c2:	90 91 38 01 	lds	r25, 0x0138
 6c6:	0a c0       	rjmp	.+20     	; 0x6dc <__vector_9+0x356>
				setDAC();
			}
			else if(event_cnt==3)
 6c8:	83 30       	cpi	r24, 0x03	; 3
 6ca:	91 05       	cpc	r25, r1
 6cc:	49 f4       	brne	.+18     	; 0x6e0 <__vector_9+0x35a>
			{
				prepareSetDAC(0,CHAN_4);
 6ce:	80 e0       	ldi	r24, 0x00	; 0
 6d0:	90 e0       	ldi	r25, 0x00	; 0
 6d2:	63 e0       	ldi	r22, 0x03	; 3
 6d4:	0e 94 13 01 	call	0x226	; 0x226 <prepareSetDAC>
				prepareSetDAC(0,CHAN_3);
 6d8:	80 e0       	ldi	r24, 0x00	; 0
 6da:	90 e0       	ldi	r25, 0x00	; 0
 6dc:	62 e0       	ldi	r22, 0x02	; 2
 6de:	6f c0       	rjmp	.+222    	; 0x7be <__vector_9+0x438>
				setDAC();
			}		//is reset		
			else if(event_cnt==4)
 6e0:	84 30       	cpi	r24, 0x04	; 4
 6e2:	91 05       	cpc	r25, r1
 6e4:	19 f4       	brne	.+6      	; 0x6ec <__vector_9+0x366>
			{
				gatherMult();
 6e6:	0e 94 8a 00 	call	0x114	; 0x114 <gatherMult>
 6ea:	6d c1       	rjmp	.+730    	; 0x9c6 <__stack+0xc7>
			}
			else if(event_cnt==5)
 6ec:	85 30       	cpi	r24, 0x05	; 5
 6ee:	91 05       	cpc	r25, r1
 6f0:	29 f4       	brne	.+10     	; 0x6fc <__vector_9+0x376>
			{
				prepareSetDAC(x16,CHAN_4);				
 6f2:	80 91 33 01 	lds	r24, 0x0133
 6f6:	90 91 34 01 	lds	r25, 0x0134
 6fa:	05 c0       	rjmp	.+10     	; 0x706 <__vector_9+0x380>
				setDAC();
			}		
			else if(event_cnt==6)
 6fc:	86 30       	cpi	r24, 0x06	; 6
 6fe:	91 05       	cpc	r25, r1
 700:	21 f4       	brne	.+8      	; 0x70a <__vector_9+0x384>
			{
				prepareSetDAC(0,CHAN_4);				
 702:	80 e0       	ldi	r24, 0x00	; 0
 704:	90 e0       	ldi	r25, 0x00	; 0
 706:	63 e0       	ldi	r22, 0x03	; 3
 708:	5a c0       	rjmp	.+180    	; 0x7be <__vector_9+0x438>
				setDAC();
			}	
			
			//пнули		
			//посмотрим, что вышло
			else if(event_cnt==7)
 70a:	87 30       	cpi	r24, 0x07	; 7
 70c:	91 05       	cpc	r25, r1
 70e:	31 f4       	brne	.+12     	; 0x71c <__vector_9+0x396>
			{
				UDR0=255;//1
 710:	8f ef       	ldi	r24, 0xFF	; 255
 712:	80 93 c6 00 	sts	0x00C6, r24
				separMult();				
 716:	0e 94 93 00 	call	0x126	; 0x126 <separMult>
 71a:	55 c1       	rjmp	.+682    	; 0x9c6 <__stack+0xc7>
			}			
			else if(event_cnt==8)
 71c:	88 30       	cpi	r24, 0x08	; 8
 71e:	91 05       	cpc	r25, r1
 720:	31 f4       	brne	.+12     	; 0x72e <__vector_9+0x3a8>
			{
				prepareSetDAC(ref16,CHAN_4);
 722:	80 91 35 01 	lds	r24, 0x0135
 726:	90 91 36 01 	lds	r25, 0x0136
 72a:	63 e0       	ldi	r22, 0x03	; 3
 72c:	26 c1       	rjmp	.+588    	; 0x97a <__stack+0x7b>
				setDAC();				
				ADCSRA |= (1 << ADSC); 
			}	
			else if(event_cnt==9)
 72e:	89 30       	cpi	r24, 0x09	; 9
 730:	91 05       	cpc	r25, r1
 732:	09 f4       	brne	.+2      	; 0x736 <__vector_9+0x3b0>
 734:	37 c1       	rjmp	.+622    	; 0x9a4 <__stack+0xa5>
				//prepareSetDAC(ref16,3);
				ADCL_=ADCL;	
				ADCH_=ADCH;
				UDR0=ADCL_;//2
			}
			else if(event_cnt==10)
 736:	8a 30       	cpi	r24, 0x0A	; 10
 738:	91 05       	cpc	r25, r1
 73a:	29 f4       	brne	.+10     	; 0x746 <__vector_9+0x3c0>
			{
				UDR0=ADCH_; //3 1st chan
 73c:	80 91 92 01 	lds	r24, 0x0192
 740:	80 93 c6 00 	sts	0x00C6, r24
 744:	de cf       	rjmp	.-68     	; 0x702 <__vector_9+0x37c>
				
				prepareSetDAC(0,CHAN_4);
				setDAC();
			}		
			//4й просмотрен
			else if(event_cnt==11)
 746:	8b 30       	cpi	r24, 0x0B	; 11
 748:	91 05       	cpc	r25, r1
 74a:	31 f4       	brne	.+12     	; 0x758 <__vector_9+0x3d2>
			{				 
				prepareSetDAC(ref16,CHAN_3);
 74c:	80 91 35 01 	lds	r24, 0x0135
 750:	90 91 36 01 	lds	r25, 0x0136
 754:	62 e0       	ldi	r22, 0x02	; 2
 756:	11 c1       	rjmp	.+546    	; 0x97a <__stack+0x7b>
				setDAC();
				
				ADCSRA |= (1 << ADSC); 
			}
			else if(event_cnt==12)
 758:	8c 30       	cpi	r24, 0x0C	; 12
 75a:	91 05       	cpc	r25, r1
 75c:	09 f4       	brne	.+2      	; 0x760 <__vector_9+0x3da>
 75e:	22 c1       	rjmp	.+580    	; 0x9a4 <__stack+0xa5>
			{		
				ADCL_=ADCL;	
				ADCH_=ADCH;
				UDR0=ADCL_; //4
			}
			else if(event_cnt == 13)
 760:	0d 97       	sbiw	r24, 0x0d	; 13
 762:	09 f0       	breq	.+2      	; 0x766 <__vector_9+0x3e0>
 764:	30 c1       	rjmp	.+608    	; 0x9c6 <__stack+0xc7>
			{
				UDR0=ADCH_; // 5
 766:	80 91 92 01 	lds	r24, 0x0192
 76a:	80 93 c6 00 	sts	0x00C6, r24
				
				prepareSetDAC(0,CHAN_3);
 76e:	80 e0       	ldi	r24, 0x00	; 0
 770:	90 e0       	ldi	r25, 0x00	; 0
 772:	62 e0       	ldi	r22, 0x02	; 2
 774:	0e 94 13 01 	call	0x226	; 0x226 <prepareSetDAC>
  while(!(SPSR & (1<<SPIF)));
}


void setDAC(){
	PORTD&=~(1<<LDAC);
 778:	5a 98       	cbi	0x0b, 2	; 11
	PORTD|=(1<<LDAC);	
 77a:	5a 9a       	sbi	0x0b, 2	; 11
			{
				UDR0=ADCH_; // 5
				
				prepareSetDAC(0,CHAN_3);
				setDAC();
				event_cnt=0;	
 77c:	10 92 87 01 	sts	0x0187, r1
 780:	10 92 86 01 	sts	0x0186, r1
 784:	20 c1       	rjmp	.+576    	; 0x9c6 <__stack+0xc7>
			}
			
		}
		
		
		else if(MD == ANALYZE)//5 by 5
 786:	66 30       	cpi	r22, 0x06	; 6
 788:	09 f0       	breq	.+2      	; 0x78c <__vector_9+0x406>
 78a:	1d c1       	rjmp	.+570    	; 0x9c6 <__stack+0xc7>
		{
			//reset
			if(event_cnt==0)
 78c:	80 91 86 01 	lds	r24, 0x0186
 790:	90 91 87 01 	lds	r25, 0x0187
 794:	00 97       	sbiw	r24, 0x00	; 0
 796:	61 f4       	brne	.+24     	; 0x7b0 <__vector_9+0x42a>
			{
				prepareSetDAC(reset16, chan);
 798:	80 91 37 01 	lds	r24, 0x0137
 79c:	90 91 38 01 	lds	r25, 0x0138
 7a0:	60 91 3e 01 	lds	r22, 0x013E
 7a4:	0e 94 13 01 	call	0x226	; 0x226 <prepareSetDAC>
  while(!(SPSR & (1<<SPIF)));
}


void setDAC(){
	PORTD&=~(1<<LDAC);
 7a8:	5a 98       	cbi	0x0b, 2	; 11
	PORTD|=(1<<LDAC);	
 7aa:	5a 9a       	sbi	0x0b, 2	; 11
			//reset
			if(event_cnt==0)
			{
				prepareSetDAC(reset16, chan);
				setDAC();
				UDR0=255;
 7ac:	8f ef       	ldi	r24, 0xFF	; 255
 7ae:	09 c1       	rjmp	.+530    	; 0x9c2 <__stack+0xc3>
			}
			else if(event_cnt==1)
 7b0:	81 30       	cpi	r24, 0x01	; 1
 7b2:	91 05       	cpc	r25, r1
 7b4:	49 f4       	brne	.+18     	; 0x7c8 <__vector_9+0x442>
			{
				prepareSetDAC(0, chan);				
 7b6:	80 e0       	ldi	r24, 0x00	; 0
 7b8:	90 e0       	ldi	r25, 0x00	; 0
 7ba:	60 91 3e 01 	lds	r22, 0x013E
 7be:	0e 94 13 01 	call	0x226	; 0x226 <prepareSetDAC>
  while(!(SPSR & (1<<SPIF)));
}


void setDAC(){
	PORTD&=~(1<<LDAC);
 7c2:	5a 98       	cbi	0x0b, 2	; 11
	PORTD|=(1<<LDAC);	
 7c4:	5a 9a       	sbi	0x0b, 2	; 11
 7c6:	ff c0       	rjmp	.+510    	; 0x9c6 <__stack+0xc7>
			{
				prepareSetDAC(0, chan);				
				setDAC();
			}
			//create set impulse
			else if(event_cnt==3)
 7c8:	83 30       	cpi	r24, 0x03	; 3
 7ca:	91 05       	cpc	r25, r1
 7cc:	09 f0       	breq	.+2      	; 0x7d0 <__vector_9+0x44a>
 7ce:	c4 c0       	rjmp	.+392    	; 0x958 <__stack+0x59>
			{
				if(an_cnt<(BIG_STAT_N))
 7d0:	40 91 3f 01 	lds	r20, 0x013F
 7d4:	50 91 40 01 	lds	r21, 0x0140
 7d8:	80 91 93 01 	lds	r24, 0x0193
 7dc:	90 e0       	ldi	r25, 0x00	; 0
 7de:	48 17       	cp	r20, r24
 7e0:	59 07       	cpc	r21, r25
 7e2:	18 f4       	brcc	.+6      	; 0x7ea <__vector_9+0x464>
				{
					STAT_V_step=0;					 
 7e4:	10 92 3b 01 	sts	0x013B, r1
 7e8:	21 c0       	rjmp	.+66     	; 0x82c <__vector_9+0x4a6>
				}
				else if(an_cnt<(BIG_STAT_N*2))
 7ea:	9c 01       	movw	r18, r24
 7ec:	22 0f       	add	r18, r18
 7ee:	33 1f       	adc	r19, r19
 7f0:	42 17       	cp	r20, r18
 7f2:	53 07       	cpc	r21, r19
 7f4:	10 f4       	brcc	.+4      	; 0x7fa <__vector_9+0x474>
				{
					STAT_V_step=1;
 7f6:	81 e0       	ldi	r24, 0x01	; 1
 7f8:	17 c0       	rjmp	.+46     	; 0x828 <__vector_9+0x4a2>
				}
				else if(an_cnt<(BIG_STAT_N*3))
 7fa:	28 0f       	add	r18, r24
 7fc:	39 1f       	adc	r19, r25
 7fe:	42 17       	cp	r20, r18
 800:	53 07       	cpc	r21, r19
 802:	10 f4       	brcc	.+4      	; 0x808 <__vector_9+0x482>
				{
					STAT_V_step=2;
 804:	82 e0       	ldi	r24, 0x02	; 2
 806:	10 c0       	rjmp	.+32     	; 0x828 <__vector_9+0x4a2>
				}
				else if(an_cnt<(BIG_STAT_N*4))
 808:	9c 01       	movw	r18, r24
 80a:	22 0f       	add	r18, r18
 80c:	33 1f       	adc	r19, r19
 80e:	22 0f       	add	r18, r18
 810:	33 1f       	adc	r19, r19
 812:	42 17       	cp	r20, r18
 814:	53 07       	cpc	r21, r19
 816:	10 f4       	brcc	.+4      	; 0x81c <__vector_9+0x496>
				{
					STAT_V_step=3;
 818:	83 e0       	ldi	r24, 0x03	; 3
 81a:	06 c0       	rjmp	.+12     	; 0x828 <__vector_9+0x4a2>
				}
				else if(an_cnt<(BIG_STAT_N*5))
 81c:	28 0f       	add	r18, r24
 81e:	39 1f       	adc	r19, r25
 820:	42 17       	cp	r20, r18
 822:	53 07       	cpc	r21, r19
 824:	18 f4       	brcc	.+6      	; 0x82c <__vector_9+0x4a6>
				{
					STAT_V_step=4;
 826:	84 e0       	ldi	r24, 0x04	; 4
 828:	80 93 3b 01 	sts	0x013B, r24
				}////////////						
				//prepareSetDAC(x16, chan);
				UDR0=STAT_V_step;
 82c:	80 91 3b 01 	lds	r24, 0x013B
 830:	80 93 c6 00 	sts	0x00C6, r24
				x16_grad = (-(STAT_V_step+1)*8 )<<4;//16
 834:	90 e0       	ldi	r25, 0x00	; 0
 836:	80 95       	com	r24
 838:	90 95       	com	r25
 83a:	96 95       	lsr	r25
 83c:	98 2f       	mov	r25, r24
 83e:	88 27       	eor	r24, r24
 840:	97 95       	ror	r25
 842:	87 95       	ror	r24
 844:	90 93 97 01 	sts	0x0197, r25
 848:	80 93 96 01 	sts	0x0196, r24
				prepareSetDAC(x16_grad, chan);
 84c:	60 91 3e 01 	lds	r22, 0x013E
 850:	0e 94 13 01 	call	0x226	; 0x226 <prepareSetDAC>
  while(!(SPSR & (1<<SPIF)));
}


void setDAC(){
	PORTD&=~(1<<LDAC);
 854:	5a 98       	cbi	0x0b, 2	; 11
	PORTD|=(1<<LDAC);	
 856:	5a 9a       	sbi	0x0b, 2	; 11
				x16_grad = (-(STAT_V_step+1)*8 )<<4;//16
				prepareSetDAC(x16_grad, chan);
				setDAC();
				
				
				if(an_cnt_fast<(STAT_N))//20 us
 858:	40 91 41 01 	lds	r20, 0x0141
 85c:	50 91 42 01 	lds	r21, 0x0142
 860:	80 91 20 01 	lds	r24, 0x0120
 864:	90 e0       	ldi	r25, 0x00	; 0
 866:	48 17       	cp	r20, r24
 868:	59 07       	cpc	r21, r25
 86a:	18 f4       	brcc	.+6      	; 0x872 <__vector_9+0x4ec>
				{
					STAT_dt_step=0;									
 86c:	10 92 3a 01 	sts	0x013A, r1
 870:	49 c0       	rjmp	.+146    	; 0x904 <__stack+0x5>
				}
				else if(an_cnt_fast<(STAT_N*2))//80 us
 872:	9c 01       	movw	r18, r24
 874:	22 0f       	add	r18, r18
 876:	33 1f       	adc	r19, r19
 878:	42 17       	cp	r20, r18
 87a:	53 07       	cpc	r21, r19
 87c:	60 f4       	brcc	.+24     	; 0x896 <__vector_9+0x510>
				{
					STAT_dt_step=1;
 87e:	81 e0       	ldi	r24, 0x01	; 1
 880:	80 93 3a 01 	sts	0x013A, r24
 884:	80 e0       	ldi	r24, 0x00	; 0
 886:	90 e0       	ldi	r25, 0x00	; 0
  while(!(SPSR & (1<<SPIF)));
}


void setDAC(){
	PORTD&=~(1<<LDAC);
 888:	5a 98       	cbi	0x0b, 2	; 11
	PORTD|=(1<<LDAC);	
 88a:	5a 9a       	sbi	0x0b, 2	; 11
					STAT_dt_step=0;									
				}
				else if(an_cnt_fast<(STAT_N*2))//80 us
				{
					STAT_dt_step=1;
					for(int i=0;i<40;i++)//28
 88c:	01 96       	adiw	r24, 0x01	; 1
 88e:	88 32       	cpi	r24, 0x28	; 40
 890:	91 05       	cpc	r25, r1
 892:	d1 f7       	brne	.-12     	; 0x888 <__vector_9+0x502>
 894:	37 c0       	rjmp	.+110    	; 0x904 <__stack+0x5>
					{
					setDAC();
					}
				}
				else if(an_cnt_fast<(STAT_N*3))//220 us
 896:	28 0f       	add	r18, r24
 898:	39 1f       	adc	r19, r25
 89a:	42 17       	cp	r20, r18
 89c:	53 07       	cpc	r21, r19
 89e:	60 f4       	brcc	.+24     	; 0x8b8 <__vector_9+0x532>
				{
					STAT_dt_step=2;
 8a0:	82 e0       	ldi	r24, 0x02	; 2
 8a2:	80 93 3a 01 	sts	0x013A, r24
 8a6:	80 e0       	ldi	r24, 0x00	; 0
 8a8:	90 e0       	ldi	r25, 0x00	; 0
  while(!(SPSR & (1<<SPIF)));
}


void setDAC(){
	PORTD&=~(1<<LDAC);
 8aa:	5a 98       	cbi	0x0b, 2	; 11
	PORTD|=(1<<LDAC);	
 8ac:	5a 9a       	sbi	0x0b, 2	; 11
					}
				}
				else if(an_cnt_fast<(STAT_N*3))//220 us
				{
					STAT_dt_step=2;
					for(int i=0;i<160;i++)
 8ae:	01 96       	adiw	r24, 0x01	; 1
 8b0:	80 3a       	cpi	r24, 0xA0	; 160
 8b2:	91 05       	cpc	r25, r1
 8b4:	d1 f7       	brne	.-12     	; 0x8aa <__vector_9+0x524>
 8b6:	26 c0       	rjmp	.+76     	; 0x904 <__stack+0x5>
					{
					setDAC();
					}
				}
				else if(an_cnt_fast<(STAT_N*4))//900 us
 8b8:	88 0f       	add	r24, r24
 8ba:	99 1f       	adc	r25, r25
 8bc:	88 0f       	add	r24, r24
 8be:	99 1f       	adc	r25, r25
 8c0:	48 17       	cp	r20, r24
 8c2:	59 07       	cpc	r21, r25
 8c4:	68 f4       	brcc	.+26     	; 0x8e0 <__vector_9+0x55a>
				{
					STAT_dt_step=3;
 8c6:	83 e0       	ldi	r24, 0x03	; 3
 8c8:	80 93 3a 01 	sts	0x013A, r24
 8cc:	80 e0       	ldi	r24, 0x00	; 0
 8ce:	90 e0       	ldi	r25, 0x00	; 0
  while(!(SPSR & (1<<SPIF)));
}


void setDAC(){
	PORTD&=~(1<<LDAC);
 8d0:	5a 98       	cbi	0x0b, 2	; 11
	PORTD|=(1<<LDAC);	
 8d2:	5a 9a       	sbi	0x0b, 2	; 11
					}
				}
				else if(an_cnt_fast<(STAT_N*4))//900 us
				{
					STAT_dt_step=3;
					for(int i=0;i<640;i++)
 8d4:	01 96       	adiw	r24, 0x01	; 1
 8d6:	22 e0       	ldi	r18, 0x02	; 2
 8d8:	80 38       	cpi	r24, 0x80	; 128
 8da:	92 07       	cpc	r25, r18
 8dc:	c9 f7       	brne	.-14     	; 0x8d0 <__vector_9+0x54a>
 8de:	12 c0       	rjmp	.+36     	; 0x904 <__stack+0x5>
					{
					setDAC();
					}
				}
				else if(an_cnt_fast<(BIG_STAT_N))//3.5 ms
 8e0:	80 91 93 01 	lds	r24, 0x0193
 8e4:	90 e0       	ldi	r25, 0x00	; 0
 8e6:	48 17       	cp	r20, r24
 8e8:	59 07       	cpc	r21, r25
 8ea:	60 f4       	brcc	.+24     	; 0x904 <__stack+0x5>
				{
					STAT_dt_step=4;
 8ec:	84 e0       	ldi	r24, 0x04	; 4
 8ee:	80 93 3a 01 	sts	0x013A, r24
 8f2:	80 e0       	ldi	r24, 0x00	; 0
 8f4:	90 e0       	ldi	r25, 0x00	; 0
  while(!(SPSR & (1<<SPIF)));
}


void setDAC(){
	PORTD&=~(1<<LDAC);
 8f6:	5a 98       	cbi	0x0b, 2	; 11
	PORTD|=(1<<LDAC);	
 8f8:	5a 9a       	sbi	0x0b, 2	; 11
					}
				}
				else if(an_cnt_fast<(BIG_STAT_N))//3.5 ms
				{
					STAT_dt_step=4;
					for(int i=0;i<2560;i++)
 8fa:	01 96       	adiw	r24, 0x01	; 1
 8fc:	2a e0       	ldi	r18, 0x0A	; 10
 8fe:	80 30       	cpi	r24, 0x00	; 0
 900:	92 07       	cpc	r25, r18
 902:	c9 f7       	brne	.-14     	; 0x8f6 <__vector_9+0x570>
					setDAC();
					}
				}////////////////
									
				
				prepareResetDAC(chan);
 904:	80 91 3e 01 	lds	r24, 0x013E
 908:	0e 94 c9 00 	call	0x192	; 0x192 <prepareResetDAC>
  while(!(SPSR & (1<<SPIF)));
}


void setDAC(){
	PORTD&=~(1<<LDAC);
 90c:	5a 98       	cbi	0x0b, 2	; 11
	PORTD|=(1<<LDAC);	
 90e:	5a 9a       	sbi	0x0b, 2	; 11
									
				
				prepareResetDAC(chan);
				setDAC();			
				
				an_cnt++; // upper				
 910:	80 91 3f 01 	lds	r24, 0x013F
 914:	90 91 40 01 	lds	r25, 0x0140
 918:	01 96       	adiw	r24, 0x01	; 1
 91a:	90 93 40 01 	sts	0x0140, r25
 91e:	80 93 3f 01 	sts	0x013F, r24
				if(an_cnt>(BIG_STAT_N*5)) an_cnt=0; // lower
 922:	20 91 93 01 	lds	r18, 0x0193
 926:	45 e0       	ldi	r20, 0x05	; 5
 928:	24 9f       	mul	r18, r20
 92a:	90 01       	movw	r18, r0
 92c:	11 24       	eor	r1, r1
 92e:	28 17       	cp	r18, r24
 930:	39 07       	cpc	r19, r25
 932:	20 f4       	brcc	.+8      	; 0x93c <__stack+0x3d>
 934:	10 92 40 01 	sts	0x0140, r1
 938:	10 92 3f 01 	sts	0x013F, r1
				
				an_cnt_fast = an_cnt%BIG_STAT_N;
 93c:	60 91 93 01 	lds	r22, 0x0193
 940:	80 91 3f 01 	lds	r24, 0x013F
 944:	90 91 40 01 	lds	r25, 0x0140
 948:	70 e0       	ldi	r23, 0x00	; 0
 94a:	0e 94 26 06 	call	0xc4c	; 0xc4c <__udivmodhi4>
 94e:	90 93 42 01 	sts	0x0142, r25
 952:	80 93 41 01 	sts	0x0141, r24
 956:	37 c0       	rjmp	.+110    	; 0x9c6 <__stack+0xc7>
			}
			else if(event_cnt==4)
 958:	84 30       	cpi	r24, 0x04	; 4
 95a:	91 05       	cpc	r25, r1
 95c:	29 f4       	brne	.+10     	; 0x968 <__stack+0x69>
			{
				UDR0=STAT_dt_step;
 95e:	80 91 3a 01 	lds	r24, 0x013A
 962:	80 93 c6 00 	sts	0x00C6, r24
 966:	27 cf       	rjmp	.-434    	; 0x7b6 <__vector_9+0x430>
				prepareSetDAC(0, chan);
				setDAC();
			}
			else if(event_cnt==6)//start measure
 968:	86 30       	cpi	r24, 0x06	; 6
 96a:	91 05       	cpc	r25, r1
 96c:	81 f4       	brne	.+32     	; 0x98e <__stack+0x8f>
			{
				prepareSetDAC(ref16, chan);
 96e:	80 91 35 01 	lds	r24, 0x0135
 972:	90 91 36 01 	lds	r25, 0x0136
 976:	60 91 3e 01 	lds	r22, 0x013E
 97a:	0e 94 13 01 	call	0x226	; 0x226 <prepareSetDAC>
  while(!(SPSR & (1<<SPIF)));
}


void setDAC(){
	PORTD&=~(1<<LDAC);
 97e:	5a 98       	cbi	0x0b, 2	; 11
	PORTD|=(1<<LDAC);	
 980:	5a 9a       	sbi	0x0b, 2	; 11
			}
			else if(event_cnt==6)//start measure
			{
				prepareSetDAC(ref16, chan);
				setDAC();
				ADCSRA |= (1 << ADSC); 
 982:	80 91 7a 00 	lds	r24, 0x007A
 986:	80 64       	ori	r24, 0x40	; 64
 988:	80 93 7a 00 	sts	0x007A, r24
 98c:	1c c0       	rjmp	.+56     	; 0x9c6 <__stack+0xc7>
				
			}
			else if(event_cnt==7)
 98e:	87 30       	cpi	r24, 0x07	; 7
 990:	91 05       	cpc	r25, r1
 992:	99 f4       	brne	.+38     	; 0x9ba <__stack+0xbb>
			{
				prepareSetDAC(0, chan);
 994:	80 e0       	ldi	r24, 0x00	; 0
 996:	90 e0       	ldi	r25, 0x00	; 0
 998:	60 91 3e 01 	lds	r22, 0x013E
 99c:	0e 94 13 01 	call	0x226	; 0x226 <prepareSetDAC>
  while(!(SPSR & (1<<SPIF)));
}


void setDAC(){
	PORTD&=~(1<<LDAC);
 9a0:	5a 98       	cbi	0x0b, 2	; 11
	PORTD|=(1<<LDAC);	
 9a2:	5a 9a       	sbi	0x0b, 2	; 11
			else if(event_cnt==7)
			{
				prepareSetDAC(0, chan);
				setDAC();
				
				ADCL_=ADCL;	
 9a4:	90 91 78 00 	lds	r25, 0x0078
 9a8:	90 93 8e 01 	sts	0x018E, r25
				ADCH_=ADCH;
 9ac:	80 91 79 00 	lds	r24, 0x0079
 9b0:	80 93 92 01 	sts	0x0192, r24
				UDR0=ADCL_;
 9b4:	90 93 c6 00 	sts	0x00C6, r25
 9b8:	06 c0       	rjmp	.+12     	; 0x9c6 <__stack+0xc7>
			}
			else if(event_cnt==8)
 9ba:	08 97       	sbiw	r24, 0x08	; 8
 9bc:	21 f4       	brne	.+8      	; 0x9c6 <__stack+0xc7>
			{
				UDR0=ADCH_;
 9be:	80 91 92 01 	lds	r24, 0x0192
 9c2:	80 93 c6 00 	sts	0x00C6, r24
		}
		
		
		
		
		ctr=0;
 9c6:	10 92 8b 01 	sts	0x018B, r1
 9ca:	10 92 8a 01 	sts	0x018A, r1
		
		
		if(MD == ONE_SHOT)
 9ce:	80 91 2a 01 	lds	r24, 0x012A
 9d2:	85 30       	cpi	r24, 0x05	; 5
 9d4:	69 f4       	brne	.+26     	; 0x9f0 <__stack+0xf1>
		{
			if(event_cnt<16)
 9d6:	80 91 86 01 	lds	r24, 0x0186
 9da:	90 91 87 01 	lds	r25, 0x0187
 9de:	80 31       	cpi	r24, 0x10	; 16
 9e0:	91 05       	cpc	r25, r1
 9e2:	2c f5       	brge	.+74     	; 0xa2e <__stack+0x12f>
				event_cnt++;
 9e4:	01 96       	adiw	r24, 0x01	; 1
 9e6:	90 93 87 01 	sts	0x0187, r25
 9ea:	80 93 86 01 	sts	0x0186, r24
 9ee:	1f c0       	rjmp	.+62     	; 0xa2e <__stack+0x12f>
 9f0:	20 91 86 01 	lds	r18, 0x0186
 9f4:	30 91 87 01 	lds	r19, 0x0187
		}
		else if(MD == PROGRAM)
 9f8:	82 30       	cpi	r24, 0x02	; 2
 9fa:	49 f4       	brne	.+18     	; 0xa0e <__stack+0x10f>
		{
			event_cnt++;
 9fc:	c9 01       	movw	r24, r18
 9fe:	01 96       	adiw	r24, 0x01	; 1
 a00:	90 93 87 01 	sts	0x0187, r25
 a04:	80 93 86 01 	sts	0x0186, r24
			if(event_cnt>8)
 a08:	09 97       	sbiw	r24, 0x09	; 9
 a0a:	8c f0       	brlt	.+34     	; 0xa2e <__stack+0x12f>
 a0c:	0c c0       	rjmp	.+24     	; 0xa26 <__stack+0x127>
				event_cnt = 0;
		}
		else{
			event_cnt++;
 a0e:	2f 5f       	subi	r18, 0xFF	; 255
 a10:	3f 4f       	sbci	r19, 0xFF	; 255
 a12:	30 93 87 01 	sts	0x0187, r19
 a16:	20 93 86 01 	sts	0x0186, r18
			if(event_cnt>T)
 a1a:	80 91 8d 01 	lds	r24, 0x018D
 a1e:	90 e0       	ldi	r25, 0x00	; 0
 a20:	82 17       	cp	r24, r18
 a22:	93 07       	cpc	r25, r19
 a24:	24 f4       	brge	.+8      	; 0xa2e <__stack+0x12f>
				event_cnt=0;
 a26:	10 92 87 01 	sts	0x0187, r1
 a2a:	10 92 86 01 	sts	0x0186, r1
		//{
		//	if(event_cnt<16)
		//		event_cnt++;			
		//}
	}
	ctr++;
 a2e:	80 91 8a 01 	lds	r24, 0x018A
 a32:	90 91 8b 01 	lds	r25, 0x018B
 a36:	01 96       	adiw	r24, 0x01	; 1
 a38:	90 93 8b 01 	sts	0x018B, r25
 a3c:	80 93 8a 01 	sts	0x018A, r24
}
 a40:	ff 91       	pop	r31
 a42:	ef 91       	pop	r30
 a44:	bf 91       	pop	r27
 a46:	af 91       	pop	r26
 a48:	9f 91       	pop	r25
 a4a:	8f 91       	pop	r24
 a4c:	7f 91       	pop	r23
 a4e:	6f 91       	pop	r22
 a50:	5f 91       	pop	r21
 a52:	4f 91       	pop	r20
 a54:	3f 91       	pop	r19
 a56:	2f 91       	pop	r18
 a58:	0f 90       	pop	r0
 a5a:	0f be       	out	0x3f, r0	; 63
 a5c:	0f 90       	pop	r0
 a5e:	1f 90       	pop	r1
 a60:	18 95       	reti

00000a62 <__vector_18>:

//прием команд от компьютера по UART в зависимости от режима
ISR(USART_RX_vect)
{
 a62:	1f 92       	push	r1
 a64:	0f 92       	push	r0
 a66:	0f b6       	in	r0, 0x3f	; 63
 a68:	0f 92       	push	r0
 a6a:	11 24       	eor	r1, r1
 a6c:	2f 93       	push	r18
 a6e:	3f 93       	push	r19
 a70:	4f 93       	push	r20
 a72:	5f 93       	push	r21
 a74:	6f 93       	push	r22
 a76:	7f 93       	push	r23
 a78:	8f 93       	push	r24
 a7a:	9f 93       	push	r25
 a7c:	af 93       	push	r26
 a7e:	bf 93       	push	r27
 a80:	ef 93       	push	r30
 a82:	ff 93       	push	r31
	switch(ptr)
 a84:	80 91 3c 01 	lds	r24, 0x013C
 a88:	84 30       	cpi	r24, 0x04	; 4
 a8a:	09 f4       	brne	.+2      	; 0xa8e <__vector_18+0x2c>
 a8c:	69 c0       	rjmp	.+210    	; 0xb60 <__vector_18+0xfe>
 a8e:	85 30       	cpi	r24, 0x05	; 5
 a90:	58 f4       	brcc	.+22     	; 0xaa8 <__vector_18+0x46>
 a92:	81 30       	cpi	r24, 0x01	; 1
 a94:	51 f1       	breq	.+84     	; 0xaea <__vector_18+0x88>
 a96:	81 30       	cpi	r24, 0x01	; 1
 a98:	d0 f0       	brcs	.+52     	; 0xace <__vector_18+0x6c>
 a9a:	82 30       	cpi	r24, 0x02	; 2
 a9c:	09 f4       	brne	.+2      	; 0xaa0 <__vector_18+0x3e>
 a9e:	42 c0       	rjmp	.+132    	; 0xb24 <__vector_18+0xc2>
 aa0:	83 30       	cpi	r24, 0x03	; 3
 aa2:	09 f0       	breq	.+2      	; 0xaa6 <__vector_18+0x44>
 aa4:	9a c0       	rjmp	.+308    	; 0xbda <__vector_18+0x178>
 aa6:	4f c0       	rjmp	.+158    	; 0xb46 <__vector_18+0xe4>
 aa8:	87 30       	cpi	r24, 0x07	; 7
 aaa:	09 f4       	brne	.+2      	; 0xaae <__vector_18+0x4c>
 aac:	79 c0       	rjmp	.+242    	; 0xba0 <__vector_18+0x13e>
 aae:	88 30       	cpi	r24, 0x08	; 8
 ab0:	38 f4       	brcc	.+14     	; 0xac0 <__vector_18+0x5e>
 ab2:	85 30       	cpi	r24, 0x05	; 5
 ab4:	09 f4       	brne	.+2      	; 0xab8 <__vector_18+0x56>
 ab6:	6a c0       	rjmp	.+212    	; 0xb8c <__vector_18+0x12a>
 ab8:	86 30       	cpi	r24, 0x06	; 6
 aba:	09 f0       	breq	.+2      	; 0xabe <__vector_18+0x5c>
 abc:	8e c0       	rjmp	.+284    	; 0xbda <__vector_18+0x178>
 abe:	6b c0       	rjmp	.+214    	; 0xb96 <__vector_18+0x134>
 ac0:	88 30       	cpi	r24, 0x08	; 8
 ac2:	09 f4       	brne	.+2      	; 0xac6 <__vector_18+0x64>
 ac4:	72 c0       	rjmp	.+228    	; 0xbaa <__vector_18+0x148>
 ac6:	89 30       	cpi	r24, 0x09	; 9
 ac8:	09 f0       	breq	.+2      	; 0xacc <__vector_18+0x6a>
 aca:	87 c0       	rjmp	.+270    	; 0xbda <__vector_18+0x178>
 acc:	73 c0       	rjmp	.+230    	; 0xbb4 <__vector_18+0x152>
	{
		case 0:
		if(UDR0!=255)//байт 255 является синхронизирующим
 ace:	80 91 c6 00 	lds	r24, 0x00C6
 ad2:	8f 3f       	cpi	r24, 0xFF	; 255
 ad4:	31 f0       	breq	.+12     	; 0xae2 <__vector_18+0x80>
		{
			sync=0;
 ad6:	10 92 39 01 	sts	0x0139, r1
			ptr--;
			ptr%=7;
 ada:	83 e0       	ldi	r24, 0x03	; 3
 adc:	80 93 3c 01 	sts	0x013C, r24
 ae0:	7c c0       	rjmp	.+248    	; 0xbda <__vector_18+0x178>
		}
		else
			sync=1;
 ae2:	81 e0       	ldi	r24, 0x01	; 1
 ae4:	80 93 39 01 	sts	0x0139, r24
 ae8:	78 c0       	rjmp	.+240    	; 0xbda <__vector_18+0x178>
		break;
		
		
		case 1:
		MD=UDR0;
 aea:	20 91 c6 00 	lds	r18, 0x00C6
 aee:	20 93 2a 01 	sts	0x012A, r18
		if(MD==VAC)
 af2:	21 30       	cpi	r18, 0x01	; 1
 af4:	39 f4       	brne	.+14     	; 0xb04 <__vector_18+0xa2>
			time_step=4;//5
 af6:	84 e0       	ldi	r24, 0x04	; 4
 af8:	90 e0       	ldi	r25, 0x00	; 0
 afa:	90 93 27 01 	sts	0x0127, r25
 afe:	80 93 26 01 	sts	0x0126, r24
 b02:	6b c0       	rjmp	.+214    	; 0xbda <__vector_18+0x178>
		else
			time_step=6;//4		
 b04:	86 e0       	ldi	r24, 0x06	; 6
 b06:	90 e0       	ldi	r25, 0x00	; 0
 b08:	90 93 27 01 	sts	0x0127, r25
 b0c:	80 93 26 01 	sts	0x0126, r24
		if(MD==PROGRAM)
 b10:	22 30       	cpi	r18, 0x02	; 2
 b12:	09 f0       	breq	.+2      	; 0xb16 <__vector_18+0xb4>
 b14:	62 c0       	rjmp	.+196    	; 0xbda <__vector_18+0x178>
		{
			//PROGRAM_start=1;
			PROGRAM_done=0;
 b16:	10 92 3d 01 	sts	0x013D, r1
			proging_val=0;
 b1a:	10 92 32 01 	sts	0x0132, r1
 b1e:	10 92 31 01 	sts	0x0131, r1
 b22:	5b c0       	rjmp	.+182    	; 0xbda <__vector_18+0x178>
		}
		break;
		
		
		case 2:		
		x16_simple = UDR0;
 b24:	80 91 c6 00 	lds	r24, 0x00C6
 b28:	90 e0       	ldi	r25, 0x00	; 0
 b2a:	90 93 90 01 	sts	0x0190, r25
 b2e:	80 93 8f 01 	sts	0x018F, r24
		x16 = x16_simple<<4;
 b32:	b4 e0       	ldi	r27, 0x04	; 4
 b34:	88 0f       	add	r24, r24
 b36:	99 1f       	adc	r25, r25
 b38:	ba 95       	dec	r27
 b3a:	e1 f7       	brne	.-8      	; 0xb34 <__vector_18+0xd2>
 b3c:	90 93 34 01 	sts	0x0134, r25
 b40:	80 93 33 01 	sts	0x0133, r24
 b44:	4a c0       	rjmp	.+148    	; 0xbda <__vector_18+0x178>
		break;
		case 3:	
		ref16=UDR0<<4;
 b46:	80 91 c6 00 	lds	r24, 0x00C6
 b4a:	90 e0       	ldi	r25, 0x00	; 0
 b4c:	a4 e0       	ldi	r26, 0x04	; 4
 b4e:	88 0f       	add	r24, r24
 b50:	99 1f       	adc	r25, r25
 b52:	aa 95       	dec	r26
 b54:	e1 f7       	brne	.-8      	; 0xb4e <__vector_18+0xec>
 b56:	90 93 36 01 	sts	0x0136, r25
 b5a:	80 93 35 01 	sts	0x0135, r24
 b5e:	3d c0       	rjmp	.+122    	; 0xbda <__vector_18+0x178>
		break;
		case 4:
		if(MD==PROGRAM)
 b60:	80 91 2a 01 	lds	r24, 0x012A
 b64:	82 30       	cpi	r24, 0x02	; 2
 b66:	29 f4       	brne	.+10     	; 0xb72 <__vector_18+0x110>
			t1=UDR0;
 b68:	80 91 c6 00 	lds	r24, 0x00C6
 b6c:	80 93 22 01 	sts	0x0122, r24
 b70:	34 c0       	rjmp	.+104    	; 0xbda <__vector_18+0x178>
		else
			reset16=UDR0<<4;
 b72:	80 91 c6 00 	lds	r24, 0x00C6
 b76:	90 e0       	ldi	r25, 0x00	; 0
 b78:	f4 e0       	ldi	r31, 0x04	; 4
 b7a:	88 0f       	add	r24, r24
 b7c:	99 1f       	adc	r25, r25
 b7e:	fa 95       	dec	r31
 b80:	e1 f7       	brne	.-8      	; 0xb7a <__vector_18+0x118>
 b82:	90 93 38 01 	sts	0x0138, r25
 b86:	80 93 37 01 	sts	0x0137, r24
 b8a:	27 c0       	rjmp	.+78     	; 0xbda <__vector_18+0x178>
		break;		
		case 5:
		
		t2=UDR0;
 b8c:	80 91 c6 00 	lds	r24, 0x00C6
 b90:	80 93 23 01 	sts	0x0123, r24
 b94:	22 c0       	rjmp	.+68     	; 0xbda <__vector_18+0x178>
	
		
		break;	
		case 6:
		dT=UDR0;
 b96:	80 91 c6 00 	lds	r24, 0x00C6
 b9a:	80 93 89 01 	sts	0x0189, r24
 b9e:	1d c0       	rjmp	.+58     	; 0xbda <__vector_18+0x178>
		break;
		case 7:
		T=UDR0;
 ba0:	80 91 c6 00 	lds	r24, 0x00C6
 ba4:	80 93 8d 01 	sts	0x018D, r24
 ba8:	18 c0       	rjmp	.+48     	; 0xbda <__vector_18+0x178>
		break;
		case 8:
		chan=UDR0;
 baa:	80 91 c6 00 	lds	r24, 0x00C6
 bae:	80 93 3e 01 	sts	0x013E, r24
 bb2:	13 c0       	rjmp	.+38     	; 0xbda <__vector_18+0x178>
		break;
		
		case 9:
			reverted[chan]=UDR0;
 bb4:	80 91 c6 00 	lds	r24, 0x00C6
 bb8:	e0 91 3e 01 	lds	r30, 0x013E
 bbc:	f0 e0       	ldi	r31, 0x00	; 0
 bbe:	ed 5b       	subi	r30, 0xBD	; 189
 bc0:	fe 4f       	sbci	r31, 0xFE	; 254
 bc2:	80 83       	st	Z, r24
		
			//event_cnt=0;			
			
			if(MD==GATHER_MULT)
 bc4:	80 91 2a 01 	lds	r24, 0x012A
 bc8:	83 30       	cpi	r24, 0x03	; 3
 bca:	19 f4       	brne	.+6      	; 0xbd2 <__vector_18+0x170>
			{
			//	PORTD=0b00100000;
			//static int ff=1<<5;
			//if(x16>>4)
			gatherMult();
 bcc:	0e 94 8a 00 	call	0x114	; 0x114 <gatherMult>
 bd0:	04 c0       	rjmp	.+8      	; 0xbda <__vector_18+0x178>
			//PORTD=(1<<5)^PORTD;
			//PORTD=ff;
			}
			else if(MD==SEPAR_MULT)	
 bd2:	84 30       	cpi	r24, 0x04	; 4
 bd4:	11 f4       	brne	.+4      	; 0xbda <__vector_18+0x178>
			{
			separMult();	
 bd6:	0e 94 93 00 	call	0x126	; 0x126 <separMult>
		break;
	}
	

	
	dTt2=dT+t2;
 bda:	80 91 23 01 	lds	r24, 0x0123
 bde:	90 91 89 01 	lds	r25, 0x0189
 be2:	89 0f       	add	r24, r25
 be4:	80 93 24 01 	sts	0x0124, r24
	//UDR0=x16/16;
	ptr++;
	ptr%=10;
 be8:	80 91 3c 01 	lds	r24, 0x013C
 bec:	8f 5f       	subi	r24, 0xFF	; 255
 bee:	6a e0       	ldi	r22, 0x0A	; 10
 bf0:	0e 94 0d 06 	call	0xc1a	; 0xc1a <__udivmodqi4>
 bf4:	90 93 3c 01 	sts	0x013C, r25
 bf8:	ff 91       	pop	r31
 bfa:	ef 91       	pop	r30
 bfc:	bf 91       	pop	r27
 bfe:	af 91       	pop	r26
 c00:	9f 91       	pop	r25
 c02:	8f 91       	pop	r24
 c04:	7f 91       	pop	r23
 c06:	6f 91       	pop	r22
 c08:	5f 91       	pop	r21
 c0a:	4f 91       	pop	r20
 c0c:	3f 91       	pop	r19
 c0e:	2f 91       	pop	r18
 c10:	0f 90       	pop	r0
 c12:	0f be       	out	0x3f, r0	; 63
 c14:	0f 90       	pop	r0
 c16:	1f 90       	pop	r1
 c18:	18 95       	reti

00000c1a <__udivmodqi4>:
 c1a:	99 1b       	sub	r25, r25
 c1c:	79 e0       	ldi	r23, 0x09	; 9
 c1e:	04 c0       	rjmp	.+8      	; 0xc28 <__udivmodqi4_ep>

00000c20 <__udivmodqi4_loop>:
 c20:	99 1f       	adc	r25, r25
 c22:	96 17       	cp	r25, r22
 c24:	08 f0       	brcs	.+2      	; 0xc28 <__udivmodqi4_ep>
 c26:	96 1b       	sub	r25, r22

00000c28 <__udivmodqi4_ep>:
 c28:	88 1f       	adc	r24, r24
 c2a:	7a 95       	dec	r23
 c2c:	c9 f7       	brne	.-14     	; 0xc20 <__udivmodqi4_loop>
 c2e:	80 95       	com	r24
 c30:	08 95       	ret

00000c32 <__divmodqi4>:
 c32:	87 fb       	bst	r24, 7
 c34:	08 2e       	mov	r0, r24
 c36:	06 26       	eor	r0, r22
 c38:	87 fd       	sbrc	r24, 7
 c3a:	81 95       	neg	r24
 c3c:	67 fd       	sbrc	r22, 7
 c3e:	61 95       	neg	r22
 c40:	ec df       	rcall	.-40     	; 0xc1a <__udivmodqi4>
 c42:	0e f4       	brtc	.+2      	; 0xc46 <__divmodqi4_1>
 c44:	91 95       	neg	r25

00000c46 <__divmodqi4_1>:
 c46:	07 fc       	sbrc	r0, 7
 c48:	81 95       	neg	r24

00000c4a <__divmodqi4_exit>:
 c4a:	08 95       	ret

00000c4c <__udivmodhi4>:
 c4c:	aa 1b       	sub	r26, r26
 c4e:	bb 1b       	sub	r27, r27
 c50:	51 e1       	ldi	r21, 0x11	; 17
 c52:	07 c0       	rjmp	.+14     	; 0xc62 <__udivmodhi4_ep>

00000c54 <__udivmodhi4_loop>:
 c54:	aa 1f       	adc	r26, r26
 c56:	bb 1f       	adc	r27, r27
 c58:	a6 17       	cp	r26, r22
 c5a:	b7 07       	cpc	r27, r23
 c5c:	10 f0       	brcs	.+4      	; 0xc62 <__udivmodhi4_ep>
 c5e:	a6 1b       	sub	r26, r22
 c60:	b7 0b       	sbc	r27, r23

00000c62 <__udivmodhi4_ep>:
 c62:	88 1f       	adc	r24, r24
 c64:	99 1f       	adc	r25, r25
 c66:	5a 95       	dec	r21
 c68:	a9 f7       	brne	.-22     	; 0xc54 <__udivmodhi4_loop>
 c6a:	80 95       	com	r24
 c6c:	90 95       	com	r25
 c6e:	bc 01       	movw	r22, r24
 c70:	cd 01       	movw	r24, r26
 c72:	08 95       	ret

00000c74 <_exit>:
 c74:	f8 94       	cli

00000c76 <__stop_program>:
 c76:	ff cf       	rjmp	.-2      	; 0xc76 <__stop_program>
