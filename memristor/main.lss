
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000008  00800100  0000050a  0000059e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000050a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000001b  00800108  00800108  000005a6  2**0
                  ALLOC
  3 .debug_aranges 00000020  00000000  00000000  000005a6  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000173  00000000  00000000  000005c6  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000391  00000000  00000000  00000739  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000136  00000000  00000000  00000aca  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000042b  00000000  00000000  00000c00  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000a0  00000000  00000000  0000102c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000153  00000000  00000000  000010cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000040  00000000  00000000  0000121f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__vector_9>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 f6 01 	jmp	0x3ec	; 0x3ec <__vector_18>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ea e0       	ldi	r30, 0x0A	; 10
  7c:	f5 e0       	ldi	r31, 0x05	; 5
  7e:	02 c0       	rjmp	.+4      	; 0x84 <.do_copy_data_start>

00000080 <.do_copy_data_loop>:
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0

00000084 <.do_copy_data_start>:
  84:	a8 30       	cpi	r26, 0x08	; 8
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <.do_copy_data_loop>

0000008a <__do_clear_bss>:
  8a:	11 e0       	ldi	r17, 0x01	; 1
  8c:	a8 e0       	ldi	r26, 0x08	; 8
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a3 32       	cpi	r26, 0x23	; 35
  96:	b1 07       	cpc	r27, r17
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 9c 00 	call	0x138	; 0x138 <main>
  9e:	0c 94 83 02 	jmp	0x506	; 0x506 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <ADC_Init>:
int ADC_cnt;
uint8_t accum_cnt;

/* Функция инициализация АЦП */
void ADC_Init(){
 ADCSRA |= (1 << ADEN) // Включаем АЦП
  a6:	ea e7       	ldi	r30, 0x7A	; 122
  a8:	f0 e0       	ldi	r31, 0x00	; 0
  aa:	80 81       	ld	r24, Z
  ac:	83 68       	ori	r24, 0x83	; 131
  ae:	80 83       	st	Z, r24
 |(1 << ADPS1)|(1 << ADPS0)|(1 << ADPS1);    // устанавливаем предделитель преобразователя на 8
 ADMUX |= (0 << REFS1)|(1 << REFS0) //выставляем опорное напряжение, как внешний ИОН
  b0:	ec e7       	ldi	r30, 0x7C	; 124
  b2:	f0 e0       	ldi	r31, 0x00	; 0
  b4:	80 81       	ld	r24, Z
  b6:	80 64       	ori	r24, 0x40	; 64
  b8:	80 83       	st	Z, r24
 |(0 << MUX0)|(0 << MUX1)|(0 << MUX2)|(0 << MUX3); // снимать сигнал будем с  входа PC0 
}
  ba:	08 95       	ret

000000bc <timer_init>:


void timer_init()
{
    TCCR2A = 0;        // set entire TCCR1A register to 0
  bc:	10 92 b0 00 	sts	0x00B0, r1
    TCCR2B = 0;
  c0:	e1 eb       	ldi	r30, 0xB1	; 177
  c2:	f0 e0       	ldi	r31, 0x00	; 0
  c4:	10 82       	st	Z, r1
    //    TCCR2B |= (1<<CS22) | (1<<CS20); // PRESCALER 1024
    TCCR2B |= (1<<CS21) ;
  c6:	80 81       	ld	r24, Z
  c8:	82 60       	ori	r24, 0x02	; 2
  ca:	80 83       	st	Z, r24
    // enable Timer1 overflow interrupt:
    TIMSK2 = (1 << TOIE2);
  cc:	81 e0       	ldi	r24, 0x01	; 1
  ce:	80 93 70 00 	sts	0x0070, r24
}
  d2:	08 95       	ret

000000d4 <uart_init>:

void uart_init(unsigned int ubrr)
{
	
	UBRR0H = (unsigned char)(ubrr>>8);
  d4:	90 93 c5 00 	sts	0x00C5, r25
	UBRR0L = (unsigned char)ubrr;
  d8:	80 93 c4 00 	sts	0x00C4, r24
	/*Enable receiver and transmitter */
	UCSR0B = (1<<RXCIE0)|(1<<RXEN0)|(1<<TXEN0);
  dc:	88 e9       	ldi	r24, 0x98	; 152
  de:	80 93 c1 00 	sts	0x00C1, r24
	/* Set frame format: 8data, 2stop bit */
	UCSR0C = (1<<USBS0)|(3<<UCSZ00);
  e2:	8e e0       	ldi	r24, 0x0E	; 14
  e4:	80 93 c2 00 	sts	0x00C2, r24
}
  e8:	08 95       	ret

000000ea <SPI_MasterInit>:

void SPI_MasterInit()
{
/* Set MOSI and SCK output, all others input */
	DDR_SPI = (1<<DD_MOSI)|(1<<DD_SCK)|(1<<SPI_SS);
  ea:	8c e2       	ldi	r24, 0x2C	; 44
  ec:	84 b9       	out	0x04, r24	; 4
/* Enable SPI, Master, set clock rate fck/16 */
	SPCR = (1<<SPE)|(0<<DORD)|(1<<MSTR)|(1<<CPOL)|(0<<CPHA)|(1<<SPR1)|(0<<SPR0);
  ee:	8a e5       	ldi	r24, 0x5A	; 90
  f0:	8c bd       	out	0x2c, r24	; 44
	//SPSR = (0<<SPI2X);
}
  f2:	08 95       	ret

000000f4 <SPI_WriteByte>:


void SPI_WriteByte(uint8_t data)
{
   //PORTB &= ~(1<<SPI_SS);
   SPDR = data;
  f4:	8e bd       	out	0x2e, r24	; 46
  while(!(SPSR & (1<<SPIF)));
  f6:	0d b4       	in	r0, 0x2d	; 45
  f8:	07 fe       	sbrs	r0, 7
  fa:	fd cf       	rjmp	.-6      	; 0xf6 <SPI_WriteByte+0x2>
   //PORTB |= (1<<SPI_SS); 
}
  fc:	08 95       	ret

000000fe <setDAC>:
	SPCR = (1<<SPE)|(0<<DORD)|(1<<MSTR)|(1<<CPOL)|(0<<CPHA)|(1<<SPR1)|(0<<SPR0);
	//SPSR = (0<<SPI2X);
}
//(1<<RXCIE0)|
void setDAC(int16_t x)//_____________bipolar!!!
{
  fe:	0f 93       	push	r16
 100:	1f 93       	push	r17
	x=-x;
 102:	00 27       	eor	r16, r16
 104:	11 27       	eor	r17, r17
 106:	08 1b       	sub	r16, r24
 108:	19 0b       	sbc	r17, r25
	x+=2048;
 10a:	00 50       	subi	r16, 0x00	; 0
 10c:	18 4f       	sbci	r17, 0xF8	; 248
	PORTD&=~(1<<SYNC);
 10e:	5b 98       	cbi	0x0b, 3	; 11
	//_delay_us(30);  
	send8 = (x >> 8);
	send8 &= 0b00001111;
 110:	81 2f       	mov	r24, r17
 112:	99 27       	eor	r25, r25
 114:	87 fd       	sbrc	r24, 7
 116:	9a 95       	dec	r25
 118:	8f 70       	andi	r24, 0x0F	; 15
 11a:	80 93 18 01 	sts	0x0118, r24
	SPI_WriteByte(send8);
 11e:	90 e0       	ldi	r25, 0x00	; 0
 120:	0e 94 7a 00 	call	0xf4	; 0xf4 <SPI_WriteByte>
	send8=x;
 124:	00 93 18 01 	sts	0x0118, r16
	//send8&=0b11111111;
	SPI_WriteByte(send8);		
 128:	80 2f       	mov	r24, r16
 12a:	90 e0       	ldi	r25, 0x00	; 0
 12c:	0e 94 7a 00 	call	0xf4	; 0xf4 <SPI_WriteByte>
	PORTD|=(1<<SYNC);
 130:	5b 9a       	sbi	0x0b, 3	; 11

}
 132:	1f 91       	pop	r17
 134:	0f 91       	pop	r16
 136:	08 95       	ret

00000138 <main>:
   //PORTB |= (1<<SPI_SS); 
}

void main(void)
{
	sei();
 138:	78 94       	sei
}

void SPI_MasterInit()
{
/* Set MOSI and SCK output, all others input */
	DDR_SPI = (1<<DD_MOSI)|(1<<DD_SCK)|(1<<SPI_SS);
 13a:	8c e2       	ldi	r24, 0x2C	; 44
 13c:	84 b9       	out	0x04, r24	; 4
/* Enable SPI, Master, set clock rate fck/16 */
	SPCR = (1<<SPE)|(0<<DORD)|(1<<MSTR)|(1<<CPOL)|(0<<CPHA)|(1<<SPR1)|(0<<SPR0);
 13e:	8a e5       	ldi	r24, 0x5A	; 90
 140:	8c bd       	out	0x2c, r24	; 44
}


void timer_init()
{
    TCCR2A = 0;        // set entire TCCR1A register to 0
 142:	10 92 b0 00 	sts	0x00B0, r1
    TCCR2B = 0;
 146:	10 92 b1 00 	sts	0x00B1, r1
    //    TCCR2B |= (1<<CS22) | (1<<CS20); // PRESCALER 1024
    TCCR2B |= (1<<CS21) ;
 14a:	80 91 b1 00 	lds	r24, 0x00B1
 14e:	82 60       	ori	r24, 0x02	; 2
 150:	80 93 b1 00 	sts	0x00B1, r24
    // enable Timer1 overflow interrupt:
    TIMSK2 = (1 << TOIE2);
 154:	81 e0       	ldi	r24, 0x01	; 1
 156:	80 93 70 00 	sts	0x0070, r24
void main(void)
{
	sei();
	SPI_MasterInit();
	timer_init();
    DDRD = 0b000001100;	
 15a:	8c e0       	ldi	r24, 0x0C	; 12
 15c:	8a b9       	out	0x0a, r24	; 10
}

void uart_init(unsigned int ubrr)
{
	
	UBRR0H = (unsigned char)(ubrr>>8);
 15e:	10 92 c5 00 	sts	0x00C5, r1
	UBRR0L = (unsigned char)ubrr;
 162:	83 e3       	ldi	r24, 0x33	; 51
 164:	80 93 c4 00 	sts	0x00C4, r24
	/*Enable receiver and transmitter */
	UCSR0B = (1<<RXCIE0)|(1<<RXEN0)|(1<<TXEN0);
 168:	88 e9       	ldi	r24, 0x98	; 152
 16a:	80 93 c1 00 	sts	0x00C1, r24
	/* Set frame format: 8data, 2stop bit */
	UCSR0C = (1<<USBS0)|(3<<UCSZ00);
 16e:	8e e0       	ldi	r24, 0x0E	; 14
 170:	80 93 c2 00 	sts	0x00C2, r24
int ADC_cnt;
uint8_t accum_cnt;

/* Функция инициализация АЦП */
void ADC_Init(){
 ADCSRA |= (1 << ADEN) // Включаем АЦП
 174:	80 91 7a 00 	lds	r24, 0x007A
 178:	83 68       	ori	r24, 0x83	; 131
 17a:	80 93 7a 00 	sts	0x007A, r24
 |(1 << ADPS1)|(1 << ADPS0)|(1 << ADPS1);    // устанавливаем предделитель преобразователя на 8
 ADMUX |= (0 << REFS1)|(1 << REFS0) //выставляем опорное напряжение, как внешний ИОН
 17e:	80 91 7c 00 	lds	r24, 0x007C
 182:	80 64       	ori	r24, 0x40	; 64
 184:	80 93 7c 00 	sts	0x007C, r24
	timer_init();
    DDRD = 0b000001100;	
	uart_init(BAUDRATE);
	ADC_Init();
	
			ADCSRA |= (1 << ADSC); 
 188:	80 91 7a 00 	lds	r24, 0x007A
 18c:	80 64       	ori	r24, 0x40	; 64
 18e:	80 93 7a 00 	sts	0x007A, r24
	ADCL;
 192:	80 91 78 00 	lds	r24, 0x0078
	ADCL;
 196:	80 91 78 00 	lds	r24, 0x0078
 19a:	ff cf       	rjmp	.-2      	; 0x19a <main+0x62>

0000019c <__vector_9>:
    }

}

ISR(TIMER2_OVF_vect)
{
 19c:	1f 92       	push	r1
 19e:	0f 92       	push	r0
 1a0:	0f b6       	in	r0, 0x3f	; 63
 1a2:	0f 92       	push	r0
 1a4:	11 24       	eor	r1, r1
 1a6:	2f 93       	push	r18
 1a8:	3f 93       	push	r19
 1aa:	4f 93       	push	r20
 1ac:	5f 93       	push	r21
 1ae:	6f 93       	push	r22
 1b0:	7f 93       	push	r23
 1b2:	8f 93       	push	r24
 1b4:	9f 93       	push	r25
 1b6:	af 93       	push	r26
 1b8:	bf 93       	push	r27
 1ba:	ef 93       	push	r30
 1bc:	ff 93       	push	r31

	if(ctr>time_step)
 1be:	20 91 15 01 	lds	r18, 0x0115
 1c2:	30 91 16 01 	lds	r19, 0x0116
 1c6:	80 91 03 01 	lds	r24, 0x0103
 1ca:	90 91 04 01 	lds	r25, 0x0104
 1ce:	82 17       	cp	r24, r18
 1d0:	93 07       	cpc	r25, r19
 1d2:	0c f0       	brlt	.+2      	; 0x1d6 <__vector_9+0x3a>
 1d4:	f1 c0       	rjmp	.+482    	; 0x3b8 <__vector_9+0x21c>
	{
		if(!VAC_mode)
 1d6:	80 91 10 01 	lds	r24, 0x0110
 1da:	88 23       	and	r24, r24
 1dc:	09 f0       	breq	.+2      	; 0x1e0 <__vector_9+0x44>
 1de:	6a c0       	rjmp	.+212    	; 0x2b4 <__vector_9+0x118>
			//{

			//	ADC_cnt=0;
			//}
			//x16++;
			if(event_ctr==(1))//ADC!!!
 1e0:	40 91 20 01 	lds	r20, 0x0120
 1e4:	50 91 21 01 	lds	r21, 0x0121
 1e8:	41 30       	cpi	r20, 0x01	; 1
 1ea:	51 05       	cpc	r21, r1
 1ec:	b1 f4       	brne	.+44     	; 0x21a <__vector_9+0x7e>
			{	
			ADC_on=1;			
 1ee:	81 e0       	ldi	r24, 0x01	; 1
 1f0:	80 93 13 01 	sts	0x0113, r24
			_adc=((ADCL>>2)|(ADCH <<6));
 1f4:	90 91 78 00 	lds	r25, 0x0078
 1f8:	80 91 79 00 	lds	r24, 0x0079
 1fc:	82 95       	swap	r24
 1fe:	88 0f       	add	r24, r24
 200:	88 0f       	add	r24, r24
 202:	80 7c       	andi	r24, 0xC0	; 192
 204:	96 95       	lsr	r25
 206:	96 95       	lsr	r25
 208:	89 2b       	or	r24, r25
 20a:	80 93 1d 01 	sts	0x011D, r24
			//ADMUX|=(1<<MUX0);
			ADCSRA |= (1 << ADSC); 
 20e:	80 91 7a 00 	lds	r24, 0x007A
 212:	80 64       	ori	r24, 0x40	; 64
 214:	80 93 7a 00 	sts	0x007A, r24
 218:	1d c0       	rjmp	.+58     	; 0x254 <__vector_9+0xb8>
			}
			else if(ADC_on)
 21a:	80 91 13 01 	lds	r24, 0x0113
 21e:	88 23       	and	r24, r24
 220:	89 f0       	breq	.+34     	; 0x244 <__vector_9+0xa8>
			{
				accum_cnt++;
 222:	80 91 17 01 	lds	r24, 0x0117
 226:	8f 5f       	subi	r24, 0xFF	; 255
 228:	80 93 17 01 	sts	0x0117, r24
				accum+=_adc;
 22c:	20 91 1d 01 	lds	r18, 0x011D
 230:	80 91 1b 01 	lds	r24, 0x011B
 234:	90 91 1c 01 	lds	r25, 0x011C
 238:	82 0f       	add	r24, r18
 23a:	91 1d       	adc	r25, r1
 23c:	90 93 1c 01 	sts	0x011C, r25
 240:	80 93 1b 01 	sts	0x011B, r24
			}
			
			
			
			if(event_ctr==0)
 244:	41 15       	cp	r20, r1
 246:	51 05       	cpc	r21, r1
 248:	29 f4       	brne	.+10     	; 0x254 <__vector_9+0xb8>
			{
				
			setDAC(x16);
 24a:	80 91 0a 01 	lds	r24, 0x010A
 24e:	90 91 0b 01 	lds	r25, 0x010B
 252:	08 c0       	rjmp	.+16     	; 0x264 <__vector_9+0xc8>
			PORTD&=~(1<<LDAC);
			PORTD|=(1<<LDAC);
			}
			
			else if(event_ctr==t1)
 254:	80 91 00 01 	lds	r24, 0x0100
 258:	90 e0       	ldi	r25, 0x00	; 0
 25a:	48 17       	cp	r20, r24
 25c:	59 07       	cpc	r21, r25
 25e:	39 f4       	brne	.+14     	; 0x26e <__vector_9+0xd2>
			{
			//if ( ( UCSR0A & (1<<UDRE0)) )		
			//UDR0=ADCL;	
				
			setDAC(0);
 260:	80 e0       	ldi	r24, 0x00	; 0
 262:	90 e0       	ldi	r25, 0x00	; 0
 264:	0e 94 7f 00 	call	0xfe	; 0xfe <setDAC>
			PORTD&=~(1<<LDAC);
 268:	5a 98       	cbi	0x0b, 2	; 11
			PORTD|=(1<<LDAC);
 26a:	5a 9a       	sbi	0x0b, 2	; 11
 26c:	84 c0       	rjmp	.+264    	; 0x376 <__vector_9+0x1da>
			}
			else if(event_ctr==dT)
 26e:	80 91 14 01 	lds	r24, 0x0114
 272:	90 e0       	ldi	r25, 0x00	; 0
 274:	48 17       	cp	r20, r24
 276:	59 07       	cpc	r21, r25
 278:	29 f4       	brne	.+10     	; 0x284 <__vector_9+0xe8>
			{		
			setDAC(y16);
 27a:	80 91 0c 01 	lds	r24, 0x010C
 27e:	90 91 0d 01 	lds	r25, 0x010D
 282:	f0 cf       	rjmp	.-32     	; 0x264 <__vector_9+0xc8>
			PORTD&=~(1<<LDAC);
			PORTD|=(1<<LDAC);
		
			}

			else if(event_ctr==dTt2)
 284:	80 91 02 01 	lds	r24, 0x0102
 288:	90 e0       	ldi	r25, 0x00	; 0
 28a:	48 17       	cp	r20, r24
 28c:	59 07       	cpc	r21, r25
 28e:	09 f0       	breq	.+2      	; 0x292 <__vector_9+0xf6>
 290:	72 c0       	rjmp	.+228    	; 0x376 <__vector_9+0x1da>
			{
			if ( ( UCSR0A & (1<<UDRE0)) )			
 292:	80 91 c0 00 	lds	r24, 0x00C0
 296:	85 ff       	sbrs	r24, 5
 298:	04 c0       	rjmp	.+8      	; 0x2a2 <__vector_9+0x106>
				UDR0=_adc;	
 29a:	80 91 1d 01 	lds	r24, 0x011D
 29e:	80 93 c6 00 	sts	0x00C6, r24
			//UDR0=(uint8_t)(accum/t2);
			accum=0;
 2a2:	10 92 1c 01 	sts	0x011C, r1
 2a6:	10 92 1b 01 	sts	0x011B, r1
			ADC_on=0;
 2aa:	10 92 13 01 	sts	0x0113, r1
			accum_cnt=0;
 2ae:	10 92 17 01 	sts	0x0117, r1
 2b2:	d6 cf       	rjmp	.-84     	; 0x260 <__vector_9+0xc4>
		}
		else//VAC_mode
		{
			//UDR0=255;
			static int i=0;
			i++;
 2b4:	80 91 11 01 	lds	r24, 0x0111
 2b8:	90 91 12 01 	lds	r25, 0x0112
 2bc:	01 96       	adiw	r24, 0x01	; 1
 2be:	90 93 12 01 	sts	0x0112, r25
 2c2:	80 93 11 01 	sts	0x0111, r24
			switch(UDP_cnt)
 2c6:	80 91 22 01 	lds	r24, 0x0122
 2ca:	81 30       	cpi	r24, 0x01	; 1
 2cc:	71 f0       	breq	.+28     	; 0x2ea <__vector_9+0x14e>
 2ce:	81 30       	cpi	r24, 0x01	; 1
 2d0:	18 f0       	brcs	.+6      	; 0x2d8 <__vector_9+0x13c>
 2d2:	82 30       	cpi	r24, 0x02	; 2
 2d4:	c1 f4       	brne	.+48     	; 0x306 <__vector_9+0x16a>
 2d6:	0c c0       	rjmp	.+24     	; 0x2f0 <__vector_9+0x154>
			{
				case 0:
				UDR0=255;
 2d8:	8f ef       	ldi	r24, 0xFF	; 255
 2da:	80 93 c6 00 	sts	0x00C6, r24
				ADCSRA |= (1 << ADSC); 
 2de:	80 91 7a 00 	lds	r24, 0x007A
 2e2:	80 64       	ori	r24, 0x40	; 64
 2e4:	80 93 7a 00 	sts	0x007A, r24
 2e8:	0e c0       	rjmp	.+28     	; 0x306 <__vector_9+0x16a>
				break;
				case 1:
				UDR0=_adc;
 2ea:	80 91 1d 01 	lds	r24, 0x011D
 2ee:	09 c0       	rjmp	.+18     	; 0x302 <__vector_9+0x166>
				break;
				case 2:
				UDR0=VAC16>>4;					
 2f0:	80 91 08 01 	lds	r24, 0x0108
 2f4:	90 91 09 01 	lds	r25, 0x0109
 2f8:	24 e0       	ldi	r18, 0x04	; 4
 2fa:	95 95       	asr	r25
 2fc:	87 95       	ror	r24
 2fe:	2a 95       	dec	r18
 300:	e1 f7       	brne	.-8      	; 0x2fa <__vector_9+0x15e>
 302:	80 93 c6 00 	sts	0x00C6, r24
			}
			
//old version of _adc transfer			
			_adc=((ADCL>>2)|(ADCH <<6));
 306:	90 91 78 00 	lds	r25, 0x0078
 30a:	80 91 79 00 	lds	r24, 0x0079
 30e:	82 95       	swap	r24
 310:	88 0f       	add	r24, r24
 312:	88 0f       	add	r24, r24
 314:	80 7c       	andi	r24, 0xC0	; 192
 316:	96 95       	lsr	r25
 318:	96 95       	lsr	r25
 31a:	89 2b       	or	r24, r25
 31c:	80 93 1d 01 	sts	0x011D, r24
			//_adc
			
			
			
			
			setDAC(VAC16);
 320:	80 91 08 01 	lds	r24, 0x0108
 324:	90 91 09 01 	lds	r25, 0x0109
 328:	0e 94 7f 00 	call	0xfe	; 0xfe <setDAC>
			//UDR0=_adc;
			
			
			
			PORTD&=~(1<<LDAC);
 32c:	5a 98       	cbi	0x0b, 2	; 11
			PORTD|=(1<<LDAC);
 32e:	5a 9a       	sbi	0x0b, 2	; 11
			
			
			VAC16+=16;
 330:	80 91 08 01 	lds	r24, 0x0108
 334:	90 91 09 01 	lds	r25, 0x0109
 338:	40 96       	adiw	r24, 0x10	; 16
 33a:	90 93 09 01 	sts	0x0109, r25
 33e:	80 93 08 01 	sts	0x0108, r24
			if(VAC16>y16)//just positive
 342:	20 91 0c 01 	lds	r18, 0x010C
 346:	30 91 0d 01 	lds	r19, 0x010D
 34a:	28 17       	cp	r18, r24
 34c:	39 07       	cpc	r19, r25
 34e:	5c f4       	brge	.+22     	; 0x366 <__vector_9+0x1ca>
			{
				//VAC16=x16|0xFC00;
				VAC16=-x16;
 350:	80 91 0a 01 	lds	r24, 0x010A
 354:	90 91 0b 01 	lds	r25, 0x010B
 358:	90 95       	com	r25
 35a:	81 95       	neg	r24
 35c:	9f 4f       	sbci	r25, 0xFF	; 255
 35e:	90 93 09 01 	sts	0x0109, r25
 362:	80 93 08 01 	sts	0x0108, r24
				//VAC16=-y16;//just positive
			
			
			
			UDP_cnt++;
			UDP_cnt%=3;
 366:	80 91 22 01 	lds	r24, 0x0122
 36a:	8f 5f       	subi	r24, 0xFF	; 255
 36c:	63 e0       	ldi	r22, 0x03	; 3
 36e:	0e 94 77 02 	call	0x4ee	; 0x4ee <__udivmodqi4>
 372:	90 93 22 01 	sts	0x0122, r25
		
		
		
		
		
		ctr=0;
 376:	10 92 16 01 	sts	0x0116, r1
 37a:	10 92 15 01 	sts	0x0115, r1
		event_ctr++;
 37e:	80 91 20 01 	lds	r24, 0x0120
 382:	90 91 21 01 	lds	r25, 0x0121
 386:	01 96       	adiw	r24, 0x01	; 1
 388:	90 93 21 01 	sts	0x0121, r25
 38c:	80 93 20 01 	sts	0x0120, r24
		ADC_cnt++;
 390:	20 91 1e 01 	lds	r18, 0x011E
 394:	30 91 1f 01 	lds	r19, 0x011F
 398:	2f 5f       	subi	r18, 0xFF	; 255
 39a:	3f 4f       	sbci	r19, 0xFF	; 255
 39c:	30 93 1f 01 	sts	0x011F, r19
 3a0:	20 93 1e 01 	sts	0x011E, r18
		if(event_ctr>T)
 3a4:	20 91 19 01 	lds	r18, 0x0119
 3a8:	30 e0       	ldi	r19, 0x00	; 0
 3aa:	28 17       	cp	r18, r24
 3ac:	39 07       	cpc	r19, r25
 3ae:	24 f4       	brge	.+8      	; 0x3b8 <__vector_9+0x21c>
			event_ctr=0;
 3b0:	10 92 21 01 	sts	0x0121, r1
 3b4:	10 92 20 01 	sts	0x0120, r1
	}
	ctr++;
 3b8:	80 91 15 01 	lds	r24, 0x0115
 3bc:	90 91 16 01 	lds	r25, 0x0116
 3c0:	01 96       	adiw	r24, 0x01	; 1
 3c2:	90 93 16 01 	sts	0x0116, r25
 3c6:	80 93 15 01 	sts	0x0115, r24
	
	
}
 3ca:	ff 91       	pop	r31
 3cc:	ef 91       	pop	r30
 3ce:	bf 91       	pop	r27
 3d0:	af 91       	pop	r26
 3d2:	9f 91       	pop	r25
 3d4:	8f 91       	pop	r24
 3d6:	7f 91       	pop	r23
 3d8:	6f 91       	pop	r22
 3da:	5f 91       	pop	r21
 3dc:	4f 91       	pop	r20
 3de:	3f 91       	pop	r19
 3e0:	2f 91       	pop	r18
 3e2:	0f 90       	pop	r0
 3e4:	0f be       	out	0x3f, r0	; 63
 3e6:	0f 90       	pop	r0
 3e8:	1f 90       	pop	r1
 3ea:	18 95       	reti

000003ec <__vector_18>:

ISR(USART_RX_vect)
{
 3ec:	1f 92       	push	r1
 3ee:	0f 92       	push	r0
 3f0:	0f b6       	in	r0, 0x3f	; 63
 3f2:	0f 92       	push	r0
 3f4:	11 24       	eor	r1, r1
 3f6:	8f 93       	push	r24
 3f8:	9f 93       	push	r25
	switch(ptr)
 3fa:	80 91 0f 01 	lds	r24, 0x010F
 3fe:	83 30       	cpi	r24, 0x03	; 3
 400:	09 f4       	brne	.+2      	; 0x404 <__vector_18+0x18>
 402:	40 c0       	rjmp	.+128    	; 0x484 <__vector_18+0x98>
 404:	84 30       	cpi	r24, 0x04	; 4
 406:	28 f4       	brcc	.+10     	; 0x412 <__vector_18+0x26>
 408:	81 30       	cpi	r24, 0x01	; 1
 40a:	f1 f0       	breq	.+60     	; 0x448 <__vector_18+0x5c>
 40c:	82 30       	cpi	r24, 0x02	; 2
 40e:	60 f5       	brcc	.+88     	; 0x468 <__vector_18+0x7c>
 410:	0d c0       	rjmp	.+26     	; 0x42c <__vector_18+0x40>
 412:	85 30       	cpi	r24, 0x05	; 5
 414:	09 f4       	brne	.+2      	; 0x418 <__vector_18+0x2c>
 416:	49 c0       	rjmp	.+146    	; 0x4aa <__vector_18+0xbe>
 418:	85 30       	cpi	r24, 0x05	; 5
 41a:	08 f4       	brcc	.+2      	; 0x41e <__vector_18+0x32>
 41c:	41 c0       	rjmp	.+130    	; 0x4a0 <__vector_18+0xb4>
 41e:	86 30       	cpi	r24, 0x06	; 6
 420:	09 f4       	brne	.+2      	; 0x424 <__vector_18+0x38>
 422:	48 c0       	rjmp	.+144    	; 0x4b4 <__vector_18+0xc8>
 424:	87 30       	cpi	r24, 0x07	; 7
 426:	09 f0       	breq	.+2      	; 0x42a <__vector_18+0x3e>
 428:	4e c0       	rjmp	.+156    	; 0x4c6 <__vector_18+0xda>
 42a:	49 c0       	rjmp	.+146    	; 0x4be <__vector_18+0xd2>
	{
		case 0:
		if(UDR0!=255)
 42c:	80 91 c6 00 	lds	r24, 0x00C6
 430:	8f 3f       	cpi	r24, 0xFF	; 255
 432:	31 f0       	breq	.+12     	; 0x440 <__vector_18+0x54>
		{
			sync=0;
 434:	10 92 0e 01 	sts	0x010E, r1
			ptr--;
			ptr%=7;
 438:	83 e0       	ldi	r24, 0x03	; 3
 43a:	80 93 0f 01 	sts	0x010F, r24
 43e:	43 c0       	rjmp	.+134    	; 0x4c6 <__vector_18+0xda>
		}
		else
			sync=1;
 440:	81 e0       	ldi	r24, 0x01	; 1
 442:	80 93 0e 01 	sts	0x010E, r24
 446:	3f c0       	rjmp	.+126    	; 0x4c6 <__vector_18+0xda>
		break;
		case 1:
		VAC_mode=UDR0;
 448:	80 91 c6 00 	lds	r24, 0x00C6
 44c:	80 93 10 01 	sts	0x0110, r24
		if(VAC_mode)
 450:	88 23       	and	r24, r24
 452:	19 f0       	breq	.+6      	; 0x45a <__vector_18+0x6e>
			time_step=7;
 454:	87 e0       	ldi	r24, 0x07	; 7
 456:	90 e0       	ldi	r25, 0x00	; 0
 458:	02 c0       	rjmp	.+4      	; 0x45e <__vector_18+0x72>
		else
			time_step=4;
 45a:	84 e0       	ldi	r24, 0x04	; 4
 45c:	90 e0       	ldi	r25, 0x00	; 0
 45e:	90 93 04 01 	sts	0x0104, r25
 462:	80 93 03 01 	sts	0x0103, r24
 466:	2f c0       	rjmp	.+94     	; 0x4c6 <__vector_18+0xda>
		break;
		case 2:
		x16=UDR0<<4;
 468:	80 91 c6 00 	lds	r24, 0x00C6
 46c:	90 e0       	ldi	r25, 0x00	; 0
 46e:	82 95       	swap	r24
 470:	92 95       	swap	r25
 472:	90 7f       	andi	r25, 0xF0	; 240
 474:	98 27       	eor	r25, r24
 476:	80 7f       	andi	r24, 0xF0	; 240
 478:	98 27       	eor	r25, r24
 47a:	90 93 0b 01 	sts	0x010B, r25
 47e:	80 93 0a 01 	sts	0x010A, r24
 482:	21 c0       	rjmp	.+66     	; 0x4c6 <__vector_18+0xda>
		break;
		case 3:	
		y16=UDR0<<4;
 484:	80 91 c6 00 	lds	r24, 0x00C6
 488:	90 e0       	ldi	r25, 0x00	; 0
 48a:	82 95       	swap	r24
 48c:	92 95       	swap	r25
 48e:	90 7f       	andi	r25, 0xF0	; 240
 490:	98 27       	eor	r25, r24
 492:	80 7f       	andi	r24, 0xF0	; 240
 494:	98 27       	eor	r25, r24
 496:	90 93 0d 01 	sts	0x010D, r25
 49a:	80 93 0c 01 	sts	0x010C, r24
 49e:	13 c0       	rjmp	.+38     	; 0x4c6 <__vector_18+0xda>
		break;
		case 4:
		t1=UDR0;
 4a0:	80 91 c6 00 	lds	r24, 0x00C6
 4a4:	80 93 00 01 	sts	0x0100, r24
 4a8:	0e c0       	rjmp	.+28     	; 0x4c6 <__vector_18+0xda>
		break;		
		case 5:
		t2=UDR0;
 4aa:	80 91 c6 00 	lds	r24, 0x00C6
 4ae:	80 93 01 01 	sts	0x0101, r24
 4b2:	09 c0       	rjmp	.+18     	; 0x4c6 <__vector_18+0xda>
		break;	
		case 6:
		dT=UDR0;
 4b4:	80 91 c6 00 	lds	r24, 0x00C6
 4b8:	80 93 14 01 	sts	0x0114, r24
 4bc:	04 c0       	rjmp	.+8      	; 0x4c6 <__vector_18+0xda>
		break;
		case 7:
		T=UDR0;
 4be:	80 91 c6 00 	lds	r24, 0x00C6
 4c2:	80 93 19 01 	sts	0x0119, r24
		break;
	}
	dTt2=dT+t2;
 4c6:	80 91 01 01 	lds	r24, 0x0101
 4ca:	90 91 14 01 	lds	r25, 0x0114
 4ce:	89 0f       	add	r24, r25
 4d0:	80 93 02 01 	sts	0x0102, r24
	//UDR0=x16/16;
	ptr++;
	ptr%=8;
 4d4:	80 91 0f 01 	lds	r24, 0x010F
 4d8:	8f 5f       	subi	r24, 0xFF	; 255
 4da:	87 70       	andi	r24, 0x07	; 7
 4dc:	80 93 0f 01 	sts	0x010F, r24
 4e0:	9f 91       	pop	r25
 4e2:	8f 91       	pop	r24
 4e4:	0f 90       	pop	r0
 4e6:	0f be       	out	0x3f, r0	; 63
 4e8:	0f 90       	pop	r0
 4ea:	1f 90       	pop	r1
 4ec:	18 95       	reti

000004ee <__udivmodqi4>:
 4ee:	99 1b       	sub	r25, r25
 4f0:	79 e0       	ldi	r23, 0x09	; 9
 4f2:	04 c0       	rjmp	.+8      	; 0x4fc <__udivmodqi4_ep>

000004f4 <__udivmodqi4_loop>:
 4f4:	99 1f       	adc	r25, r25
 4f6:	96 17       	cp	r25, r22
 4f8:	08 f0       	brcs	.+2      	; 0x4fc <__udivmodqi4_ep>
 4fa:	96 1b       	sub	r25, r22

000004fc <__udivmodqi4_ep>:
 4fc:	88 1f       	adc	r24, r24
 4fe:	7a 95       	dec	r23
 500:	c9 f7       	brne	.-14     	; 0x4f4 <__udivmodqi4_loop>
 502:	80 95       	com	r24
 504:	08 95       	ret

00000506 <_exit>:
 506:	f8 94       	cli

00000508 <__stop_program>:
 508:	ff cf       	rjmp	.-2      	; 0x508 <__stop_program>
