
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000014  00800100  00000bca  00000c5e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000bca  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000003f  00800114  00800114  00000c72  2**0
                  ALLOC
  3 .debug_aranges 00000020  00000000  00000000  00000c72  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 000002f2  00000000  00000000  00000c92  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000007fa  00000000  00000000  00000f84  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000001fd  00000000  00000000  0000177e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000aa3  00000000  00000000  0000197b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000f0  00000000  00000000  00002420  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000002b5  00000000  00000000  00002510  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000010c  00000000  00000000  000027c5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 71 01 	jmp	0x2e2	; 0x2e2 <__vector_9>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 e7 04 	jmp	0x9ce	; 0x9ce <__vector_18>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ea ec       	ldi	r30, 0xCA	; 202
  7c:	fb e0       	ldi	r31, 0x0B	; 11
  7e:	02 c0       	rjmp	.+4      	; 0x84 <.do_copy_data_start>

00000080 <.do_copy_data_loop>:
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0

00000084 <.do_copy_data_start>:
  84:	a4 31       	cpi	r26, 0x14	; 20
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <.do_copy_data_loop>

0000008a <__do_clear_bss>:
  8a:	11 e0       	ldi	r17, 0x01	; 1
  8c:	a4 e1       	ldi	r26, 0x14	; 20
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a3 35       	cpi	r26, 0x53	; 83
  96:	b1 07       	cpc	r27, r17
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 18 01 	call	0x230	; 0x230 <main>
  9e:	0c 94 e3 05 	jmp	0xbc6	; 0xbc6 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <ADC_Init>:
uint8_t accum_cnt;

//функция инициализаци АЦП
//АЦП используется для регистрации тока, проходящего через мемристор
void ADC_Init(){
 ADCSRA |= (1 << ADEN) // Включаем АЦП
  a6:	ea e7       	ldi	r30, 0x7A	; 122
  a8:	f0 e0       	ldi	r31, 0x00	; 0
  aa:	80 81       	ld	r24, Z
  ac:	83 68       	ori	r24, 0x83	; 131
  ae:	80 83       	st	Z, r24
 //ADCSRA&=~(1 << ADPS1)|(1 << ADPS0)|(1 << ADPS1);
 |(1 << ADPS1)|(1 << ADPS0)|(1 << ADPS1);    // устанавливаем предделитель преобразователя на 8
 ADMUX |= (0 << REFS1)|(1 << REFS0) //выставляем опорное напряжение, как внешний ИОН
  b0:	ec e7       	ldi	r30, 0x7C	; 124
  b2:	f0 e0       	ldi	r31, 0x00	; 0
  b4:	80 81       	ld	r24, Z
  b6:	80 64       	ori	r24, 0x40	; 64
  b8:	80 83       	st	Z, r24
 |(0 << MUX0)|(0 << MUX1)|(0 << MUX2)|(0 << MUX3); // снимать сигнал будем с  входа PC0 
}
  ba:	08 95       	ret

000000bc <timer_init>:

//функция инициализации таймера
// Таймер используется для формирования временной последовательности значений, формируемых с ЦАПа
void timer_init()
{
    TCCR2A = 0;        
  bc:	10 92 b0 00 	sts	0x00B0, r1
    TCCR2B = 0;
  c0:	e1 eb       	ldi	r30, 0xB1	; 177
  c2:	f0 e0       	ldi	r31, 0x00	; 0
  c4:	10 82       	st	Z, r1
    
    TCCR2B |= (1<<CS21) ;    
  c6:	80 81       	ld	r24, Z
  c8:	82 60       	ori	r24, 0x02	; 2
  ca:	80 83       	st	Z, r24
    TIMSK2 = (1 << TOIE2);
  cc:	81 e0       	ldi	r24, 0x01	; 1
  ce:	80 93 70 00 	sts	0x0070, r24
}
  d2:	08 95       	ret

000000d4 <uart_init>:

//функция инициализации UART-интерфейса
void uart_init(unsigned int ubrr)
{	
	UBRR0H = (unsigned char)(ubrr>>8);
  d4:	90 93 c5 00 	sts	0x00C5, r25
	UBRR0L = (unsigned char)ubrr;
  d8:	80 93 c4 00 	sts	0x00C4, r24
	UCSR0B = (1<<RXCIE0)|(1<<RXEN0)|(1<<TXEN0);
  dc:	88 e9       	ldi	r24, 0x98	; 152
  de:	80 93 c1 00 	sts	0x00C1, r24
	UCSR0C = (1<<USBS0)|(3<<UCSZ00);
  e2:	8e e0       	ldi	r24, 0x0E	; 14
  e4:	80 93 c2 00 	sts	0x00C2, r24
}
  e8:	08 95       	ret

000000ea <SPI_MasterInit>:

//функция инициализации SPI
void SPI_MasterInit()
{
	DDR_SPI = (1<<DD_MOSI)|(1<<DD_SCK)|(1<<SPI_SS);
  ea:	8c e2       	ldi	r24, 0x2C	; 44
  ec:	84 b9       	out	0x04, r24	; 4
	SPCR = (1<<SPE)|(0<<DORD)|(1<<MSTR)|(1<<CPOL)|(0<<CPHA);//|(1<<SPR1)|(0<<SPR0);
  ee:	88 e5       	ldi	r24, 0x58	; 88
  f0:	8c bd       	out	0x2c, r24	; 44
}
  f2:	08 95       	ret

000000f4 <gatherMult>:
}

			
void gatherMult()
{
	reset_BYTE(PORTD, 6);
  f4:	5e 98       	cbi	0x0b, 6	; 11
	reset_BYTE(PORTD, 7);				
  f6:	5f 98       	cbi	0x0b, 7	; 11
	reset_BYTE(PORTD, 5);
  f8:	5d 98       	cbi	0x0b, 5	; 11
	reset_BYTE(PORTC, 4);
  fa:	44 98       	cbi	0x08, 4	; 8
	
	
	SET_BYTE(PORTC, 1);				
  fc:	41 9a       	sbi	0x08, 1	; 8
	SET_BYTE(PORTB, 2);
  fe:	2a 9a       	sbi	0x05, 2	; 5
	SET_BYTE(PORTB, 1);
 100:	29 9a       	sbi	0x05, 1	; 5
	SET_BYTE(PORTB, 0);
 102:	28 9a       	sbi	0x05, 0	; 5
}
 104:	08 95       	ret

00000106 <separMult>:
void separMult()
{
	reset_BYTE(PORTB, 1);
 106:	29 98       	cbi	0x05, 1	; 5
	reset_BYTE(PORTB, 2);
 108:	2a 98       	cbi	0x05, 2	; 5
	reset_BYTE(PORTC, 1);
 10a:	41 98       	cbi	0x08, 1	; 8
	
	SET_BYTE(PORTC, 4);						
 10c:	44 9a       	sbi	0x08, 4	; 8
	SET_BYTE(PORTD, 6);
 10e:	5e 9a       	sbi	0x0b, 6	; 11
	SET_BYTE(PORTD, 7);
 110:	5f 9a       	sbi	0x0b, 7	; 11
	SET_BYTE(PORTB, 0);
 112:	28 9a       	sbi	0x05, 0	; 5
	SET_BYTE(PORTD, 5);
 114:	5d 9a       	sbi	0x0b, 5	; 11
}
 116:	08 95       	ret

00000118 <SPI_WriteByte>:



void SPI_WriteByte(uint8_t data)
{
   SPDR = data;
 118:	8e bd       	out	0x2e, r24	; 46
  while(!(SPSR & (1<<SPIF)));
 11a:	0d b4       	in	r0, 0x2d	; 45
 11c:	07 fe       	sbrs	r0, 7
 11e:	fd cf       	rjmp	.-6      	; 0x11a <SPI_WriteByte+0x2>
}
 120:	08 95       	ret

00000122 <prepareResetDAC>:

}


void prepareResetDAC(int8_t chan)//_____________bipolar!!! and <<4 larger
{
 122:	0f 93       	push	r16
 124:	1f 93       	push	r17
 126:	cf 93       	push	r28
 128:	df 93       	push	r29
 12a:	e8 2f       	mov	r30, r24
    // static int16_t x;
	//x+=2048;
	PORTD&=~(1<<SYNC_PINS[chan>>3]);
 12c:	2b b1       	in	r18, 0x0b	; 11
 12e:	85 95       	asr	r24
 130:	85 95       	asr	r24
 132:	85 95       	asr	r24
 134:	c8 2f       	mov	r28, r24
 136:	dd 27       	eor	r29, r29
 138:	c7 fd       	sbrc	r28, 7
 13a:	d0 95       	com	r29
 13c:	c0 50       	subi	r28, 0x00	; 0
 13e:	df 4f       	sbci	r29, 0xFF	; 255
 140:	01 e0       	ldi	r16, 0x01	; 1
 142:	10 e0       	ldi	r17, 0x00	; 0
 144:	c8 01       	movw	r24, r16
 146:	08 80       	ld	r0, Y
 148:	02 c0       	rjmp	.+4      	; 0x14e <prepareResetDAC+0x2c>
 14a:	88 0f       	add	r24, r24
 14c:	99 1f       	adc	r25, r25
 14e:	0a 94       	dec	r0
 150:	e2 f7       	brpl	.-8      	; 0x14a <prepareResetDAC+0x28>
 152:	80 95       	com	r24
 154:	82 23       	and	r24, r18
 156:	8b b9       	out	0x0b, r24	; 11
	//send8 = (x >> 8);
	// send8 = 0b00001000;
	// send8|=(chan_addrs[chan]);
	SPI_WriteByte(0b00001000|chan_addrs[chan]);
 158:	ff 27       	eor	r31, r31
 15a:	e7 fd       	sbrc	r30, 7
 15c:	f0 95       	com	r31
 15e:	ec 5f       	subi	r30, 0xFC	; 252
 160:	fe 4f       	sbci	r31, 0xFE	; 254
 162:	80 81       	ld	r24, Z
 164:	88 60       	ori	r24, 0x08	; 8
 166:	90 e0       	ldi	r25, 0x00	; 0
 168:	0e 94 8c 00 	call	0x118	; 0x118 <SPI_WriteByte>
	// send8=x;
	SPI_WriteByte(0);		
 16c:	80 e0       	ldi	r24, 0x00	; 0
 16e:	90 e0       	ldi	r25, 0x00	; 0
 170:	0e 94 8c 00 	call	0x118	; 0x118 <SPI_WriteByte>
	PORTD|=(1<<SYNC_PINS[chan>>3]);
 174:	8b b1       	in	r24, 0x0b	; 11
 176:	08 80       	ld	r0, Y
 178:	02 c0       	rjmp	.+4      	; 0x17e <prepareResetDAC+0x5c>
 17a:	00 0f       	add	r16, r16
 17c:	11 1f       	adc	r17, r17
 17e:	0a 94       	dec	r0
 180:	e2 f7       	brpl	.-8      	; 0x17a <prepareResetDAC+0x58>
 182:	80 2b       	or	r24, r16
 184:	8b b9       	out	0x0b, r24	; 11
}
 186:	df 91       	pop	r29
 188:	cf 91       	pop	r28
 18a:	1f 91       	pop	r17
 18c:	0f 91       	pop	r16
 18e:	08 95       	ret

00000190 <prepareSetDAC>:

//функция управления ЦАПом 
// при этом, управление регистром LDAC должно использоваться 
//вне функции в перспепктиве создания многоканальной схемы
void prepareSetDAC(int16_t x,int8_t chan)//_____________bipolar!!! and <<4 larger
{
 190:	ef 92       	push	r14
 192:	ff 92       	push	r15
 194:	0f 93       	push	r16
 196:	1f 93       	push	r17
 198:	cf 93       	push	r28
 19a:	df 93       	push	r29
 19c:	e6 2f       	mov	r30, r22
	x=-x;
 19e:	00 27       	eor	r16, r16
 1a0:	11 27       	eor	r17, r17
 1a2:	08 1b       	sub	r16, r24
 1a4:	19 0b       	sbc	r17, r25
	x+=2048;
 1a6:	00 50       	subi	r16, 0x00	; 0
 1a8:	18 4f       	sbci	r17, 0xF8	; 248
	PORTD&=~(1<<SYNC_PINS[chan>>3]);
 1aa:	2b b1       	in	r18, 0x0b	; 11
 1ac:	86 2f       	mov	r24, r22
 1ae:	85 95       	asr	r24
 1b0:	85 95       	asr	r24
 1b2:	85 95       	asr	r24
 1b4:	c8 2f       	mov	r28, r24
 1b6:	dd 27       	eor	r29, r29
 1b8:	c7 fd       	sbrc	r28, 7
 1ba:	d0 95       	com	r29
 1bc:	c0 50       	subi	r28, 0x00	; 0
 1be:	df 4f       	sbci	r29, 0xFF	; 255
 1c0:	91 e0       	ldi	r25, 0x01	; 1
 1c2:	e9 2e       	mov	r14, r25
 1c4:	f1 2c       	mov	r15, r1
 1c6:	c7 01       	movw	r24, r14
 1c8:	08 80       	ld	r0, Y
 1ca:	02 c0       	rjmp	.+4      	; 0x1d0 <prepareSetDAC+0x40>
 1cc:	88 0f       	add	r24, r24
 1ce:	99 1f       	adc	r25, r25
 1d0:	0a 94       	dec	r0
 1d2:	e2 f7       	brpl	.-8      	; 0x1cc <prepareSetDAC+0x3c>
 1d4:	80 95       	com	r24
 1d6:	82 23       	and	r24, r18
 1d8:	8b b9       	out	0x0b, r24	; 11
	send8 = (x >> 8);
	send8 &= 0b00001111;
	send8|=(chan_addrs[chan]);
 1da:	81 2f       	mov	r24, r17
 1dc:	99 27       	eor	r25, r25
 1de:	87 fd       	sbrc	r24, 7
 1e0:	9a 95       	dec	r25
 1e2:	8f 70       	andi	r24, 0x0F	; 15
 1e4:	ff 27       	eor	r31, r31
 1e6:	e7 fd       	sbrc	r30, 7
 1e8:	f0 95       	com	r31
 1ea:	ec 5f       	subi	r30, 0xFC	; 252
 1ec:	fe 4f       	sbci	r31, 0xFE	; 254
 1ee:	20 81       	ld	r18, Z
 1f0:	82 2b       	or	r24, r18
 1f2:	80 93 42 01 	sts	0x0142, r24
	SPI_WriteByte(send8);
 1f6:	90 e0       	ldi	r25, 0x00	; 0
 1f8:	0e 94 8c 00 	call	0x118	; 0x118 <SPI_WriteByte>
	send8=x;
 1fc:	00 93 42 01 	sts	0x0142, r16
	SPI_WriteByte(send8);		
 200:	80 2f       	mov	r24, r16
 202:	90 e0       	ldi	r25, 0x00	; 0
 204:	0e 94 8c 00 	call	0x118	; 0x118 <SPI_WriteByte>
	PORTD|=(1<<SYNC_PINS[chan>>3]);
 208:	8b b1       	in	r24, 0x0b	; 11
 20a:	08 80       	ld	r0, Y
 20c:	02 c0       	rjmp	.+4      	; 0x212 <prepareSetDAC+0x82>
 20e:	ee 0c       	add	r14, r14
 210:	ff 1c       	adc	r15, r15
 212:	0a 94       	dec	r0
 214:	e2 f7       	brpl	.-8      	; 0x20e <prepareSetDAC+0x7e>
 216:	8e 29       	or	r24, r14
 218:	8b b9       	out	0x0b, r24	; 11

}
 21a:	df 91       	pop	r29
 21c:	cf 91       	pop	r28
 21e:	1f 91       	pop	r17
 220:	0f 91       	pop	r16
 222:	ff 90       	pop	r15
 224:	ef 90       	pop	r14
 226:	08 95       	ret

00000228 <set_reverser>:
		else
			PORTB&=~(1<<4);
		break;

	}
}
 228:	08 95       	ret

0000022a <setDAC>:

void setDAC(){
	PORTD&=~(1<<LDAC);
 22a:	5a 98       	cbi	0x0b, 2	; 11
	PORTD|=(1<<LDAC);	
 22c:	5a 9a       	sbi	0x0b, 2	; 11
}
 22e:	08 95       	ret

00000230 <main>:


void main(void)
{
 230:	1f 93       	push	r17
	BIG_STAT_N = STAT_N*STAT_CYCLE;
 232:	80 91 03 01 	lds	r24, 0x0103
 236:	90 91 02 01 	lds	r25, 0x0102
 23a:	89 9f       	mul	r24, r25
 23c:	80 2d       	mov	r24, r0
 23e:	11 24       	eor	r1, r1
 240:	80 93 4b 01 	sts	0x014B, r24
 244:	e4 e0       	ldi	r30, 0x04	; 4
 246:	f1 e0       	ldi	r31, 0x01	; 1
	
	for (uint8_t i=0; i<8;i++)
		chan_addrs[i]=chan_addrs[i]<<4;
 248:	80 81       	ld	r24, Z
 24a:	82 95       	swap	r24
 24c:	80 7f       	andi	r24, 0xF0	; 240
 24e:	81 93       	st	Z+, r24

void main(void)
{
	BIG_STAT_N = STAT_N*STAT_CYCLE;
	
	for (uint8_t i=0; i<8;i++)
 250:	81 e0       	ldi	r24, 0x01	; 1
 252:	ec 30       	cpi	r30, 0x0C	; 12
 254:	f8 07       	cpc	r31, r24
 256:	c1 f7       	brne	.-16     	; 0x248 <main+0x18>
		chan_addrs[i]=chan_addrs[i]<<4;
	
	PORTC|=0b00000000;
 258:	88 b1       	in	r24, 0x08	; 8
 25a:	88 b9       	out	0x08, r24	; 8
	DDRC= 0b00011110;
 25c:	8e e1       	ldi	r24, 0x1E	; 30
 25e:	87 b9       	out	0x07, r24	; 7
	DDRD =0b11111110;
 260:	8e ef       	ldi	r24, 0xFE	; 254
 262:	8a b9       	out	0x0a, r24	; 10
	//PORTD|=0b00100000;	
	DDRB= 0b00011111;
 264:	8f e1       	ldi	r24, 0x1F	; 31
 266:	84 b9       	out	0x04, r24	; 4
	sei();
 268:	78 94       	sei
}

//функция инициализации SPI
void SPI_MasterInit()
{
	DDR_SPI = (1<<DD_MOSI)|(1<<DD_SCK)|(1<<SPI_SS);
 26a:	8c e2       	ldi	r24, 0x2C	; 44
 26c:	84 b9       	out	0x04, r24	; 4
	SPCR = (1<<SPE)|(0<<DORD)|(1<<MSTR)|(1<<CPOL)|(0<<CPHA);//|(1<<SPR1)|(0<<SPR0);
 26e:	88 e5       	ldi	r24, 0x58	; 88
 270:	8c bd       	out	0x2c, r24	; 44

//функция инициализации таймера
// Таймер используется для формирования временной последовательности значений, формируемых с ЦАПа
void timer_init()
{
    TCCR2A = 0;        
 272:	10 92 b0 00 	sts	0x00B0, r1
    TCCR2B = 0;
 276:	10 92 b1 00 	sts	0x00B1, r1
    
    TCCR2B |= (1<<CS21) ;    
 27a:	80 91 b1 00 	lds	r24, 0x00B1
 27e:	82 60       	ori	r24, 0x02	; 2
 280:	80 93 b1 00 	sts	0x00B1, r24
    TIMSK2 = (1 << TOIE2);
 284:	81 e0       	ldi	r24, 0x01	; 1
 286:	80 93 70 00 	sts	0x0070, r24
}

//функция инициализации UART-интерфейса
void uart_init(unsigned int ubrr)
{	
	UBRR0H = (unsigned char)(ubrr>>8);
 28a:	10 92 c5 00 	sts	0x00C5, r1
	UBRR0L = (unsigned char)ubrr;
 28e:	83 e3       	ldi	r24, 0x33	; 51
 290:	80 93 c4 00 	sts	0x00C4, r24
	UCSR0B = (1<<RXCIE0)|(1<<RXEN0)|(1<<TXEN0);
 294:	88 e9       	ldi	r24, 0x98	; 152
 296:	80 93 c1 00 	sts	0x00C1, r24
	UCSR0C = (1<<USBS0)|(3<<UCSZ00);
 29a:	8e e0       	ldi	r24, 0x0E	; 14
 29c:	80 93 c2 00 	sts	0x00C2, r24
uint8_t accum_cnt;

//функция инициализаци АЦП
//АЦП используется для регистрации тока, проходящего через мемристор
void ADC_Init(){
 ADCSRA |= (1 << ADEN) // Включаем АЦП
 2a0:	80 91 7a 00 	lds	r24, 0x007A
 2a4:	83 68       	ori	r24, 0x83	; 131
 2a6:	80 93 7a 00 	sts	0x007A, r24
 //ADCSRA&=~(1 << ADPS1)|(1 << ADPS0)|(1 << ADPS1);
 |(1 << ADPS1)|(1 << ADPS0)|(1 << ADPS1);    // устанавливаем предделитель преобразователя на 8
 ADMUX |= (0 << REFS1)|(1 << REFS0) //выставляем опорное напряжение, как внешний ИОН
 2aa:	80 91 7c 00 	lds	r24, 0x007C
 2ae:	80 64       	ori	r24, 0x40	; 64
 2b0:	80 93 7c 00 	sts	0x007C, r24
    //DDRD = 0b000001100;	
	
	uart_init(BAUDRATE);
	ADC_Init();
	
	ADCSRA |= (1 << ADSC); 
 2b4:	80 91 7a 00 	lds	r24, 0x007A
 2b8:	80 64       	ori	r24, 0x40	; 64
 2ba:	80 93 7a 00 	sts	0x007A, r24
	ADCL;
 2be:	80 91 78 00 	lds	r24, 0x0078
	ADCL;
 2c2:	80 91 78 00 	lds	r24, 0x0078
 2c6:	10 e0       	ldi	r17, 0x00	; 0
		//set_reverser(i,1);
	
	//set_reverser(0,0);
	for (int i=0;i<8;i++)
	{
		prepareSetDAC(0,i);
 2c8:	80 e0       	ldi	r24, 0x00	; 0
 2ca:	90 e0       	ldi	r25, 0x00	; 0
 2cc:	61 2f       	mov	r22, r17
 2ce:	0e 94 c8 00 	call	0x190	; 0x190 <prepareSetDAC>
 2d2:	1f 5f       	subi	r17, 0xFF	; 255

	//for(int i=0;i<8;i++)
		//set_reverser(i,1);
	
	//set_reverser(0,0);
	for (int i=0;i<8;i++)
 2d4:	18 30       	cpi	r17, 0x08	; 8
 2d6:	c1 f7       	brne	.-16     	; 0x2c8 <main+0x98>

	}
}

void setDAC(){
	PORTD&=~(1<<LDAC);
 2d8:	5a 98       	cbi	0x0b, 2	; 11
	PORTD|=(1<<LDAC);	
 2da:	5a 9a       	sbi	0x0b, 2	; 11
	for (int i=0;i<8;i++)
	{
		prepareSetDAC(0,i);
	}
setDAC();	
	separMult();
 2dc:	0e 94 83 00 	call	0x106	; 0x106 <separMult>
 2e0:	ff cf       	rjmp	.-2      	; 0x2e0 <main+0xb0>

000002e2 <__vector_9>:
//главный цикл работы контроллера
//Здесь устанавливаются значения ЦАП и передаются данные на компьютер
//через UART-интерфейс
//данный участок кода повторяется при переполнении TIMER2
ISR(TIMER2_OVF_vect)
{
 2e2:	1f 92       	push	r1
 2e4:	0f 92       	push	r0
 2e6:	0f b6       	in	r0, 0x3f	; 63
 2e8:	0f 92       	push	r0
 2ea:	11 24       	eor	r1, r1
 2ec:	2f 93       	push	r18
 2ee:	3f 93       	push	r19
 2f0:	4f 93       	push	r20
 2f2:	5f 93       	push	r21
 2f4:	6f 93       	push	r22
 2f6:	7f 93       	push	r23
 2f8:	8f 93       	push	r24
 2fa:	9f 93       	push	r25
 2fc:	af 93       	push	r26
 2fe:	bf 93       	push	r27
 300:	ef 93       	push	r30
 302:	ff 93       	push	r31
	if(ctr>time_step)
 304:	20 91 3e 01 	lds	r18, 0x013E
 308:	30 91 3f 01 	lds	r19, 0x013F
 30c:	80 91 10 01 	lds	r24, 0x0110
 310:	90 91 11 01 	lds	r25, 0x0111
 314:	82 17       	cp	r24, r18
 316:	93 07       	cpc	r25, r19
 318:	0c f0       	brlt	.+2      	; 0x31c <__vector_9+0x3a>
 31a:	3f c3       	rjmp	.+1662   	; 0x99a <__stack+0x9b>
	{
		if(MD==CUSTOM)
 31c:	60 91 14 01 	lds	r22, 0x0114
 320:	66 23       	and	r22, r22
 322:	09 f0       	breq	.+2      	; 0x326 <__vector_9+0x44>
 324:	4a c0       	rjmp	.+148    	; 0x3ba <__vector_9+0xd8>
		{
			if(event_cnt==(1))
 326:	20 91 3a 01 	lds	r18, 0x013A
 32a:	30 91 3b 01 	lds	r19, 0x013B
 32e:	21 30       	cpi	r18, 0x01	; 1
 330:	31 05       	cpc	r19, r1
 332:	59 f4       	brne	.+22     	; 0x34a <__vector_9+0x68>
			{	
			ADCL_=ADCL;
 334:	90 91 78 00 	lds	r25, 0x0078
 338:	90 93 44 01 	sts	0x0144, r25
			ADCH_=ADCH;
 33c:	80 91 79 00 	lds	r24, 0x0079
 340:	80 93 48 01 	sts	0x0148, r24
			UDR0=ADCL_;			
 344:	90 93 c6 00 	sts	0x00C6, r25
 348:	0d c0       	rjmp	.+26     	; 0x364 <__vector_9+0x82>
			}
			
			if(event_cnt==(2))
 34a:	22 30       	cpi	r18, 0x02	; 2
 34c:	31 05       	cpc	r19, r1
 34e:	29 f4       	brne	.+10     	; 0x35a <__vector_9+0x78>
			{	
			UDR0=ADCH_;				
 350:	80 91 48 01 	lds	r24, 0x0148
 354:	80 93 c6 00 	sts	0x00C6, r24
 358:	05 c0       	rjmp	.+10     	; 0x364 <__vector_9+0x82>
			}
			
			
			
			if(event_cnt==0)
 35a:	21 15       	cp	r18, r1
 35c:	31 05       	cpc	r19, r1
 35e:	11 f4       	brne	.+4      	; 0x364 <__vector_9+0x82>
			{
			UDR0=255;
 360:	8f ef       	ldi	r24, 0xFF	; 255
 362:	c3 c2       	rjmp	.+1414   	; 0x8ea <__vector_9+0x608>
			prepareSetDAC(0,chan);
			//prepareSetDAC(x16,2);
			setDAC();
			}
			
			else if(event_cnt==t1)
 364:	80 91 0c 01 	lds	r24, 0x010C
 368:	90 e0       	ldi	r25, 0x00	; 0
 36a:	28 17       	cp	r18, r24
 36c:	39 07       	cpc	r19, r25
 36e:	09 f4       	brne	.+2      	; 0x372 <__vector_9+0x90>
 370:	ee c2       	rjmp	.+1500   	; 0x94e <__stack+0x4f>
			{
				
			//prepareSetDAC(0,chan);
			//setDAC();
			}
			else if(event_cnt==dT)
 372:	80 91 3d 01 	lds	r24, 0x013D
 376:	90 e0       	ldi	r25, 0x00	; 0
 378:	28 17       	cp	r18, r24
 37a:	39 07       	cpc	r19, r25
 37c:	09 f4       	brne	.+2      	; 0x380 <__vector_9+0x9e>
 37e:	e7 c2       	rjmp	.+1486   	; 0x94e <__stack+0x4f>
			{		
			//prepareSetDAC(0,chan);
			//setDAC();
		
			}
			else if(event_cnt==(dT+1))
 380:	01 96       	adiw	r24, 0x01	; 1
 382:	28 17       	cp	r18, r24
 384:	39 07       	cpc	r19, r25
 386:	09 f4       	brne	.+2      	; 0x38a <__vector_9+0xa8>
 388:	c0 c2       	rjmp	.+1408   	; 0x90a <__stack+0xb>
				ADCSRA |= (1 << ADSC); 

			else if(event_cnt==dTt2)
 38a:	80 91 0e 01 	lds	r24, 0x010E
 38e:	90 e0       	ldi	r25, 0x00	; 0
 390:	28 17       	cp	r18, r24
 392:	39 07       	cpc	r19, r25
 394:	09 f0       	breq	.+2      	; 0x398 <__vector_9+0xb6>
 396:	db c2       	rjmp	.+1462   	; 0x94e <__stack+0x4f>
			{
			if ( ( UCSR0A & (1<<UDRE0)) )			
 398:	80 91 c0 00 	lds	r24, 0x00C0
 39c:	85 ff       	sbrs	r24, 5
 39e:	04 c0       	rjmp	.+8      	; 0x3a8 <__vector_9+0xc6>
				UDR0=_adc;	
 3a0:	80 91 4c 01 	lds	r24, 0x014C
 3a4:	80 93 c6 00 	sts	0x00C6, r24
			accum=0;
 3a8:	10 92 4a 01 	sts	0x014A, r1
 3ac:	10 92 49 01 	sts	0x0149, r1
			ADC_on=0;
 3b0:	10 92 39 01 	sts	0x0139, r1
			accum_cnt=0;			
 3b4:	10 92 40 01 	sts	0x0140, r1
 3b8:	ca c2       	rjmp	.+1428   	; 0x94e <__stack+0x4f>
			//setDAC();

			}		

		}
		else if(MD==VAC)
 3ba:	61 30       	cpi	r22, 0x01	; 1
 3bc:	09 f0       	breq	.+2      	; 0x3c0 <__vector_9+0xde>
 3be:	86 c0       	rjmp	.+268    	; 0x4cc <__vector_9+0x1ea>
		{			
			static int i=0;
			i++;						
 3c0:	80 91 37 01 	lds	r24, 0x0137
 3c4:	90 91 38 01 	lds	r25, 0x0138
 3c8:	01 96       	adiw	r24, 0x01	; 1
 3ca:	90 93 38 01 	sts	0x0138, r25
 3ce:	80 93 37 01 	sts	0x0137, r24
			
			switch(UDP_cnt)
 3d2:	80 91 52 01 	lds	r24, 0x0152
 3d6:	82 30       	cpi	r24, 0x02	; 2
 3d8:	41 f1       	breq	.+80     	; 0x42a <__vector_9+0x148>
 3da:	83 30       	cpi	r24, 0x03	; 3
 3dc:	30 f4       	brcc	.+12     	; 0x3ea <__vector_9+0x108>
 3de:	88 23       	and	r24, r24
 3e0:	51 f0       	breq	.+20     	; 0x3f6 <__vector_9+0x114>
 3e2:	81 30       	cpi	r24, 0x01	; 1
 3e4:	09 f0       	breq	.+2      	; 0x3e8 <__vector_9+0x106>
 3e6:	69 c0       	rjmp	.+210    	; 0x4ba <__vector_9+0x1d8>
 3e8:	0d c0       	rjmp	.+26     	; 0x404 <__vector_9+0x122>
 3ea:	83 30       	cpi	r24, 0x03	; 3
 3ec:	19 f1       	breq	.+70     	; 0x434 <__vector_9+0x152>
 3ee:	84 30       	cpi	r24, 0x04	; 4
 3f0:	09 f0       	breq	.+2      	; 0x3f4 <__vector_9+0x112>
 3f2:	63 c0       	rjmp	.+198    	; 0x4ba <__vector_9+0x1d8>
 3f4:	60 c0       	rjmp	.+192    	; 0x4b6 <__vector_9+0x1d4>
			{
				case 0:					
				 ADCSRA |= (1 << ADSC); 
 3f6:	80 91 7a 00 	lds	r24, 0x007A
 3fa:	80 64       	ori	r24, 0x40	; 64
 3fc:	80 93 7a 00 	sts	0x007A, r24
				UDR0=255;
 400:	8f ef       	ldi	r24, 0xFF	; 255
 402:	15 c0       	rjmp	.+42     	; 0x42e <__vector_9+0x14c>
				break;
				
				
				
				case 1:	
				ADCL__=	ADCL_;
 404:	80 91 44 01 	lds	r24, 0x0144
 408:	80 93 41 01 	sts	0x0141, r24
				ADCH__ = ADCH_;
 40c:	80 91 48 01 	lds	r24, 0x0148
 410:	80 93 3c 01 	sts	0x013C, r24
				ADCL_=ADCL;
 414:	90 91 78 00 	lds	r25, 0x0078
 418:	90 93 44 01 	sts	0x0144, r25
				ADCH_=ADCH;
 41c:	80 91 79 00 	lds	r24, 0x0079
 420:	80 93 48 01 	sts	0x0148, r24
				
				UDR0=ADCL_;
 424:	90 93 c6 00 	sts	0x00C6, r25
 428:	48 c0       	rjmp	.+144    	; 0x4ba <__vector_9+0x1d8>
				break;
				
				case 2:
				UDR0=ADCH_;
 42a:	80 91 48 01 	lds	r24, 0x0148
 42e:	80 93 c6 00 	sts	0x00C6, r24
 432:	43 c0       	rjmp	.+134    	; 0x4ba <__vector_9+0x1d8>
				
				
				case 3:
								
					//VAC16_HH=VAC16_H;
					VAC16_H=VAC16;
 434:	20 91 15 01 	lds	r18, 0x0115
 438:	30 91 16 01 	lds	r19, 0x0116
 43c:	30 93 18 01 	sts	0x0118, r19
 440:	20 93 17 01 	sts	0x0117, r18
					
					if(pos_phase)
 444:	80 91 0f 01 	lds	r24, 0x010F
 448:	88 23       	and	r24, r24
 44a:	81 f0       	breq	.+32     	; 0x46c <__vector_9+0x18a>
					{
								//PORTC=0b00000010;
			//PORTB=0b00011111;
			//PORTD=0b11101100;
						VAC16+=32;
 44c:	20 5e       	subi	r18, 0xE0	; 224
 44e:	3f 4f       	sbci	r19, 0xFF	; 255
 450:	30 93 16 01 	sts	0x0116, r19
 454:	20 93 15 01 	sts	0x0115, r18
						if(VAC16>(ref16-1))
 458:	80 91 1f 01 	lds	r24, 0x011F
 45c:	90 91 20 01 	lds	r25, 0x0120
 460:	28 17       	cp	r18, r24
 462:	39 07       	cpc	r19, r25
 464:	b4 f0       	brlt	.+44     	; 0x492 <__vector_9+0x1b0>
						{
						pos_phase=0;				
 466:	10 92 0f 01 	sts	0x010F, r1
 46a:	13 c0       	rjmp	.+38     	; 0x492 <__vector_9+0x1b0>
					else
					{
						//PORTB=0;
			//PORTC=0;
			//PORTD=0;
						VAC16-=32;
 46c:	c9 01       	movw	r24, r18
 46e:	80 97       	sbiw	r24, 0x20	; 32
 470:	90 93 16 01 	sts	0x0116, r25
 474:	80 93 15 01 	sts	0x0115, r24
						if(VAC16<(-x16+1))
 478:	21 e0       	ldi	r18, 0x01	; 1
 47a:	30 e0       	ldi	r19, 0x00	; 0
 47c:	40 91 1d 01 	lds	r20, 0x011D
 480:	50 91 1e 01 	lds	r21, 0x011E
 484:	24 1b       	sub	r18, r20
 486:	35 0b       	sbc	r19, r21
 488:	82 17       	cp	r24, r18
 48a:	93 07       	cpc	r25, r19
 48c:	14 f4       	brge	.+4      	; 0x492 <__vector_9+0x1b0>
						{
						pos_phase=1;									
 48e:	60 93 0f 01 	sts	0x010F, r22
						}
					}	
					
					
					
					UDR0=VAC16>>4;
 492:	80 91 15 01 	lds	r24, 0x0115
 496:	90 91 16 01 	lds	r25, 0x0116
 49a:	9c 01       	movw	r18, r24
 49c:	b4 e0       	ldi	r27, 0x04	; 4
 49e:	35 95       	asr	r19
 4a0:	27 95       	ror	r18
 4a2:	ba 95       	dec	r27
 4a4:	e1 f7       	brne	.-8      	; 0x49e <__vector_9+0x1bc>
 4a6:	20 93 c6 00 	sts	0x00C6, r18
					prepareSetDAC(VAC16,chan);
 4aa:	60 91 28 01 	lds	r22, 0x0128
 4ae:	0e 94 c8 00 	call	0x190	; 0x190 <prepareSetDAC>

	}
}

void setDAC(){
	PORTD&=~(1<<LDAC);
 4b2:	5a 98       	cbi	0x0b, 2	; 11
	PORTD|=(1<<LDAC);	
 4b4:	5a 9a       	sbi	0x0b, 2	; 11
					//prepareSetDAC(VAC16,5);
					//prepareSetDAC(VAC16,6);
					//prepareSetDAC(VAC16,7);				
					setDAC();
				case 4:
					UDR0=DUMMY_BYTE;	
 4b6:	10 92 c6 00 	sts	0x00C6, r1
				
			}
						
			
			UDP_cnt++;
			UDP_cnt%=5;
 4ba:	80 91 52 01 	lds	r24, 0x0152
 4be:	8f 5f       	subi	r24, 0xFF	; 255
 4c0:	65 e0       	ldi	r22, 0x05	; 5
 4c2:	0e 94 c3 05 	call	0xb86	; 0xb86 <__udivmodqi4>
 4c6:	90 93 52 01 	sts	0x0152, r25
 4ca:	41 c2       	rjmp	.+1154   	; 0x94e <__stack+0x4f>

			
		}
		else if(MD==PROGRAM)
 4cc:	62 30       	cpi	r22, 0x02	; 2
 4ce:	09 f0       	breq	.+2      	; 0x4d2 <__vector_9+0x1f0>
 4d0:	a3 c0       	rjmp	.+326    	; 0x618 <__vector_9+0x336>
		{
			T=16;
 4d2:	80 e1       	ldi	r24, 0x10	; 16
 4d4:	80 93 43 01 	sts	0x0143, r24
			static uint16_t adc_h;
			
			if(event_cnt==(1))
 4d8:	40 91 3a 01 	lds	r20, 0x013A
 4dc:	50 91 3b 01 	lds	r21, 0x013B
 4e0:	41 30       	cpi	r20, 0x01	; 1
 4e2:	51 05       	cpc	r21, r1
 4e4:	29 f4       	brne	.+10     	; 0x4f0 <__vector_9+0x20e>
			{	
				UDR0=PROGRAM_done;
 4e6:	80 91 27 01 	lds	r24, 0x0127
 4ea:	80 93 c6 00 	sts	0x00C6, r24
 4ee:	77 c0       	rjmp	.+238    	; 0x5de <__vector_9+0x2fc>
			}

			if(event_cnt==(2))//ADC GET 
 4f0:	42 30       	cpi	r20, 0x02	; 2
 4f2:	51 05       	cpc	r21, r1
 4f4:	59 f4       	brne	.+22     	; 0x50c <__vector_9+0x22a>
			{	
				ADCL_=ADCL;	
 4f6:	90 91 78 00 	lds	r25, 0x0078
 4fa:	90 93 44 01 	sts	0x0144, r25
				ADCH_=ADCH;
 4fe:	80 91 79 00 	lds	r24, 0x0079
 502:	80 93 48 01 	sts	0x0148, r24
				UDR0=ADCL_;
 506:	90 93 c6 00 	sts	0x00C6, r25
 50a:	6d c0       	rjmp	.+218    	; 0x5e6 <__vector_9+0x304>
			}
			
			if(event_cnt==(3))//ADC GET CONTINUE
 50c:	43 30       	cpi	r20, 0x03	; 3
 50e:	51 05       	cpc	r21, r1
 510:	31 f5       	brne	.+76     	; 0x55e <__vector_9+0x27c>
			{	
				
				UDR0=ADCH_;
 512:	80 91 48 01 	lds	r24, 0x0148
 516:	80 93 c6 00 	sts	0x00C6, r24
				
				_adc=(ADCL_|(ADCH_ <<8));
 51a:	38 2f       	mov	r19, r24
 51c:	20 e0       	ldi	r18, 0x00	; 0
 51e:	80 91 44 01 	lds	r24, 0x0144
 522:	90 e0       	ldi	r25, 0x00	; 0
 524:	82 2b       	or	r24, r18
 526:	93 2b       	or	r25, r19
 528:	90 93 4d 01 	sts	0x014D, r25
 52c:	80 93 4c 01 	sts	0x014C, r24
				adc_h=((uint16_t)(512)-_adc);
 530:	20 e0       	ldi	r18, 0x00	; 0
 532:	32 e0       	ldi	r19, 0x02	; 2
 534:	28 1b       	sub	r18, r24
 536:	39 0b       	sbc	r19, r25
 538:	30 93 36 01 	sts	0x0136, r19
 53c:	20 93 35 01 	sts	0x0135, r18
				
				if((adc_h)==(uint16_t)(t1))
 540:	80 91 0c 01 	lds	r24, 0x010C
 544:	90 e0       	ldi	r25, 0x00	; 0
 546:	28 17       	cp	r18, r24
 548:	39 07       	cpc	r19, r25
 54a:	09 f0       	breq	.+2      	; 0x54e <__vector_9+0x26c>
 54c:	48 c0       	rjmp	.+144    	; 0x5de <__vector_9+0x2fc>
				{
					PROGRAM_done=1;
 54e:	81 e0       	ldi	r24, 0x01	; 1
 550:	80 93 27 01 	sts	0x0127, r24
					prog_val=0;
 554:	10 92 1c 01 	sts	0x011C, r1
 558:	10 92 1b 01 	sts	0x011B, r1
 55c:	4c c0       	rjmp	.+152    	; 0x5f6 <__vector_9+0x314>
				}
			}
			
			if(event_cnt==0)
 55e:	41 15       	cp	r20, r1
 560:	51 05       	cpc	r21, r1
 562:	e9 f5       	brne	.+122    	; 0x5de <__vector_9+0x2fc>
			{
				UDR0=255;
 564:	8f ef       	ldi	r24, 0xFF	; 255
 566:	80 93 c6 00 	sts	0x00C6, r24
				
				
				prog_val+=32;
 56a:	20 91 1b 01 	lds	r18, 0x011B
 56e:	30 91 1c 01 	lds	r19, 0x011C
 572:	20 5e       	subi	r18, 0xE0	; 224
 574:	3f 4f       	sbci	r19, 0xFF	; 255
 576:	30 93 1c 01 	sts	0x011C, r19
 57a:	20 93 1b 01 	sts	0x011B, r18
				
				if(prog_val==(-x16+32))
 57e:	40 91 1d 01 	lds	r20, 0x011D
 582:	50 91 1e 01 	lds	r21, 0x011E
 586:	80 e2       	ldi	r24, 0x20	; 32
 588:	90 e0       	ldi	r25, 0x00	; 0
 58a:	84 1b       	sub	r24, r20
 58c:	95 0b       	sbc	r25, r21
 58e:	28 17       	cp	r18, r24
 590:	39 07       	cpc	r19, r25
 592:	29 f4       	brne	.+10     	; 0x59e <__vector_9+0x2bc>
					prog_val=0;
 594:	10 92 1c 01 	sts	0x011C, r1
 598:	10 92 1b 01 	sts	0x011B, r1
 59c:	13 c0       	rjmp	.+38     	; 0x5c4 <__vector_9+0x2e2>
				else
				if(prog_val>(t2<<4))
 59e:	80 91 0d 01 	lds	r24, 0x010D
 5a2:	90 e0       	ldi	r25, 0x00	; 0
 5a4:	a4 e0       	ldi	r26, 0x04	; 4
 5a6:	88 0f       	add	r24, r24
 5a8:	99 1f       	adc	r25, r25
 5aa:	aa 95       	dec	r26
 5ac:	e1 f7       	brne	.-8      	; 0x5a6 <__vector_9+0x2c4>
 5ae:	82 17       	cp	r24, r18
 5b0:	93 07       	cpc	r25, r19
 5b2:	44 f4       	brge	.+16     	; 0x5c4 <__vector_9+0x2e2>
					prog_val=-x16;
 5b4:	88 27       	eor	r24, r24
 5b6:	99 27       	eor	r25, r25
 5b8:	84 1b       	sub	r24, r20
 5ba:	95 0b       	sbc	r25, r21
 5bc:	90 93 1c 01 	sts	0x011C, r25
 5c0:	80 93 1b 01 	sts	0x011B, r24
				
				if(PROGRAM_done)
 5c4:	80 91 27 01 	lds	r24, 0x0127
 5c8:	88 23       	and	r24, r24
 5ca:	21 f0       	breq	.+8      	; 0x5d4 <__vector_9+0x2f2>
					prog_val=0;
 5cc:	10 92 1c 01 	sts	0x011C, r1
 5d0:	10 92 1b 01 	sts	0x011B, r1
				
				prepareSetDAC(prog_val,chan);
 5d4:	80 91 1b 01 	lds	r24, 0x011B
 5d8:	90 91 1c 01 	lds	r25, 0x011C
 5dc:	af c0       	rjmp	.+350    	; 0x73c <__vector_9+0x45a>
				setDAC();
			}			
			else if(event_cnt==7)//t1
 5de:	47 30       	cpi	r20, 0x07	; 7
 5e0:	51 05       	cpc	r21, r1
 5e2:	09 f4       	brne	.+2      	; 0x5e6 <__vector_9+0x304>
 5e4:	a9 c0       	rjmp	.+338    	; 0x738 <__vector_9+0x456>
			{
				prepareSetDAC(0,chan);
				setDAC();
			}
			else if(event_cnt==9)//dT
 5e6:	49 30       	cpi	r20, 0x09	; 9
 5e8:	51 05       	cpc	r21, r1
 5ea:	29 f4       	brne	.+10     	; 0x5f6 <__vector_9+0x314>
			{		
				prepareSetDAC(ref16,chan);
 5ec:	80 91 1f 01 	lds	r24, 0x011F
 5f0:	90 91 20 01 	lds	r25, 0x0120
 5f4:	a3 c0       	rjmp	.+326    	; 0x73c <__vector_9+0x45a>
				setDAC();
			}
			else if(event_cnt==(9+1))
 5f6:	4a 30       	cpi	r20, 0x0A	; 10
 5f8:	51 05       	cpc	r21, r1
 5fa:	09 f4       	brne	.+2      	; 0x5fe <__vector_9+0x31c>
 5fc:	86 c1       	rjmp	.+780    	; 0x90a <__stack+0xb>
				ADCSRA |= (1 << ADSC); 

			else if(event_cnt==14)//
 5fe:	4e 30       	cpi	r20, 0x0E	; 14
 600:	51 05       	cpc	r21, r1
 602:	09 f0       	breq	.+2      	; 0x606 <__vector_9+0x324>
 604:	a4 c1       	rjmp	.+840    	; 0x94e <__stack+0x4f>
			{
				accum=0;
 606:	10 92 4a 01 	sts	0x014A, r1
 60a:	10 92 49 01 	sts	0x0149, r1
				ADC_on=0;
 60e:	10 92 39 01 	sts	0x0139, r1
				accum_cnt=0;
 612:	10 92 40 01 	sts	0x0140, r1
 616:	90 c0       	rjmp	.+288    	; 0x738 <__vector_9+0x456>
				
				prepareSetDAC(0,chan);
				setDAC();
			}
		}
		else if(MD == ONE_SHOT)
 618:	65 30       	cpi	r22, 0x05	; 5
 61a:	09 f0       	breq	.+2      	; 0x61e <__vector_9+0x33c>
 61c:	75 c0       	rjmp	.+234    	; 0x708 <__vector_9+0x426>
		{
			//готовим reset
				if(event_cnt==1){
 61e:	80 91 3a 01 	lds	r24, 0x013A
 622:	90 91 3b 01 	lds	r25, 0x013B
 626:	81 30       	cpi	r24, 0x01	; 1
 628:	91 05       	cpc	r25, r1
 62a:	b1 f1       	breq	.+108    	; 0x698 <__vector_9+0x3b6>
				separMult();
			}//resetting
			else if(event_cnt==2)
 62c:	82 30       	cpi	r24, 0x02	; 2
 62e:	91 05       	cpc	r25, r1
 630:	61 f4       	brne	.+24     	; 0x64a <__vector_9+0x368>
			{
				prepareSetDAC(reset16,CHAN_4);
 632:	80 91 21 01 	lds	r24, 0x0121
 636:	90 91 22 01 	lds	r25, 0x0122
 63a:	63 e0       	ldi	r22, 0x03	; 3
 63c:	0e 94 c8 00 	call	0x190	; 0x190 <prepareSetDAC>
				prepareSetDAC(reset16,CHAN_3);
 640:	80 91 21 01 	lds	r24, 0x0121
 644:	90 91 22 01 	lds	r25, 0x0122
 648:	0a c0       	rjmp	.+20     	; 0x65e <__vector_9+0x37c>
				setDAC();
			}
			else if(event_cnt==3)
 64a:	83 30       	cpi	r24, 0x03	; 3
 64c:	91 05       	cpc	r25, r1
 64e:	49 f4       	brne	.+18     	; 0x662 <__vector_9+0x380>
			{
				prepareSetDAC(0,CHAN_4);
 650:	80 e0       	ldi	r24, 0x00	; 0
 652:	90 e0       	ldi	r25, 0x00	; 0
 654:	63 e0       	ldi	r22, 0x03	; 3
 656:	0e 94 c8 00 	call	0x190	; 0x190 <prepareSetDAC>
				prepareSetDAC(0,CHAN_3);
 65a:	80 e0       	ldi	r24, 0x00	; 0
 65c:	90 e0       	ldi	r25, 0x00	; 0
 65e:	62 e0       	ldi	r22, 0x02	; 2
 660:	6f c0       	rjmp	.+222    	; 0x740 <__vector_9+0x45e>
				setDAC();
			}		//is reset		
			else if(event_cnt==4)
 662:	84 30       	cpi	r24, 0x04	; 4
 664:	91 05       	cpc	r25, r1
 666:	19 f4       	brne	.+6      	; 0x66e <__vector_9+0x38c>
			{
				gatherMult();
 668:	0e 94 7a 00 	call	0xf4	; 0xf4 <gatherMult>
 66c:	70 c1       	rjmp	.+736    	; 0x94e <__stack+0x4f>
			}
			else if(event_cnt==5)
 66e:	85 30       	cpi	r24, 0x05	; 5
 670:	91 05       	cpc	r25, r1
 672:	29 f4       	brne	.+10     	; 0x67e <__vector_9+0x39c>
			{
				prepareSetDAC(x16,CHAN_4);				
 674:	80 91 1d 01 	lds	r24, 0x011D
 678:	90 91 1e 01 	lds	r25, 0x011E
 67c:	05 c0       	rjmp	.+10     	; 0x688 <__vector_9+0x3a6>
				setDAC();
			}		
			else if(event_cnt==6)
 67e:	86 30       	cpi	r24, 0x06	; 6
 680:	91 05       	cpc	r25, r1
 682:	21 f4       	brne	.+8      	; 0x68c <__vector_9+0x3aa>
			{
				prepareSetDAC(0,CHAN_4);				
 684:	80 e0       	ldi	r24, 0x00	; 0
 686:	90 e0       	ldi	r25, 0x00	; 0
 688:	63 e0       	ldi	r22, 0x03	; 3
 68a:	5a c0       	rjmp	.+180    	; 0x740 <__vector_9+0x45e>
				setDAC();
			}	
			
			//пнули		
			//посмотрим, что вышло
			else if(event_cnt==7)
 68c:	87 30       	cpi	r24, 0x07	; 7
 68e:	91 05       	cpc	r25, r1
 690:	31 f4       	brne	.+12     	; 0x69e <__vector_9+0x3bc>
			{
				UDR0=255;//1
 692:	8f ef       	ldi	r24, 0xFF	; 255
 694:	80 93 c6 00 	sts	0x00C6, r24
				separMult();				
 698:	0e 94 83 00 	call	0x106	; 0x106 <separMult>
 69c:	58 c1       	rjmp	.+688    	; 0x94e <__stack+0x4f>
			}			
			else if(event_cnt==8)
 69e:	88 30       	cpi	r24, 0x08	; 8
 6a0:	91 05       	cpc	r25, r1
 6a2:	31 f4       	brne	.+12     	; 0x6b0 <__vector_9+0x3ce>
			{
				prepareSetDAC(ref16,CHAN_4);
 6a4:	80 91 1f 01 	lds	r24, 0x011F
 6a8:	90 91 20 01 	lds	r25, 0x0120
 6ac:	63 e0       	ldi	r22, 0x03	; 3
 6ae:	29 c1       	rjmp	.+594    	; 0x902 <__stack+0x3>
				setDAC();				
				ADCSRA |= (1 << ADSC); 
			}	
			else if(event_cnt==9)
 6b0:	89 30       	cpi	r24, 0x09	; 9
 6b2:	91 05       	cpc	r25, r1
 6b4:	09 f4       	brne	.+2      	; 0x6b8 <__vector_9+0x3d6>
 6b6:	3a c1       	rjmp	.+628    	; 0x92c <__stack+0x2d>
				//prepareSetDAC(ref16,3);
				ADCL_=ADCL;	
				ADCH_=ADCH;
				UDR0=ADCL_;//2
			}
			else if(event_cnt==10)
 6b8:	8a 30       	cpi	r24, 0x0A	; 10
 6ba:	91 05       	cpc	r25, r1
 6bc:	29 f4       	brne	.+10     	; 0x6c8 <__vector_9+0x3e6>
			{
				UDR0=ADCH_; //3 1st chan
 6be:	80 91 48 01 	lds	r24, 0x0148
 6c2:	80 93 c6 00 	sts	0x00C6, r24
 6c6:	de cf       	rjmp	.-68     	; 0x684 <__vector_9+0x3a2>
				
				prepareSetDAC(0,CHAN_4);
				setDAC();
			}		
			//4й просмотрен
			else if(event_cnt==11)
 6c8:	8b 30       	cpi	r24, 0x0B	; 11
 6ca:	91 05       	cpc	r25, r1
 6cc:	31 f4       	brne	.+12     	; 0x6da <__vector_9+0x3f8>
			{				 
				prepareSetDAC(ref16,CHAN_3);
 6ce:	80 91 1f 01 	lds	r24, 0x011F
 6d2:	90 91 20 01 	lds	r25, 0x0120
 6d6:	62 e0       	ldi	r22, 0x02	; 2
 6d8:	14 c1       	rjmp	.+552    	; 0x902 <__stack+0x3>
				setDAC();
				
				ADCSRA |= (1 << ADSC); 
			}
			else if(event_cnt==12)
 6da:	8c 30       	cpi	r24, 0x0C	; 12
 6dc:	91 05       	cpc	r25, r1
 6de:	09 f4       	brne	.+2      	; 0x6e2 <__vector_9+0x400>
 6e0:	25 c1       	rjmp	.+586    	; 0x92c <__stack+0x2d>
			{		
				ADCL_=ADCL;	
				ADCH_=ADCH;
				UDR0=ADCL_; //4
			}
			else if(event_cnt == 13)
 6e2:	0d 97       	sbiw	r24, 0x0d	; 13
 6e4:	09 f0       	breq	.+2      	; 0x6e8 <__vector_9+0x406>
 6e6:	33 c1       	rjmp	.+614    	; 0x94e <__stack+0x4f>
			{
				UDR0=ADCH_; // 5
 6e8:	80 91 48 01 	lds	r24, 0x0148
 6ec:	80 93 c6 00 	sts	0x00C6, r24
				
				prepareSetDAC(0,CHAN_3);
 6f0:	80 e0       	ldi	r24, 0x00	; 0
 6f2:	90 e0       	ldi	r25, 0x00	; 0
 6f4:	62 e0       	ldi	r22, 0x02	; 2
 6f6:	0e 94 c8 00 	call	0x190	; 0x190 <prepareSetDAC>

	}
}

void setDAC(){
	PORTD&=~(1<<LDAC);
 6fa:	5a 98       	cbi	0x0b, 2	; 11
	PORTD|=(1<<LDAC);	
 6fc:	5a 9a       	sbi	0x0b, 2	; 11
			{
				UDR0=ADCH_; // 5
				
				prepareSetDAC(0,CHAN_3);
				setDAC();
				event_cnt=0;	
 6fe:	10 92 3b 01 	sts	0x013B, r1
 702:	10 92 3a 01 	sts	0x013A, r1
 706:	23 c1       	rjmp	.+582    	; 0x94e <__stack+0x4f>
			}
			
		}
		
		
		else if(MD == ANALYZE)//5 by 5
 708:	66 30       	cpi	r22, 0x06	; 6
 70a:	09 f0       	breq	.+2      	; 0x70e <__vector_9+0x42c>
 70c:	20 c1       	rjmp	.+576    	; 0x94e <__stack+0x4f>
		{
			//reset
			if(event_cnt==0)
 70e:	80 91 3a 01 	lds	r24, 0x013A
 712:	90 91 3b 01 	lds	r25, 0x013B
 716:	00 97       	sbiw	r24, 0x00	; 0
 718:	61 f4       	brne	.+24     	; 0x732 <__vector_9+0x450>
			{
				prepareSetDAC(reset16, chan);
 71a:	80 91 21 01 	lds	r24, 0x0121
 71e:	90 91 22 01 	lds	r25, 0x0122
 722:	60 91 28 01 	lds	r22, 0x0128
 726:	0e 94 c8 00 	call	0x190	; 0x190 <prepareSetDAC>

	}
}

void setDAC(){
	PORTD&=~(1<<LDAC);
 72a:	5a 98       	cbi	0x0b, 2	; 11
	PORTD|=(1<<LDAC);	
 72c:	5a 9a       	sbi	0x0b, 2	; 11
			//reset
			if(event_cnt==0)
			{
				prepareSetDAC(reset16, chan);
				setDAC();
				UDR0=255;
 72e:	8f ef       	ldi	r24, 0xFF	; 255
 730:	0c c1       	rjmp	.+536    	; 0x94a <__stack+0x4b>
			}
			else if(event_cnt==1)
 732:	81 30       	cpi	r24, 0x01	; 1
 734:	91 05       	cpc	r25, r1
 736:	49 f4       	brne	.+18     	; 0x74a <__vector_9+0x468>
			{
				prepareSetDAC(0, chan);				
 738:	80 e0       	ldi	r24, 0x00	; 0
 73a:	90 e0       	ldi	r25, 0x00	; 0
 73c:	60 91 28 01 	lds	r22, 0x0128
 740:	0e 94 c8 00 	call	0x190	; 0x190 <prepareSetDAC>

	}
}

void setDAC(){
	PORTD&=~(1<<LDAC);
 744:	5a 98       	cbi	0x0b, 2	; 11
	PORTD|=(1<<LDAC);	
 746:	5a 9a       	sbi	0x0b, 2	; 11
 748:	02 c1       	rjmp	.+516    	; 0x94e <__stack+0x4f>
			{
				prepareSetDAC(0, chan);				
				setDAC();
			}
			//create set impulse
			else if(event_cnt==3)
 74a:	83 30       	cpi	r24, 0x03	; 3
 74c:	91 05       	cpc	r25, r1
 74e:	09 f0       	breq	.+2      	; 0x752 <__vector_9+0x470>
 750:	c7 c0       	rjmp	.+398    	; 0x8e0 <__vector_9+0x5fe>
			{
				if(an_cnt<(BIG_STAT_N))
 752:	40 91 29 01 	lds	r20, 0x0129
 756:	50 91 2a 01 	lds	r21, 0x012A
 75a:	20 91 4b 01 	lds	r18, 0x014B
 75e:	82 2f       	mov	r24, r18
 760:	90 e0       	ldi	r25, 0x00	; 0
 762:	48 17       	cp	r20, r24
 764:	59 07       	cpc	r21, r25
 766:	18 f4       	brcc	.+6      	; 0x76e <__vector_9+0x48c>
				{
					STAT_V_step=0;					 
 768:	10 92 25 01 	sts	0x0125, r1
 76c:	23 c0       	rjmp	.+70     	; 0x7b4 <__vector_9+0x4d2>
				}
				else if(an_cnt<(BIG_STAT_N*2))
 76e:	82 2f       	mov	r24, r18
 770:	90 e0       	ldi	r25, 0x00	; 0
 772:	9c 01       	movw	r18, r24
 774:	22 0f       	add	r18, r18
 776:	33 1f       	adc	r19, r19
 778:	42 17       	cp	r20, r18
 77a:	53 07       	cpc	r21, r19
 77c:	10 f4       	brcc	.+4      	; 0x782 <__vector_9+0x4a0>
				{
					STAT_V_step=1;
 77e:	81 e0       	ldi	r24, 0x01	; 1
 780:	17 c0       	rjmp	.+46     	; 0x7b0 <__vector_9+0x4ce>
				}
				else if(an_cnt<(BIG_STAT_N*3))
 782:	28 0f       	add	r18, r24
 784:	39 1f       	adc	r19, r25
 786:	42 17       	cp	r20, r18
 788:	53 07       	cpc	r21, r19
 78a:	10 f4       	brcc	.+4      	; 0x790 <__vector_9+0x4ae>
				{
					STAT_V_step=2;
 78c:	82 e0       	ldi	r24, 0x02	; 2
 78e:	10 c0       	rjmp	.+32     	; 0x7b0 <__vector_9+0x4ce>
				}
				else if(an_cnt<(BIG_STAT_N*4))
 790:	9c 01       	movw	r18, r24
 792:	22 0f       	add	r18, r18
 794:	33 1f       	adc	r19, r19
 796:	22 0f       	add	r18, r18
 798:	33 1f       	adc	r19, r19
 79a:	42 17       	cp	r20, r18
 79c:	53 07       	cpc	r21, r19
 79e:	10 f4       	brcc	.+4      	; 0x7a4 <__vector_9+0x4c2>
				{
					STAT_V_step=3;
 7a0:	83 e0       	ldi	r24, 0x03	; 3
 7a2:	06 c0       	rjmp	.+12     	; 0x7b0 <__vector_9+0x4ce>
				}
				else if(an_cnt<(BIG_STAT_N*5))
 7a4:	28 0f       	add	r18, r24
 7a6:	39 1f       	adc	r19, r25
 7a8:	42 17       	cp	r20, r18
 7aa:	53 07       	cpc	r21, r19
 7ac:	18 f4       	brcc	.+6      	; 0x7b4 <__vector_9+0x4d2>
				{
					STAT_V_step=4;
 7ae:	84 e0       	ldi	r24, 0x04	; 4
 7b0:	80 93 25 01 	sts	0x0125, r24
				}////////////						
				//prepareSetDAC(x16, chan);
				UDR0=STAT_V_step;
 7b4:	80 91 25 01 	lds	r24, 0x0125
 7b8:	80 93 c6 00 	sts	0x00C6, r24
				x16_grad = (-(STAT_V_step+1)*8 )<<4;//16
 7bc:	90 e0       	ldi	r25, 0x00	; 0
 7be:	80 95       	com	r24
 7c0:	90 95       	com	r25
 7c2:	96 95       	lsr	r25
 7c4:	98 2f       	mov	r25, r24
 7c6:	88 27       	eor	r24, r24
 7c8:	97 95       	ror	r25
 7ca:	87 95       	ror	r24
 7cc:	90 93 4f 01 	sts	0x014F, r25
 7d0:	80 93 4e 01 	sts	0x014E, r24
				prepareSetDAC(x16_grad, chan);
 7d4:	60 91 28 01 	lds	r22, 0x0128
 7d8:	0e 94 c8 00 	call	0x190	; 0x190 <prepareSetDAC>

	}
}

void setDAC(){
	PORTD&=~(1<<LDAC);
 7dc:	5a 98       	cbi	0x0b, 2	; 11
	PORTD|=(1<<LDAC);	
 7de:	5a 9a       	sbi	0x0b, 2	; 11
				x16_grad = (-(STAT_V_step+1)*8 )<<4;//16
				prepareSetDAC(x16_grad, chan);
				setDAC();
				
				
				if(an_cnt_fast<(STAT_N))//20 us
 7e0:	40 91 2b 01 	lds	r20, 0x012B
 7e4:	50 91 2c 01 	lds	r21, 0x012C
 7e8:	80 91 02 01 	lds	r24, 0x0102
 7ec:	90 e0       	ldi	r25, 0x00	; 0
 7ee:	48 17       	cp	r20, r24
 7f0:	59 07       	cpc	r21, r25
 7f2:	18 f4       	brcc	.+6      	; 0x7fa <__vector_9+0x518>
				{
					STAT_dt_step=0;									
 7f4:	10 92 24 01 	sts	0x0124, r1
 7f8:	49 c0       	rjmp	.+146    	; 0x88c <__vector_9+0x5aa>
				}
				else if(an_cnt_fast<(STAT_N*2))//80 us
 7fa:	9c 01       	movw	r18, r24
 7fc:	22 0f       	add	r18, r18
 7fe:	33 1f       	adc	r19, r19
 800:	42 17       	cp	r20, r18
 802:	53 07       	cpc	r21, r19
 804:	60 f4       	brcc	.+24     	; 0x81e <__vector_9+0x53c>
				{
					STAT_dt_step=1;
 806:	81 e0       	ldi	r24, 0x01	; 1
 808:	80 93 24 01 	sts	0x0124, r24
 80c:	80 e0       	ldi	r24, 0x00	; 0
 80e:	90 e0       	ldi	r25, 0x00	; 0

	}
}

void setDAC(){
	PORTD&=~(1<<LDAC);
 810:	5a 98       	cbi	0x0b, 2	; 11
	PORTD|=(1<<LDAC);	
 812:	5a 9a       	sbi	0x0b, 2	; 11
					STAT_dt_step=0;									
				}
				else if(an_cnt_fast<(STAT_N*2))//80 us
				{
					STAT_dt_step=1;
					for(int i=0;i<40;i++)//28
 814:	01 96       	adiw	r24, 0x01	; 1
 816:	88 32       	cpi	r24, 0x28	; 40
 818:	91 05       	cpc	r25, r1
 81a:	d1 f7       	brne	.-12     	; 0x810 <__vector_9+0x52e>
 81c:	37 c0       	rjmp	.+110    	; 0x88c <__vector_9+0x5aa>
					{
					setDAC();
					}
				}
				else if(an_cnt_fast<(STAT_N*3))//220 us
 81e:	28 0f       	add	r18, r24
 820:	39 1f       	adc	r19, r25
 822:	42 17       	cp	r20, r18
 824:	53 07       	cpc	r21, r19
 826:	60 f4       	brcc	.+24     	; 0x840 <__vector_9+0x55e>
				{
					STAT_dt_step=2;
 828:	82 e0       	ldi	r24, 0x02	; 2
 82a:	80 93 24 01 	sts	0x0124, r24
 82e:	80 e0       	ldi	r24, 0x00	; 0
 830:	90 e0       	ldi	r25, 0x00	; 0

	}
}

void setDAC(){
	PORTD&=~(1<<LDAC);
 832:	5a 98       	cbi	0x0b, 2	; 11
	PORTD|=(1<<LDAC);	
 834:	5a 9a       	sbi	0x0b, 2	; 11
					}
				}
				else if(an_cnt_fast<(STAT_N*3))//220 us
				{
					STAT_dt_step=2;
					for(int i=0;i<160;i++)
 836:	01 96       	adiw	r24, 0x01	; 1
 838:	80 3a       	cpi	r24, 0xA0	; 160
 83a:	91 05       	cpc	r25, r1
 83c:	d1 f7       	brne	.-12     	; 0x832 <__vector_9+0x550>
 83e:	26 c0       	rjmp	.+76     	; 0x88c <__vector_9+0x5aa>
					{
					setDAC();
					}
				}
				else if(an_cnt_fast<(STAT_N*4))//900 us
 840:	88 0f       	add	r24, r24
 842:	99 1f       	adc	r25, r25
 844:	88 0f       	add	r24, r24
 846:	99 1f       	adc	r25, r25
 848:	48 17       	cp	r20, r24
 84a:	59 07       	cpc	r21, r25
 84c:	68 f4       	brcc	.+26     	; 0x868 <__vector_9+0x586>
				{
					STAT_dt_step=3;
 84e:	83 e0       	ldi	r24, 0x03	; 3
 850:	80 93 24 01 	sts	0x0124, r24
 854:	80 e0       	ldi	r24, 0x00	; 0
 856:	90 e0       	ldi	r25, 0x00	; 0

	}
}

void setDAC(){
	PORTD&=~(1<<LDAC);
 858:	5a 98       	cbi	0x0b, 2	; 11
	PORTD|=(1<<LDAC);	
 85a:	5a 9a       	sbi	0x0b, 2	; 11
					}
				}
				else if(an_cnt_fast<(STAT_N*4))//900 us
				{
					STAT_dt_step=3;
					for(int i=0;i<640;i++)
 85c:	01 96       	adiw	r24, 0x01	; 1
 85e:	22 e0       	ldi	r18, 0x02	; 2
 860:	80 38       	cpi	r24, 0x80	; 128
 862:	92 07       	cpc	r25, r18
 864:	c9 f7       	brne	.-14     	; 0x858 <__vector_9+0x576>
 866:	12 c0       	rjmp	.+36     	; 0x88c <__vector_9+0x5aa>
					{
					setDAC();
					}
				}
				else if(an_cnt_fast<(BIG_STAT_N))//3.5 ms
 868:	80 91 4b 01 	lds	r24, 0x014B
 86c:	90 e0       	ldi	r25, 0x00	; 0
 86e:	48 17       	cp	r20, r24
 870:	59 07       	cpc	r21, r25
 872:	60 f4       	brcc	.+24     	; 0x88c <__vector_9+0x5aa>
				{
					STAT_dt_step=4;
 874:	84 e0       	ldi	r24, 0x04	; 4
 876:	80 93 24 01 	sts	0x0124, r24
 87a:	80 e0       	ldi	r24, 0x00	; 0
 87c:	90 e0       	ldi	r25, 0x00	; 0

	}
}

void setDAC(){
	PORTD&=~(1<<LDAC);
 87e:	5a 98       	cbi	0x0b, 2	; 11
	PORTD|=(1<<LDAC);	
 880:	5a 9a       	sbi	0x0b, 2	; 11
					}
				}
				else if(an_cnt_fast<(BIG_STAT_N))//3.5 ms
				{
					STAT_dt_step=4;
					for(int i=0;i<2560;i++)
 882:	01 96       	adiw	r24, 0x01	; 1
 884:	2a e0       	ldi	r18, 0x0A	; 10
 886:	80 30       	cpi	r24, 0x00	; 0
 888:	92 07       	cpc	r25, r18
 88a:	c9 f7       	brne	.-14     	; 0x87e <__vector_9+0x59c>
					setDAC();
					}
				}////////////////
									
				
				prepareResetDAC(chan);
 88c:	80 91 28 01 	lds	r24, 0x0128
 890:	0e 94 91 00 	call	0x122	; 0x122 <prepareResetDAC>

	}
}

void setDAC(){
	PORTD&=~(1<<LDAC);
 894:	5a 98       	cbi	0x0b, 2	; 11
	PORTD|=(1<<LDAC);	
 896:	5a 9a       	sbi	0x0b, 2	; 11
									
				
				prepareResetDAC(chan);
				setDAC();			
				
				an_cnt++; // upper				
 898:	80 91 29 01 	lds	r24, 0x0129
 89c:	90 91 2a 01 	lds	r25, 0x012A
 8a0:	01 96       	adiw	r24, 0x01	; 1
 8a2:	90 93 2a 01 	sts	0x012A, r25
 8a6:	80 93 29 01 	sts	0x0129, r24
				if(an_cnt>(BIG_STAT_N*5)) an_cnt=0; // lower
 8aa:	20 91 4b 01 	lds	r18, 0x014B
 8ae:	45 e0       	ldi	r20, 0x05	; 5
 8b0:	24 9f       	mul	r18, r20
 8b2:	90 01       	movw	r18, r0
 8b4:	11 24       	eor	r1, r1
 8b6:	28 17       	cp	r18, r24
 8b8:	39 07       	cpc	r19, r25
 8ba:	20 f4       	brcc	.+8      	; 0x8c4 <__vector_9+0x5e2>
 8bc:	10 92 2a 01 	sts	0x012A, r1
 8c0:	10 92 29 01 	sts	0x0129, r1
				
				an_cnt_fast = an_cnt%BIG_STAT_N;
 8c4:	60 91 4b 01 	lds	r22, 0x014B
 8c8:	80 91 29 01 	lds	r24, 0x0129
 8cc:	90 91 2a 01 	lds	r25, 0x012A
 8d0:	70 e0       	ldi	r23, 0x00	; 0
 8d2:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__udivmodhi4>
 8d6:	90 93 2c 01 	sts	0x012C, r25
 8da:	80 93 2b 01 	sts	0x012B, r24
 8de:	37 c0       	rjmp	.+110    	; 0x94e <__stack+0x4f>
			}
			else if(event_cnt==4)
 8e0:	84 30       	cpi	r24, 0x04	; 4
 8e2:	91 05       	cpc	r25, r1
 8e4:	29 f4       	brne	.+10     	; 0x8f0 <__vector_9+0x60e>
			{
				UDR0=STAT_dt_step;
 8e6:	80 91 24 01 	lds	r24, 0x0124
 8ea:	80 93 c6 00 	sts	0x00C6, r24
 8ee:	24 cf       	rjmp	.-440    	; 0x738 <__vector_9+0x456>
				prepareSetDAC(0, chan);
				setDAC();
			}
			else if(event_cnt==6)//start measure
 8f0:	86 30       	cpi	r24, 0x06	; 6
 8f2:	91 05       	cpc	r25, r1
 8f4:	81 f4       	brne	.+32     	; 0x916 <__stack+0x17>
			{
				prepareSetDAC(ref16, chan);
 8f6:	80 91 1f 01 	lds	r24, 0x011F
 8fa:	90 91 20 01 	lds	r25, 0x0120
 8fe:	60 91 28 01 	lds	r22, 0x0128
 902:	0e 94 c8 00 	call	0x190	; 0x190 <prepareSetDAC>

	}
}

void setDAC(){
	PORTD&=~(1<<LDAC);
 906:	5a 98       	cbi	0x0b, 2	; 11
	PORTD|=(1<<LDAC);	
 908:	5a 9a       	sbi	0x0b, 2	; 11
			}
			else if(event_cnt==6)//start measure
			{
				prepareSetDAC(ref16, chan);
				setDAC();
				ADCSRA |= (1 << ADSC); 
 90a:	80 91 7a 00 	lds	r24, 0x007A
 90e:	80 64       	ori	r24, 0x40	; 64
 910:	80 93 7a 00 	sts	0x007A, r24
 914:	1c c0       	rjmp	.+56     	; 0x94e <__stack+0x4f>
				
			}
			else if(event_cnt==7)
 916:	87 30       	cpi	r24, 0x07	; 7
 918:	91 05       	cpc	r25, r1
 91a:	99 f4       	brne	.+38     	; 0x942 <__stack+0x43>
			{
				prepareSetDAC(0, chan);
 91c:	80 e0       	ldi	r24, 0x00	; 0
 91e:	90 e0       	ldi	r25, 0x00	; 0
 920:	60 91 28 01 	lds	r22, 0x0128
 924:	0e 94 c8 00 	call	0x190	; 0x190 <prepareSetDAC>

	}
}

void setDAC(){
	PORTD&=~(1<<LDAC);
 928:	5a 98       	cbi	0x0b, 2	; 11
	PORTD|=(1<<LDAC);	
 92a:	5a 9a       	sbi	0x0b, 2	; 11
			else if(event_cnt==7)
			{
				prepareSetDAC(0, chan);
				setDAC();
				
				ADCL_=ADCL;	
 92c:	90 91 78 00 	lds	r25, 0x0078
 930:	90 93 44 01 	sts	0x0144, r25
				ADCH_=ADCH;
 934:	80 91 79 00 	lds	r24, 0x0079
 938:	80 93 48 01 	sts	0x0148, r24
				UDR0=ADCL_;
 93c:	90 93 c6 00 	sts	0x00C6, r25
 940:	06 c0       	rjmp	.+12     	; 0x94e <__stack+0x4f>
			}
			else if(event_cnt==8)
 942:	08 97       	sbiw	r24, 0x08	; 8
 944:	21 f4       	brne	.+8      	; 0x94e <__stack+0x4f>
			{
				UDR0=ADCH_;
 946:	80 91 48 01 	lds	r24, 0x0148
 94a:	80 93 c6 00 	sts	0x00C6, r24
		}
		
		
		
		
		ctr=0;
 94e:	10 92 3f 01 	sts	0x013F, r1
 952:	10 92 3e 01 	sts	0x013E, r1
		
		
		if(MD!=ONE_SHOT)
 956:	80 91 14 01 	lds	r24, 0x0114
 95a:	20 91 3a 01 	lds	r18, 0x013A
 95e:	30 91 3b 01 	lds	r19, 0x013B
 962:	85 30       	cpi	r24, 0x05	; 5
 964:	89 f0       	breq	.+34     	; 0x988 <__stack+0x89>
		{
		event_cnt++;
 966:	2f 5f       	subi	r18, 0xFF	; 255
 968:	3f 4f       	sbci	r19, 0xFF	; 255
 96a:	30 93 3b 01 	sts	0x013B, r19
 96e:	20 93 3a 01 	sts	0x013A, r18
		if(event_cnt>T)
 972:	80 91 43 01 	lds	r24, 0x0143
 976:	90 e0       	ldi	r25, 0x00	; 0
 978:	82 17       	cp	r24, r18
 97a:	93 07       	cpc	r25, r19
 97c:	74 f4       	brge	.+28     	; 0x99a <__stack+0x9b>
			event_cnt=0;
 97e:	10 92 3b 01 	sts	0x013B, r1
 982:	10 92 3a 01 	sts	0x013A, r1
 986:	09 c0       	rjmp	.+18     	; 0x99a <__stack+0x9b>
		}
		else
		{
			if(event_cnt<16)
 988:	20 31       	cpi	r18, 0x10	; 16
 98a:	31 05       	cpc	r19, r1
 98c:	34 f4       	brge	.+12     	; 0x99a <__stack+0x9b>
				event_cnt++;			
 98e:	2f 5f       	subi	r18, 0xFF	; 255
 990:	3f 4f       	sbci	r19, 0xFF	; 255
 992:	30 93 3b 01 	sts	0x013B, r19
 996:	20 93 3a 01 	sts	0x013A, r18
		}
	}
	ctr++;
 99a:	80 91 3e 01 	lds	r24, 0x013E
 99e:	90 91 3f 01 	lds	r25, 0x013F
 9a2:	01 96       	adiw	r24, 0x01	; 1
 9a4:	90 93 3f 01 	sts	0x013F, r25
 9a8:	80 93 3e 01 	sts	0x013E, r24
}
 9ac:	ff 91       	pop	r31
 9ae:	ef 91       	pop	r30
 9b0:	bf 91       	pop	r27
 9b2:	af 91       	pop	r26
 9b4:	9f 91       	pop	r25
 9b6:	8f 91       	pop	r24
 9b8:	7f 91       	pop	r23
 9ba:	6f 91       	pop	r22
 9bc:	5f 91       	pop	r21
 9be:	4f 91       	pop	r20
 9c0:	3f 91       	pop	r19
 9c2:	2f 91       	pop	r18
 9c4:	0f 90       	pop	r0
 9c6:	0f be       	out	0x3f, r0	; 63
 9c8:	0f 90       	pop	r0
 9ca:	1f 90       	pop	r1
 9cc:	18 95       	reti

000009ce <__vector_18>:

//прием команд от компьютера по UART в зависимости от режима
ISR(USART_RX_vect)
{
 9ce:	1f 92       	push	r1
 9d0:	0f 92       	push	r0
 9d2:	0f b6       	in	r0, 0x3f	; 63
 9d4:	0f 92       	push	r0
 9d6:	11 24       	eor	r1, r1
 9d8:	2f 93       	push	r18
 9da:	3f 93       	push	r19
 9dc:	4f 93       	push	r20
 9de:	5f 93       	push	r21
 9e0:	6f 93       	push	r22
 9e2:	7f 93       	push	r23
 9e4:	8f 93       	push	r24
 9e6:	9f 93       	push	r25
 9e8:	af 93       	push	r26
 9ea:	bf 93       	push	r27
 9ec:	ef 93       	push	r30
 9ee:	ff 93       	push	r31
	switch(ptr)
 9f0:	80 91 26 01 	lds	r24, 0x0126
 9f4:	84 30       	cpi	r24, 0x04	; 4
 9f6:	09 f4       	brne	.+2      	; 0x9fa <__vector_18+0x2c>
 9f8:	69 c0       	rjmp	.+210    	; 0xacc <__vector_18+0xfe>
 9fa:	85 30       	cpi	r24, 0x05	; 5
 9fc:	58 f4       	brcc	.+22     	; 0xa14 <__vector_18+0x46>
 9fe:	81 30       	cpi	r24, 0x01	; 1
 a00:	51 f1       	breq	.+84     	; 0xa56 <__vector_18+0x88>
 a02:	81 30       	cpi	r24, 0x01	; 1
 a04:	d0 f0       	brcs	.+52     	; 0xa3a <__vector_18+0x6c>
 a06:	82 30       	cpi	r24, 0x02	; 2
 a08:	09 f4       	brne	.+2      	; 0xa0c <__vector_18+0x3e>
 a0a:	42 c0       	rjmp	.+132    	; 0xa90 <__vector_18+0xc2>
 a0c:	83 30       	cpi	r24, 0x03	; 3
 a0e:	09 f0       	breq	.+2      	; 0xa12 <__vector_18+0x44>
 a10:	9a c0       	rjmp	.+308    	; 0xb46 <__vector_18+0x178>
 a12:	4f c0       	rjmp	.+158    	; 0xab2 <__vector_18+0xe4>
 a14:	87 30       	cpi	r24, 0x07	; 7
 a16:	09 f4       	brne	.+2      	; 0xa1a <__vector_18+0x4c>
 a18:	79 c0       	rjmp	.+242    	; 0xb0c <__vector_18+0x13e>
 a1a:	88 30       	cpi	r24, 0x08	; 8
 a1c:	38 f4       	brcc	.+14     	; 0xa2c <__vector_18+0x5e>
 a1e:	85 30       	cpi	r24, 0x05	; 5
 a20:	09 f4       	brne	.+2      	; 0xa24 <__vector_18+0x56>
 a22:	6a c0       	rjmp	.+212    	; 0xaf8 <__vector_18+0x12a>
 a24:	86 30       	cpi	r24, 0x06	; 6
 a26:	09 f0       	breq	.+2      	; 0xa2a <__vector_18+0x5c>
 a28:	8e c0       	rjmp	.+284    	; 0xb46 <__vector_18+0x178>
 a2a:	6b c0       	rjmp	.+214    	; 0xb02 <__vector_18+0x134>
 a2c:	88 30       	cpi	r24, 0x08	; 8
 a2e:	09 f4       	brne	.+2      	; 0xa32 <__vector_18+0x64>
 a30:	72 c0       	rjmp	.+228    	; 0xb16 <__vector_18+0x148>
 a32:	89 30       	cpi	r24, 0x09	; 9
 a34:	09 f0       	breq	.+2      	; 0xa38 <__vector_18+0x6a>
 a36:	87 c0       	rjmp	.+270    	; 0xb46 <__vector_18+0x178>
 a38:	73 c0       	rjmp	.+230    	; 0xb20 <__vector_18+0x152>
	{
		case 0:
		if(UDR0!=255)//байт 255 является синхронизирующим
 a3a:	80 91 c6 00 	lds	r24, 0x00C6
 a3e:	8f 3f       	cpi	r24, 0xFF	; 255
 a40:	31 f0       	breq	.+12     	; 0xa4e <__vector_18+0x80>
		{
			sync=0;
 a42:	10 92 23 01 	sts	0x0123, r1
			ptr--;
			ptr%=7;
 a46:	83 e0       	ldi	r24, 0x03	; 3
 a48:	80 93 26 01 	sts	0x0126, r24
 a4c:	7c c0       	rjmp	.+248    	; 0xb46 <__vector_18+0x178>
		}
		else
			sync=1;
 a4e:	81 e0       	ldi	r24, 0x01	; 1
 a50:	80 93 23 01 	sts	0x0123, r24
 a54:	78 c0       	rjmp	.+240    	; 0xb46 <__vector_18+0x178>
		break;
		
		
		case 1:
		MD=UDR0;
 a56:	20 91 c6 00 	lds	r18, 0x00C6
 a5a:	20 93 14 01 	sts	0x0114, r18
		if(MD==VAC)
 a5e:	21 30       	cpi	r18, 0x01	; 1
 a60:	39 f4       	brne	.+14     	; 0xa70 <__vector_18+0xa2>
			time_step=4;//5
 a62:	84 e0       	ldi	r24, 0x04	; 4
 a64:	90 e0       	ldi	r25, 0x00	; 0
 a66:	90 93 11 01 	sts	0x0111, r25
 a6a:	80 93 10 01 	sts	0x0110, r24
 a6e:	6b c0       	rjmp	.+214    	; 0xb46 <__vector_18+0x178>
		else
			time_step=6;//4		
 a70:	86 e0       	ldi	r24, 0x06	; 6
 a72:	90 e0       	ldi	r25, 0x00	; 0
 a74:	90 93 11 01 	sts	0x0111, r25
 a78:	80 93 10 01 	sts	0x0110, r24
		if(MD==PROGRAM)
 a7c:	22 30       	cpi	r18, 0x02	; 2
 a7e:	09 f0       	breq	.+2      	; 0xa82 <__vector_18+0xb4>
 a80:	62 c0       	rjmp	.+196    	; 0xb46 <__vector_18+0x178>
		{
			//PROGRAM_start=1;
			PROGRAM_done=0;
 a82:	10 92 27 01 	sts	0x0127, r1
			prog_val=0;
 a86:	10 92 1c 01 	sts	0x011C, r1
 a8a:	10 92 1b 01 	sts	0x011B, r1
 a8e:	5b c0       	rjmp	.+182    	; 0xb46 <__vector_18+0x178>
		}
		break;
		
		
		case 2:		
		x16_simple = UDR0;
 a90:	80 91 c6 00 	lds	r24, 0x00C6
 a94:	90 e0       	ldi	r25, 0x00	; 0
 a96:	90 93 46 01 	sts	0x0146, r25
 a9a:	80 93 45 01 	sts	0x0145, r24
		x16 = x16_simple<<4;
 a9e:	44 e0       	ldi	r20, 0x04	; 4
 aa0:	88 0f       	add	r24, r24
 aa2:	99 1f       	adc	r25, r25
 aa4:	4a 95       	dec	r20
 aa6:	e1 f7       	brne	.-8      	; 0xaa0 <__vector_18+0xd2>
 aa8:	90 93 1e 01 	sts	0x011E, r25
 aac:	80 93 1d 01 	sts	0x011D, r24
 ab0:	4a c0       	rjmp	.+148    	; 0xb46 <__vector_18+0x178>
		break;
		case 3:	
		ref16=UDR0<<4;
 ab2:	80 91 c6 00 	lds	r24, 0x00C6
 ab6:	90 e0       	ldi	r25, 0x00	; 0
 ab8:	34 e0       	ldi	r19, 0x04	; 4
 aba:	88 0f       	add	r24, r24
 abc:	99 1f       	adc	r25, r25
 abe:	3a 95       	dec	r19
 ac0:	e1 f7       	brne	.-8      	; 0xaba <__vector_18+0xec>
 ac2:	90 93 20 01 	sts	0x0120, r25
 ac6:	80 93 1f 01 	sts	0x011F, r24
 aca:	3d c0       	rjmp	.+122    	; 0xb46 <__vector_18+0x178>
		break;
		case 4:
		if(MD==PROGRAM)
 acc:	80 91 14 01 	lds	r24, 0x0114
 ad0:	82 30       	cpi	r24, 0x02	; 2
 ad2:	29 f4       	brne	.+10     	; 0xade <__vector_18+0x110>
			t1=UDR0;
 ad4:	80 91 c6 00 	lds	r24, 0x00C6
 ad8:	80 93 0c 01 	sts	0x010C, r24
 adc:	34 c0       	rjmp	.+104    	; 0xb46 <__vector_18+0x178>
		else
			reset16=UDR0<<4;
 ade:	80 91 c6 00 	lds	r24, 0x00C6
 ae2:	90 e0       	ldi	r25, 0x00	; 0
 ae4:	24 e0       	ldi	r18, 0x04	; 4
 ae6:	88 0f       	add	r24, r24
 ae8:	99 1f       	adc	r25, r25
 aea:	2a 95       	dec	r18
 aec:	e1 f7       	brne	.-8      	; 0xae6 <__vector_18+0x118>
 aee:	90 93 22 01 	sts	0x0122, r25
 af2:	80 93 21 01 	sts	0x0121, r24
 af6:	27 c0       	rjmp	.+78     	; 0xb46 <__vector_18+0x178>
		break;		
		case 5:
		
		t2=UDR0;
 af8:	80 91 c6 00 	lds	r24, 0x00C6
 afc:	80 93 0d 01 	sts	0x010D, r24
 b00:	22 c0       	rjmp	.+68     	; 0xb46 <__vector_18+0x178>
	
		
		break;	
		case 6:
		dT=UDR0;
 b02:	80 91 c6 00 	lds	r24, 0x00C6
 b06:	80 93 3d 01 	sts	0x013D, r24
 b0a:	1d c0       	rjmp	.+58     	; 0xb46 <__vector_18+0x178>
		break;
		case 7:
		T=UDR0;
 b0c:	80 91 c6 00 	lds	r24, 0x00C6
 b10:	80 93 43 01 	sts	0x0143, r24
 b14:	18 c0       	rjmp	.+48     	; 0xb46 <__vector_18+0x178>
		break;
		case 8:
		chan=UDR0;
 b16:	80 91 c6 00 	lds	r24, 0x00C6
 b1a:	80 93 28 01 	sts	0x0128, r24
 b1e:	13 c0       	rjmp	.+38     	; 0xb46 <__vector_18+0x178>
		break;
		
		case 9:
			reverted[chan]=UDR0;
 b20:	80 91 c6 00 	lds	r24, 0x00C6
 b24:	e0 91 28 01 	lds	r30, 0x0128
 b28:	f0 e0       	ldi	r31, 0x00	; 0
 b2a:	e3 5d       	subi	r30, 0xD3	; 211
 b2c:	fe 4f       	sbci	r31, 0xFE	; 254
 b2e:	80 83       	st	Z, r24
		
			//event_cnt=0;			
			
			if(MD==GATHER_MULT)
 b30:	80 91 14 01 	lds	r24, 0x0114
 b34:	83 30       	cpi	r24, 0x03	; 3
 b36:	19 f4       	brne	.+6      	; 0xb3e <__vector_18+0x170>
			{
			//	PORTD=0b00100000;
			//static int ff=1<<5;
			//if(x16>>4)
			gatherMult();
 b38:	0e 94 7a 00 	call	0xf4	; 0xf4 <gatherMult>
 b3c:	04 c0       	rjmp	.+8      	; 0xb46 <__vector_18+0x178>
			//PORTD=(1<<5)^PORTD;
			//PORTD=ff;
			}
			else if(MD==SEPAR_MULT)	
 b3e:	84 30       	cpi	r24, 0x04	; 4
 b40:	11 f4       	brne	.+4      	; 0xb46 <__vector_18+0x178>
			{
			separMult();	
 b42:	0e 94 83 00 	call	0x106	; 0x106 <separMult>
		break;
	}
	

	
	dTt2=dT+t2;
 b46:	80 91 0d 01 	lds	r24, 0x010D
 b4a:	90 91 3d 01 	lds	r25, 0x013D
 b4e:	89 0f       	add	r24, r25
 b50:	80 93 0e 01 	sts	0x010E, r24
	//UDR0=x16/16;
	ptr++;
	ptr%=10;
 b54:	80 91 26 01 	lds	r24, 0x0126
 b58:	8f 5f       	subi	r24, 0xFF	; 255
 b5a:	6a e0       	ldi	r22, 0x0A	; 10
 b5c:	0e 94 c3 05 	call	0xb86	; 0xb86 <__udivmodqi4>
 b60:	90 93 26 01 	sts	0x0126, r25
 b64:	ff 91       	pop	r31
 b66:	ef 91       	pop	r30
 b68:	bf 91       	pop	r27
 b6a:	af 91       	pop	r26
 b6c:	9f 91       	pop	r25
 b6e:	8f 91       	pop	r24
 b70:	7f 91       	pop	r23
 b72:	6f 91       	pop	r22
 b74:	5f 91       	pop	r21
 b76:	4f 91       	pop	r20
 b78:	3f 91       	pop	r19
 b7a:	2f 91       	pop	r18
 b7c:	0f 90       	pop	r0
 b7e:	0f be       	out	0x3f, r0	; 63
 b80:	0f 90       	pop	r0
 b82:	1f 90       	pop	r1
 b84:	18 95       	reti

00000b86 <__udivmodqi4>:
 b86:	99 1b       	sub	r25, r25
 b88:	79 e0       	ldi	r23, 0x09	; 9
 b8a:	04 c0       	rjmp	.+8      	; 0xb94 <__udivmodqi4_ep>

00000b8c <__udivmodqi4_loop>:
 b8c:	99 1f       	adc	r25, r25
 b8e:	96 17       	cp	r25, r22
 b90:	08 f0       	brcs	.+2      	; 0xb94 <__udivmodqi4_ep>
 b92:	96 1b       	sub	r25, r22

00000b94 <__udivmodqi4_ep>:
 b94:	88 1f       	adc	r24, r24
 b96:	7a 95       	dec	r23
 b98:	c9 f7       	brne	.-14     	; 0xb8c <__udivmodqi4_loop>
 b9a:	80 95       	com	r24
 b9c:	08 95       	ret

00000b9e <__udivmodhi4>:
 b9e:	aa 1b       	sub	r26, r26
 ba0:	bb 1b       	sub	r27, r27
 ba2:	51 e1       	ldi	r21, 0x11	; 17
 ba4:	07 c0       	rjmp	.+14     	; 0xbb4 <__udivmodhi4_ep>

00000ba6 <__udivmodhi4_loop>:
 ba6:	aa 1f       	adc	r26, r26
 ba8:	bb 1f       	adc	r27, r27
 baa:	a6 17       	cp	r26, r22
 bac:	b7 07       	cpc	r27, r23
 bae:	10 f0       	brcs	.+4      	; 0xbb4 <__udivmodhi4_ep>
 bb0:	a6 1b       	sub	r26, r22
 bb2:	b7 0b       	sbc	r27, r23

00000bb4 <__udivmodhi4_ep>:
 bb4:	88 1f       	adc	r24, r24
 bb6:	99 1f       	adc	r25, r25
 bb8:	5a 95       	dec	r21
 bba:	a9 f7       	brne	.-22     	; 0xba6 <__udivmodhi4_loop>
 bbc:	80 95       	com	r24
 bbe:	90 95       	com	r25
 bc0:	bc 01       	movw	r22, r24
 bc2:	cd 01       	movw	r24, r26
 bc4:	08 95       	ret

00000bc6 <_exit>:
 bc6:	f8 94       	cli

00000bc8 <__stop_program>:
 bc8:	ff cf       	rjmp	.-2      	; 0xbc8 <__stop_program>
