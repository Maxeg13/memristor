
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000012  00800100  00000b22  00000bb6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000b22  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000003f  00800112  00800112  00000bc8  2**0
                  ALLOC
  3 .debug_aranges 00000020  00000000  00000000  00000bc8  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 000002e4  00000000  00000000  00000be8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000007c8  00000000  00000000  00000ecc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000001fd  00000000  00000000  00001694  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000a85  00000000  00000000  00001891  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000f0  00000000  00000000  00002318  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000002ab  00000000  00000000  00002408  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000010c  00000000  00000000  000026b3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 25 01 	jmp	0x24a	; 0x24a <__vector_9>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 8f 04 	jmp	0x91e	; 0x91e <__vector_18>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e2 e2       	ldi	r30, 0x22	; 34
  7c:	fb e0       	ldi	r31, 0x0B	; 11
  7e:	02 c0       	rjmp	.+4      	; 0x84 <.do_copy_data_start>

00000080 <.do_copy_data_loop>:
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0

00000084 <.do_copy_data_start>:
  84:	a2 31       	cpi	r26, 0x12	; 18
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <.do_copy_data_loop>

0000008a <__do_clear_bss>:
  8a:	11 e0       	ldi	r17, 0x01	; 1
  8c:	a2 e1       	ldi	r26, 0x12	; 18
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a1 35       	cpi	r26, 0x51	; 81
  96:	b1 07       	cpc	r27, r17
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 cc 00 	call	0x198	; 0x198 <main>
  9e:	0c 94 8f 05 	jmp	0xb1e	; 0xb1e <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <ADC_Init>:
uint8_t accum_cnt;

//функция инициализаци АЦП
//АЦП используется для регистрации тока, проходящего через мемристор
void ADC_Init(){
 ADCSRA |= (1 << ADEN) // Включаем АЦП
  a6:	ea e7       	ldi	r30, 0x7A	; 122
  a8:	f0 e0       	ldi	r31, 0x00	; 0
  aa:	80 81       	ld	r24, Z
  ac:	83 68       	ori	r24, 0x83	; 131
  ae:	80 83       	st	Z, r24
 //ADCSRA&=~(1 << ADPS1)|(1 << ADPS0)|(1 << ADPS1);
 |(1 << ADPS1)|(1 << ADPS0)|(1 << ADPS1);    // устанавливаем предделитель преобразователя на 8
 ADMUX |= (0 << REFS1)|(1 << REFS0) //выставляем опорное напряжение, как внешний ИОН
  b0:	ec e7       	ldi	r30, 0x7C	; 124
  b2:	f0 e0       	ldi	r31, 0x00	; 0
  b4:	80 81       	ld	r24, Z
  b6:	80 64       	ori	r24, 0x40	; 64
  b8:	80 83       	st	Z, r24
 |(0 << MUX0)|(0 << MUX1)|(0 << MUX2)|(0 << MUX3); // снимать сигнал будем с  входа PC0 
}
  ba:	08 95       	ret

000000bc <timer_init>:

//функция инициализации таймера
// Таймер используется для формирования временной последовательности значений, формируемых с ЦАПа
void timer_init()
{
    TCCR2A = 0;        
  bc:	10 92 b0 00 	sts	0x00B0, r1
    TCCR2B = 0;
  c0:	e1 eb       	ldi	r30, 0xB1	; 177
  c2:	f0 e0       	ldi	r31, 0x00	; 0
  c4:	10 82       	st	Z, r1
    
    TCCR2B |= (1<<CS21) ;    
  c6:	80 81       	ld	r24, Z
  c8:	82 60       	ori	r24, 0x02	; 2
  ca:	80 83       	st	Z, r24
    TIMSK2 = (1 << TOIE2);
  cc:	81 e0       	ldi	r24, 0x01	; 1
  ce:	80 93 70 00 	sts	0x0070, r24
}
  d2:	08 95       	ret

000000d4 <uart_init>:

//функция инициализации UART-интерфейса
void uart_init(unsigned int ubrr)
{	
	UBRR0H = (unsigned char)(ubrr>>8);
  d4:	90 93 c5 00 	sts	0x00C5, r25
	UBRR0L = (unsigned char)ubrr;
  d8:	80 93 c4 00 	sts	0x00C4, r24
	UCSR0B = (1<<RXCIE0)|(1<<RXEN0)|(1<<TXEN0);
  dc:	88 e9       	ldi	r24, 0x98	; 152
  de:	80 93 c1 00 	sts	0x00C1, r24
	UCSR0C = (1<<USBS0)|(3<<UCSZ00);
  e2:	8e e0       	ldi	r24, 0x0E	; 14
  e4:	80 93 c2 00 	sts	0x00C2, r24
}
  e8:	08 95       	ret

000000ea <SPI_MasterInit>:

//функция инициализации SPI
void SPI_MasterInit()
{
	DDR_SPI = (1<<DD_MOSI)|(1<<DD_SCK)|(1<<SPI_SS);
  ea:	8c e2       	ldi	r24, 0x2C	; 44
  ec:	84 b9       	out	0x04, r24	; 4
	SPCR = (1<<SPE)|(0<<DORD)|(1<<MSTR)|(1<<CPOL)|(0<<CPHA);//|(1<<SPR1)|(0<<SPR0);
  ee:	88 e5       	ldi	r24, 0x58	; 88
  f0:	8c bd       	out	0x2c, r24	; 44
}
  f2:	08 95       	ret

000000f4 <gatherMult>:
}

			
void gatherMult()
{
	reset_BYTE(PORTD, 6);
  f4:	5e 98       	cbi	0x0b, 6	; 11
	reset_BYTE(PORTD, 7);				
  f6:	5f 98       	cbi	0x0b, 7	; 11
	reset_BYTE(PORTD, 5);
  f8:	5d 98       	cbi	0x0b, 5	; 11
	reset_BYTE(PORTC, 4);
  fa:	44 98       	cbi	0x08, 4	; 8
	
	
	SET_BYTE(PORTC, 1);				
  fc:	41 9a       	sbi	0x08, 1	; 8
	SET_BYTE(PORTB, 2);
  fe:	2a 9a       	sbi	0x05, 2	; 5
	SET_BYTE(PORTB, 1);
 100:	29 9a       	sbi	0x05, 1	; 5
	SET_BYTE(PORTB, 0);
 102:	28 9a       	sbi	0x05, 0	; 5
}
 104:	08 95       	ret

00000106 <separMult>:
void separMult()
{
	reset_BYTE(PORTB, 1);
 106:	29 98       	cbi	0x05, 1	; 5
	reset_BYTE(PORTB, 2);
 108:	2a 98       	cbi	0x05, 2	; 5
	reset_BYTE(PORTC, 1);
 10a:	41 98       	cbi	0x08, 1	; 8
	
	SET_BYTE(PORTC, 4);						
 10c:	44 9a       	sbi	0x08, 4	; 8
	SET_BYTE(PORTD, 6);
 10e:	5e 9a       	sbi	0x0b, 6	; 11
	SET_BYTE(PORTD, 7);
 110:	5f 9a       	sbi	0x0b, 7	; 11
	SET_BYTE(PORTB, 0);
 112:	28 9a       	sbi	0x05, 0	; 5
	SET_BYTE(PORTD, 5);
 114:	5d 9a       	sbi	0x0b, 5	; 11
}
 116:	08 95       	ret

00000118 <SPI_WriteByte>:



void SPI_WriteByte(uint8_t data)
{
   SPDR = data;
 118:	8e bd       	out	0x2e, r24	; 46
  while(!(SPSR & (1<<SPIF)));
 11a:	0d b4       	in	r0, 0x2d	; 45
 11c:	07 fe       	sbrs	r0, 7
 11e:	fd cf       	rjmp	.-6      	; 0x11a <SPI_WriteByte+0x2>
}
 120:	08 95       	ret

00000122 <prepareResetDAC>:

void prepareResetDAC(int8_t chan)//_____________bipolar!!! and <<4 larger
{
    // static int16_t x;
	//x+=2048;
	PORTD&=~(1<<SYNC);
 122:	5b 98       	cbi	0x0b, 3	; 11
	//send8 = (x >> 8);
	// send8 = 0b00001000;
	// send8|=(chan_addrs[chan]);
	SPI_WriteByte(0b00001000|chan_addrs[chan]);
 124:	e8 2f       	mov	r30, r24
 126:	ff 27       	eor	r31, r31
 128:	e7 fd       	sbrc	r30, 7
 12a:	f0 95       	com	r31
 12c:	ee 5f       	subi	r30, 0xFE	; 254
 12e:	fe 4f       	sbci	r31, 0xFE	; 254
 130:	80 81       	ld	r24, Z
 132:	88 60       	ori	r24, 0x08	; 8
 134:	90 e0       	ldi	r25, 0x00	; 0
 136:	0e 94 8c 00 	call	0x118	; 0x118 <SPI_WriteByte>
	// send8=x;
	SPI_WriteByte(0);		
 13a:	80 e0       	ldi	r24, 0x00	; 0
 13c:	90 e0       	ldi	r25, 0x00	; 0
 13e:	0e 94 8c 00 	call	0x118	; 0x118 <SPI_WriteByte>
	PORTD|=(1<<SYNC);
 142:	5b 9a       	sbi	0x0b, 3	; 11
}
 144:	08 95       	ret

00000146 <prepareSetDAC>:

//функция управления ЦАПом 
// при этом, управление регистром LDAC должно использоваться 
//вне функции в перспепктиве создания многоканальной схемы
void prepareSetDAC(int16_t x,int8_t chan)//_____________bipolar!!! and <<4 larger
{
 146:	0f 93       	push	r16
 148:	1f 93       	push	r17
 14a:	e6 2f       	mov	r30, r22


	x=-x;
 14c:	00 27       	eor	r16, r16
 14e:	11 27       	eor	r17, r17
 150:	08 1b       	sub	r16, r24
 152:	19 0b       	sbc	r17, r25
	x+=2048;
 154:	00 50       	subi	r16, 0x00	; 0
 156:	18 4f       	sbci	r17, 0xF8	; 248
	PORTD&=~(1<<SYNC);
 158:	5b 98       	cbi	0x0b, 3	; 11
	send8 = (x >> 8);
	send8 &= 0b00001111;
	send8|=(chan_addrs[chan]);
 15a:	81 2f       	mov	r24, r17
 15c:	99 27       	eor	r25, r25
 15e:	87 fd       	sbrc	r24, 7
 160:	9a 95       	dec	r25
 162:	8f 70       	andi	r24, 0x0F	; 15
 164:	ff 27       	eor	r31, r31
 166:	e7 fd       	sbrc	r30, 7
 168:	f0 95       	com	r31
 16a:	ee 5f       	subi	r30, 0xFE	; 254
 16c:	fe 4f       	sbci	r31, 0xFE	; 254
 16e:	20 81       	ld	r18, Z
 170:	82 2b       	or	r24, r18
 172:	80 93 40 01 	sts	0x0140, r24
	SPI_WriteByte(send8);
 176:	90 e0       	ldi	r25, 0x00	; 0
 178:	0e 94 8c 00 	call	0x118	; 0x118 <SPI_WriteByte>
	send8=x;
 17c:	00 93 40 01 	sts	0x0140, r16
	SPI_WriteByte(send8);		
 180:	80 2f       	mov	r24, r16
 182:	90 e0       	ldi	r25, 0x00	; 0
 184:	0e 94 8c 00 	call	0x118	; 0x118 <SPI_WriteByte>
	PORTD|=(1<<SYNC);
 188:	5b 9a       	sbi	0x0b, 3	; 11

}
 18a:	1f 91       	pop	r17
 18c:	0f 91       	pop	r16
 18e:	08 95       	ret

00000190 <set_reverser>:
		else
			PORTB&=~(1<<4);
		break;

	}
}
 190:	08 95       	ret

00000192 <setDAC>:

void setDAC(){
	PORTD&=~(1<<LDAC);
 192:	5a 98       	cbi	0x0b, 2	; 11
	PORTD|=(1<<LDAC);	
 194:	5a 9a       	sbi	0x0b, 2	; 11
}
 196:	08 95       	ret

00000198 <main>:


void main(void)
{
 198:	1f 93       	push	r17
	BIG_STAT_N = STAT_N*STAT_CYCLE;
 19a:	80 91 01 01 	lds	r24, 0x0101
 19e:	90 91 00 01 	lds	r25, 0x0100
 1a2:	89 9f       	mul	r24, r25
 1a4:	80 2d       	mov	r24, r0
 1a6:	11 24       	eor	r1, r1
 1a8:	80 93 49 01 	sts	0x0149, r24
 1ac:	e2 e0       	ldi	r30, 0x02	; 2
 1ae:	f1 e0       	ldi	r31, 0x01	; 1
	
	for (uint8_t i=0; i<8;i++)
		chan_addrs[i]=chan_addrs[i]<<4;
 1b0:	80 81       	ld	r24, Z
 1b2:	82 95       	swap	r24
 1b4:	80 7f       	andi	r24, 0xF0	; 240
 1b6:	81 93       	st	Z+, r24

void main(void)
{
	BIG_STAT_N = STAT_N*STAT_CYCLE;
	
	for (uint8_t i=0; i<8;i++)
 1b8:	81 e0       	ldi	r24, 0x01	; 1
 1ba:	ea 30       	cpi	r30, 0x0A	; 10
 1bc:	f8 07       	cpc	r31, r24
 1be:	c1 f7       	brne	.-16     	; 0x1b0 <main+0x18>
		chan_addrs[i]=chan_addrs[i]<<4;
	
	PORTC|=0b00000000;
 1c0:	88 b1       	in	r24, 0x08	; 8
 1c2:	88 b9       	out	0x08, r24	; 8
	DDRC= 0b00011110;
 1c4:	8e e1       	ldi	r24, 0x1E	; 30
 1c6:	87 b9       	out	0x07, r24	; 7
	DDRD =0b11111110;
 1c8:	8e ef       	ldi	r24, 0xFE	; 254
 1ca:	8a b9       	out	0x0a, r24	; 10
	//PORTD|=0b00100000;	
	DDRB= 0b00011111;
 1cc:	8f e1       	ldi	r24, 0x1F	; 31
 1ce:	84 b9       	out	0x04, r24	; 4
	sei();
 1d0:	78 94       	sei
}

//функция инициализации SPI
void SPI_MasterInit()
{
	DDR_SPI = (1<<DD_MOSI)|(1<<DD_SCK)|(1<<SPI_SS);
 1d2:	8c e2       	ldi	r24, 0x2C	; 44
 1d4:	84 b9       	out	0x04, r24	; 4
	SPCR = (1<<SPE)|(0<<DORD)|(1<<MSTR)|(1<<CPOL)|(0<<CPHA);//|(1<<SPR1)|(0<<SPR0);
 1d6:	88 e5       	ldi	r24, 0x58	; 88
 1d8:	8c bd       	out	0x2c, r24	; 44

//функция инициализации таймера
// Таймер используется для формирования временной последовательности значений, формируемых с ЦАПа
void timer_init()
{
    TCCR2A = 0;        
 1da:	10 92 b0 00 	sts	0x00B0, r1
    TCCR2B = 0;
 1de:	10 92 b1 00 	sts	0x00B1, r1
    
    TCCR2B |= (1<<CS21) ;    
 1e2:	80 91 b1 00 	lds	r24, 0x00B1
 1e6:	82 60       	ori	r24, 0x02	; 2
 1e8:	80 93 b1 00 	sts	0x00B1, r24
    TIMSK2 = (1 << TOIE2);
 1ec:	81 e0       	ldi	r24, 0x01	; 1
 1ee:	80 93 70 00 	sts	0x0070, r24
}

//функция инициализации UART-интерфейса
void uart_init(unsigned int ubrr)
{	
	UBRR0H = (unsigned char)(ubrr>>8);
 1f2:	10 92 c5 00 	sts	0x00C5, r1
	UBRR0L = (unsigned char)ubrr;
 1f6:	83 e3       	ldi	r24, 0x33	; 51
 1f8:	80 93 c4 00 	sts	0x00C4, r24
	UCSR0B = (1<<RXCIE0)|(1<<RXEN0)|(1<<TXEN0);
 1fc:	88 e9       	ldi	r24, 0x98	; 152
 1fe:	80 93 c1 00 	sts	0x00C1, r24
	UCSR0C = (1<<USBS0)|(3<<UCSZ00);
 202:	8e e0       	ldi	r24, 0x0E	; 14
 204:	80 93 c2 00 	sts	0x00C2, r24
uint8_t accum_cnt;

//функция инициализаци АЦП
//АЦП используется для регистрации тока, проходящего через мемристор
void ADC_Init(){
 ADCSRA |= (1 << ADEN) // Включаем АЦП
 208:	80 91 7a 00 	lds	r24, 0x007A
 20c:	83 68       	ori	r24, 0x83	; 131
 20e:	80 93 7a 00 	sts	0x007A, r24
 //ADCSRA&=~(1 << ADPS1)|(1 << ADPS0)|(1 << ADPS1);
 |(1 << ADPS1)|(1 << ADPS0)|(1 << ADPS1);    // устанавливаем предделитель преобразователя на 8
 ADMUX |= (0 << REFS1)|(1 << REFS0) //выставляем опорное напряжение, как внешний ИОН
 212:	80 91 7c 00 	lds	r24, 0x007C
 216:	80 64       	ori	r24, 0x40	; 64
 218:	80 93 7c 00 	sts	0x007C, r24
    //DDRD = 0b000001100;	
	
	uart_init(BAUDRATE);
	ADC_Init();
	
	ADCSRA |= (1 << ADSC); 
 21c:	80 91 7a 00 	lds	r24, 0x007A
 220:	80 64       	ori	r24, 0x40	; 64
 222:	80 93 7a 00 	sts	0x007A, r24
	ADCL;
 226:	80 91 78 00 	lds	r24, 0x0078
	ADCL;
 22a:	80 91 78 00 	lds	r24, 0x0078
 22e:	10 e0       	ldi	r17, 0x00	; 0
		//set_reverser(i,1);
	
	//set_reverser(0,0);
	for (int i=0;i<8;i++)
	{
		prepareSetDAC(0,i);
 230:	80 e0       	ldi	r24, 0x00	; 0
 232:	90 e0       	ldi	r25, 0x00	; 0
 234:	61 2f       	mov	r22, r17
 236:	0e 94 a3 00 	call	0x146	; 0x146 <prepareSetDAC>
 23a:	1f 5f       	subi	r17, 0xFF	; 255

	//for(int i=0;i<8;i++)
		//set_reverser(i,1);
	
	//set_reverser(0,0);
	for (int i=0;i<8;i++)
 23c:	18 30       	cpi	r17, 0x08	; 8
 23e:	c1 f7       	brne	.-16     	; 0x230 <main+0x98>

	}
}

void setDAC(){
	PORTD&=~(1<<LDAC);
 240:	5a 98       	cbi	0x0b, 2	; 11
	PORTD|=(1<<LDAC);	
 242:	5a 9a       	sbi	0x0b, 2	; 11
	for (int i=0;i<8;i++)
	{
		prepareSetDAC(0,i);
	}
setDAC();	
	separMult();
 244:	0e 94 83 00 	call	0x106	; 0x106 <separMult>
 248:	ff cf       	rjmp	.-2      	; 0x248 <main+0xb0>

0000024a <__vector_9>:
//главный цикл работы контроллера
//Здесь устанавливаются значения ЦАП и передаются данные на компьютер
//через UART-интерфейс
//данный участок кода повторяется при переполнении TIMER2
ISR(TIMER2_OVF_vect)
{
 24a:	1f 92       	push	r1
 24c:	0f 92       	push	r0
 24e:	0f b6       	in	r0, 0x3f	; 63
 250:	0f 92       	push	r0
 252:	11 24       	eor	r1, r1
 254:	2f 93       	push	r18
 256:	3f 93       	push	r19
 258:	4f 93       	push	r20
 25a:	5f 93       	push	r21
 25c:	6f 93       	push	r22
 25e:	7f 93       	push	r23
 260:	8f 93       	push	r24
 262:	9f 93       	push	r25
 264:	af 93       	push	r26
 266:	bf 93       	push	r27
 268:	ef 93       	push	r30
 26a:	ff 93       	push	r31
	if(ctr>time_step)
 26c:	20 91 3c 01 	lds	r18, 0x013C
 270:	30 91 3d 01 	lds	r19, 0x013D
 274:	80 91 0e 01 	lds	r24, 0x010E
 278:	90 91 0f 01 	lds	r25, 0x010F
 27c:	82 17       	cp	r24, r18
 27e:	93 07       	cpc	r25, r19
 280:	0c f0       	brlt	.+2      	; 0x284 <__vector_9+0x3a>
 282:	33 c3       	rjmp	.+1638   	; 0x8ea <__vector_9+0x6a0>
	{
		if(MD==CUSTOM)
 284:	60 91 12 01 	lds	r22, 0x0112
 288:	66 23       	and	r22, r22
 28a:	09 f0       	breq	.+2      	; 0x28e <__vector_9+0x44>
 28c:	4a c0       	rjmp	.+148    	; 0x322 <__vector_9+0xd8>
		{
			if(event_cnt==(1))
 28e:	20 91 38 01 	lds	r18, 0x0138
 292:	30 91 39 01 	lds	r19, 0x0139
 296:	21 30       	cpi	r18, 0x01	; 1
 298:	31 05       	cpc	r19, r1
 29a:	59 f4       	brne	.+22     	; 0x2b2 <__vector_9+0x68>
			{	
			ADCL_=ADCL;
 29c:	90 91 78 00 	lds	r25, 0x0078
 2a0:	90 93 42 01 	sts	0x0142, r25
			ADCH_=ADCH;
 2a4:	80 91 79 00 	lds	r24, 0x0079
 2a8:	80 93 46 01 	sts	0x0146, r24
			UDR0=ADCL_;			
 2ac:	90 93 c6 00 	sts	0x00C6, r25
 2b0:	0d c0       	rjmp	.+26     	; 0x2cc <__vector_9+0x82>
			}
			
			if(event_cnt==(2))
 2b2:	22 30       	cpi	r18, 0x02	; 2
 2b4:	31 05       	cpc	r19, r1
 2b6:	29 f4       	brne	.+10     	; 0x2c2 <__vector_9+0x78>
			{	
			UDR0=ADCH_;				
 2b8:	80 91 46 01 	lds	r24, 0x0146
 2bc:	80 93 c6 00 	sts	0x00C6, r24
 2c0:	05 c0       	rjmp	.+10     	; 0x2cc <__vector_9+0x82>
			}
			
			
			
			if(event_cnt==0)
 2c2:	21 15       	cp	r18, r1
 2c4:	31 05       	cpc	r19, r1
 2c6:	11 f4       	brne	.+4      	; 0x2cc <__vector_9+0x82>
			{
			UDR0=255;
 2c8:	8f ef       	ldi	r24, 0xFF	; 255
 2ca:	b7 c2       	rjmp	.+1390   	; 0x83a <__vector_9+0x5f0>
			prepareSetDAC(0,chan);
			//prepareSetDAC(x16,2);
			setDAC();
			}
			
			else if(event_cnt==t1)
 2cc:	80 91 0a 01 	lds	r24, 0x010A
 2d0:	90 e0       	ldi	r25, 0x00	; 0
 2d2:	28 17       	cp	r18, r24
 2d4:	39 07       	cpc	r19, r25
 2d6:	09 f4       	brne	.+2      	; 0x2da <__vector_9+0x90>
 2d8:	e2 c2       	rjmp	.+1476   	; 0x89e <__vector_9+0x654>
			{
				
			//prepareSetDAC(0,chan);
			//setDAC();
			}
			else if(event_cnt==dT)
 2da:	80 91 3b 01 	lds	r24, 0x013B
 2de:	90 e0       	ldi	r25, 0x00	; 0
 2e0:	28 17       	cp	r18, r24
 2e2:	39 07       	cpc	r19, r25
 2e4:	09 f4       	brne	.+2      	; 0x2e8 <__vector_9+0x9e>
 2e6:	db c2       	rjmp	.+1462   	; 0x89e <__vector_9+0x654>
			{		
			//prepareSetDAC(0,chan);
			//setDAC();
		
			}
			else if(event_cnt==(dT+1))
 2e8:	01 96       	adiw	r24, 0x01	; 1
 2ea:	28 17       	cp	r18, r24
 2ec:	39 07       	cpc	r19, r25
 2ee:	09 f4       	brne	.+2      	; 0x2f2 <__vector_9+0xa8>
 2f0:	b4 c2       	rjmp	.+1384   	; 0x85a <__vector_9+0x610>
				ADCSRA |= (1 << ADSC); 

			else if(event_cnt==dTt2)
 2f2:	80 91 0c 01 	lds	r24, 0x010C
 2f6:	90 e0       	ldi	r25, 0x00	; 0
 2f8:	28 17       	cp	r18, r24
 2fa:	39 07       	cpc	r19, r25
 2fc:	09 f0       	breq	.+2      	; 0x300 <__vector_9+0xb6>
 2fe:	cf c2       	rjmp	.+1438   	; 0x89e <__vector_9+0x654>
			{
			if ( ( UCSR0A & (1<<UDRE0)) )			
 300:	80 91 c0 00 	lds	r24, 0x00C0
 304:	85 ff       	sbrs	r24, 5
 306:	04 c0       	rjmp	.+8      	; 0x310 <__vector_9+0xc6>
				UDR0=_adc;	
 308:	80 91 4a 01 	lds	r24, 0x014A
 30c:	80 93 c6 00 	sts	0x00C6, r24
			accum=0;
 310:	10 92 48 01 	sts	0x0148, r1
 314:	10 92 47 01 	sts	0x0147, r1
			ADC_on=0;
 318:	10 92 37 01 	sts	0x0137, r1
			accum_cnt=0;			
 31c:	10 92 3e 01 	sts	0x013E, r1
 320:	be c2       	rjmp	.+1404   	; 0x89e <__vector_9+0x654>
			//setDAC();

			}		

		}
		else if(MD==VAC)
 322:	61 30       	cpi	r22, 0x01	; 1
 324:	09 f0       	breq	.+2      	; 0x328 <__vector_9+0xde>
 326:	86 c0       	rjmp	.+268    	; 0x434 <__vector_9+0x1ea>
		{			
			static int i=0;
			i++;						
 328:	80 91 35 01 	lds	r24, 0x0135
 32c:	90 91 36 01 	lds	r25, 0x0136
 330:	01 96       	adiw	r24, 0x01	; 1
 332:	90 93 36 01 	sts	0x0136, r25
 336:	80 93 35 01 	sts	0x0135, r24
			
			switch(UDP_cnt)
 33a:	80 91 50 01 	lds	r24, 0x0150
 33e:	82 30       	cpi	r24, 0x02	; 2
 340:	41 f1       	breq	.+80     	; 0x392 <__vector_9+0x148>
 342:	83 30       	cpi	r24, 0x03	; 3
 344:	30 f4       	brcc	.+12     	; 0x352 <__vector_9+0x108>
 346:	88 23       	and	r24, r24
 348:	51 f0       	breq	.+20     	; 0x35e <__vector_9+0x114>
 34a:	81 30       	cpi	r24, 0x01	; 1
 34c:	09 f0       	breq	.+2      	; 0x350 <__vector_9+0x106>
 34e:	69 c0       	rjmp	.+210    	; 0x422 <__vector_9+0x1d8>
 350:	0d c0       	rjmp	.+26     	; 0x36c <__vector_9+0x122>
 352:	83 30       	cpi	r24, 0x03	; 3
 354:	19 f1       	breq	.+70     	; 0x39c <__vector_9+0x152>
 356:	84 30       	cpi	r24, 0x04	; 4
 358:	09 f0       	breq	.+2      	; 0x35c <__vector_9+0x112>
 35a:	63 c0       	rjmp	.+198    	; 0x422 <__vector_9+0x1d8>
 35c:	60 c0       	rjmp	.+192    	; 0x41e <__vector_9+0x1d4>
			{
				case 0:					
				 ADCSRA |= (1 << ADSC); 
 35e:	80 91 7a 00 	lds	r24, 0x007A
 362:	80 64       	ori	r24, 0x40	; 64
 364:	80 93 7a 00 	sts	0x007A, r24
				UDR0=255;
 368:	8f ef       	ldi	r24, 0xFF	; 255
 36a:	15 c0       	rjmp	.+42     	; 0x396 <__vector_9+0x14c>
				break;
				
				
				
				case 1:	
				ADCL__=	ADCL_;
 36c:	80 91 42 01 	lds	r24, 0x0142
 370:	80 93 3f 01 	sts	0x013F, r24
				ADCH__ = ADCH_;
 374:	80 91 46 01 	lds	r24, 0x0146
 378:	80 93 3a 01 	sts	0x013A, r24
				ADCL_=ADCL;
 37c:	90 91 78 00 	lds	r25, 0x0078
 380:	90 93 42 01 	sts	0x0142, r25
				ADCH_=ADCH;
 384:	80 91 79 00 	lds	r24, 0x0079
 388:	80 93 46 01 	sts	0x0146, r24
				
				UDR0=ADCL_;
 38c:	90 93 c6 00 	sts	0x00C6, r25
 390:	48 c0       	rjmp	.+144    	; 0x422 <__vector_9+0x1d8>
				break;
				
				case 2:
				UDR0=ADCH_;
 392:	80 91 46 01 	lds	r24, 0x0146
 396:	80 93 c6 00 	sts	0x00C6, r24
 39a:	43 c0       	rjmp	.+134    	; 0x422 <__vector_9+0x1d8>
				
				
				case 3:
								
					//VAC16_HH=VAC16_H;
					VAC16_H=VAC16;
 39c:	20 91 13 01 	lds	r18, 0x0113
 3a0:	30 91 14 01 	lds	r19, 0x0114
 3a4:	30 93 16 01 	sts	0x0116, r19
 3a8:	20 93 15 01 	sts	0x0115, r18
					
					if(pos_phase)
 3ac:	80 91 0d 01 	lds	r24, 0x010D
 3b0:	88 23       	and	r24, r24
 3b2:	81 f0       	breq	.+32     	; 0x3d4 <__vector_9+0x18a>
					{
								//PORTC=0b00000010;
			//PORTB=0b00011111;
			//PORTD=0b11101100;
						VAC16+=32;
 3b4:	20 5e       	subi	r18, 0xE0	; 224
 3b6:	3f 4f       	sbci	r19, 0xFF	; 255
 3b8:	30 93 14 01 	sts	0x0114, r19
 3bc:	20 93 13 01 	sts	0x0113, r18
						if(VAC16>(ref16-1))
 3c0:	80 91 1d 01 	lds	r24, 0x011D
 3c4:	90 91 1e 01 	lds	r25, 0x011E
 3c8:	28 17       	cp	r18, r24
 3ca:	39 07       	cpc	r19, r25
 3cc:	b4 f0       	brlt	.+44     	; 0x3fa <__vector_9+0x1b0>
						{
						pos_phase=0;				
 3ce:	10 92 0d 01 	sts	0x010D, r1
 3d2:	13 c0       	rjmp	.+38     	; 0x3fa <__vector_9+0x1b0>
					else
					{
						//PORTB=0;
			//PORTC=0;
			//PORTD=0;
						VAC16-=32;
 3d4:	c9 01       	movw	r24, r18
 3d6:	80 97       	sbiw	r24, 0x20	; 32
 3d8:	90 93 14 01 	sts	0x0114, r25
 3dc:	80 93 13 01 	sts	0x0113, r24
						if(VAC16<(-x16+1))
 3e0:	21 e0       	ldi	r18, 0x01	; 1
 3e2:	30 e0       	ldi	r19, 0x00	; 0
 3e4:	40 91 1b 01 	lds	r20, 0x011B
 3e8:	50 91 1c 01 	lds	r21, 0x011C
 3ec:	24 1b       	sub	r18, r20
 3ee:	35 0b       	sbc	r19, r21
 3f0:	82 17       	cp	r24, r18
 3f2:	93 07       	cpc	r25, r19
 3f4:	14 f4       	brge	.+4      	; 0x3fa <__vector_9+0x1b0>
						{
						pos_phase=1;									
 3f6:	60 93 0d 01 	sts	0x010D, r22
						}
					}	
					
					
					
					UDR0=VAC16>>4;
 3fa:	80 91 13 01 	lds	r24, 0x0113
 3fe:	90 91 14 01 	lds	r25, 0x0114
 402:	9c 01       	movw	r18, r24
 404:	b4 e0       	ldi	r27, 0x04	; 4
 406:	35 95       	asr	r19
 408:	27 95       	ror	r18
 40a:	ba 95       	dec	r27
 40c:	e1 f7       	brne	.-8      	; 0x406 <__vector_9+0x1bc>
 40e:	20 93 c6 00 	sts	0x00C6, r18
					prepareSetDAC(VAC16,chan);
 412:	60 91 26 01 	lds	r22, 0x0126
 416:	0e 94 a3 00 	call	0x146	; 0x146 <prepareSetDAC>

	}
}

void setDAC(){
	PORTD&=~(1<<LDAC);
 41a:	5a 98       	cbi	0x0b, 2	; 11
	PORTD|=(1<<LDAC);	
 41c:	5a 9a       	sbi	0x0b, 2	; 11
					//prepareSetDAC(VAC16,5);
					//prepareSetDAC(VAC16,6);
					//prepareSetDAC(VAC16,7);				
					setDAC();
				case 4:
					UDR0=DUMMY_BYTE;	
 41e:	10 92 c6 00 	sts	0x00C6, r1
				
			}
						
			
			UDP_cnt++;
			UDP_cnt%=5;
 422:	80 91 50 01 	lds	r24, 0x0150
 426:	8f 5f       	subi	r24, 0xFF	; 255
 428:	65 e0       	ldi	r22, 0x05	; 5
 42a:	0e 94 6f 05 	call	0xade	; 0xade <__udivmodqi4>
 42e:	90 93 50 01 	sts	0x0150, r25
 432:	35 c2       	rjmp	.+1130   	; 0x89e <__vector_9+0x654>

			
		}
		else if(MD==PROGRAM)
 434:	62 30       	cpi	r22, 0x02	; 2
 436:	09 f0       	breq	.+2      	; 0x43a <__vector_9+0x1f0>
 438:	a3 c0       	rjmp	.+326    	; 0x580 <__vector_9+0x336>
		{
			T=16;
 43a:	80 e1       	ldi	r24, 0x10	; 16
 43c:	80 93 41 01 	sts	0x0141, r24
			static uint16_t adc_h;
			
			if(event_cnt==(1))
 440:	40 91 38 01 	lds	r20, 0x0138
 444:	50 91 39 01 	lds	r21, 0x0139
 448:	41 30       	cpi	r20, 0x01	; 1
 44a:	51 05       	cpc	r21, r1
 44c:	29 f4       	brne	.+10     	; 0x458 <__vector_9+0x20e>
			{	
				UDR0=PROGRAM_done;
 44e:	80 91 25 01 	lds	r24, 0x0125
 452:	80 93 c6 00 	sts	0x00C6, r24
 456:	77 c0       	rjmp	.+238    	; 0x546 <__vector_9+0x2fc>
			}

			if(event_cnt==(2))//ADC GET 
 458:	42 30       	cpi	r20, 0x02	; 2
 45a:	51 05       	cpc	r21, r1
 45c:	59 f4       	brne	.+22     	; 0x474 <__vector_9+0x22a>
			{	
				ADCL_=ADCL;	
 45e:	90 91 78 00 	lds	r25, 0x0078
 462:	90 93 42 01 	sts	0x0142, r25
				ADCH_=ADCH;
 466:	80 91 79 00 	lds	r24, 0x0079
 46a:	80 93 46 01 	sts	0x0146, r24
				UDR0=ADCL_;
 46e:	90 93 c6 00 	sts	0x00C6, r25
 472:	6d c0       	rjmp	.+218    	; 0x54e <__vector_9+0x304>
			}
			
			if(event_cnt==(3))//ADC GET CONTINUE
 474:	43 30       	cpi	r20, 0x03	; 3
 476:	51 05       	cpc	r21, r1
 478:	31 f5       	brne	.+76     	; 0x4c6 <__vector_9+0x27c>
			{	
				
				UDR0=ADCH_;
 47a:	80 91 46 01 	lds	r24, 0x0146
 47e:	80 93 c6 00 	sts	0x00C6, r24
				
				_adc=(ADCL_|(ADCH_ <<8));
 482:	38 2f       	mov	r19, r24
 484:	20 e0       	ldi	r18, 0x00	; 0
 486:	80 91 42 01 	lds	r24, 0x0142
 48a:	90 e0       	ldi	r25, 0x00	; 0
 48c:	82 2b       	or	r24, r18
 48e:	93 2b       	or	r25, r19
 490:	90 93 4b 01 	sts	0x014B, r25
 494:	80 93 4a 01 	sts	0x014A, r24
				adc_h=((uint16_t)(512)-_adc);
 498:	20 e0       	ldi	r18, 0x00	; 0
 49a:	32 e0       	ldi	r19, 0x02	; 2
 49c:	28 1b       	sub	r18, r24
 49e:	39 0b       	sbc	r19, r25
 4a0:	30 93 34 01 	sts	0x0134, r19
 4a4:	20 93 33 01 	sts	0x0133, r18
				
				if((adc_h)==(uint16_t)(t1))
 4a8:	80 91 0a 01 	lds	r24, 0x010A
 4ac:	90 e0       	ldi	r25, 0x00	; 0
 4ae:	28 17       	cp	r18, r24
 4b0:	39 07       	cpc	r19, r25
 4b2:	09 f0       	breq	.+2      	; 0x4b6 <__vector_9+0x26c>
 4b4:	48 c0       	rjmp	.+144    	; 0x546 <__vector_9+0x2fc>
				{
					PROGRAM_done=1;
 4b6:	81 e0       	ldi	r24, 0x01	; 1
 4b8:	80 93 25 01 	sts	0x0125, r24
					prog_val=0;
 4bc:	10 92 1a 01 	sts	0x011A, r1
 4c0:	10 92 19 01 	sts	0x0119, r1
 4c4:	4c c0       	rjmp	.+152    	; 0x55e <__vector_9+0x314>
				}
			}
			
			if(event_cnt==0)
 4c6:	41 15       	cp	r20, r1
 4c8:	51 05       	cpc	r21, r1
 4ca:	e9 f5       	brne	.+122    	; 0x546 <__vector_9+0x2fc>
			{
				UDR0=255;
 4cc:	8f ef       	ldi	r24, 0xFF	; 255
 4ce:	80 93 c6 00 	sts	0x00C6, r24
				
				
				prog_val+=32;
 4d2:	20 91 19 01 	lds	r18, 0x0119
 4d6:	30 91 1a 01 	lds	r19, 0x011A
 4da:	20 5e       	subi	r18, 0xE0	; 224
 4dc:	3f 4f       	sbci	r19, 0xFF	; 255
 4de:	30 93 1a 01 	sts	0x011A, r19
 4e2:	20 93 19 01 	sts	0x0119, r18
				
				if(prog_val==(-x16+32))
 4e6:	40 91 1b 01 	lds	r20, 0x011B
 4ea:	50 91 1c 01 	lds	r21, 0x011C
 4ee:	80 e2       	ldi	r24, 0x20	; 32
 4f0:	90 e0       	ldi	r25, 0x00	; 0
 4f2:	84 1b       	sub	r24, r20
 4f4:	95 0b       	sbc	r25, r21
 4f6:	28 17       	cp	r18, r24
 4f8:	39 07       	cpc	r19, r25
 4fa:	29 f4       	brne	.+10     	; 0x506 <__vector_9+0x2bc>
					prog_val=0;
 4fc:	10 92 1a 01 	sts	0x011A, r1
 500:	10 92 19 01 	sts	0x0119, r1
 504:	13 c0       	rjmp	.+38     	; 0x52c <__vector_9+0x2e2>
				else
				if(prog_val>(t2<<4))
 506:	80 91 0b 01 	lds	r24, 0x010B
 50a:	90 e0       	ldi	r25, 0x00	; 0
 50c:	a4 e0       	ldi	r26, 0x04	; 4
 50e:	88 0f       	add	r24, r24
 510:	99 1f       	adc	r25, r25
 512:	aa 95       	dec	r26
 514:	e1 f7       	brne	.-8      	; 0x50e <__vector_9+0x2c4>
 516:	82 17       	cp	r24, r18
 518:	93 07       	cpc	r25, r19
 51a:	44 f4       	brge	.+16     	; 0x52c <__vector_9+0x2e2>
					prog_val=-x16;
 51c:	88 27       	eor	r24, r24
 51e:	99 27       	eor	r25, r25
 520:	84 1b       	sub	r24, r20
 522:	95 0b       	sbc	r25, r21
 524:	90 93 1a 01 	sts	0x011A, r25
 528:	80 93 19 01 	sts	0x0119, r24
				
				if(PROGRAM_done)
 52c:	80 91 25 01 	lds	r24, 0x0125
 530:	88 23       	and	r24, r24
 532:	21 f0       	breq	.+8      	; 0x53c <__vector_9+0x2f2>
					prog_val=0;
 534:	10 92 1a 01 	sts	0x011A, r1
 538:	10 92 19 01 	sts	0x0119, r1
				
				prepareSetDAC(prog_val,chan);
 53c:	80 91 19 01 	lds	r24, 0x0119
 540:	90 91 1a 01 	lds	r25, 0x011A
 544:	a7 c0       	rjmp	.+334    	; 0x694 <__vector_9+0x44a>
				setDAC();
			}			
			else if(event_cnt==7)//t1
 546:	47 30       	cpi	r20, 0x07	; 7
 548:	51 05       	cpc	r21, r1
 54a:	09 f4       	brne	.+2      	; 0x54e <__vector_9+0x304>
 54c:	a1 c0       	rjmp	.+322    	; 0x690 <__vector_9+0x446>
			{
				prepareSetDAC(0,chan);
				setDAC();
			}
			else if(event_cnt==9)//dT
 54e:	49 30       	cpi	r20, 0x09	; 9
 550:	51 05       	cpc	r21, r1
 552:	29 f4       	brne	.+10     	; 0x55e <__vector_9+0x314>
			{		
				prepareSetDAC(ref16,chan);
 554:	80 91 1d 01 	lds	r24, 0x011D
 558:	90 91 1e 01 	lds	r25, 0x011E
 55c:	9b c0       	rjmp	.+310    	; 0x694 <__vector_9+0x44a>
				setDAC();
			}
			else if(event_cnt==(9+1))
 55e:	4a 30       	cpi	r20, 0x0A	; 10
 560:	51 05       	cpc	r21, r1
 562:	09 f4       	brne	.+2      	; 0x566 <__vector_9+0x31c>
 564:	7a c1       	rjmp	.+756    	; 0x85a <__vector_9+0x610>
				ADCSRA |= (1 << ADSC); 

			else if(event_cnt==14)//
 566:	4e 30       	cpi	r20, 0x0E	; 14
 568:	51 05       	cpc	r21, r1
 56a:	09 f0       	breq	.+2      	; 0x56e <__vector_9+0x324>
 56c:	98 c1       	rjmp	.+816    	; 0x89e <__vector_9+0x654>
			{
				accum=0;
 56e:	10 92 48 01 	sts	0x0148, r1
 572:	10 92 47 01 	sts	0x0147, r1
				ADC_on=0;
 576:	10 92 37 01 	sts	0x0137, r1
				accum_cnt=0;
 57a:	10 92 3e 01 	sts	0x013E, r1
 57e:	88 c0       	rjmp	.+272    	; 0x690 <__vector_9+0x446>
				
				prepareSetDAC(0,chan);
				setDAC();
			}
		}
		else if(MD == ONE_SHOT)
 580:	65 30       	cpi	r22, 0x05	; 5
 582:	09 f0       	breq	.+2      	; 0x586 <__vector_9+0x33c>
 584:	6d c0       	rjmp	.+218    	; 0x660 <__vector_9+0x416>
		{
			//готовим reset
				if(event_cnt==1){
 586:	80 91 38 01 	lds	r24, 0x0138
 58a:	90 91 39 01 	lds	r25, 0x0139
 58e:	81 30       	cpi	r24, 0x01	; 1
 590:	91 05       	cpc	r25, r1
 592:	79 f1       	breq	.+94     	; 0x5f2 <__vector_9+0x3a8>
				separMult();
			}//resetting
			else if(event_cnt==2)
 594:	82 30       	cpi	r24, 0x02	; 2
 596:	91 05       	cpc	r25, r1
 598:	61 f4       	brne	.+24     	; 0x5b2 <__vector_9+0x368>
			{
				prepareSetDAC(reset16,CHAN_4);
 59a:	80 91 1f 01 	lds	r24, 0x011F
 59e:	90 91 20 01 	lds	r25, 0x0120
 5a2:	63 e0       	ldi	r22, 0x03	; 3
 5a4:	0e 94 a3 00 	call	0x146	; 0x146 <prepareSetDAC>
				prepareSetDAC(reset16,CHAN_3);
 5a8:	80 91 1f 01 	lds	r24, 0x011F
 5ac:	90 91 20 01 	lds	r25, 0x0120
 5b0:	51 c0       	rjmp	.+162    	; 0x654 <__vector_9+0x40a>
				setDAC();
			}
			else if(event_cnt==3)
 5b2:	83 30       	cpi	r24, 0x03	; 3
 5b4:	91 05       	cpc	r25, r1
 5b6:	31 f4       	brne	.+12     	; 0x5c4 <__vector_9+0x37a>
			{
				prepareSetDAC(0,CHAN_4);
 5b8:	80 e0       	ldi	r24, 0x00	; 0
 5ba:	90 e0       	ldi	r25, 0x00	; 0
 5bc:	63 e0       	ldi	r22, 0x03	; 3
 5be:	0e 94 a3 00 	call	0x146	; 0x146 <prepareSetDAC>
 5c2:	46 c0       	rjmp	.+140    	; 0x650 <__vector_9+0x406>
				prepareSetDAC(0,CHAN_3);
				setDAC();
			}		//is reset		
			else if(event_cnt==4)
 5c4:	84 30       	cpi	r24, 0x04	; 4
 5c6:	91 05       	cpc	r25, r1
 5c8:	19 f4       	brne	.+6      	; 0x5d0 <__vector_9+0x386>
			{
				gatherMult();
 5ca:	0e 94 7a 00 	call	0xf4	; 0xf4 <gatherMult>
 5ce:	67 c1       	rjmp	.+718    	; 0x89e <__vector_9+0x654>
			}
			else if(event_cnt==5)
 5d0:	85 30       	cpi	r24, 0x05	; 5
 5d2:	91 05       	cpc	r25, r1
 5d4:	29 f4       	brne	.+10     	; 0x5e0 <__vector_9+0x396>
			{
				prepareSetDAC(x16,CHAN_4);				
 5d6:	80 91 1b 01 	lds	r24, 0x011B
 5da:	90 91 1c 01 	lds	r25, 0x011C
 5de:	22 c0       	rjmp	.+68     	; 0x624 <__vector_9+0x3da>
				setDAC();
			}		
			else if(event_cnt==6)
 5e0:	86 30       	cpi	r24, 0x06	; 6
 5e2:	91 05       	cpc	r25, r1
 5e4:	e9 f0       	breq	.+58     	; 0x620 <__vector_9+0x3d6>
				setDAC();
			}	
			
			//пнули		
			//посмотрим, что вышло
			else if(event_cnt==7)
 5e6:	87 30       	cpi	r24, 0x07	; 7
 5e8:	91 05       	cpc	r25, r1
 5ea:	31 f4       	brne	.+12     	; 0x5f8 <__vector_9+0x3ae>
			{
				UDR0=255;//1
 5ec:	8f ef       	ldi	r24, 0xFF	; 255
 5ee:	80 93 c6 00 	sts	0x00C6, r24
				separMult();				
 5f2:	0e 94 83 00 	call	0x106	; 0x106 <separMult>
 5f6:	53 c1       	rjmp	.+678    	; 0x89e <__vector_9+0x654>
			}			
			else if(event_cnt==8)
 5f8:	88 30       	cpi	r24, 0x08	; 8
 5fa:	91 05       	cpc	r25, r1
 5fc:	31 f4       	brne	.+12     	; 0x60a <__vector_9+0x3c0>
			{
				prepareSetDAC(ref16,CHAN_4);
 5fe:	80 91 1d 01 	lds	r24, 0x011D
 602:	90 91 1e 01 	lds	r25, 0x011E
 606:	63 e0       	ldi	r22, 0x03	; 3
 608:	24 c1       	rjmp	.+584    	; 0x852 <__vector_9+0x608>
				setDAC();				
				ADCSRA |= (1 << ADSC); 
			}	
			else if(event_cnt==9)
 60a:	89 30       	cpi	r24, 0x09	; 9
 60c:	91 05       	cpc	r25, r1
 60e:	09 f4       	brne	.+2      	; 0x612 <__vector_9+0x3c8>
 610:	35 c1       	rjmp	.+618    	; 0x87c <__vector_9+0x632>
				//prepareSetDAC(ref16,3);
				ADCL_=ADCL;	
				ADCH_=ADCH;
				UDR0=ADCL_;//2
			}
			else if(event_cnt==10)
 612:	8a 30       	cpi	r24, 0x0A	; 10
 614:	91 05       	cpc	r25, r1
 616:	41 f4       	brne	.+16     	; 0x628 <__vector_9+0x3de>
			{
				UDR0=ADCH_; //3 1st chan
 618:	80 91 46 01 	lds	r24, 0x0146
 61c:	80 93 c6 00 	sts	0x00C6, r24
				
				prepareSetDAC(0,CHAN_4);
 620:	80 e0       	ldi	r24, 0x00	; 0
 622:	90 e0       	ldi	r25, 0x00	; 0
 624:	63 e0       	ldi	r22, 0x03	; 3
 626:	17 c0       	rjmp	.+46     	; 0x656 <__vector_9+0x40c>
				setDAC();
			}		
			//4й просмотрен
			else if(event_cnt==11)
 628:	8b 30       	cpi	r24, 0x0B	; 11
 62a:	91 05       	cpc	r25, r1
 62c:	31 f4       	brne	.+12     	; 0x63a <__vector_9+0x3f0>
			{				 
				prepareSetDAC(ref16,CHAN_3);
 62e:	80 91 1d 01 	lds	r24, 0x011D
 632:	90 91 1e 01 	lds	r25, 0x011E
 636:	62 e0       	ldi	r22, 0x02	; 2
 638:	0c c1       	rjmp	.+536    	; 0x852 <__vector_9+0x608>
				setDAC();
				
				ADCSRA |= (1 << ADSC); 
			}
			else if(event_cnt==12)
 63a:	8c 30       	cpi	r24, 0x0C	; 12
 63c:	91 05       	cpc	r25, r1
 63e:	09 f4       	brne	.+2      	; 0x642 <__vector_9+0x3f8>
 640:	1d c1       	rjmp	.+570    	; 0x87c <__vector_9+0x632>
			{		
				ADCL_=ADCL;	
				ADCH_=ADCH;
				UDR0=ADCL_; //4
			}
			else if(event_cnt == 13)
 642:	0d 97       	sbiw	r24, 0x0d	; 13
 644:	09 f0       	breq	.+2      	; 0x648 <__vector_9+0x3fe>
 646:	2b c1       	rjmp	.+598    	; 0x89e <__vector_9+0x654>
			{
				UDR0=ADCH_; // 5
 648:	80 91 46 01 	lds	r24, 0x0146
 64c:	80 93 c6 00 	sts	0x00C6, r24
				
				prepareSetDAC(0,CHAN_3);
 650:	80 e0       	ldi	r24, 0x00	; 0
 652:	90 e0       	ldi	r25, 0x00	; 0
 654:	62 e0       	ldi	r22, 0x02	; 2
 656:	0e 94 a3 00 	call	0x146	; 0x146 <prepareSetDAC>

	}
}

void setDAC(){
	PORTD&=~(1<<LDAC);
 65a:	5a 98       	cbi	0x0b, 2	; 11
	PORTD|=(1<<LDAC);	
 65c:	5a 9a       	sbi	0x0b, 2	; 11
 65e:	1f c1       	rjmp	.+574    	; 0x89e <__vector_9+0x654>
			}
			
		}
		
		
		else if(MD == ANALYZE)//5 by 5
 660:	66 30       	cpi	r22, 0x06	; 6
 662:	09 f0       	breq	.+2      	; 0x666 <__vector_9+0x41c>
 664:	1c c1       	rjmp	.+568    	; 0x89e <__vector_9+0x654>
		{
			//reset
			if(event_cnt==0)
 666:	80 91 38 01 	lds	r24, 0x0138
 66a:	90 91 39 01 	lds	r25, 0x0139
 66e:	00 97       	sbiw	r24, 0x00	; 0
 670:	61 f4       	brne	.+24     	; 0x68a <__vector_9+0x440>
			{
				prepareSetDAC(reset16, chan);
 672:	80 91 1f 01 	lds	r24, 0x011F
 676:	90 91 20 01 	lds	r25, 0x0120
 67a:	60 91 26 01 	lds	r22, 0x0126
 67e:	0e 94 a3 00 	call	0x146	; 0x146 <prepareSetDAC>

	}
}

void setDAC(){
	PORTD&=~(1<<LDAC);
 682:	5a 98       	cbi	0x0b, 2	; 11
	PORTD|=(1<<LDAC);	
 684:	5a 9a       	sbi	0x0b, 2	; 11
			//reset
			if(event_cnt==0)
			{
				prepareSetDAC(reset16, chan);
				setDAC();
				UDR0=255;
 686:	8f ef       	ldi	r24, 0xFF	; 255
 688:	08 c1       	rjmp	.+528    	; 0x89a <__vector_9+0x650>
			}
			else if(event_cnt==1)
 68a:	81 30       	cpi	r24, 0x01	; 1
 68c:	91 05       	cpc	r25, r1
 68e:	29 f4       	brne	.+10     	; 0x69a <__vector_9+0x450>
			{
				prepareSetDAC(0, chan);				
 690:	80 e0       	ldi	r24, 0x00	; 0
 692:	90 e0       	ldi	r25, 0x00	; 0
 694:	60 91 26 01 	lds	r22, 0x0126
 698:	de cf       	rjmp	.-68     	; 0x656 <__vector_9+0x40c>
				setDAC();
			}
			//create set impulse
			else if(event_cnt==3)
 69a:	83 30       	cpi	r24, 0x03	; 3
 69c:	91 05       	cpc	r25, r1
 69e:	09 f0       	breq	.+2      	; 0x6a2 <__vector_9+0x458>
 6a0:	c7 c0       	rjmp	.+398    	; 0x830 <__vector_9+0x5e6>
			{
				if(an_cnt<(BIG_STAT_N))
 6a2:	40 91 27 01 	lds	r20, 0x0127
 6a6:	50 91 28 01 	lds	r21, 0x0128
 6aa:	20 91 49 01 	lds	r18, 0x0149
 6ae:	82 2f       	mov	r24, r18
 6b0:	90 e0       	ldi	r25, 0x00	; 0
 6b2:	48 17       	cp	r20, r24
 6b4:	59 07       	cpc	r21, r25
 6b6:	18 f4       	brcc	.+6      	; 0x6be <__vector_9+0x474>
				{
					STAT_V_step=0;					 
 6b8:	10 92 23 01 	sts	0x0123, r1
 6bc:	23 c0       	rjmp	.+70     	; 0x704 <__vector_9+0x4ba>
				}
				else if(an_cnt<(BIG_STAT_N*2))
 6be:	82 2f       	mov	r24, r18
 6c0:	90 e0       	ldi	r25, 0x00	; 0
 6c2:	9c 01       	movw	r18, r24
 6c4:	22 0f       	add	r18, r18
 6c6:	33 1f       	adc	r19, r19
 6c8:	42 17       	cp	r20, r18
 6ca:	53 07       	cpc	r21, r19
 6cc:	10 f4       	brcc	.+4      	; 0x6d2 <__vector_9+0x488>
				{
					STAT_V_step=1;
 6ce:	81 e0       	ldi	r24, 0x01	; 1
 6d0:	17 c0       	rjmp	.+46     	; 0x700 <__vector_9+0x4b6>
				}
				else if(an_cnt<(BIG_STAT_N*3))
 6d2:	28 0f       	add	r18, r24
 6d4:	39 1f       	adc	r19, r25
 6d6:	42 17       	cp	r20, r18
 6d8:	53 07       	cpc	r21, r19
 6da:	10 f4       	brcc	.+4      	; 0x6e0 <__vector_9+0x496>
				{
					STAT_V_step=2;
 6dc:	82 e0       	ldi	r24, 0x02	; 2
 6de:	10 c0       	rjmp	.+32     	; 0x700 <__vector_9+0x4b6>
				}
				else if(an_cnt<(BIG_STAT_N*4))
 6e0:	9c 01       	movw	r18, r24
 6e2:	22 0f       	add	r18, r18
 6e4:	33 1f       	adc	r19, r19
 6e6:	22 0f       	add	r18, r18
 6e8:	33 1f       	adc	r19, r19
 6ea:	42 17       	cp	r20, r18
 6ec:	53 07       	cpc	r21, r19
 6ee:	10 f4       	brcc	.+4      	; 0x6f4 <__vector_9+0x4aa>
				{
					STAT_V_step=3;
 6f0:	83 e0       	ldi	r24, 0x03	; 3
 6f2:	06 c0       	rjmp	.+12     	; 0x700 <__vector_9+0x4b6>
				}
				else if(an_cnt<(BIG_STAT_N*5))
 6f4:	28 0f       	add	r18, r24
 6f6:	39 1f       	adc	r19, r25
 6f8:	42 17       	cp	r20, r18
 6fa:	53 07       	cpc	r21, r19
 6fc:	18 f4       	brcc	.+6      	; 0x704 <__vector_9+0x4ba>
				{
					STAT_V_step=4;
 6fe:	84 e0       	ldi	r24, 0x04	; 4
 700:	80 93 23 01 	sts	0x0123, r24
				}////////////						
				//prepareSetDAC(x16, chan);
				UDR0=STAT_V_step;
 704:	80 91 23 01 	lds	r24, 0x0123
 708:	80 93 c6 00 	sts	0x00C6, r24
				x16_grad = (-(STAT_V_step+1)*8 )<<4;//16
 70c:	90 e0       	ldi	r25, 0x00	; 0
 70e:	80 95       	com	r24
 710:	90 95       	com	r25
 712:	96 95       	lsr	r25
 714:	98 2f       	mov	r25, r24
 716:	88 27       	eor	r24, r24
 718:	97 95       	ror	r25
 71a:	87 95       	ror	r24
 71c:	90 93 4d 01 	sts	0x014D, r25
 720:	80 93 4c 01 	sts	0x014C, r24
				prepareSetDAC(x16_grad, chan);
 724:	60 91 26 01 	lds	r22, 0x0126
 728:	0e 94 a3 00 	call	0x146	; 0x146 <prepareSetDAC>

	}
}

void setDAC(){
	PORTD&=~(1<<LDAC);
 72c:	5a 98       	cbi	0x0b, 2	; 11
	PORTD|=(1<<LDAC);	
 72e:	5a 9a       	sbi	0x0b, 2	; 11
				x16_grad = (-(STAT_V_step+1)*8 )<<4;//16
				prepareSetDAC(x16_grad, chan);
				setDAC();
				
				
				if(an_cnt_fast<(STAT_N))//20 us
 730:	40 91 29 01 	lds	r20, 0x0129
 734:	50 91 2a 01 	lds	r21, 0x012A
 738:	80 91 00 01 	lds	r24, 0x0100
 73c:	90 e0       	ldi	r25, 0x00	; 0
 73e:	48 17       	cp	r20, r24
 740:	59 07       	cpc	r21, r25
 742:	18 f4       	brcc	.+6      	; 0x74a <__vector_9+0x500>
				{
					STAT_dt_step=0;									
 744:	10 92 22 01 	sts	0x0122, r1
 748:	49 c0       	rjmp	.+146    	; 0x7dc <__vector_9+0x592>
				}
				else if(an_cnt_fast<(STAT_N*2))//80 us
 74a:	9c 01       	movw	r18, r24
 74c:	22 0f       	add	r18, r18
 74e:	33 1f       	adc	r19, r19
 750:	42 17       	cp	r20, r18
 752:	53 07       	cpc	r21, r19
 754:	60 f4       	brcc	.+24     	; 0x76e <__vector_9+0x524>
				{
					STAT_dt_step=1;
 756:	81 e0       	ldi	r24, 0x01	; 1
 758:	80 93 22 01 	sts	0x0122, r24
 75c:	80 e0       	ldi	r24, 0x00	; 0
 75e:	90 e0       	ldi	r25, 0x00	; 0

	}
}

void setDAC(){
	PORTD&=~(1<<LDAC);
 760:	5a 98       	cbi	0x0b, 2	; 11
	PORTD|=(1<<LDAC);	
 762:	5a 9a       	sbi	0x0b, 2	; 11
					STAT_dt_step=0;									
				}
				else if(an_cnt_fast<(STAT_N*2))//80 us
				{
					STAT_dt_step=1;
					for(int i=0;i<40;i++)//28
 764:	01 96       	adiw	r24, 0x01	; 1
 766:	88 32       	cpi	r24, 0x28	; 40
 768:	91 05       	cpc	r25, r1
 76a:	d1 f7       	brne	.-12     	; 0x760 <__vector_9+0x516>
 76c:	37 c0       	rjmp	.+110    	; 0x7dc <__vector_9+0x592>
					{
					setDAC();
					}
				}
				else if(an_cnt_fast<(STAT_N*3))//220 us
 76e:	28 0f       	add	r18, r24
 770:	39 1f       	adc	r19, r25
 772:	42 17       	cp	r20, r18
 774:	53 07       	cpc	r21, r19
 776:	60 f4       	brcc	.+24     	; 0x790 <__vector_9+0x546>
				{
					STAT_dt_step=2;
 778:	82 e0       	ldi	r24, 0x02	; 2
 77a:	80 93 22 01 	sts	0x0122, r24
 77e:	80 e0       	ldi	r24, 0x00	; 0
 780:	90 e0       	ldi	r25, 0x00	; 0

	}
}

void setDAC(){
	PORTD&=~(1<<LDAC);
 782:	5a 98       	cbi	0x0b, 2	; 11
	PORTD|=(1<<LDAC);	
 784:	5a 9a       	sbi	0x0b, 2	; 11
					}
				}
				else if(an_cnt_fast<(STAT_N*3))//220 us
				{
					STAT_dt_step=2;
					for(int i=0;i<160;i++)
 786:	01 96       	adiw	r24, 0x01	; 1
 788:	80 3a       	cpi	r24, 0xA0	; 160
 78a:	91 05       	cpc	r25, r1
 78c:	d1 f7       	brne	.-12     	; 0x782 <__vector_9+0x538>
 78e:	26 c0       	rjmp	.+76     	; 0x7dc <__vector_9+0x592>
					{
					setDAC();
					}
				}
				else if(an_cnt_fast<(STAT_N*4))//900 us
 790:	88 0f       	add	r24, r24
 792:	99 1f       	adc	r25, r25
 794:	88 0f       	add	r24, r24
 796:	99 1f       	adc	r25, r25
 798:	48 17       	cp	r20, r24
 79a:	59 07       	cpc	r21, r25
 79c:	68 f4       	brcc	.+26     	; 0x7b8 <__vector_9+0x56e>
				{
					STAT_dt_step=3;
 79e:	83 e0       	ldi	r24, 0x03	; 3
 7a0:	80 93 22 01 	sts	0x0122, r24
 7a4:	80 e0       	ldi	r24, 0x00	; 0
 7a6:	90 e0       	ldi	r25, 0x00	; 0

	}
}

void setDAC(){
	PORTD&=~(1<<LDAC);
 7a8:	5a 98       	cbi	0x0b, 2	; 11
	PORTD|=(1<<LDAC);	
 7aa:	5a 9a       	sbi	0x0b, 2	; 11
					}
				}
				else if(an_cnt_fast<(STAT_N*4))//900 us
				{
					STAT_dt_step=3;
					for(int i=0;i<640;i++)
 7ac:	01 96       	adiw	r24, 0x01	; 1
 7ae:	22 e0       	ldi	r18, 0x02	; 2
 7b0:	80 38       	cpi	r24, 0x80	; 128
 7b2:	92 07       	cpc	r25, r18
 7b4:	c9 f7       	brne	.-14     	; 0x7a8 <__vector_9+0x55e>
 7b6:	12 c0       	rjmp	.+36     	; 0x7dc <__vector_9+0x592>
					{
					setDAC();
					}
				}
				else if(an_cnt_fast<(BIG_STAT_N))//3.5 ms
 7b8:	80 91 49 01 	lds	r24, 0x0149
 7bc:	90 e0       	ldi	r25, 0x00	; 0
 7be:	48 17       	cp	r20, r24
 7c0:	59 07       	cpc	r21, r25
 7c2:	60 f4       	brcc	.+24     	; 0x7dc <__vector_9+0x592>
				{
					STAT_dt_step=4;
 7c4:	84 e0       	ldi	r24, 0x04	; 4
 7c6:	80 93 22 01 	sts	0x0122, r24
 7ca:	80 e0       	ldi	r24, 0x00	; 0
 7cc:	90 e0       	ldi	r25, 0x00	; 0

	}
}

void setDAC(){
	PORTD&=~(1<<LDAC);
 7ce:	5a 98       	cbi	0x0b, 2	; 11
	PORTD|=(1<<LDAC);	
 7d0:	5a 9a       	sbi	0x0b, 2	; 11
					}
				}
				else if(an_cnt_fast<(BIG_STAT_N))//3.5 ms
				{
					STAT_dt_step=4;
					for(int i=0;i<2560;i++)
 7d2:	01 96       	adiw	r24, 0x01	; 1
 7d4:	2a e0       	ldi	r18, 0x0A	; 10
 7d6:	80 30       	cpi	r24, 0x00	; 0
 7d8:	92 07       	cpc	r25, r18
 7da:	c9 f7       	brne	.-14     	; 0x7ce <__vector_9+0x584>
					setDAC();
					}
				}////////////////
									
				
				prepareResetDAC(chan);
 7dc:	80 91 26 01 	lds	r24, 0x0126
 7e0:	0e 94 91 00 	call	0x122	; 0x122 <prepareResetDAC>

	}
}

void setDAC(){
	PORTD&=~(1<<LDAC);
 7e4:	5a 98       	cbi	0x0b, 2	; 11
	PORTD|=(1<<LDAC);	
 7e6:	5a 9a       	sbi	0x0b, 2	; 11
									
				
				prepareResetDAC(chan);
				setDAC();			
				
				an_cnt++; // upper				
 7e8:	80 91 27 01 	lds	r24, 0x0127
 7ec:	90 91 28 01 	lds	r25, 0x0128
 7f0:	01 96       	adiw	r24, 0x01	; 1
 7f2:	90 93 28 01 	sts	0x0128, r25
 7f6:	80 93 27 01 	sts	0x0127, r24
				if(an_cnt>(BIG_STAT_N*5)) an_cnt=0; // lower
 7fa:	20 91 49 01 	lds	r18, 0x0149
 7fe:	45 e0       	ldi	r20, 0x05	; 5
 800:	24 9f       	mul	r18, r20
 802:	90 01       	movw	r18, r0
 804:	11 24       	eor	r1, r1
 806:	28 17       	cp	r18, r24
 808:	39 07       	cpc	r19, r25
 80a:	20 f4       	brcc	.+8      	; 0x814 <__vector_9+0x5ca>
 80c:	10 92 28 01 	sts	0x0128, r1
 810:	10 92 27 01 	sts	0x0127, r1
				
				an_cnt_fast = an_cnt%BIG_STAT_N;
 814:	60 91 49 01 	lds	r22, 0x0149
 818:	80 91 27 01 	lds	r24, 0x0127
 81c:	90 91 28 01 	lds	r25, 0x0128
 820:	70 e0       	ldi	r23, 0x00	; 0
 822:	0e 94 7b 05 	call	0xaf6	; 0xaf6 <__udivmodhi4>
 826:	90 93 2a 01 	sts	0x012A, r25
 82a:	80 93 29 01 	sts	0x0129, r24
 82e:	37 c0       	rjmp	.+110    	; 0x89e <__vector_9+0x654>
			}
			else if(event_cnt==4)
 830:	84 30       	cpi	r24, 0x04	; 4
 832:	91 05       	cpc	r25, r1
 834:	29 f4       	brne	.+10     	; 0x840 <__vector_9+0x5f6>
			{
				UDR0=STAT_dt_step;
 836:	80 91 22 01 	lds	r24, 0x0122
 83a:	80 93 c6 00 	sts	0x00C6, r24
 83e:	28 cf       	rjmp	.-432    	; 0x690 <__vector_9+0x446>
				prepareSetDAC(0, chan);
				setDAC();
			}
			else if(event_cnt==6)//start measure
 840:	86 30       	cpi	r24, 0x06	; 6
 842:	91 05       	cpc	r25, r1
 844:	81 f4       	brne	.+32     	; 0x866 <__vector_9+0x61c>
			{
				prepareSetDAC(ref16, chan);
 846:	80 91 1d 01 	lds	r24, 0x011D
 84a:	90 91 1e 01 	lds	r25, 0x011E
 84e:	60 91 26 01 	lds	r22, 0x0126
 852:	0e 94 a3 00 	call	0x146	; 0x146 <prepareSetDAC>

	}
}

void setDAC(){
	PORTD&=~(1<<LDAC);
 856:	5a 98       	cbi	0x0b, 2	; 11
	PORTD|=(1<<LDAC);	
 858:	5a 9a       	sbi	0x0b, 2	; 11
			}
			else if(event_cnt==6)//start measure
			{
				prepareSetDAC(ref16, chan);
				setDAC();
				ADCSRA |= (1 << ADSC); 
 85a:	80 91 7a 00 	lds	r24, 0x007A
 85e:	80 64       	ori	r24, 0x40	; 64
 860:	80 93 7a 00 	sts	0x007A, r24
 864:	1c c0       	rjmp	.+56     	; 0x89e <__vector_9+0x654>
				
			}
			else if(event_cnt==7)
 866:	87 30       	cpi	r24, 0x07	; 7
 868:	91 05       	cpc	r25, r1
 86a:	99 f4       	brne	.+38     	; 0x892 <__vector_9+0x648>
			{
				prepareSetDAC(0, chan);
 86c:	80 e0       	ldi	r24, 0x00	; 0
 86e:	90 e0       	ldi	r25, 0x00	; 0
 870:	60 91 26 01 	lds	r22, 0x0126
 874:	0e 94 a3 00 	call	0x146	; 0x146 <prepareSetDAC>

	}
}

void setDAC(){
	PORTD&=~(1<<LDAC);
 878:	5a 98       	cbi	0x0b, 2	; 11
	PORTD|=(1<<LDAC);	
 87a:	5a 9a       	sbi	0x0b, 2	; 11
			else if(event_cnt==7)
			{
				prepareSetDAC(0, chan);
				setDAC();
				
				ADCL_=ADCL;	
 87c:	90 91 78 00 	lds	r25, 0x0078
 880:	90 93 42 01 	sts	0x0142, r25
				ADCH_=ADCH;
 884:	80 91 79 00 	lds	r24, 0x0079
 888:	80 93 46 01 	sts	0x0146, r24
				UDR0=ADCL_;
 88c:	90 93 c6 00 	sts	0x00C6, r25
 890:	06 c0       	rjmp	.+12     	; 0x89e <__vector_9+0x654>
			}
			else if(event_cnt==8)
 892:	08 97       	sbiw	r24, 0x08	; 8
 894:	21 f4       	brne	.+8      	; 0x89e <__vector_9+0x654>
			{
				UDR0=ADCH_;
 896:	80 91 46 01 	lds	r24, 0x0146
 89a:	80 93 c6 00 	sts	0x00C6, r24
		}
		
		
		
		
		ctr=0;
 89e:	10 92 3d 01 	sts	0x013D, r1
 8a2:	10 92 3c 01 	sts	0x013C, r1
		
		
		if(MD!=ONE_SHOT)
 8a6:	80 91 12 01 	lds	r24, 0x0112
 8aa:	20 91 38 01 	lds	r18, 0x0138
 8ae:	30 91 39 01 	lds	r19, 0x0139
 8b2:	85 30       	cpi	r24, 0x05	; 5
 8b4:	89 f0       	breq	.+34     	; 0x8d8 <__vector_9+0x68e>
		{
		event_cnt++;
 8b6:	2f 5f       	subi	r18, 0xFF	; 255
 8b8:	3f 4f       	sbci	r19, 0xFF	; 255
 8ba:	30 93 39 01 	sts	0x0139, r19
 8be:	20 93 38 01 	sts	0x0138, r18
		if(event_cnt>T)
 8c2:	80 91 41 01 	lds	r24, 0x0141
 8c6:	90 e0       	ldi	r25, 0x00	; 0
 8c8:	82 17       	cp	r24, r18
 8ca:	93 07       	cpc	r25, r19
 8cc:	74 f4       	brge	.+28     	; 0x8ea <__vector_9+0x6a0>
			event_cnt=0;
 8ce:	10 92 39 01 	sts	0x0139, r1
 8d2:	10 92 38 01 	sts	0x0138, r1
 8d6:	09 c0       	rjmp	.+18     	; 0x8ea <__vector_9+0x6a0>
		}
		else
		{
			if(event_cnt<16)
 8d8:	20 31       	cpi	r18, 0x10	; 16
 8da:	31 05       	cpc	r19, r1
 8dc:	34 f4       	brge	.+12     	; 0x8ea <__vector_9+0x6a0>
				event_cnt++;			
 8de:	2f 5f       	subi	r18, 0xFF	; 255
 8e0:	3f 4f       	sbci	r19, 0xFF	; 255
 8e2:	30 93 39 01 	sts	0x0139, r19
 8e6:	20 93 38 01 	sts	0x0138, r18
		}
	}
	ctr++;
 8ea:	80 91 3c 01 	lds	r24, 0x013C
 8ee:	90 91 3d 01 	lds	r25, 0x013D
 8f2:	01 96       	adiw	r24, 0x01	; 1
 8f4:	90 93 3d 01 	sts	0x013D, r25
 8f8:	80 93 3c 01 	sts	0x013C, r24
}
 8fc:	ff 91       	pop	r31
 8fe:	ef 91       	pop	r30
 900:	bf 91       	pop	r27
 902:	af 91       	pop	r26
 904:	9f 91       	pop	r25
 906:	8f 91       	pop	r24
 908:	7f 91       	pop	r23
 90a:	6f 91       	pop	r22
 90c:	5f 91       	pop	r21
 90e:	4f 91       	pop	r20
 910:	3f 91       	pop	r19
 912:	2f 91       	pop	r18
 914:	0f 90       	pop	r0
 916:	0f be       	out	0x3f, r0	; 63
 918:	0f 90       	pop	r0
 91a:	1f 90       	pop	r1
 91c:	18 95       	reti

0000091e <__vector_18>:

//прием команд от компьютера по UART в зависимости от режима
ISR(USART_RX_vect)
{
 91e:	1f 92       	push	r1
 920:	0f 92       	push	r0
 922:	0f b6       	in	r0, 0x3f	; 63
 924:	0f 92       	push	r0
 926:	11 24       	eor	r1, r1
 928:	2f 93       	push	r18
 92a:	3f 93       	push	r19
 92c:	4f 93       	push	r20
 92e:	5f 93       	push	r21
 930:	6f 93       	push	r22
 932:	7f 93       	push	r23
 934:	8f 93       	push	r24
 936:	9f 93       	push	r25
 938:	af 93       	push	r26
 93a:	bf 93       	push	r27
 93c:	ef 93       	push	r30
 93e:	ff 93       	push	r31
	switch(ptr)
 940:	80 91 24 01 	lds	r24, 0x0124
 944:	84 30       	cpi	r24, 0x04	; 4
 946:	09 f4       	brne	.+2      	; 0x94a <__vector_18+0x2c>
 948:	69 c0       	rjmp	.+210    	; 0xa1c <__vector_18+0xfe>
 94a:	85 30       	cpi	r24, 0x05	; 5
 94c:	58 f4       	brcc	.+22     	; 0x964 <__vector_18+0x46>
 94e:	81 30       	cpi	r24, 0x01	; 1
 950:	51 f1       	breq	.+84     	; 0x9a6 <__vector_18+0x88>
 952:	81 30       	cpi	r24, 0x01	; 1
 954:	d0 f0       	brcs	.+52     	; 0x98a <__vector_18+0x6c>
 956:	82 30       	cpi	r24, 0x02	; 2
 958:	09 f4       	brne	.+2      	; 0x95c <__vector_18+0x3e>
 95a:	42 c0       	rjmp	.+132    	; 0x9e0 <__vector_18+0xc2>
 95c:	83 30       	cpi	r24, 0x03	; 3
 95e:	09 f0       	breq	.+2      	; 0x962 <__vector_18+0x44>
 960:	9e c0       	rjmp	.+316    	; 0xa9e <__vector_18+0x180>
 962:	4f c0       	rjmp	.+158    	; 0xa02 <__vector_18+0xe4>
 964:	87 30       	cpi	r24, 0x07	; 7
 966:	09 f4       	brne	.+2      	; 0x96a <__vector_18+0x4c>
 968:	79 c0       	rjmp	.+242    	; 0xa5c <__vector_18+0x13e>
 96a:	88 30       	cpi	r24, 0x08	; 8
 96c:	38 f4       	brcc	.+14     	; 0x97c <__vector_18+0x5e>
 96e:	85 30       	cpi	r24, 0x05	; 5
 970:	09 f4       	brne	.+2      	; 0x974 <__vector_18+0x56>
 972:	6a c0       	rjmp	.+212    	; 0xa48 <__vector_18+0x12a>
 974:	86 30       	cpi	r24, 0x06	; 6
 976:	09 f0       	breq	.+2      	; 0x97a <__vector_18+0x5c>
 978:	92 c0       	rjmp	.+292    	; 0xa9e <__vector_18+0x180>
 97a:	6b c0       	rjmp	.+214    	; 0xa52 <__vector_18+0x134>
 97c:	88 30       	cpi	r24, 0x08	; 8
 97e:	09 f4       	brne	.+2      	; 0x982 <__vector_18+0x64>
 980:	72 c0       	rjmp	.+228    	; 0xa66 <__vector_18+0x148>
 982:	89 30       	cpi	r24, 0x09	; 9
 984:	09 f0       	breq	.+2      	; 0x988 <__vector_18+0x6a>
 986:	8b c0       	rjmp	.+278    	; 0xa9e <__vector_18+0x180>
 988:	73 c0       	rjmp	.+230    	; 0xa70 <__vector_18+0x152>
	{
		case 0:
		if(UDR0!=255)//байт 255 является синхронизирующим
 98a:	80 91 c6 00 	lds	r24, 0x00C6
 98e:	8f 3f       	cpi	r24, 0xFF	; 255
 990:	31 f0       	breq	.+12     	; 0x99e <__vector_18+0x80>
		{
			sync=0;
 992:	10 92 21 01 	sts	0x0121, r1
			ptr--;
			ptr%=7;
 996:	83 e0       	ldi	r24, 0x03	; 3
 998:	80 93 24 01 	sts	0x0124, r24
 99c:	80 c0       	rjmp	.+256    	; 0xa9e <__vector_18+0x180>
		}
		else
			sync=1;
 99e:	81 e0       	ldi	r24, 0x01	; 1
 9a0:	80 93 21 01 	sts	0x0121, r24
 9a4:	7c c0       	rjmp	.+248    	; 0xa9e <__vector_18+0x180>
		break;
		
		
		case 1:
		MD=UDR0;
 9a6:	20 91 c6 00 	lds	r18, 0x00C6
 9aa:	20 93 12 01 	sts	0x0112, r18
		if(MD==VAC)
 9ae:	21 30       	cpi	r18, 0x01	; 1
 9b0:	39 f4       	brne	.+14     	; 0x9c0 <__vector_18+0xa2>
			time_step=4;//5
 9b2:	84 e0       	ldi	r24, 0x04	; 4
 9b4:	90 e0       	ldi	r25, 0x00	; 0
 9b6:	90 93 0f 01 	sts	0x010F, r25
 9ba:	80 93 0e 01 	sts	0x010E, r24
 9be:	6f c0       	rjmp	.+222    	; 0xa9e <__vector_18+0x180>
		else
			time_step=6;//4		
 9c0:	86 e0       	ldi	r24, 0x06	; 6
 9c2:	90 e0       	ldi	r25, 0x00	; 0
 9c4:	90 93 0f 01 	sts	0x010F, r25
 9c8:	80 93 0e 01 	sts	0x010E, r24
		if(MD==PROGRAM)
 9cc:	22 30       	cpi	r18, 0x02	; 2
 9ce:	09 f0       	breq	.+2      	; 0x9d2 <__vector_18+0xb4>
 9d0:	66 c0       	rjmp	.+204    	; 0xa9e <__vector_18+0x180>
		{
			//PROGRAM_start=1;
			PROGRAM_done=0;
 9d2:	10 92 25 01 	sts	0x0125, r1
			prog_val=0;
 9d6:	10 92 1a 01 	sts	0x011A, r1
 9da:	10 92 19 01 	sts	0x0119, r1
 9de:	5f c0       	rjmp	.+190    	; 0xa9e <__vector_18+0x180>
		}
		break;
		
		
		case 2:		
		x16_simple = UDR0;
 9e0:	80 91 c6 00 	lds	r24, 0x00C6
 9e4:	90 e0       	ldi	r25, 0x00	; 0
 9e6:	90 93 44 01 	sts	0x0144, r25
 9ea:	80 93 43 01 	sts	0x0143, r24
		x16 = x16_simple<<4;
 9ee:	44 e0       	ldi	r20, 0x04	; 4
 9f0:	88 0f       	add	r24, r24
 9f2:	99 1f       	adc	r25, r25
 9f4:	4a 95       	dec	r20
 9f6:	e1 f7       	brne	.-8      	; 0x9f0 <__vector_18+0xd2>
 9f8:	90 93 1c 01 	sts	0x011C, r25
 9fc:	80 93 1b 01 	sts	0x011B, r24
 a00:	4e c0       	rjmp	.+156    	; 0xa9e <__vector_18+0x180>
		break;
		case 3:	
		ref16=UDR0<<4;
 a02:	80 91 c6 00 	lds	r24, 0x00C6
 a06:	90 e0       	ldi	r25, 0x00	; 0
 a08:	34 e0       	ldi	r19, 0x04	; 4
 a0a:	88 0f       	add	r24, r24
 a0c:	99 1f       	adc	r25, r25
 a0e:	3a 95       	dec	r19
 a10:	e1 f7       	brne	.-8      	; 0xa0a <__vector_18+0xec>
 a12:	90 93 1e 01 	sts	0x011E, r25
 a16:	80 93 1d 01 	sts	0x011D, r24
 a1a:	41 c0       	rjmp	.+130    	; 0xa9e <__vector_18+0x180>
		break;
		case 4:
		if(MD==PROGRAM)
 a1c:	80 91 12 01 	lds	r24, 0x0112
 a20:	82 30       	cpi	r24, 0x02	; 2
 a22:	29 f4       	brne	.+10     	; 0xa2e <__vector_18+0x110>
			t1=UDR0;
 a24:	80 91 c6 00 	lds	r24, 0x00C6
 a28:	80 93 0a 01 	sts	0x010A, r24
 a2c:	38 c0       	rjmp	.+112    	; 0xa9e <__vector_18+0x180>
		else
			reset16=UDR0<<4;
 a2e:	80 91 c6 00 	lds	r24, 0x00C6
 a32:	90 e0       	ldi	r25, 0x00	; 0
 a34:	24 e0       	ldi	r18, 0x04	; 4
 a36:	88 0f       	add	r24, r24
 a38:	99 1f       	adc	r25, r25
 a3a:	2a 95       	dec	r18
 a3c:	e1 f7       	brne	.-8      	; 0xa36 <__vector_18+0x118>
 a3e:	90 93 20 01 	sts	0x0120, r25
 a42:	80 93 1f 01 	sts	0x011F, r24
 a46:	2b c0       	rjmp	.+86     	; 0xa9e <__vector_18+0x180>
		break;		
		case 5:
		
		t2=UDR0;
 a48:	80 91 c6 00 	lds	r24, 0x00C6
 a4c:	80 93 0b 01 	sts	0x010B, r24
 a50:	26 c0       	rjmp	.+76     	; 0xa9e <__vector_18+0x180>
	
		
		break;	
		case 6:
		dT=UDR0;
 a52:	80 91 c6 00 	lds	r24, 0x00C6
 a56:	80 93 3b 01 	sts	0x013B, r24
 a5a:	21 c0       	rjmp	.+66     	; 0xa9e <__vector_18+0x180>
		break;
		case 7:
		T=UDR0;
 a5c:	80 91 c6 00 	lds	r24, 0x00C6
 a60:	80 93 41 01 	sts	0x0141, r24
 a64:	1c c0       	rjmp	.+56     	; 0xa9e <__vector_18+0x180>
		break;
		case 8:
		chan=UDR0;
 a66:	80 91 c6 00 	lds	r24, 0x00C6
 a6a:	80 93 26 01 	sts	0x0126, r24
 a6e:	17 c0       	rjmp	.+46     	; 0xa9e <__vector_18+0x180>
		break;
		
		case 9:
			reverted[chan]=UDR0;
 a70:	80 91 c6 00 	lds	r24, 0x00C6
 a74:	e0 91 26 01 	lds	r30, 0x0126
 a78:	f0 e0       	ldi	r31, 0x00	; 0
 a7a:	e5 5d       	subi	r30, 0xD5	; 213
 a7c:	fe 4f       	sbci	r31, 0xFE	; 254
 a7e:	80 83       	st	Z, r24
		
			event_cnt=0;			
 a80:	10 92 39 01 	sts	0x0139, r1
 a84:	10 92 38 01 	sts	0x0138, r1
			
			if(MD==GATHER_MULT)
 a88:	80 91 12 01 	lds	r24, 0x0112
 a8c:	83 30       	cpi	r24, 0x03	; 3
 a8e:	19 f4       	brne	.+6      	; 0xa96 <__vector_18+0x178>
			{
			//	PORTD=0b00100000;
			//static int ff=1<<5;
			//if(x16>>4)
			gatherMult();
 a90:	0e 94 7a 00 	call	0xf4	; 0xf4 <gatherMult>
 a94:	04 c0       	rjmp	.+8      	; 0xa9e <__vector_18+0x180>
			//PORTD=(1<<5)^PORTD;
			//PORTD=ff;
			}
			else if(MD==SEPAR_MULT)	
 a96:	84 30       	cpi	r24, 0x04	; 4
 a98:	11 f4       	brne	.+4      	; 0xa9e <__vector_18+0x180>
			{
			separMult();	
 a9a:	0e 94 83 00 	call	0x106	; 0x106 <separMult>
		break;
	}
	

	
	dTt2=dT+t2;
 a9e:	80 91 0b 01 	lds	r24, 0x010B
 aa2:	90 91 3b 01 	lds	r25, 0x013B
 aa6:	89 0f       	add	r24, r25
 aa8:	80 93 0c 01 	sts	0x010C, r24
	//UDR0=x16/16;
	ptr++;
	ptr%=10;
 aac:	80 91 24 01 	lds	r24, 0x0124
 ab0:	8f 5f       	subi	r24, 0xFF	; 255
 ab2:	6a e0       	ldi	r22, 0x0A	; 10
 ab4:	0e 94 6f 05 	call	0xade	; 0xade <__udivmodqi4>
 ab8:	90 93 24 01 	sts	0x0124, r25
 abc:	ff 91       	pop	r31
 abe:	ef 91       	pop	r30
 ac0:	bf 91       	pop	r27
 ac2:	af 91       	pop	r26
 ac4:	9f 91       	pop	r25
 ac6:	8f 91       	pop	r24
 ac8:	7f 91       	pop	r23
 aca:	6f 91       	pop	r22
 acc:	5f 91       	pop	r21
 ace:	4f 91       	pop	r20
 ad0:	3f 91       	pop	r19
 ad2:	2f 91       	pop	r18
 ad4:	0f 90       	pop	r0
 ad6:	0f be       	out	0x3f, r0	; 63
 ad8:	0f 90       	pop	r0
 ada:	1f 90       	pop	r1
 adc:	18 95       	reti

00000ade <__udivmodqi4>:
 ade:	99 1b       	sub	r25, r25
 ae0:	79 e0       	ldi	r23, 0x09	; 9
 ae2:	04 c0       	rjmp	.+8      	; 0xaec <__udivmodqi4_ep>

00000ae4 <__udivmodqi4_loop>:
 ae4:	99 1f       	adc	r25, r25
 ae6:	96 17       	cp	r25, r22
 ae8:	08 f0       	brcs	.+2      	; 0xaec <__udivmodqi4_ep>
 aea:	96 1b       	sub	r25, r22

00000aec <__udivmodqi4_ep>:
 aec:	88 1f       	adc	r24, r24
 aee:	7a 95       	dec	r23
 af0:	c9 f7       	brne	.-14     	; 0xae4 <__udivmodqi4_loop>
 af2:	80 95       	com	r24
 af4:	08 95       	ret

00000af6 <__udivmodhi4>:
 af6:	aa 1b       	sub	r26, r26
 af8:	bb 1b       	sub	r27, r27
 afa:	51 e1       	ldi	r21, 0x11	; 17
 afc:	07 c0       	rjmp	.+14     	; 0xb0c <__udivmodhi4_ep>

00000afe <__udivmodhi4_loop>:
 afe:	aa 1f       	adc	r26, r26
 b00:	bb 1f       	adc	r27, r27
 b02:	a6 17       	cp	r26, r22
 b04:	b7 07       	cpc	r27, r23
 b06:	10 f0       	brcs	.+4      	; 0xb0c <__udivmodhi4_ep>
 b08:	a6 1b       	sub	r26, r22
 b0a:	b7 0b       	sbc	r27, r23

00000b0c <__udivmodhi4_ep>:
 b0c:	88 1f       	adc	r24, r24
 b0e:	99 1f       	adc	r25, r25
 b10:	5a 95       	dec	r21
 b12:	a9 f7       	brne	.-22     	; 0xafe <__udivmodhi4_loop>
 b14:	80 95       	com	r24
 b16:	90 95       	com	r25
 b18:	bc 01       	movw	r22, r24
 b1a:	cd 01       	movw	r24, r26
 b1c:	08 95       	ret

00000b1e <_exit>:
 b1e:	f8 94       	cli

00000b20 <__stop_program>:
 b20:	ff cf       	rjmp	.-2      	; 0xb20 <__stop_program>
