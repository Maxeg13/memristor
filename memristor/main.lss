
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000003a  00800100  00000d9e  00000e32  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000d9e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000071  0080013a  0080013a  00000e6c  2**0
                  ALLOC
  3 .debug_aranges 00000020  00000000  00000000  00000e6c  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000333  00000000  00000000  00000e8c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000a24  00000000  00000000  000011bf  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000023a  00000000  00000000  00001be3  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000b6c  00000000  00000000  00001e1d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000110  00000000  00000000  0000298c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000002ff  00000000  00000000  00002a9c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000111  00000000  00000000  00002d9b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 56 02 	jmp	0x4ac	; 0x4ac <__vector_9>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 c4 05 	jmp	0xb88	; 0xb88 <__vector_18>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ee e9       	ldi	r30, 0x9E	; 158
  7c:	fd e0       	ldi	r31, 0x0D	; 13
  7e:	02 c0       	rjmp	.+4      	; 0x84 <.do_copy_data_start>

00000080 <.do_copy_data_loop>:
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0

00000084 <.do_copy_data_start>:
  84:	aa 33       	cpi	r26, 0x3A	; 58
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <.do_copy_data_loop>

0000008a <__do_clear_bss>:
  8a:	11 e0       	ldi	r17, 0x01	; 1
  8c:	aa e3       	ldi	r26, 0x3A	; 58
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	ab 3a       	cpi	r26, 0xAB	; 171
  96:	b1 07       	cpc	r27, r17
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 00 02 	call	0x400	; 0x400 <main>
  9e:	0c 94 cd 06 	jmp	0xd9a	; 0xd9a <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <set_pin>:
					
struct Pin_t SYNC_PINS[] = {	{&PORTD, PD3}, {&PORTD, PD6}, {&PORTD, PD7}, {&PORTB, PB0}, 		//pd3 for multiplexing or pd5 for 64
						{&PORTB, PB1}, {&PORTC, PC2}, {&PORTC, PC3}, {&PORTC, PC4} };
						
						
void set_pin(struct Pin_t pin) {
  a6:	df 93       	push	r29
  a8:	cf 93       	push	r28
  aa:	00 d0       	rcall	.+0      	; 0xac <set_pin+0x6>
  ac:	0f 92       	push	r0
  ae:	cd b7       	in	r28, 0x3d	; 61
  b0:	de b7       	in	r29, 0x3e	; 62
  b2:	69 83       	std	Y+1, r22	; 0x01
  b4:	7a 83       	std	Y+2, r23	; 0x02
  b6:	8b 83       	std	Y+3, r24	; 0x03
  b8:	e9 81       	ldd	r30, Y+1	; 0x01
  ba:	fa 81       	ldd	r31, Y+2	; 0x02
	SET_PIN(*pin.reg_out, pin.pin);
  bc:	21 e0       	ldi	r18, 0x01	; 1
  be:	30 e0       	ldi	r19, 0x00	; 0
  c0:	02 c0       	rjmp	.+4      	; 0xc6 <set_pin+0x20>
  c2:	22 0f       	add	r18, r18
  c4:	33 1f       	adc	r19, r19
  c6:	8a 95       	dec	r24
  c8:	e2 f7       	brpl	.-8      	; 0xc2 <set_pin+0x1c>
  ca:	80 81       	ld	r24, Z
  cc:	82 2b       	or	r24, r18
  ce:	80 83       	st	Z, r24
}
  d0:	0f 90       	pop	r0
  d2:	0f 90       	pop	r0
  d4:	0f 90       	pop	r0
  d6:	cf 91       	pop	r28
  d8:	df 91       	pop	r29
  da:	08 95       	ret

000000dc <reset_pin>:

void reset_pin(struct Pin_t pin) {
  dc:	df 93       	push	r29
  de:	cf 93       	push	r28
  e0:	00 d0       	rcall	.+0      	; 0xe2 <reset_pin+0x6>
  e2:	0f 92       	push	r0
  e4:	cd b7       	in	r28, 0x3d	; 61
  e6:	de b7       	in	r29, 0x3e	; 62
  e8:	69 83       	std	Y+1, r22	; 0x01
  ea:	7a 83       	std	Y+2, r23	; 0x02
  ec:	8b 83       	std	Y+3, r24	; 0x03
  ee:	e9 81       	ldd	r30, Y+1	; 0x01
  f0:	fa 81       	ldd	r31, Y+2	; 0x02
	RESET_PIN(*pin.reg_out, pin.pin);
  f2:	21 e0       	ldi	r18, 0x01	; 1
  f4:	30 e0       	ldi	r19, 0x00	; 0
  f6:	02 c0       	rjmp	.+4      	; 0xfc <reset_pin+0x20>
  f8:	22 0f       	add	r18, r18
  fa:	33 1f       	adc	r19, r19
  fc:	8a 95       	dec	r24
  fe:	e2 f7       	brpl	.-8      	; 0xf8 <reset_pin+0x1c>
 100:	20 95       	com	r18
 102:	80 81       	ld	r24, Z
 104:	82 23       	and	r24, r18
 106:	80 83       	st	Z, r24
}
 108:	0f 90       	pop	r0
 10a:	0f 90       	pop	r0
 10c:	0f 90       	pop	r0
 10e:	cf 91       	pop	r28
 110:	df 91       	pop	r29
 112:	08 95       	ret

00000114 <gatherMult>:
struct Pin_t sep3_pin = {&PORTD, 7};	
struct Pin_t sep4_pin = {&PORTB, 0};
struct Pin_t resister_pin = {&PORTC, 4};		
void gatherMult()
{
	reset_pin(sep2_pin);
 114:	e0 91 23 01 	lds	r30, 0x0123
 118:	f0 91 24 01 	lds	r31, 0x0124
void set_pin(struct Pin_t pin) {
	SET_PIN(*pin.reg_out, pin.pin);
}

void reset_pin(struct Pin_t pin) {
	RESET_PIN(*pin.reg_out, pin.pin);
 11c:	41 e0       	ldi	r20, 0x01	; 1
 11e:	50 e0       	ldi	r21, 0x00	; 0
 120:	ca 01       	movw	r24, r20
 122:	00 90 25 01 	lds	r0, 0x0125
 126:	02 c0       	rjmp	.+4      	; 0x12c <gatherMult+0x18>
 128:	88 0f       	add	r24, r24
 12a:	99 1f       	adc	r25, r25
 12c:	0a 94       	dec	r0
 12e:	e2 f7       	brpl	.-8      	; 0x128 <gatherMult+0x14>
 130:	80 95       	com	r24
 132:	20 81       	ld	r18, Z
 134:	28 23       	and	r18, r24
 136:	20 83       	st	Z, r18
struct Pin_t sep4_pin = {&PORTB, 0};
struct Pin_t resister_pin = {&PORTC, 4};		
void gatherMult()
{
	reset_pin(sep2_pin);
	reset_pin(sep3_pin);
 138:	e0 91 26 01 	lds	r30, 0x0126
 13c:	f0 91 27 01 	lds	r31, 0x0127
void set_pin(struct Pin_t pin) {
	SET_PIN(*pin.reg_out, pin.pin);
}

void reset_pin(struct Pin_t pin) {
	RESET_PIN(*pin.reg_out, pin.pin);
 140:	ca 01       	movw	r24, r20
 142:	00 90 28 01 	lds	r0, 0x0128
 146:	02 c0       	rjmp	.+4      	; 0x14c <gatherMult+0x38>
 148:	88 0f       	add	r24, r24
 14a:	99 1f       	adc	r25, r25
 14c:	0a 94       	dec	r0
 14e:	e2 f7       	brpl	.-8      	; 0x148 <gatherMult+0x34>
 150:	80 95       	com	r24
 152:	20 81       	ld	r18, Z
 154:	28 23       	and	r18, r24
 156:	20 83       	st	Z, r18
struct Pin_t resister_pin = {&PORTC, 4};		
void gatherMult()
{
	reset_pin(sep2_pin);
	reset_pin(sep3_pin);
	reset_pin(sep1_pin);
 158:	e0 91 20 01 	lds	r30, 0x0120
 15c:	f0 91 21 01 	lds	r31, 0x0121
void set_pin(struct Pin_t pin) {
	SET_PIN(*pin.reg_out, pin.pin);
}

void reset_pin(struct Pin_t pin) {
	RESET_PIN(*pin.reg_out, pin.pin);
 160:	ca 01       	movw	r24, r20
 162:	00 90 22 01 	lds	r0, 0x0122
 166:	02 c0       	rjmp	.+4      	; 0x16c <gatherMult+0x58>
 168:	88 0f       	add	r24, r24
 16a:	99 1f       	adc	r25, r25
 16c:	0a 94       	dec	r0
 16e:	e2 f7       	brpl	.-8      	; 0x168 <gatherMult+0x54>
 170:	80 95       	com	r24
 172:	20 81       	ld	r18, Z
 174:	28 23       	and	r18, r24
 176:	20 83       	st	Z, r18
void gatherMult()
{
	reset_pin(sep2_pin);
	reset_pin(sep3_pin);
	reset_pin(sep1_pin);
	reset_pin(resister_pin);
 178:	e0 91 2c 01 	lds	r30, 0x012C
 17c:	f0 91 2d 01 	lds	r31, 0x012D
void set_pin(struct Pin_t pin) {
	SET_PIN(*pin.reg_out, pin.pin);
}

void reset_pin(struct Pin_t pin) {
	RESET_PIN(*pin.reg_out, pin.pin);
 180:	ca 01       	movw	r24, r20
 182:	00 90 2e 01 	lds	r0, 0x012E
 186:	02 c0       	rjmp	.+4      	; 0x18c <gatherMult+0x78>
 188:	88 0f       	add	r24, r24
 18a:	99 1f       	adc	r25, r25
 18c:	0a 94       	dec	r0
 18e:	e2 f7       	brpl	.-8      	; 0x188 <gatherMult+0x74>
 190:	80 95       	com	r24
 192:	20 81       	ld	r18, Z
 194:	28 23       	and	r18, r24
 196:	20 83       	st	Z, r18
	reset_pin(sep3_pin);
	reset_pin(sep1_pin);
	reset_pin(resister_pin);
	
	// 3-4
	SET_PIN(PORTC, 1);	
 198:	41 9a       	sbi	0x08, 1	; 8
	// 2-3	
	SET_PIN(PORTB, 2);
 19a:	2a 9a       	sbi	0x05, 2	; 5
	// 1-2
	SET_PIN(PORTB, 1);
 19c:	29 9a       	sbi	0x05, 1	; 5
	
	set_pin(sep4_pin);
 19e:	e0 91 29 01 	lds	r30, 0x0129
 1a2:	f0 91 2a 01 	lds	r31, 0x012A
struct Pin_t SYNC_PINS[] = {	{&PORTD, PD3}, {&PORTD, PD6}, {&PORTD, PD7}, {&PORTB, PB0}, 		//pd3 for multiplexing or pd5 for 64
						{&PORTB, PB1}, {&PORTC, PC2}, {&PORTC, PC3}, {&PORTC, PC4} };
						
						
void set_pin(struct Pin_t pin) {
	SET_PIN(*pin.reg_out, pin.pin);
 1a6:	00 90 2b 01 	lds	r0, 0x012B
 1aa:	02 c0       	rjmp	.+4      	; 0x1b0 <gatherMult+0x9c>
 1ac:	44 0f       	add	r20, r20
 1ae:	55 1f       	adc	r21, r21
 1b0:	0a 94       	dec	r0
 1b2:	e2 f7       	brpl	.-8      	; 0x1ac <gatherMult+0x98>
 1b4:	80 81       	ld	r24, Z
 1b6:	84 2b       	or	r24, r20
 1b8:	80 83       	st	Z, r24
	SET_PIN(PORTB, 2);
	// 1-2
	SET_PIN(PORTB, 1);
	
	set_pin(sep4_pin);
}
 1ba:	08 95       	ret

000001bc <usualMult>:
void usualMult()
{
	RESET_PIN(PORTB, 1);
 1bc:	29 98       	cbi	0x05, 1	; 5
	RESET_PIN(PORTB, 2);
 1be:	2a 98       	cbi	0x05, 2	; 5
	RESET_PIN(PORTC, 1);
 1c0:	41 98       	cbi	0x08, 1	; 8
	
	set_pin(resister_pin);
 1c2:	e0 91 2c 01 	lds	r30, 0x012C
 1c6:	f0 91 2d 01 	lds	r31, 0x012D
struct Pin_t SYNC_PINS[] = {	{&PORTD, PD3}, {&PORTD, PD6}, {&PORTD, PD7}, {&PORTB, PB0}, 		//pd3 for multiplexing or pd5 for 64
						{&PORTB, PB1}, {&PORTC, PC2}, {&PORTC, PC3}, {&PORTC, PC4} };
						
						
void set_pin(struct Pin_t pin) {
	SET_PIN(*pin.reg_out, pin.pin);
 1ca:	21 e0       	ldi	r18, 0x01	; 1
 1cc:	30 e0       	ldi	r19, 0x00	; 0
 1ce:	a9 01       	movw	r20, r18
 1d0:	00 90 2e 01 	lds	r0, 0x012E
 1d4:	02 c0       	rjmp	.+4      	; 0x1da <usualMult+0x1e>
 1d6:	44 0f       	add	r20, r20
 1d8:	55 1f       	adc	r21, r21
 1da:	0a 94       	dec	r0
 1dc:	e2 f7       	brpl	.-8      	; 0x1d6 <usualMult+0x1a>
 1de:	80 81       	ld	r24, Z
 1e0:	84 2b       	or	r24, r20
 1e2:	80 83       	st	Z, r24
	RESET_PIN(PORTB, 1);
	RESET_PIN(PORTB, 2);
	RESET_PIN(PORTC, 1);
	
	set_pin(resister_pin);
	set_pin(sep2_pin);
 1e4:	e0 91 23 01 	lds	r30, 0x0123
 1e8:	f0 91 24 01 	lds	r31, 0x0124
struct Pin_t SYNC_PINS[] = {	{&PORTD, PD3}, {&PORTD, PD6}, {&PORTD, PD7}, {&PORTB, PB0}, 		//pd3 for multiplexing or pd5 for 64
						{&PORTB, PB1}, {&PORTC, PC2}, {&PORTC, PC3}, {&PORTC, PC4} };
						
						
void set_pin(struct Pin_t pin) {
	SET_PIN(*pin.reg_out, pin.pin);
 1ec:	a9 01       	movw	r20, r18
 1ee:	00 90 25 01 	lds	r0, 0x0125
 1f2:	02 c0       	rjmp	.+4      	; 0x1f8 <usualMult+0x3c>
 1f4:	44 0f       	add	r20, r20
 1f6:	55 1f       	adc	r21, r21
 1f8:	0a 94       	dec	r0
 1fa:	e2 f7       	brpl	.-8      	; 0x1f4 <usualMult+0x38>
 1fc:	80 81       	ld	r24, Z
 1fe:	84 2b       	or	r24, r20
 200:	80 83       	st	Z, r24
	RESET_PIN(PORTB, 2);
	RESET_PIN(PORTC, 1);
	
	set_pin(resister_pin);
	set_pin(sep2_pin);
	set_pin(sep3_pin);
 202:	e0 91 26 01 	lds	r30, 0x0126
 206:	f0 91 27 01 	lds	r31, 0x0127
struct Pin_t SYNC_PINS[] = {	{&PORTD, PD3}, {&PORTD, PD6}, {&PORTD, PD7}, {&PORTB, PB0}, 		//pd3 for multiplexing or pd5 for 64
						{&PORTB, PB1}, {&PORTC, PC2}, {&PORTC, PC3}, {&PORTC, PC4} };
						
						
void set_pin(struct Pin_t pin) {
	SET_PIN(*pin.reg_out, pin.pin);
 20a:	a9 01       	movw	r20, r18
 20c:	00 90 28 01 	lds	r0, 0x0128
 210:	02 c0       	rjmp	.+4      	; 0x216 <usualMult+0x5a>
 212:	44 0f       	add	r20, r20
 214:	55 1f       	adc	r21, r21
 216:	0a 94       	dec	r0
 218:	e2 f7       	brpl	.-8      	; 0x212 <usualMult+0x56>
 21a:	80 81       	ld	r24, Z
 21c:	84 2b       	or	r24, r20
 21e:	80 83       	st	Z, r24
	RESET_PIN(PORTC, 1);
	
	set_pin(resister_pin);
	set_pin(sep2_pin);
	set_pin(sep3_pin);
	set_pin(sep4_pin);
 220:	e0 91 29 01 	lds	r30, 0x0129
 224:	f0 91 2a 01 	lds	r31, 0x012A
struct Pin_t SYNC_PINS[] = {	{&PORTD, PD3}, {&PORTD, PD6}, {&PORTD, PD7}, {&PORTB, PB0}, 		//pd3 for multiplexing or pd5 for 64
						{&PORTB, PB1}, {&PORTC, PC2}, {&PORTC, PC3}, {&PORTC, PC4} };
						
						
void set_pin(struct Pin_t pin) {
	SET_PIN(*pin.reg_out, pin.pin);
 228:	a9 01       	movw	r20, r18
 22a:	00 90 2b 01 	lds	r0, 0x012B
 22e:	02 c0       	rjmp	.+4      	; 0x234 <usualMult+0x78>
 230:	44 0f       	add	r20, r20
 232:	55 1f       	adc	r21, r21
 234:	0a 94       	dec	r0
 236:	e2 f7       	brpl	.-8      	; 0x230 <usualMult+0x74>
 238:	80 81       	ld	r24, Z
 23a:	84 2b       	or	r24, r20
 23c:	80 83       	st	Z, r24
	
	set_pin(resister_pin);
	set_pin(sep2_pin);
	set_pin(sep3_pin);
	set_pin(sep4_pin);
	set_pin(sep1_pin);
 23e:	e0 91 20 01 	lds	r30, 0x0120
 242:	f0 91 21 01 	lds	r31, 0x0121
struct Pin_t SYNC_PINS[] = {	{&PORTD, PD3}, {&PORTD, PD6}, {&PORTD, PD7}, {&PORTB, PB0}, 		//pd3 for multiplexing or pd5 for 64
						{&PORTB, PB1}, {&PORTC, PC2}, {&PORTC, PC3}, {&PORTC, PC4} };
						
						
void set_pin(struct Pin_t pin) {
	SET_PIN(*pin.reg_out, pin.pin);
 246:	00 90 22 01 	lds	r0, 0x0122
 24a:	02 c0       	rjmp	.+4      	; 0x250 <usualMult+0x94>
 24c:	22 0f       	add	r18, r18
 24e:	33 1f       	adc	r19, r19
 250:	0a 94       	dec	r0
 252:	e2 f7       	brpl	.-8      	; 0x24c <usualMult+0x90>
 254:	80 81       	ld	r24, Z
 256:	82 2b       	or	r24, r18
 258:	80 83       	st	Z, r24
	set_pin(resister_pin);
	set_pin(sep2_pin);
	set_pin(sep3_pin);
	set_pin(sep4_pin);
	set_pin(sep1_pin);
}
 25a:	08 95       	ret

0000025c <set_reverser>:
		else
			PORTB&=~(1<<4);
		break;

	}
}
 25c:	08 95       	ret

0000025e <ADC_Init>:
}

//функция инициализаци АЦП
//АЦП используется для регистрации тока, проходящего через мемристор
void ADC_Init(){
 ADCSRA |= (1 << ADEN) // Включаем АЦП
 25e:	ea e7       	ldi	r30, 0x7A	; 122
 260:	f0 e0       	ldi	r31, 0x00	; 0
 262:	80 81       	ld	r24, Z
 264:	83 68       	ori	r24, 0x83	; 131
 266:	80 83       	st	Z, r24
 //ADCSRA&=~(1 << ADPS1)|(1 << ADPS0)|(1 << ADPS1);
 |(1 << ADPS1)|(1 << ADPS0)|(1 << ADPS1);    // устанавливаем предделитель преобразователя на 8
 ADMUX |= (0 << REFS1)|(1 << REFS0) //выставляем опорное напряжение, как внешний ИОН
 268:	ec e7       	ldi	r30, 0x7C	; 124
 26a:	f0 e0       	ldi	r31, 0x00	; 0
 26c:	80 81       	ld	r24, Z
 26e:	80 64       	ori	r24, 0x40	; 64
 270:	80 83       	st	Z, r24
 |(0 << MUX0)|(0 << MUX1)|(0 << MUX2)|(0 << MUX3); // снимать сигнал будем с  входа PC0 
}
 272:	08 95       	ret

00000274 <timer_init>:

//функция инициализации таймера
// Таймер используется для формирования временной последовательности значений, формируемых с ЦАПа
void timer_init()
{
    TCCR2A = 0;        
 274:	10 92 b0 00 	sts	0x00B0, r1
    TCCR2B = 0;
 278:	e1 eb       	ldi	r30, 0xB1	; 177
 27a:	f0 e0       	ldi	r31, 0x00	; 0
 27c:	10 82       	st	Z, r1
    
    TCCR2B |= (1<<CS21) ;    
 27e:	80 81       	ld	r24, Z
 280:	82 60       	ori	r24, 0x02	; 2
 282:	80 83       	st	Z, r24
    TIMSK2 = (1 << TOIE2);
 284:	81 e0       	ldi	r24, 0x01	; 1
 286:	80 93 70 00 	sts	0x0070, r24
}
 28a:	08 95       	ret

0000028c <uart_init>:

//функция инициализации UART-интерфейса
void uart_init(unsigned int ubrr)
{	
	UBRR0H = (unsigned char)(ubrr>>8);
 28c:	90 93 c5 00 	sts	0x00C5, r25
	UBRR0L = (unsigned char)ubrr;
 290:	80 93 c4 00 	sts	0x00C4, r24
	UCSR0B = (1<<RXCIE0)|(1<<RXEN0)|(1<<TXEN0);
 294:	88 e9       	ldi	r24, 0x98	; 152
 296:	80 93 c1 00 	sts	0x00C1, r24
	UCSR0C = (1<<USBS0)|(3<<UCSZ00);
 29a:	8e e0       	ldi	r24, 0x0E	; 14
 29c:	80 93 c2 00 	sts	0x00C2, r24
}
 2a0:	08 95       	ret

000002a2 <SPI_MasterInit>:

//функция инициализации SPI
void SPI_MasterInit()
{
	DDR_SPI |= (1<<DD_MOSI)|(1<<DD_SCK)|(1<<SPI_SS);
 2a2:	84 b1       	in	r24, 0x04	; 4
 2a4:	8c 62       	ori	r24, 0x2C	; 44
 2a6:	84 b9       	out	0x04, r24	; 4
	SPCR = (1<<SPE)|(0<<DORD)|(1<<MSTR)|(1<<CPOL)|(0<<CPHA);//|(1<<SPR1)|(0<<SPR0);
 2a8:	88 e5       	ldi	r24, 0x58	; 88
 2aa:	8c bd       	out	0x2c, r24	; 44
}
 2ac:	08 95       	ret

000002ae <SPI_WriteByte>:



void SPI_WriteByte(uint8_t data)
{
   SPDR = data;
 2ae:	8e bd       	out	0x2e, r24	; 46
  while(!(SPSR & (1<<SPIF)));
 2b0:	0d b4       	in	r0, 0x2d	; 45
 2b2:	07 fe       	sbrs	r0, 7
 2b4:	fd cf       	rjmp	.-6      	; 0x2b0 <SPI_WriteByte+0x2>
}
 2b6:	08 95       	ret

000002b8 <prepareResetDAC>:




void prepareResetDAC(int8_t chan)//_____________bipolar!!! and <<4 larger
{
 2b8:	ef 92       	push	r14
 2ba:	ff 92       	push	r15
 2bc:	0f 93       	push	r16
 2be:	1f 93       	push	r17
	reset_pin(SYNC_PINS[chan>>3]);
 2c0:	28 2f       	mov	r18, r24
 2c2:	25 95       	asr	r18
 2c4:	25 95       	asr	r18
 2c6:	25 95       	asr	r18
 2c8:	33 27       	eor	r19, r19
 2ca:	27 fd       	sbrc	r18, 7
 2cc:	30 95       	com	r19
 2ce:	89 01       	movw	r16, r18
 2d0:	00 0f       	add	r16, r16
 2d2:	11 1f       	adc	r17, r17
 2d4:	02 0f       	add	r16, r18
 2d6:	13 1f       	adc	r17, r19
 2d8:	08 5f       	subi	r16, 0xF8	; 248
 2da:	1e 4f       	sbci	r17, 0xFE	; 254
 2dc:	d8 01       	movw	r26, r16
 2de:	ed 91       	ld	r30, X+
 2e0:	fc 91       	ld	r31, X
 2e2:	11 97       	sbiw	r26, 0x01	; 1
void set_pin(struct Pin_t pin) {
	SET_PIN(*pin.reg_out, pin.pin);
}

void reset_pin(struct Pin_t pin) {
	RESET_PIN(*pin.reg_out, pin.pin);
 2e4:	91 e0       	ldi	r25, 0x01	; 1
 2e6:	e9 2e       	mov	r14, r25
 2e8:	f1 2c       	mov	r15, r1
 2ea:	97 01       	movw	r18, r14
 2ec:	12 96       	adiw	r26, 0x02	; 2
 2ee:	0c 90       	ld	r0, X
 2f0:	02 c0       	rjmp	.+4      	; 0x2f6 <prepareResetDAC+0x3e>
 2f2:	22 0f       	add	r18, r18
 2f4:	33 1f       	adc	r19, r19
 2f6:	0a 94       	dec	r0
 2f8:	e2 f7       	brpl	.-8      	; 0x2f2 <prepareResetDAC+0x3a>
 2fa:	20 95       	com	r18
 2fc:	90 81       	ld	r25, Z
 2fe:	92 23       	and	r25, r18
 300:	90 83       	st	Z, r25
	SPI_WriteByte(0b00001000|chan_addrs[chan%8]); // magic numbers, fuck
 302:	68 e0       	ldi	r22, 0x08	; 8
 304:	0e 94 ac 06 	call	0xd58	; 0xd58 <__divmodqi4>
 308:	e9 2f       	mov	r30, r25
 30a:	ff 27       	eor	r31, r31
 30c:	e7 fd       	sbrc	r30, 7
 30e:	f0 95       	com	r31
 310:	e0 50       	subi	r30, 0x00	; 0
 312:	ff 4f       	sbci	r31, 0xFF	; 255
 314:	80 81       	ld	r24, Z
 316:	88 60       	ori	r24, 0x08	; 8
 318:	90 e0       	ldi	r25, 0x00	; 0
 31a:	0e 94 57 01 	call	0x2ae	; 0x2ae <SPI_WriteByte>
	SPI_WriteByte(0);		
 31e:	80 e0       	ldi	r24, 0x00	; 0
 320:	90 e0       	ldi	r25, 0x00	; 0
 322:	0e 94 57 01 	call	0x2ae	; 0x2ae <SPI_WriteByte>
	set_pin(SYNC_PINS[chan>>3]);
 326:	d8 01       	movw	r26, r16
 328:	ed 91       	ld	r30, X+
 32a:	fc 91       	ld	r31, X
 32c:	11 97       	sbiw	r26, 0x01	; 1
struct Pin_t SYNC_PINS[] = {	{&PORTD, PD3}, {&PORTD, PD6}, {&PORTD, PD7}, {&PORTB, PB0}, 		//pd3 for multiplexing or pd5 for 64
						{&PORTB, PB1}, {&PORTC, PC2}, {&PORTC, PC3}, {&PORTC, PC4} };
						
						
void set_pin(struct Pin_t pin) {
	SET_PIN(*pin.reg_out, pin.pin);
 32e:	12 96       	adiw	r26, 0x02	; 2
 330:	0c 90       	ld	r0, X
 332:	02 c0       	rjmp	.+4      	; 0x338 <prepareResetDAC+0x80>
 334:	ee 0c       	add	r14, r14
 336:	ff 1c       	adc	r15, r15
 338:	0a 94       	dec	r0
 33a:	e2 f7       	brpl	.-8      	; 0x334 <prepareResetDAC+0x7c>
 33c:	80 81       	ld	r24, Z
 33e:	8e 29       	or	r24, r14
 340:	80 83       	st	Z, r24
}
 342:	1f 91       	pop	r17
 344:	0f 91       	pop	r16
 346:	ff 90       	pop	r15
 348:	ef 90       	pop	r14
 34a:	08 95       	ret

0000034c <prepareSetDAC>:

//функция управления ЦАПом 
// при этом, управление регистром LDAC должно использоваться 
//вне функции в перспепктиве создания многоканальной схемы
void prepareSetDAC(int16_t x,uint8_t chan)//_____________bipolar!!! and <<4 larger
{
 34c:	cf 92       	push	r12
 34e:	df 92       	push	r13
 350:	ef 92       	push	r14
 352:	ff 92       	push	r15
 354:	0f 93       	push	r16
 356:	1f 93       	push	r17
 358:	cf 93       	push	r28
 35a:	df 93       	push	r29
 35c:	e6 2f       	mov	r30, r22
	static uint8_t send8;
	
	x=-x;
 35e:	ee 24       	eor	r14, r14
 360:	ff 24       	eor	r15, r15
 362:	e8 1a       	sub	r14, r24
 364:	f9 0a       	sbc	r15, r25
	x+=2048;
 366:	80 e0       	ldi	r24, 0x00	; 0
 368:	98 e0       	ldi	r25, 0x08	; 8
 36a:	e8 0e       	add	r14, r24
 36c:	f9 1e       	adc	r15, r25
	uint8_t DAC = chan>>3;
	reset_pin(SYNC_PINS[DAC]);
 36e:	86 2f       	mov	r24, r22
 370:	86 95       	lsr	r24
 372:	86 95       	lsr	r24
 374:	86 95       	lsr	r24
 376:	90 e0       	ldi	r25, 0x00	; 0
 378:	8c 01       	movw	r16, r24
 37a:	00 0f       	add	r16, r16
 37c:	11 1f       	adc	r17, r17
 37e:	08 0f       	add	r16, r24
 380:	19 1f       	adc	r17, r25
 382:	08 5f       	subi	r16, 0xF8	; 248
 384:	1e 4f       	sbci	r17, 0xFE	; 254
 386:	e8 01       	movw	r28, r16
 388:	a8 81       	ld	r26, Y
 38a:	b9 81       	ldd	r27, Y+1	; 0x01
}

void reset_pin(struct Pin_t pin) {
	RESET_PIN(*pin.reg_out, pin.pin);
 38c:	61 e0       	ldi	r22, 0x01	; 1
 38e:	c6 2e       	mov	r12, r22
 390:	d1 2c       	mov	r13, r1
 392:	c6 01       	movw	r24, r12
 394:	0a 80       	ldd	r0, Y+2	; 0x02
 396:	02 c0       	rjmp	.+4      	; 0x39c <prepareSetDAC+0x50>
 398:	88 0f       	add	r24, r24
 39a:	99 1f       	adc	r25, r25
 39c:	0a 94       	dec	r0
 39e:	e2 f7       	brpl	.-8      	; 0x398 <prepareSetDAC+0x4c>
 3a0:	80 95       	com	r24
 3a2:	2c 91       	ld	r18, X
 3a4:	28 23       	and	r18, r24
 3a6:	2c 93       	st	X, r18
	send8 = (x >> 8);
	send8 &= 0b00001111;
	send8|= (chan_addrs[chan%8]);
	SPI_WriteByte(send8);
 3a8:	8f 2d       	mov	r24, r15
 3aa:	99 27       	eor	r25, r25
 3ac:	87 fd       	sbrc	r24, 7
 3ae:	9a 95       	dec	r25
 3b0:	8f 70       	andi	r24, 0x0F	; 15
 3b2:	f0 e0       	ldi	r31, 0x00	; 0
 3b4:	e7 70       	andi	r30, 0x07	; 7
 3b6:	f0 70       	andi	r31, 0x00	; 0
 3b8:	e0 50       	subi	r30, 0x00	; 0
 3ba:	ff 4f       	sbci	r31, 0xFF	; 255
 3bc:	20 81       	ld	r18, Z
 3be:	82 2b       	or	r24, r18
 3c0:	90 e0       	ldi	r25, 0x00	; 0
 3c2:	0e 94 57 01 	call	0x2ae	; 0x2ae <SPI_WriteByte>
	send8=x;
 3c6:	e0 92 95 01 	sts	0x0195, r14
	SPI_WriteByte(send8);		
 3ca:	8e 2d       	mov	r24, r14
 3cc:	90 e0       	ldi	r25, 0x00	; 0
 3ce:	0e 94 57 01 	call	0x2ae	; 0x2ae <SPI_WriteByte>
	set_pin(SYNC_PINS[DAC]);
 3d2:	e8 81       	ld	r30, Y
 3d4:	f9 81       	ldd	r31, Y+1	; 0x01
struct Pin_t SYNC_PINS[] = {	{&PORTD, PD3}, {&PORTD, PD6}, {&PORTD, PD7}, {&PORTB, PB0}, 		//pd3 for multiplexing or pd5 for 64
						{&PORTB, PB1}, {&PORTC, PC2}, {&PORTC, PC3}, {&PORTC, PC4} };
						
						
void set_pin(struct Pin_t pin) {
	SET_PIN(*pin.reg_out, pin.pin);
 3d6:	0a 80       	ldd	r0, Y+2	; 0x02
 3d8:	02 c0       	rjmp	.+4      	; 0x3de <prepareSetDAC+0x92>
 3da:	cc 0c       	add	r12, r12
 3dc:	dd 1c       	adc	r13, r13
 3de:	0a 94       	dec	r0
 3e0:	e2 f7       	brpl	.-8      	; 0x3da <prepareSetDAC+0x8e>
 3e2:	80 81       	ld	r24, Z
 3e4:	8c 29       	or	r24, r12
 3e6:	80 83       	st	Z, r24
}
 3e8:	df 91       	pop	r29
 3ea:	cf 91       	pop	r28
 3ec:	1f 91       	pop	r17
 3ee:	0f 91       	pop	r16
 3f0:	ff 90       	pop	r15
 3f2:	ef 90       	pop	r14
 3f4:	df 90       	pop	r13
 3f6:	cf 90       	pop	r12
 3f8:	08 95       	ret

000003fa <setDAC>:
  while(!(SPSR & (1<<SPIF)));
}


void setDAC(){
	PORTD&=~(1<<LDAC);
 3fa:	5a 98       	cbi	0x0b, 2	; 11
	PORTD|=(1<<LDAC);	
 3fc:	5a 9a       	sbi	0x0b, 2	; 11
}
 3fe:	08 95       	ret

00000400 <main>:


void main(void)
{
 400:	1f 93       	push	r17
	BIG_STAT_N = STAT_N*STAT_CYCLE;
 402:	80 91 30 01 	lds	r24, 0x0130
 406:	90 91 2f 01 	lds	r25, 0x012F
 40a:	89 9f       	mul	r24, r25
 40c:	80 2d       	mov	r24, r0
 40e:	11 24       	eor	r1, r1
 410:	80 93 a3 01 	sts	0x01A3, r24
 414:	e0 e0       	ldi	r30, 0x00	; 0
 416:	f1 e0       	ldi	r31, 0x01	; 1
	
	for (uint8_t i=0; i< 8;i++)
		chan_addrs[i]=chan_addrs[i]<<4;
 418:	80 81       	ld	r24, Z
 41a:	82 95       	swap	r24
 41c:	80 7f       	andi	r24, 0xF0	; 240
 41e:	81 93       	st	Z+, r24

void main(void)
{
	BIG_STAT_N = STAT_N*STAT_CYCLE;
	
	for (uint8_t i=0; i< 8;i++)
 420:	81 e0       	ldi	r24, 0x01	; 1
 422:	e8 30       	cpi	r30, 0x08	; 8
 424:	f8 07       	cpc	r31, r24
 426:	c1 f7       	brne	.-16     	; 0x418 <main+0x18>
		chan_addrs[i]=chan_addrs[i]<<4;
	
	DDRC= 0b00011110;
 428:	8e e1       	ldi	r24, 0x1E	; 30
 42a:	87 b9       	out	0x07, r24	; 7
	DDRD =0b11111111;	
 42c:	8f ef       	ldi	r24, 0xFF	; 255
 42e:	8a b9       	out	0x0a, r24	; 10
	DDRB= 0b00011111;
 430:	8f e1       	ldi	r24, 0x1F	; 31
 432:	84 b9       	out	0x04, r24	; 4
	sei();
 434:	78 94       	sei
}

//функция инициализации SPI
void SPI_MasterInit()
{
	DDR_SPI |= (1<<DD_MOSI)|(1<<DD_SCK)|(1<<SPI_SS);
 436:	84 b1       	in	r24, 0x04	; 4
 438:	8c 62       	ori	r24, 0x2C	; 44
 43a:	84 b9       	out	0x04, r24	; 4
	SPCR = (1<<SPE)|(0<<DORD)|(1<<MSTR)|(1<<CPOL)|(0<<CPHA);//|(1<<SPR1)|(0<<SPR0);
 43c:	88 e5       	ldi	r24, 0x58	; 88
 43e:	8c bd       	out	0x2c, r24	; 44

//функция инициализации таймера
// Таймер используется для формирования временной последовательности значений, формируемых с ЦАПа
void timer_init()
{
    TCCR2A = 0;        
 440:	10 92 b0 00 	sts	0x00B0, r1
    TCCR2B = 0;
 444:	10 92 b1 00 	sts	0x00B1, r1
    
    TCCR2B |= (1<<CS21) ;    
 448:	80 91 b1 00 	lds	r24, 0x00B1
 44c:	82 60       	ori	r24, 0x02	; 2
 44e:	80 93 b1 00 	sts	0x00B1, r24
    TIMSK2 = (1 << TOIE2);
 452:	81 e0       	ldi	r24, 0x01	; 1
 454:	80 93 70 00 	sts	0x0070, r24
}

//функция инициализации UART-интерфейса
void uart_init(unsigned int ubrr)
{	
	UBRR0H = (unsigned char)(ubrr>>8);
 458:	10 92 c5 00 	sts	0x00C5, r1
	UBRR0L = (unsigned char)ubrr;
 45c:	83 e3       	ldi	r24, 0x33	; 51
 45e:	80 93 c4 00 	sts	0x00C4, r24
	UCSR0B = (1<<RXCIE0)|(1<<RXEN0)|(1<<TXEN0);
 462:	88 e9       	ldi	r24, 0x98	; 152
 464:	80 93 c1 00 	sts	0x00C1, r24
	UCSR0C = (1<<USBS0)|(3<<UCSZ00);
 468:	8e e0       	ldi	r24, 0x0E	; 14
 46a:	80 93 c2 00 	sts	0x00C2, r24
}

//функция инициализаци АЦП
//АЦП используется для регистрации тока, проходящего через мемристор
void ADC_Init(){
 ADCSRA |= (1 << ADEN) // Включаем АЦП
 46e:	80 91 7a 00 	lds	r24, 0x007A
 472:	83 68       	ori	r24, 0x83	; 131
 474:	80 93 7a 00 	sts	0x007A, r24
 //ADCSRA&=~(1 << ADPS1)|(1 << ADPS0)|(1 << ADPS1);
 |(1 << ADPS1)|(1 << ADPS0)|(1 << ADPS1);    // устанавливаем предделитель преобразователя на 8
 ADMUX |= (0 << REFS1)|(1 << REFS0) //выставляем опорное напряжение, как внешний ИОН
 478:	80 91 7c 00 	lds	r24, 0x007C
 47c:	80 64       	ori	r24, 0x40	; 64
 47e:	80 93 7c 00 	sts	0x007C, r24
	timer_init();
	
	uart_init(BAUDRATE);
	ADC_Init();
	
	ADCSRA |= (1 << ADSC); 
 482:	80 91 7a 00 	lds	r24, 0x007A
 486:	80 64       	ori	r24, 0x40	; 64
 488:	80 93 7a 00 	sts	0x007A, r24
	ADCL;
 48c:	80 91 78 00 	lds	r24, 0x0078
	ADCL;
 490:	80 91 78 00 	lds	r24, 0x0078
 494:	10 e0       	ldi	r17, 0x00	; 0
		//set_reverser(i,1);
	
	//set_reverser(0,0);
	for (int i=0;i<CHAN_N;i++)
	{
		prepareSetDAC(0,i);
 496:	80 e0       	ldi	r24, 0x00	; 0
 498:	90 e0       	ldi	r25, 0x00	; 0
 49a:	61 2f       	mov	r22, r17
 49c:	0e 94 a6 01 	call	0x34c	; 0x34c <prepareSetDAC>
 4a0:	1f 5f       	subi	r17, 0xFF	; 255

	//for(int i=0;i<8;i++)
		//set_reverser(i,1);
	
	//set_reverser(0,0);
	for (int i=0;i<CHAN_N;i++)
 4a2:	10 34       	cpi	r17, 0x40	; 64
 4a4:	c1 f7       	brne	.-16     	; 0x496 <main+0x96>
  while(!(SPSR & (1<<SPIF)));
}


void setDAC(){
	PORTD&=~(1<<LDAC);
 4a6:	5a 98       	cbi	0x0b, 2	; 11
	PORTD|=(1<<LDAC);	
 4a8:	5a 9a       	sbi	0x0b, 2	; 11
 4aa:	ff cf       	rjmp	.-2      	; 0x4aa <main+0xaa>

000004ac <__vector_9>:
//главный цикл работы контроллера
//Здесь устанавливаются значения ЦАП и передаются данные на компьютер
//через UART-интерфейс
//данный участок кода повторяется при переполнении TIMER2
ISR(TIMER2_OVF_vect)
{
 4ac:	1f 92       	push	r1
 4ae:	0f 92       	push	r0
 4b0:	0f b6       	in	r0, 0x3f	; 63
 4b2:	0f 92       	push	r0
 4b4:	11 24       	eor	r1, r1
 4b6:	2f 93       	push	r18
 4b8:	3f 93       	push	r19
 4ba:	4f 93       	push	r20
 4bc:	5f 93       	push	r21
 4be:	6f 93       	push	r22
 4c0:	7f 93       	push	r23
 4c2:	8f 93       	push	r24
 4c4:	9f 93       	push	r25
 4c6:	af 93       	push	r26
 4c8:	bf 93       	push	r27
 4ca:	ef 93       	push	r30
 4cc:	ff 93       	push	r31
	if(ctr>time_step)
 4ce:	20 91 9a 01 	lds	r18, 0x019A
 4d2:	30 91 9b 01 	lds	r19, 0x019B
 4d6:	80 91 35 01 	lds	r24, 0x0135
 4da:	90 91 36 01 	lds	r25, 0x0136
 4de:	82 17       	cp	r24, r18
 4e0:	93 07       	cpc	r25, r19
 4e2:	0c f0       	brlt	.+2      	; 0x4e6 <__vector_9+0x3a>
 4e4:	37 c3       	rjmp	.+1646   	; 0xb54 <__stack+0x255>
	{
		if(MD==CUSTOM)
 4e6:	60 91 3a 01 	lds	r22, 0x013A
 4ea:	66 23       	and	r22, r22
 4ec:	09 f0       	breq	.+2      	; 0x4f0 <__vector_9+0x44>
 4ee:	40 c0       	rjmp	.+128    	; 0x570 <__vector_9+0xc4>
		{
			if(event_cnt==(1))
 4f0:	20 91 96 01 	lds	r18, 0x0196
 4f4:	30 91 97 01 	lds	r19, 0x0197
 4f8:	21 30       	cpi	r18, 0x01	; 1
 4fa:	31 05       	cpc	r19, r1
 4fc:	59 f4       	brne	.+22     	; 0x514 <__vector_9+0x68>
			{	
			ADCL_=ADCL;
 4fe:	90 91 78 00 	lds	r25, 0x0078
 502:	90 93 9e 01 	sts	0x019E, r25
			ADCH_=ADCH;
 506:	80 91 79 00 	lds	r24, 0x0079
 50a:	80 93 a2 01 	sts	0x01A2, r24
			UDR0=ADCL_;			
 50e:	90 93 c6 00 	sts	0x00C6, r25
 512:	0d c0       	rjmp	.+26     	; 0x52e <__vector_9+0x82>
			}
			
			if(event_cnt==(2))
 514:	22 30       	cpi	r18, 0x02	; 2
 516:	31 05       	cpc	r19, r1
 518:	29 f4       	brne	.+10     	; 0x524 <__vector_9+0x78>
			{	
			UDR0=ADCH_;				
 51a:	80 91 a2 01 	lds	r24, 0x01A2
 51e:	80 93 c6 00 	sts	0x00C6, r24
 522:	05 c0       	rjmp	.+10     	; 0x52e <__vector_9+0x82>
			}
			
			
			
			if(event_cnt==0)
 524:	21 15       	cp	r18, r1
 526:	31 05       	cpc	r19, r1
 528:	11 f4       	brne	.+4      	; 0x52e <__vector_9+0x82>
			{
			UDR0=255;
 52a:	8f ef       	ldi	r24, 0xFF	; 255
 52c:	ad c2       	rjmp	.+1370   	; 0xa88 <__stack+0x189>
			prepareSetDAC(0,chan);
			//prepareSetDAC(x16,2);
			setDAC();
			}
			
			else if(event_cnt==t1)
 52e:	80 91 31 01 	lds	r24, 0x0131
 532:	90 e0       	ldi	r25, 0x00	; 0
 534:	28 17       	cp	r18, r24
 536:	39 07       	cpc	r19, r25
 538:	09 f4       	brne	.+2      	; 0x53c <__vector_9+0x90>
 53a:	d8 c2       	rjmp	.+1456   	; 0xaec <__stack+0x1ed>
			{
				
			//prepareSetDAC(0,chan);
			//setDAC();
			}
			else if(event_cnt==dT)
 53c:	80 91 99 01 	lds	r24, 0x0199
 540:	90 e0       	ldi	r25, 0x00	; 0
 542:	28 17       	cp	r18, r24
 544:	39 07       	cpc	r19, r25
 546:	09 f4       	brne	.+2      	; 0x54a <__vector_9+0x9e>
 548:	d1 c2       	rjmp	.+1442   	; 0xaec <__stack+0x1ed>
			{		
			//prepareSetDAC(0,chan);
			//setDAC();
		
			}
			else if(event_cnt==(dT+1))
 54a:	01 96       	adiw	r24, 0x01	; 1
 54c:	28 17       	cp	r18, r24
 54e:	39 07       	cpc	r19, r25
 550:	09 f4       	brne	.+2      	; 0x554 <__vector_9+0xa8>
 552:	aa c2       	rjmp	.+1364   	; 0xaa8 <__stack+0x1a9>
				ADCSRA |= (1 << ADSC); 

			else if(event_cnt==dTt2)
 554:	80 91 33 01 	lds	r24, 0x0133
 558:	90 e0       	ldi	r25, 0x00	; 0
 55a:	28 17       	cp	r18, r24
 55c:	39 07       	cpc	r19, r25
 55e:	09 f0       	breq	.+2      	; 0x562 <__vector_9+0xb6>
 560:	c5 c2       	rjmp	.+1418   	; 0xaec <__stack+0x1ed>
			{
			if ( ( UCSR0A & (1<<UDRE0)) )			
 562:	80 91 c0 00 	lds	r24, 0x00C0
 566:	85 ff       	sbrs	r24, 5
 568:	c1 c2       	rjmp	.+1410   	; 0xaec <__stack+0x1ed>
				UDR0=_adc;			
 56a:	80 91 a4 01 	lds	r24, 0x01A4
 56e:	bc c2       	rjmp	.+1400   	; 0xae8 <__stack+0x1e9>
			//setDAC();

			}		

		}
		else if(MD == MODE_SET) {
 570:	67 30       	cpi	r22, 0x07	; 7
 572:	09 f4       	brne	.+2      	; 0x576 <__vector_9+0xca>
 574:	bb c2       	rjmp	.+1398   	; 0xaec <__stack+0x1ed>
			
		}
		else if(MD==VAC)
 576:	61 30       	cpi	r22, 0x01	; 1
 578:	09 f0       	breq	.+2      	; 0x57c <__vector_9+0xd0>
 57a:	7d c0       	rjmp	.+250    	; 0x676 <__vector_9+0x1ca>
		{			
			//static int i=0;
			//i++;						
			
			switch(UDP_cnt)
 57c:	80 91 aa 01 	lds	r24, 0x01AA
 580:	82 30       	cpi	r24, 0x02	; 2
 582:	41 f1       	breq	.+80     	; 0x5d4 <__vector_9+0x128>
 584:	83 30       	cpi	r24, 0x03	; 3
 586:	30 f4       	brcc	.+12     	; 0x594 <__vector_9+0xe8>
 588:	88 23       	and	r24, r24
 58a:	51 f0       	breq	.+20     	; 0x5a0 <__vector_9+0xf4>
 58c:	81 30       	cpi	r24, 0x01	; 1
 58e:	09 f0       	breq	.+2      	; 0x592 <__vector_9+0xe6>
 590:	69 c0       	rjmp	.+210    	; 0x664 <__vector_9+0x1b8>
 592:	0d c0       	rjmp	.+26     	; 0x5ae <__vector_9+0x102>
 594:	83 30       	cpi	r24, 0x03	; 3
 596:	19 f1       	breq	.+70     	; 0x5de <__vector_9+0x132>
 598:	84 30       	cpi	r24, 0x04	; 4
 59a:	09 f0       	breq	.+2      	; 0x59e <__vector_9+0xf2>
 59c:	63 c0       	rjmp	.+198    	; 0x664 <__vector_9+0x1b8>
 59e:	60 c0       	rjmp	.+192    	; 0x660 <__vector_9+0x1b4>
			{
				case 0:					
				 ADCSRA |= (1 << ADSC); 
 5a0:	80 91 7a 00 	lds	r24, 0x007A
 5a4:	80 64       	ori	r24, 0x40	; 64
 5a6:	80 93 7a 00 	sts	0x007A, r24
				UDR0=255;
 5aa:	8f ef       	ldi	r24, 0xFF	; 255
 5ac:	15 c0       	rjmp	.+42     	; 0x5d8 <__vector_9+0x12c>
				break;
				
				
				
				case 1:	
				ADCL__=	ADCL_;
 5ae:	80 91 9e 01 	lds	r24, 0x019E
 5b2:	80 93 9c 01 	sts	0x019C, r24
				ADCH__ = ADCH_;
 5b6:	80 91 a2 01 	lds	r24, 0x01A2
 5ba:	80 93 98 01 	sts	0x0198, r24
				ADCL_=ADCL;
 5be:	90 91 78 00 	lds	r25, 0x0078
 5c2:	90 93 9e 01 	sts	0x019E, r25
				ADCH_=ADCH;
 5c6:	80 91 79 00 	lds	r24, 0x0079
 5ca:	80 93 a2 01 	sts	0x01A2, r24
				
				UDR0=ADCL_;
 5ce:	90 93 c6 00 	sts	0x00C6, r25
 5d2:	48 c0       	rjmp	.+144    	; 0x664 <__vector_9+0x1b8>
				break;
				
				case 2:
				UDR0=ADCH_;				
 5d4:	80 91 a2 01 	lds	r24, 0x01A2
 5d8:	80 93 c6 00 	sts	0x00C6, r24
 5dc:	43 c0       	rjmp	.+134    	; 0x664 <__vector_9+0x1b8>
				break;				
				
				case 3:								
					
					voltage16_h=voltage16;
 5de:	20 91 3b 01 	lds	r18, 0x013B
 5e2:	30 91 3c 01 	lds	r19, 0x013C
 5e6:	30 93 3e 01 	sts	0x013E, r19
 5ea:	20 93 3d 01 	sts	0x013D, r18
					
					if(pos_phase)
 5ee:	80 91 34 01 	lds	r24, 0x0134
 5f2:	88 23       	and	r24, r24
 5f4:	81 f0       	breq	.+32     	; 0x616 <__vector_9+0x16a>
					{
								//PORTC=0b00000010;
			//PORTB=0b00011111;
			//PORTD=0b11101100;
						voltage16+=32;
 5f6:	20 5e       	subi	r18, 0xE0	; 224
 5f8:	3f 4f       	sbci	r19, 0xFF	; 255
 5fa:	30 93 3c 01 	sts	0x013C, r19
 5fe:	20 93 3b 01 	sts	0x013B, r18
						if(voltage16>(ref16-1))
 602:	80 91 45 01 	lds	r24, 0x0145
 606:	90 91 46 01 	lds	r25, 0x0146
 60a:	28 17       	cp	r18, r24
 60c:	39 07       	cpc	r19, r25
 60e:	b4 f0       	brlt	.+44     	; 0x63c <__vector_9+0x190>
						{
						pos_phase=0;				
 610:	10 92 34 01 	sts	0x0134, r1
 614:	13 c0       	rjmp	.+38     	; 0x63c <__vector_9+0x190>
					else
					{
						//PORTB=0;
			//PORTC=0;
			//PORTD=0;
						voltage16-=32;
 616:	c9 01       	movw	r24, r18
 618:	80 97       	sbiw	r24, 0x20	; 32
 61a:	90 93 3c 01 	sts	0x013C, r25
 61e:	80 93 3b 01 	sts	0x013B, r24
						if(voltage16<(-x16+1))
 622:	21 e0       	ldi	r18, 0x01	; 1
 624:	30 e0       	ldi	r19, 0x00	; 0
 626:	40 91 43 01 	lds	r20, 0x0143
 62a:	50 91 44 01 	lds	r21, 0x0144
 62e:	24 1b       	sub	r18, r20
 630:	35 0b       	sbc	r19, r21
 632:	82 17       	cp	r24, r18
 634:	93 07       	cpc	r25, r19
 636:	14 f4       	brge	.+4      	; 0x63c <__vector_9+0x190>
						{
						pos_phase=1;									
 638:	60 93 34 01 	sts	0x0134, r22
						}
					}	
					
					
					
					UDR0=voltage16>>4;
 63c:	80 91 3b 01 	lds	r24, 0x013B
 640:	90 91 3c 01 	lds	r25, 0x013C
 644:	9c 01       	movw	r18, r24
 646:	e4 e0       	ldi	r30, 0x04	; 4
 648:	35 95       	asr	r19
 64a:	27 95       	ror	r18
 64c:	ea 95       	dec	r30
 64e:	e1 f7       	brne	.-8      	; 0x648 <__vector_9+0x19c>
 650:	20 93 c6 00 	sts	0x00C6, r18
					prepareSetDAC(voltage16,chan);
 654:	60 91 4e 01 	lds	r22, 0x014E
 658:	0e 94 a6 01 	call	0x34c	; 0x34c <prepareSetDAC>
  while(!(SPSR & (1<<SPIF)));
}


void setDAC(){
	PORTD&=~(1<<LDAC);
 65c:	5a 98       	cbi	0x0b, 2	; 11
	PORTD|=(1<<LDAC);	
 65e:	5a 9a       	sbi	0x0b, 2	; 11
					//prepareSetDAC(voltage16,5);
					//prepareSetDAC(voltage16,6);
					//prepareSetDAC(voltage16,7);				
					setDAC();
				case 4:
					UDR0=DUMMY_BYTE;	
 660:	10 92 c6 00 	sts	0x00C6, r1
				
			}
						
			
			UDP_cnt++;
			UDP_cnt%=5;
 664:	80 91 aa 01 	lds	r24, 0x01AA
 668:	8f 5f       	subi	r24, 0xFF	; 255
 66a:	65 e0       	ldi	r22, 0x05	; 5
 66c:	0e 94 a0 06 	call	0xd40	; 0xd40 <__udivmodqi4>
 670:	90 93 aa 01 	sts	0x01AA, r25
 674:	3b c2       	rjmp	.+1142   	; 0xaec <__stack+0x1ed>
		}
		else if(MD==PROGRAM)
 676:	62 30       	cpi	r22, 0x02	; 2
 678:	09 f0       	breq	.+2      	; 0x67c <__vector_9+0x1d0>
 67a:	a0 c0       	rjmp	.+320    	; 0x7bc <__vector_9+0x310>
		{
			T=16;
 67c:	80 e1       	ldi	r24, 0x10	; 16
 67e:	80 93 9d 01 	sts	0x019D, r24
			static uint16_t adc_h;
			

			if(event_cnt==0)//dT
 682:	80 91 96 01 	lds	r24, 0x0196
 686:	90 91 97 01 	lds	r25, 0x0197
 68a:	00 97       	sbiw	r24, 0x00	; 0
 68c:	21 f4       	brne	.+8      	; 0x696 <__vector_9+0x1ea>
			{		
				UDR0=255;
 68e:	8f ef       	ldi	r24, 0xFF	; 255
 690:	80 93 c6 00 	sts	0x00C6, r24
 694:	ff c1       	rjmp	.+1022   	; 0xa94 <__stack+0x195>
			
				prepareSetDAC(ref16,chan);
				setDAC();
				ADCSRA |= (1 << ADSC); 
			}
			else if(event_cnt == 1)
 696:	81 30       	cpi	r24, 0x01	; 1
 698:	91 05       	cpc	r25, r1
 69a:	19 f4       	brne	.+6      	; 0x6a2 <__vector_9+0x1f6>
			{
				UDR0 =PROGRAM_done;
 69c:	80 91 4d 01 	lds	r24, 0x014D
 6a0:	23 c2       	rjmp	.+1094   	; 0xae8 <__stack+0x1e9>
			}	

			else
			if(event_cnt==2)//ADC GET 
 6a2:	82 30       	cpi	r24, 0x02	; 2
 6a4:	91 05       	cpc	r25, r1
 6a6:	09 f4       	brne	.+2      	; 0x6aa <__vector_9+0x1fe>
 6a8:	10 c2       	rjmp	.+1056   	; 0xaca <__stack+0x1cb>
			}
			
			//ADC make CONTINUE
			//make decision
			else
			if(event_cnt==3)
 6aa:	83 30       	cpi	r24, 0x03	; 3
 6ac:	91 05       	cpc	r25, r1
 6ae:	e9 f5       	brne	.+122    	; 0x72a <__vector_9+0x27e>
			{	
				
				UDR0=ADCH_; //3
 6b0:	80 91 a2 01 	lds	r24, 0x01A2
 6b4:	80 93 c6 00 	sts	0x00C6, r24
				
				_adc=(ADCL_|(ADCH_ <<8));
 6b8:	38 2f       	mov	r19, r24
 6ba:	20 e0       	ldi	r18, 0x00	; 0
 6bc:	80 91 9e 01 	lds	r24, 0x019E
 6c0:	90 e0       	ldi	r25, 0x00	; 0
 6c2:	82 2b       	or	r24, r18
 6c4:	93 2b       	or	r25, r19
 6c6:	90 93 a5 01 	sts	0x01A5, r25
 6ca:	80 93 a4 01 	sts	0x01A4, r24
				adc_h=((uint16_t)(512)-_adc);
 6ce:	20 e0       	ldi	r18, 0x00	; 0
 6d0:	32 e0       	ldi	r19, 0x02	; 2
 6d2:	28 1b       	sub	r18, r24
 6d4:	39 0b       	sbc	r19, r25
 6d6:	30 93 94 01 	sts	0x0194, r19
 6da:	20 93 93 01 	sts	0x0193, r18
				
				//optimization
				//put some window val here maybe?
				//be  carefull with -
				if((adc_h)<(uint16_t)(t1))
 6de:	40 91 31 01 	lds	r20, 0x0131
 6e2:	84 2f       	mov	r24, r20
 6e4:	90 e0       	ldi	r25, 0x00	; 0
 6e6:	28 17       	cp	r18, r24
 6e8:	39 07       	cpc	r19, r25
 6ea:	60 f4       	brcc	.+24     	; 0x704 <__vector_9+0x258>
				{
					proging_val = -x16;  //set!
 6ec:	80 91 43 01 	lds	r24, 0x0143
 6f0:	90 91 44 01 	lds	r25, 0x0144
 6f4:	90 95       	com	r25
 6f6:	81 95       	neg	r24
 6f8:	9f 4f       	sbci	r25, 0xFF	; 255
 6fa:	90 93 42 01 	sts	0x0142, r25
 6fe:	80 93 41 01 	sts	0x0141, r24
 702:	f4 c1       	rjmp	.+1000   	; 0xaec <__stack+0x1ed>
				}
				else if((adc_h)<(uint16_t)(t1+1)) //done!
 704:	84 2f       	mov	r24, r20
 706:	90 e0       	ldi	r25, 0x00	; 0
 708:	01 96       	adiw	r24, 0x01	; 1
 70a:	28 17       	cp	r18, r24
 70c:	39 07       	cpc	r19, r25
 70e:	08 f0       	brcs	.+2      	; 0x712 <__vector_9+0x266>
 710:	ed c1       	rjmp	.+986    	; 0xaec <__stack+0x1ed>
				{

					PROGRAM_done=1;
 712:	81 e0       	ldi	r24, 0x01	; 1
 714:	80 93 4d 01 	sts	0x014D, r24
					proging_val=0;
 718:	10 92 42 01 	sts	0x0142, r1
 71c:	10 92 41 01 	sts	0x0141, r1
					prepareSetDAC(ref16,chan);
 720:	80 91 45 01 	lds	r24, 0x0145
 724:	90 91 46 01 	lds	r25, 0x0146
 728:	db c0       	rjmp	.+438    	; 0x8e0 <__vector_9+0x434>
					setDAC();
				}
				
			}
			//DACset proging val
			else if(event_cnt==4)
 72a:	84 30       	cpi	r24, 0x04	; 4
 72c:	91 05       	cpc	r25, r1
 72e:	09 f0       	breq	.+2      	; 0x732 <__vector_9+0x286>
 730:	3f c0       	rjmp	.+126    	; 0x7b0 <__vector_9+0x304>
			{
				UDR0 =DUMMY_BYTE;		
 732:	10 92 c6 00 	sts	0x00C6, r1
				if(PROGRAM_done)
 736:	80 91 4d 01 	lds	r24, 0x014D
 73a:	88 23       	and	r24, r24
 73c:	21 f0       	breq	.+8      	; 0x746 <__vector_9+0x29a>
					proging_val=0;	
 73e:	10 92 42 01 	sts	0x0142, r1
 742:	10 92 41 01 	sts	0x0141, r1
				
				prepareSetDAC(proging_val,chan);
 746:	80 91 41 01 	lds	r24, 0x0141
 74a:	90 91 42 01 	lds	r25, 0x0142
 74e:	60 91 4e 01 	lds	r22, 0x014E
 752:	0e 94 a6 01 	call	0x34c	; 0x34c <prepareSetDAC>
  while(!(SPSR & (1<<SPIF)));
}


void setDAC(){
	PORTD&=~(1<<LDAC);
 756:	5a 98       	cbi	0x0b, 2	; 11
	PORTD|=(1<<LDAC);	
 758:	5a 9a       	sbi	0x0b, 2	; 11
					proging_val=0;	
				
				prepareSetDAC(proging_val,chan);
				setDAC();
							
				if(proging_val == -x16)
 75a:	20 91 41 01 	lds	r18, 0x0141
 75e:	30 91 42 01 	lds	r19, 0x0142
 762:	80 91 43 01 	lds	r24, 0x0143
 766:	90 91 44 01 	lds	r25, 0x0144
 76a:	44 27       	eor	r20, r20
 76c:	55 27       	eor	r21, r21
 76e:	48 1b       	sub	r20, r24
 770:	59 0b       	sbc	r21, r25
 772:	24 17       	cp	r18, r20
 774:	35 07       	cpc	r19, r21
 776:	29 f4       	brne	.+10     	; 0x782 <__vector_9+0x2d6>
				{
					proging_val=0;
 778:	10 92 42 01 	sts	0x0142, r1
 77c:	10 92 41 01 	sts	0x0141, r1
 780:	b5 c1       	rjmp	.+874    	; 0xaec <__stack+0x1ed>
				}					
				else
				if(proging_val>(t2<<4))
 782:	80 91 32 01 	lds	r24, 0x0132
 786:	90 e0       	ldi	r25, 0x00	; 0
 788:	74 e0       	ldi	r23, 0x04	; 4
 78a:	88 0f       	add	r24, r24
 78c:	99 1f       	adc	r25, r25
 78e:	7a 95       	dec	r23
 790:	e1 f7       	brne	.-8      	; 0x78a <__vector_9+0x2de>
 792:	82 17       	cp	r24, r18
 794:	93 07       	cpc	r25, r19
 796:	2c f4       	brge	.+10     	; 0x7a2 <__vector_9+0x2f6>
				{
					proging_val= -x16;
 798:	50 93 42 01 	sts	0x0142, r21
 79c:	40 93 41 01 	sts	0x0141, r20
 7a0:	a5 c1       	rjmp	.+842    	; 0xaec <__stack+0x1ed>
				}	
				else
				{
					proging_val+=32;
 7a2:	20 5e       	subi	r18, 0xE0	; 224
 7a4:	3f 4f       	sbci	r19, 0xFF	; 255
 7a6:	30 93 42 01 	sts	0x0142, r19
 7aa:	20 93 41 01 	sts	0x0141, r18
 7ae:	9e c1       	rjmp	.+828    	; 0xaec <__stack+0x1ed>
				}	
			}
			else if(event_cnt==5)//
 7b0:	05 97       	sbiw	r24, 0x05	; 5
 7b2:	09 f0       	breq	.+2      	; 0x7b6 <__vector_9+0x30a>
 7b4:	9b c1       	rjmp	.+822    	; 0xaec <__stack+0x1ed>
			{	
				UDR0 =DUMMY_BYTE;			
 7b6:	10 92 c6 00 	sts	0x00C6, r1
 7ba:	90 c0       	rjmp	.+288    	; 0x8dc <__vector_9+0x430>
			}
			
			

		}
		else if(MD == ONE_SHOT)
 7bc:	65 30       	cpi	r22, 0x05	; 5
 7be:	09 f0       	breq	.+2      	; 0x7c2 <__vector_9+0x316>
 7c0:	75 c0       	rjmp	.+234    	; 0x8ac <__vector_9+0x400>
		{
			//готовим reset
				if(event_cnt==1){
 7c2:	80 91 96 01 	lds	r24, 0x0196
 7c6:	90 91 97 01 	lds	r25, 0x0197
 7ca:	81 30       	cpi	r24, 0x01	; 1
 7cc:	91 05       	cpc	r25, r1
 7ce:	b1 f1       	breq	.+108    	; 0x83c <__vector_9+0x390>
				usualMult();
			}//reseting
			else if(event_cnt==2)
 7d0:	82 30       	cpi	r24, 0x02	; 2
 7d2:	91 05       	cpc	r25, r1
 7d4:	61 f4       	brne	.+24     	; 0x7ee <__vector_9+0x342>
			{
				prepareSetDAC(reset16,CHAN_4);
 7d6:	80 91 47 01 	lds	r24, 0x0147
 7da:	90 91 48 01 	lds	r25, 0x0148
 7de:	63 e0       	ldi	r22, 0x03	; 3
 7e0:	0e 94 a6 01 	call	0x34c	; 0x34c <prepareSetDAC>
				prepareSetDAC(reset16,CHAN_3);
 7e4:	80 91 47 01 	lds	r24, 0x0147
 7e8:	90 91 48 01 	lds	r25, 0x0148
 7ec:	0a c0       	rjmp	.+20     	; 0x802 <__vector_9+0x356>
				setDAC();
			}
			else if(event_cnt==3)
 7ee:	83 30       	cpi	r24, 0x03	; 3
 7f0:	91 05       	cpc	r25, r1
 7f2:	49 f4       	brne	.+18     	; 0x806 <__vector_9+0x35a>
			{
				prepareSetDAC(0,CHAN_4);
 7f4:	80 e0       	ldi	r24, 0x00	; 0
 7f6:	90 e0       	ldi	r25, 0x00	; 0
 7f8:	63 e0       	ldi	r22, 0x03	; 3
 7fa:	0e 94 a6 01 	call	0x34c	; 0x34c <prepareSetDAC>
				prepareSetDAC(0,CHAN_3);
 7fe:	80 e0       	ldi	r24, 0x00	; 0
 800:	90 e0       	ldi	r25, 0x00	; 0
 802:	62 e0       	ldi	r22, 0x02	; 2
 804:	6f c0       	rjmp	.+222    	; 0x8e4 <__vector_9+0x438>
				setDAC();
			}		//is reset		
			else if(event_cnt==4)
 806:	84 30       	cpi	r24, 0x04	; 4
 808:	91 05       	cpc	r25, r1
 80a:	19 f4       	brne	.+6      	; 0x812 <__vector_9+0x366>
			{
				gatherMult();
 80c:	0e 94 8a 00 	call	0x114	; 0x114 <gatherMult>
 810:	6d c1       	rjmp	.+730    	; 0xaec <__stack+0x1ed>
			}
			else if(event_cnt==5)
 812:	85 30       	cpi	r24, 0x05	; 5
 814:	91 05       	cpc	r25, r1
 816:	29 f4       	brne	.+10     	; 0x822 <__vector_9+0x376>
			{
				prepareSetDAC(x16,CHAN_4);				
 818:	80 91 43 01 	lds	r24, 0x0143
 81c:	90 91 44 01 	lds	r25, 0x0144
 820:	05 c0       	rjmp	.+10     	; 0x82c <__vector_9+0x380>
				setDAC();
			}		
			else if(event_cnt==6)
 822:	86 30       	cpi	r24, 0x06	; 6
 824:	91 05       	cpc	r25, r1
 826:	21 f4       	brne	.+8      	; 0x830 <__vector_9+0x384>
			{
				prepareSetDAC(0,CHAN_4);				
 828:	80 e0       	ldi	r24, 0x00	; 0
 82a:	90 e0       	ldi	r25, 0x00	; 0
 82c:	63 e0       	ldi	r22, 0x03	; 3
 82e:	5a c0       	rjmp	.+180    	; 0x8e4 <__vector_9+0x438>
				setDAC();
			}	
			
			//пнули		
			//посмотрим, что вышло
			else if(event_cnt==7)
 830:	87 30       	cpi	r24, 0x07	; 7
 832:	91 05       	cpc	r25, r1
 834:	31 f4       	brne	.+12     	; 0x842 <__vector_9+0x396>
			{
				UDR0=255;//1
 836:	8f ef       	ldi	r24, 0xFF	; 255
 838:	80 93 c6 00 	sts	0x00C6, r24
				usualMult();				
 83c:	0e 94 de 00 	call	0x1bc	; 0x1bc <usualMult>
 840:	55 c1       	rjmp	.+682    	; 0xaec <__stack+0x1ed>
			}			
			else if(event_cnt==8)
 842:	88 30       	cpi	r24, 0x08	; 8
 844:	91 05       	cpc	r25, r1
 846:	31 f4       	brne	.+12     	; 0x854 <__vector_9+0x3a8>
			{
				prepareSetDAC(ref16,CHAN_4);
 848:	80 91 45 01 	lds	r24, 0x0145
 84c:	90 91 46 01 	lds	r25, 0x0146
 850:	63 e0       	ldi	r22, 0x03	; 3
 852:	26 c1       	rjmp	.+588    	; 0xaa0 <__stack+0x1a1>
				setDAC();				
				ADCSRA |= (1 << ADSC); 
			}	
			else if(event_cnt==9)
 854:	89 30       	cpi	r24, 0x09	; 9
 856:	91 05       	cpc	r25, r1
 858:	09 f4       	brne	.+2      	; 0x85c <__vector_9+0x3b0>
 85a:	37 c1       	rjmp	.+622    	; 0xaca <__stack+0x1cb>
				//prepareSetDAC(ref16,3);
				ADCL_=ADCL;	
				ADCH_=ADCH;
				UDR0=ADCL_;//2
			}
			else if(event_cnt==10)
 85c:	8a 30       	cpi	r24, 0x0A	; 10
 85e:	91 05       	cpc	r25, r1
 860:	29 f4       	brne	.+10     	; 0x86c <__vector_9+0x3c0>
			{
				UDR0=ADCH_; //3 1st chan
 862:	80 91 a2 01 	lds	r24, 0x01A2
 866:	80 93 c6 00 	sts	0x00C6, r24
 86a:	de cf       	rjmp	.-68     	; 0x828 <__vector_9+0x37c>
				
				prepareSetDAC(0,CHAN_4);
				setDAC();
			}		
			//4й просмотрен
			else if(event_cnt==11)
 86c:	8b 30       	cpi	r24, 0x0B	; 11
 86e:	91 05       	cpc	r25, r1
 870:	31 f4       	brne	.+12     	; 0x87e <__vector_9+0x3d2>
			{				 
				prepareSetDAC(ref16,CHAN_3);
 872:	80 91 45 01 	lds	r24, 0x0145
 876:	90 91 46 01 	lds	r25, 0x0146
 87a:	62 e0       	ldi	r22, 0x02	; 2
 87c:	11 c1       	rjmp	.+546    	; 0xaa0 <__stack+0x1a1>
				setDAC();
				
				ADCSRA |= (1 << ADSC); 
			}
			else if(event_cnt==12)
 87e:	8c 30       	cpi	r24, 0x0C	; 12
 880:	91 05       	cpc	r25, r1
 882:	09 f4       	brne	.+2      	; 0x886 <__vector_9+0x3da>
 884:	22 c1       	rjmp	.+580    	; 0xaca <__stack+0x1cb>
			{		
				ADCL_=ADCL;	
				ADCH_=ADCH;
				UDR0=ADCL_; //4
			}
			else if(event_cnt == 13)
 886:	0d 97       	sbiw	r24, 0x0d	; 13
 888:	09 f0       	breq	.+2      	; 0x88c <__vector_9+0x3e0>
 88a:	30 c1       	rjmp	.+608    	; 0xaec <__stack+0x1ed>
			{
				UDR0=ADCH_; // 5
 88c:	80 91 a2 01 	lds	r24, 0x01A2
 890:	80 93 c6 00 	sts	0x00C6, r24
				
				prepareSetDAC(0,CHAN_3);
 894:	80 e0       	ldi	r24, 0x00	; 0
 896:	90 e0       	ldi	r25, 0x00	; 0
 898:	62 e0       	ldi	r22, 0x02	; 2
 89a:	0e 94 a6 01 	call	0x34c	; 0x34c <prepareSetDAC>
  while(!(SPSR & (1<<SPIF)));
}


void setDAC(){
	PORTD&=~(1<<LDAC);
 89e:	5a 98       	cbi	0x0b, 2	; 11
	PORTD|=(1<<LDAC);	
 8a0:	5a 9a       	sbi	0x0b, 2	; 11
			{
				UDR0=ADCH_; // 5
				
				prepareSetDAC(0,CHAN_3);
				setDAC();
				event_cnt=0;	
 8a2:	10 92 97 01 	sts	0x0197, r1
 8a6:	10 92 96 01 	sts	0x0196, r1
 8aa:	20 c1       	rjmp	.+576    	; 0xaec <__stack+0x1ed>
			}
			
		}
		
		
		else if(MD == ANALYZE)//5 by 5
 8ac:	66 30       	cpi	r22, 0x06	; 6
 8ae:	09 f0       	breq	.+2      	; 0x8b2 <__vector_9+0x406>
 8b0:	1d c1       	rjmp	.+570    	; 0xaec <__stack+0x1ed>
		{
			//reset
			if(event_cnt==0)
 8b2:	80 91 96 01 	lds	r24, 0x0196
 8b6:	90 91 97 01 	lds	r25, 0x0197
 8ba:	00 97       	sbiw	r24, 0x00	; 0
 8bc:	61 f4       	brne	.+24     	; 0x8d6 <__vector_9+0x42a>
			{
				prepareSetDAC(reset16, chan);
 8be:	80 91 47 01 	lds	r24, 0x0147
 8c2:	90 91 48 01 	lds	r25, 0x0148
 8c6:	60 91 4e 01 	lds	r22, 0x014E
 8ca:	0e 94 a6 01 	call	0x34c	; 0x34c <prepareSetDAC>
  while(!(SPSR & (1<<SPIF)));
}


void setDAC(){
	PORTD&=~(1<<LDAC);
 8ce:	5a 98       	cbi	0x0b, 2	; 11
	PORTD|=(1<<LDAC);	
 8d0:	5a 9a       	sbi	0x0b, 2	; 11
			//reset
			if(event_cnt==0)
			{
				prepareSetDAC(reset16, chan);
				setDAC();
				UDR0=255;
 8d2:	8f ef       	ldi	r24, 0xFF	; 255
 8d4:	09 c1       	rjmp	.+530    	; 0xae8 <__stack+0x1e9>
			}
			else if(event_cnt==1)
 8d6:	81 30       	cpi	r24, 0x01	; 1
 8d8:	91 05       	cpc	r25, r1
 8da:	49 f4       	brne	.+18     	; 0x8ee <__vector_9+0x442>
			{
				prepareSetDAC(0, chan);				
 8dc:	80 e0       	ldi	r24, 0x00	; 0
 8de:	90 e0       	ldi	r25, 0x00	; 0
 8e0:	60 91 4e 01 	lds	r22, 0x014E
 8e4:	0e 94 a6 01 	call	0x34c	; 0x34c <prepareSetDAC>
  while(!(SPSR & (1<<SPIF)));
}


void setDAC(){
	PORTD&=~(1<<LDAC);
 8e8:	5a 98       	cbi	0x0b, 2	; 11
	PORTD|=(1<<LDAC);	
 8ea:	5a 9a       	sbi	0x0b, 2	; 11
 8ec:	ff c0       	rjmp	.+510    	; 0xaec <__stack+0x1ed>
			{
				prepareSetDAC(0, chan);				
				setDAC();
			}
			//create set impulse
			else if(event_cnt==3)
 8ee:	83 30       	cpi	r24, 0x03	; 3
 8f0:	91 05       	cpc	r25, r1
 8f2:	09 f0       	breq	.+2      	; 0x8f6 <__vector_9+0x44a>
 8f4:	c4 c0       	rjmp	.+392    	; 0xa7e <__stack+0x17f>
			{
				if(an_cnt<(BIG_STAT_N))
 8f6:	40 91 4f 01 	lds	r20, 0x014F
 8fa:	50 91 50 01 	lds	r21, 0x0150
 8fe:	80 91 a3 01 	lds	r24, 0x01A3
 902:	90 e0       	ldi	r25, 0x00	; 0
 904:	48 17       	cp	r20, r24
 906:	59 07       	cpc	r21, r25
 908:	18 f4       	brcc	.+6      	; 0x910 <__stack+0x11>
				{
					STAT_V_step=0;					 
 90a:	10 92 4b 01 	sts	0x014B, r1
 90e:	21 c0       	rjmp	.+66     	; 0x952 <__stack+0x53>
				}
				else if(an_cnt<(BIG_STAT_N*2))
 910:	9c 01       	movw	r18, r24
 912:	22 0f       	add	r18, r18
 914:	33 1f       	adc	r19, r19
 916:	42 17       	cp	r20, r18
 918:	53 07       	cpc	r21, r19
 91a:	10 f4       	brcc	.+4      	; 0x920 <__stack+0x21>
				{
					STAT_V_step=1;
 91c:	81 e0       	ldi	r24, 0x01	; 1
 91e:	17 c0       	rjmp	.+46     	; 0x94e <__stack+0x4f>
				}
				else if(an_cnt<(BIG_STAT_N*3))
 920:	28 0f       	add	r18, r24
 922:	39 1f       	adc	r19, r25
 924:	42 17       	cp	r20, r18
 926:	53 07       	cpc	r21, r19
 928:	10 f4       	brcc	.+4      	; 0x92e <__stack+0x2f>
				{
					STAT_V_step=2;
 92a:	82 e0       	ldi	r24, 0x02	; 2
 92c:	10 c0       	rjmp	.+32     	; 0x94e <__stack+0x4f>
				}
				else if(an_cnt<(BIG_STAT_N*4))
 92e:	9c 01       	movw	r18, r24
 930:	22 0f       	add	r18, r18
 932:	33 1f       	adc	r19, r19
 934:	22 0f       	add	r18, r18
 936:	33 1f       	adc	r19, r19
 938:	42 17       	cp	r20, r18
 93a:	53 07       	cpc	r21, r19
 93c:	10 f4       	brcc	.+4      	; 0x942 <__stack+0x43>
				{
					STAT_V_step=3;
 93e:	83 e0       	ldi	r24, 0x03	; 3
 940:	06 c0       	rjmp	.+12     	; 0x94e <__stack+0x4f>
				}
				else if(an_cnt<(BIG_STAT_N*5))
 942:	28 0f       	add	r18, r24
 944:	39 1f       	adc	r19, r25
 946:	42 17       	cp	r20, r18
 948:	53 07       	cpc	r21, r19
 94a:	18 f4       	brcc	.+6      	; 0x952 <__stack+0x53>
				{
					STAT_V_step=4;
 94c:	84 e0       	ldi	r24, 0x04	; 4
 94e:	80 93 4b 01 	sts	0x014B, r24
				}////////////						
				//prepareSetDAC(x16, chan);
				UDR0=STAT_V_step;
 952:	80 91 4b 01 	lds	r24, 0x014B
 956:	80 93 c6 00 	sts	0x00C6, r24
				x16_grad = (-(STAT_V_step+1)*8 )<<4;//16
 95a:	90 e0       	ldi	r25, 0x00	; 0
 95c:	80 95       	com	r24
 95e:	90 95       	com	r25
 960:	96 95       	lsr	r25
 962:	98 2f       	mov	r25, r24
 964:	88 27       	eor	r24, r24
 966:	97 95       	ror	r25
 968:	87 95       	ror	r24
 96a:	90 93 a7 01 	sts	0x01A7, r25
 96e:	80 93 a6 01 	sts	0x01A6, r24
				prepareSetDAC(x16_grad, chan);
 972:	60 91 4e 01 	lds	r22, 0x014E
 976:	0e 94 a6 01 	call	0x34c	; 0x34c <prepareSetDAC>
  while(!(SPSR & (1<<SPIF)));
}


void setDAC(){
	PORTD&=~(1<<LDAC);
 97a:	5a 98       	cbi	0x0b, 2	; 11
	PORTD|=(1<<LDAC);	
 97c:	5a 9a       	sbi	0x0b, 2	; 11
				x16_grad = (-(STAT_V_step+1)*8 )<<4;//16
				prepareSetDAC(x16_grad, chan);
				setDAC();
				
				
				if(an_cnt_fast<(STAT_N))//20 us
 97e:	40 91 51 01 	lds	r20, 0x0151
 982:	50 91 52 01 	lds	r21, 0x0152
 986:	80 91 2f 01 	lds	r24, 0x012F
 98a:	90 e0       	ldi	r25, 0x00	; 0
 98c:	48 17       	cp	r20, r24
 98e:	59 07       	cpc	r21, r25
 990:	18 f4       	brcc	.+6      	; 0x998 <__stack+0x99>
				{
					STAT_dt_step=0;									
 992:	10 92 4a 01 	sts	0x014A, r1
 996:	49 c0       	rjmp	.+146    	; 0xa2a <__stack+0x12b>
				}
				else if(an_cnt_fast<(STAT_N*2))//80 us
 998:	9c 01       	movw	r18, r24
 99a:	22 0f       	add	r18, r18
 99c:	33 1f       	adc	r19, r19
 99e:	42 17       	cp	r20, r18
 9a0:	53 07       	cpc	r21, r19
 9a2:	60 f4       	brcc	.+24     	; 0x9bc <__stack+0xbd>
				{
					STAT_dt_step=1;
 9a4:	81 e0       	ldi	r24, 0x01	; 1
 9a6:	80 93 4a 01 	sts	0x014A, r24
 9aa:	80 e0       	ldi	r24, 0x00	; 0
 9ac:	90 e0       	ldi	r25, 0x00	; 0
  while(!(SPSR & (1<<SPIF)));
}


void setDAC(){
	PORTD&=~(1<<LDAC);
 9ae:	5a 98       	cbi	0x0b, 2	; 11
	PORTD|=(1<<LDAC);	
 9b0:	5a 9a       	sbi	0x0b, 2	; 11
					STAT_dt_step=0;									
				}
				else if(an_cnt_fast<(STAT_N*2))//80 us
				{
					STAT_dt_step=1;
					for(int i=0;i<40;i++)//28
 9b2:	01 96       	adiw	r24, 0x01	; 1
 9b4:	88 32       	cpi	r24, 0x28	; 40
 9b6:	91 05       	cpc	r25, r1
 9b8:	d1 f7       	brne	.-12     	; 0x9ae <__stack+0xaf>
 9ba:	37 c0       	rjmp	.+110    	; 0xa2a <__stack+0x12b>
					{
					setDAC();
					}
				}
				else if(an_cnt_fast<(STAT_N*3))//220 us
 9bc:	28 0f       	add	r18, r24
 9be:	39 1f       	adc	r19, r25
 9c0:	42 17       	cp	r20, r18
 9c2:	53 07       	cpc	r21, r19
 9c4:	60 f4       	brcc	.+24     	; 0x9de <__stack+0xdf>
				{
					STAT_dt_step=2;
 9c6:	82 e0       	ldi	r24, 0x02	; 2
 9c8:	80 93 4a 01 	sts	0x014A, r24
 9cc:	80 e0       	ldi	r24, 0x00	; 0
 9ce:	90 e0       	ldi	r25, 0x00	; 0
  while(!(SPSR & (1<<SPIF)));
}


void setDAC(){
	PORTD&=~(1<<LDAC);
 9d0:	5a 98       	cbi	0x0b, 2	; 11
	PORTD|=(1<<LDAC);	
 9d2:	5a 9a       	sbi	0x0b, 2	; 11
					}
				}
				else if(an_cnt_fast<(STAT_N*3))//220 us
				{
					STAT_dt_step=2;
					for(int i=0;i<160;i++)
 9d4:	01 96       	adiw	r24, 0x01	; 1
 9d6:	80 3a       	cpi	r24, 0xA0	; 160
 9d8:	91 05       	cpc	r25, r1
 9da:	d1 f7       	brne	.-12     	; 0x9d0 <__stack+0xd1>
 9dc:	26 c0       	rjmp	.+76     	; 0xa2a <__stack+0x12b>
					{
					setDAC();
					}
				}
				else if(an_cnt_fast<(STAT_N*4))//900 us
 9de:	88 0f       	add	r24, r24
 9e0:	99 1f       	adc	r25, r25
 9e2:	88 0f       	add	r24, r24
 9e4:	99 1f       	adc	r25, r25
 9e6:	48 17       	cp	r20, r24
 9e8:	59 07       	cpc	r21, r25
 9ea:	68 f4       	brcc	.+26     	; 0xa06 <__stack+0x107>
				{
					STAT_dt_step=3;
 9ec:	83 e0       	ldi	r24, 0x03	; 3
 9ee:	80 93 4a 01 	sts	0x014A, r24
 9f2:	80 e0       	ldi	r24, 0x00	; 0
 9f4:	90 e0       	ldi	r25, 0x00	; 0
  while(!(SPSR & (1<<SPIF)));
}


void setDAC(){
	PORTD&=~(1<<LDAC);
 9f6:	5a 98       	cbi	0x0b, 2	; 11
	PORTD|=(1<<LDAC);	
 9f8:	5a 9a       	sbi	0x0b, 2	; 11
					}
				}
				else if(an_cnt_fast<(STAT_N*4))//900 us
				{
					STAT_dt_step=3;
					for(int i=0;i<640;i++)
 9fa:	01 96       	adiw	r24, 0x01	; 1
 9fc:	22 e0       	ldi	r18, 0x02	; 2
 9fe:	80 38       	cpi	r24, 0x80	; 128
 a00:	92 07       	cpc	r25, r18
 a02:	c9 f7       	brne	.-14     	; 0x9f6 <__stack+0xf7>
 a04:	12 c0       	rjmp	.+36     	; 0xa2a <__stack+0x12b>
					{
					setDAC();
					}
				}
				else if(an_cnt_fast<(BIG_STAT_N))//3.5 ms
 a06:	80 91 a3 01 	lds	r24, 0x01A3
 a0a:	90 e0       	ldi	r25, 0x00	; 0
 a0c:	48 17       	cp	r20, r24
 a0e:	59 07       	cpc	r21, r25
 a10:	60 f4       	brcc	.+24     	; 0xa2a <__stack+0x12b>
				{
					STAT_dt_step=4;
 a12:	84 e0       	ldi	r24, 0x04	; 4
 a14:	80 93 4a 01 	sts	0x014A, r24
 a18:	80 e0       	ldi	r24, 0x00	; 0
 a1a:	90 e0       	ldi	r25, 0x00	; 0
  while(!(SPSR & (1<<SPIF)));
}


void setDAC(){
	PORTD&=~(1<<LDAC);
 a1c:	5a 98       	cbi	0x0b, 2	; 11
	PORTD|=(1<<LDAC);	
 a1e:	5a 9a       	sbi	0x0b, 2	; 11
					}
				}
				else if(an_cnt_fast<(BIG_STAT_N))//3.5 ms
				{
					STAT_dt_step=4;
					for(int i=0;i<2560;i++)
 a20:	01 96       	adiw	r24, 0x01	; 1
 a22:	2a e0       	ldi	r18, 0x0A	; 10
 a24:	80 30       	cpi	r24, 0x00	; 0
 a26:	92 07       	cpc	r25, r18
 a28:	c9 f7       	brne	.-14     	; 0xa1c <__stack+0x11d>
					setDAC();
					}
				}////////////////
									
				
				prepareResetDAC(chan);
 a2a:	80 91 4e 01 	lds	r24, 0x014E
 a2e:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <prepareResetDAC>
  while(!(SPSR & (1<<SPIF)));
}


void setDAC(){
	PORTD&=~(1<<LDAC);
 a32:	5a 98       	cbi	0x0b, 2	; 11
	PORTD|=(1<<LDAC);	
 a34:	5a 9a       	sbi	0x0b, 2	; 11
									
				
				prepareResetDAC(chan);
				setDAC();			
				
				an_cnt++; // upper				
 a36:	80 91 4f 01 	lds	r24, 0x014F
 a3a:	90 91 50 01 	lds	r25, 0x0150
 a3e:	01 96       	adiw	r24, 0x01	; 1
 a40:	90 93 50 01 	sts	0x0150, r25
 a44:	80 93 4f 01 	sts	0x014F, r24
				if(an_cnt>(BIG_STAT_N*5)) an_cnt=0; // lower
 a48:	20 91 a3 01 	lds	r18, 0x01A3
 a4c:	45 e0       	ldi	r20, 0x05	; 5
 a4e:	24 9f       	mul	r18, r20
 a50:	90 01       	movw	r18, r0
 a52:	11 24       	eor	r1, r1
 a54:	28 17       	cp	r18, r24
 a56:	39 07       	cpc	r19, r25
 a58:	20 f4       	brcc	.+8      	; 0xa62 <__stack+0x163>
 a5a:	10 92 50 01 	sts	0x0150, r1
 a5e:	10 92 4f 01 	sts	0x014F, r1
				
				an_cnt_fast = an_cnt%BIG_STAT_N;
 a62:	60 91 a3 01 	lds	r22, 0x01A3
 a66:	80 91 4f 01 	lds	r24, 0x014F
 a6a:	90 91 50 01 	lds	r25, 0x0150
 a6e:	70 e0       	ldi	r23, 0x00	; 0
 a70:	0e 94 b9 06 	call	0xd72	; 0xd72 <__udivmodhi4>
 a74:	90 93 52 01 	sts	0x0152, r25
 a78:	80 93 51 01 	sts	0x0151, r24
 a7c:	37 c0       	rjmp	.+110    	; 0xaec <__stack+0x1ed>
			}
			else if(event_cnt==4)
 a7e:	84 30       	cpi	r24, 0x04	; 4
 a80:	91 05       	cpc	r25, r1
 a82:	29 f4       	brne	.+10     	; 0xa8e <__stack+0x18f>
			{
				UDR0=STAT_dt_step;
 a84:	80 91 4a 01 	lds	r24, 0x014A
 a88:	80 93 c6 00 	sts	0x00C6, r24
 a8c:	27 cf       	rjmp	.-434    	; 0x8dc <__vector_9+0x430>
				prepareSetDAC(0, chan);
				setDAC();
			}
			else if(event_cnt==6)//start measure
 a8e:	86 30       	cpi	r24, 0x06	; 6
 a90:	91 05       	cpc	r25, r1
 a92:	81 f4       	brne	.+32     	; 0xab4 <__stack+0x1b5>
			{
				prepareSetDAC(ref16, chan);
 a94:	80 91 45 01 	lds	r24, 0x0145
 a98:	90 91 46 01 	lds	r25, 0x0146
 a9c:	60 91 4e 01 	lds	r22, 0x014E
 aa0:	0e 94 a6 01 	call	0x34c	; 0x34c <prepareSetDAC>
  while(!(SPSR & (1<<SPIF)));
}


void setDAC(){
	PORTD&=~(1<<LDAC);
 aa4:	5a 98       	cbi	0x0b, 2	; 11
	PORTD|=(1<<LDAC);	
 aa6:	5a 9a       	sbi	0x0b, 2	; 11
			}
			else if(event_cnt==6)//start measure
			{
				prepareSetDAC(ref16, chan);
				setDAC();
				ADCSRA |= (1 << ADSC); 
 aa8:	80 91 7a 00 	lds	r24, 0x007A
 aac:	80 64       	ori	r24, 0x40	; 64
 aae:	80 93 7a 00 	sts	0x007A, r24
 ab2:	1c c0       	rjmp	.+56     	; 0xaec <__stack+0x1ed>
				
			}
			else if(event_cnt==7)
 ab4:	87 30       	cpi	r24, 0x07	; 7
 ab6:	91 05       	cpc	r25, r1
 ab8:	99 f4       	brne	.+38     	; 0xae0 <__stack+0x1e1>
			{
				prepareSetDAC(0, chan);
 aba:	80 e0       	ldi	r24, 0x00	; 0
 abc:	90 e0       	ldi	r25, 0x00	; 0
 abe:	60 91 4e 01 	lds	r22, 0x014E
 ac2:	0e 94 a6 01 	call	0x34c	; 0x34c <prepareSetDAC>
  while(!(SPSR & (1<<SPIF)));
}


void setDAC(){
	PORTD&=~(1<<LDAC);
 ac6:	5a 98       	cbi	0x0b, 2	; 11
	PORTD|=(1<<LDAC);	
 ac8:	5a 9a       	sbi	0x0b, 2	; 11
			else if(event_cnt==7)
			{
				prepareSetDAC(0, chan);
				setDAC();
				
				ADCL_=ADCL;	
 aca:	90 91 78 00 	lds	r25, 0x0078
 ace:	90 93 9e 01 	sts	0x019E, r25
				ADCH_=ADCH;
 ad2:	80 91 79 00 	lds	r24, 0x0079
 ad6:	80 93 a2 01 	sts	0x01A2, r24
				UDR0=ADCL_;
 ada:	90 93 c6 00 	sts	0x00C6, r25
 ade:	06 c0       	rjmp	.+12     	; 0xaec <__stack+0x1ed>
			}
			else if(event_cnt==8)
 ae0:	08 97       	sbiw	r24, 0x08	; 8
 ae2:	21 f4       	brne	.+8      	; 0xaec <__stack+0x1ed>
			{
				UDR0=ADCH_;
 ae4:	80 91 a2 01 	lds	r24, 0x01A2
 ae8:	80 93 c6 00 	sts	0x00C6, r24
		}
		
		
		
		
		ctr=0;
 aec:	10 92 9b 01 	sts	0x019B, r1
 af0:	10 92 9a 01 	sts	0x019A, r1
		
		
		if(MD == ONE_SHOT)
 af4:	80 91 3a 01 	lds	r24, 0x013A
 af8:	85 30       	cpi	r24, 0x05	; 5
 afa:	69 f4       	brne	.+26     	; 0xb16 <__stack+0x217>
		{
			if(event_cnt<16)
 afc:	80 91 96 01 	lds	r24, 0x0196
 b00:	90 91 97 01 	lds	r25, 0x0197
 b04:	80 31       	cpi	r24, 0x10	; 16
 b06:	91 05       	cpc	r25, r1
 b08:	2c f5       	brge	.+74     	; 0xb54 <__stack+0x255>
				event_cnt++;
 b0a:	01 96       	adiw	r24, 0x01	; 1
 b0c:	90 93 97 01 	sts	0x0197, r25
 b10:	80 93 96 01 	sts	0x0196, r24
 b14:	1f c0       	rjmp	.+62     	; 0xb54 <__stack+0x255>
 b16:	20 91 96 01 	lds	r18, 0x0196
 b1a:	30 91 97 01 	lds	r19, 0x0197
		}
		else if(MD == PROGRAM)
 b1e:	82 30       	cpi	r24, 0x02	; 2
 b20:	49 f4       	brne	.+18     	; 0xb34 <__stack+0x235>
		{
			event_cnt++;
 b22:	c9 01       	movw	r24, r18
 b24:	01 96       	adiw	r24, 0x01	; 1
 b26:	90 93 97 01 	sts	0x0197, r25
 b2a:	80 93 96 01 	sts	0x0196, r24
			if(event_cnt>8)
 b2e:	09 97       	sbiw	r24, 0x09	; 9
 b30:	8c f0       	brlt	.+34     	; 0xb54 <__stack+0x255>
 b32:	0c c0       	rjmp	.+24     	; 0xb4c <__stack+0x24d>
				event_cnt = 0;
		}
		else{
			event_cnt++;
 b34:	2f 5f       	subi	r18, 0xFF	; 255
 b36:	3f 4f       	sbci	r19, 0xFF	; 255
 b38:	30 93 97 01 	sts	0x0197, r19
 b3c:	20 93 96 01 	sts	0x0196, r18
			if(event_cnt>T)
 b40:	80 91 9d 01 	lds	r24, 0x019D
 b44:	90 e0       	ldi	r25, 0x00	; 0
 b46:	82 17       	cp	r24, r18
 b48:	93 07       	cpc	r25, r19
 b4a:	24 f4       	brge	.+8      	; 0xb54 <__stack+0x255>
				event_cnt=0;
 b4c:	10 92 97 01 	sts	0x0197, r1
 b50:	10 92 96 01 	sts	0x0196, r1
		//{
		//	if(event_cnt<16)
		//		event_cnt++;			
		//}
	}
	ctr++;
 b54:	80 91 9a 01 	lds	r24, 0x019A
 b58:	90 91 9b 01 	lds	r25, 0x019B
 b5c:	01 96       	adiw	r24, 0x01	; 1
 b5e:	90 93 9b 01 	sts	0x019B, r25
 b62:	80 93 9a 01 	sts	0x019A, r24
}
 b66:	ff 91       	pop	r31
 b68:	ef 91       	pop	r30
 b6a:	bf 91       	pop	r27
 b6c:	af 91       	pop	r26
 b6e:	9f 91       	pop	r25
 b70:	8f 91       	pop	r24
 b72:	7f 91       	pop	r23
 b74:	6f 91       	pop	r22
 b76:	5f 91       	pop	r21
 b78:	4f 91       	pop	r20
 b7a:	3f 91       	pop	r19
 b7c:	2f 91       	pop	r18
 b7e:	0f 90       	pop	r0
 b80:	0f be       	out	0x3f, r0	; 63
 b82:	0f 90       	pop	r0
 b84:	1f 90       	pop	r1
 b86:	18 95       	reti

00000b88 <__vector_18>:

//прием команд от компьютера по UART в зависимости от режима
ISR(USART_RX_vect)
{
 b88:	1f 92       	push	r1
 b8a:	0f 92       	push	r0
 b8c:	0f b6       	in	r0, 0x3f	; 63
 b8e:	0f 92       	push	r0
 b90:	11 24       	eor	r1, r1
 b92:	2f 93       	push	r18
 b94:	3f 93       	push	r19
 b96:	4f 93       	push	r20
 b98:	5f 93       	push	r21
 b9a:	6f 93       	push	r22
 b9c:	7f 93       	push	r23
 b9e:	8f 93       	push	r24
 ba0:	9f 93       	push	r25
 ba2:	af 93       	push	r26
 ba4:	bf 93       	push	r27
 ba6:	ef 93       	push	r30
 ba8:	ff 93       	push	r31
	switch(ptr)
 baa:	80 91 4c 01 	lds	r24, 0x014C
 bae:	84 30       	cpi	r24, 0x04	; 4
 bb0:	09 f4       	brne	.+2      	; 0xbb4 <__vector_18+0x2c>
 bb2:	69 c0       	rjmp	.+210    	; 0xc86 <__vector_18+0xfe>
 bb4:	85 30       	cpi	r24, 0x05	; 5
 bb6:	58 f4       	brcc	.+22     	; 0xbce <__vector_18+0x46>
 bb8:	81 30       	cpi	r24, 0x01	; 1
 bba:	51 f1       	breq	.+84     	; 0xc10 <__vector_18+0x88>
 bbc:	81 30       	cpi	r24, 0x01	; 1
 bbe:	d0 f0       	brcs	.+52     	; 0xbf4 <__vector_18+0x6c>
 bc0:	82 30       	cpi	r24, 0x02	; 2
 bc2:	09 f4       	brne	.+2      	; 0xbc6 <__vector_18+0x3e>
 bc4:	42 c0       	rjmp	.+132    	; 0xc4a <__vector_18+0xc2>
 bc6:	83 30       	cpi	r24, 0x03	; 3
 bc8:	09 f0       	breq	.+2      	; 0xbcc <__vector_18+0x44>
 bca:	9a c0       	rjmp	.+308    	; 0xd00 <__vector_18+0x178>
 bcc:	4f c0       	rjmp	.+158    	; 0xc6c <__vector_18+0xe4>
 bce:	87 30       	cpi	r24, 0x07	; 7
 bd0:	09 f4       	brne	.+2      	; 0xbd4 <__vector_18+0x4c>
 bd2:	79 c0       	rjmp	.+242    	; 0xcc6 <__vector_18+0x13e>
 bd4:	88 30       	cpi	r24, 0x08	; 8
 bd6:	38 f4       	brcc	.+14     	; 0xbe6 <__vector_18+0x5e>
 bd8:	85 30       	cpi	r24, 0x05	; 5
 bda:	09 f4       	brne	.+2      	; 0xbde <__vector_18+0x56>
 bdc:	6a c0       	rjmp	.+212    	; 0xcb2 <__vector_18+0x12a>
 bde:	86 30       	cpi	r24, 0x06	; 6
 be0:	09 f0       	breq	.+2      	; 0xbe4 <__vector_18+0x5c>
 be2:	8e c0       	rjmp	.+284    	; 0xd00 <__vector_18+0x178>
 be4:	6b c0       	rjmp	.+214    	; 0xcbc <__vector_18+0x134>
 be6:	88 30       	cpi	r24, 0x08	; 8
 be8:	09 f4       	brne	.+2      	; 0xbec <__vector_18+0x64>
 bea:	72 c0       	rjmp	.+228    	; 0xcd0 <__vector_18+0x148>
 bec:	89 30       	cpi	r24, 0x09	; 9
 bee:	09 f0       	breq	.+2      	; 0xbf2 <__vector_18+0x6a>
 bf0:	87 c0       	rjmp	.+270    	; 0xd00 <__vector_18+0x178>
 bf2:	73 c0       	rjmp	.+230    	; 0xcda <__vector_18+0x152>
	{
		case 0:
		if(UDR0!=255)//байт 255 является синхронизирующим
 bf4:	80 91 c6 00 	lds	r24, 0x00C6
 bf8:	8f 3f       	cpi	r24, 0xFF	; 255
 bfa:	31 f0       	breq	.+12     	; 0xc08 <__vector_18+0x80>
		{
			sync=0;
 bfc:	10 92 49 01 	sts	0x0149, r1
			ptr--;
			ptr%=7;
 c00:	83 e0       	ldi	r24, 0x03	; 3
 c02:	80 93 4c 01 	sts	0x014C, r24
 c06:	7c c0       	rjmp	.+248    	; 0xd00 <__vector_18+0x178>
		}
		else
			sync=1;
 c08:	81 e0       	ldi	r24, 0x01	; 1
 c0a:	80 93 49 01 	sts	0x0149, r24
 c0e:	78 c0       	rjmp	.+240    	; 0xd00 <__vector_18+0x178>
		break;
		
		
		case 1:
		MD=UDR0;
 c10:	20 91 c6 00 	lds	r18, 0x00C6
 c14:	20 93 3a 01 	sts	0x013A, r18
		if(MD==VAC)
 c18:	21 30       	cpi	r18, 0x01	; 1
 c1a:	39 f4       	brne	.+14     	; 0xc2a <__vector_18+0xa2>
			time_step=4;//5
 c1c:	84 e0       	ldi	r24, 0x04	; 4
 c1e:	90 e0       	ldi	r25, 0x00	; 0
 c20:	90 93 36 01 	sts	0x0136, r25
 c24:	80 93 35 01 	sts	0x0135, r24
 c28:	6b c0       	rjmp	.+214    	; 0xd00 <__vector_18+0x178>
		else
			time_step=6;//4		
 c2a:	86 e0       	ldi	r24, 0x06	; 6
 c2c:	90 e0       	ldi	r25, 0x00	; 0
 c2e:	90 93 36 01 	sts	0x0136, r25
 c32:	80 93 35 01 	sts	0x0135, r24
		if(MD==PROGRAM)
 c36:	22 30       	cpi	r18, 0x02	; 2
 c38:	09 f0       	breq	.+2      	; 0xc3c <__vector_18+0xb4>
 c3a:	62 c0       	rjmp	.+196    	; 0xd00 <__vector_18+0x178>
		{
			//PROGRAM_start=1;
			PROGRAM_done=0;
 c3c:	10 92 4d 01 	sts	0x014D, r1
			proging_val=0;
 c40:	10 92 42 01 	sts	0x0142, r1
 c44:	10 92 41 01 	sts	0x0141, r1
 c48:	5b c0       	rjmp	.+182    	; 0xd00 <__vector_18+0x178>
		}
		break;
		
		
		case 2:		
		x16_simple = UDR0;
 c4a:	80 91 c6 00 	lds	r24, 0x00C6
 c4e:	90 e0       	ldi	r25, 0x00	; 0
 c50:	90 93 a0 01 	sts	0x01A0, r25
 c54:	80 93 9f 01 	sts	0x019F, r24
		x16 = x16_simple<<4;
 c58:	b4 e0       	ldi	r27, 0x04	; 4
 c5a:	88 0f       	add	r24, r24
 c5c:	99 1f       	adc	r25, r25
 c5e:	ba 95       	dec	r27
 c60:	e1 f7       	brne	.-8      	; 0xc5a <__vector_18+0xd2>
 c62:	90 93 44 01 	sts	0x0144, r25
 c66:	80 93 43 01 	sts	0x0143, r24
 c6a:	4a c0       	rjmp	.+148    	; 0xd00 <__vector_18+0x178>
		break;
		case 3:	
		ref16=UDR0<<4;
 c6c:	80 91 c6 00 	lds	r24, 0x00C6
 c70:	90 e0       	ldi	r25, 0x00	; 0
 c72:	a4 e0       	ldi	r26, 0x04	; 4
 c74:	88 0f       	add	r24, r24
 c76:	99 1f       	adc	r25, r25
 c78:	aa 95       	dec	r26
 c7a:	e1 f7       	brne	.-8      	; 0xc74 <__vector_18+0xec>
 c7c:	90 93 46 01 	sts	0x0146, r25
 c80:	80 93 45 01 	sts	0x0145, r24
 c84:	3d c0       	rjmp	.+122    	; 0xd00 <__vector_18+0x178>
		break;
		case 4:
		if(MD==PROGRAM)
 c86:	80 91 3a 01 	lds	r24, 0x013A
 c8a:	82 30       	cpi	r24, 0x02	; 2
 c8c:	29 f4       	brne	.+10     	; 0xc98 <__vector_18+0x110>
			t1=UDR0;
 c8e:	80 91 c6 00 	lds	r24, 0x00C6
 c92:	80 93 31 01 	sts	0x0131, r24
 c96:	34 c0       	rjmp	.+104    	; 0xd00 <__vector_18+0x178>
		else
			reset16=UDR0<<4;
 c98:	80 91 c6 00 	lds	r24, 0x00C6
 c9c:	90 e0       	ldi	r25, 0x00	; 0
 c9e:	f4 e0       	ldi	r31, 0x04	; 4
 ca0:	88 0f       	add	r24, r24
 ca2:	99 1f       	adc	r25, r25
 ca4:	fa 95       	dec	r31
 ca6:	e1 f7       	brne	.-8      	; 0xca0 <__vector_18+0x118>
 ca8:	90 93 48 01 	sts	0x0148, r25
 cac:	80 93 47 01 	sts	0x0147, r24
 cb0:	27 c0       	rjmp	.+78     	; 0xd00 <__vector_18+0x178>
		break;		
		case 5:
		
		t2=UDR0;
 cb2:	80 91 c6 00 	lds	r24, 0x00C6
 cb6:	80 93 32 01 	sts	0x0132, r24
 cba:	22 c0       	rjmp	.+68     	; 0xd00 <__vector_18+0x178>
	
		
		break;	
		case 6:
		dT=UDR0;
 cbc:	80 91 c6 00 	lds	r24, 0x00C6
 cc0:	80 93 99 01 	sts	0x0199, r24
 cc4:	1d c0       	rjmp	.+58     	; 0xd00 <__vector_18+0x178>
		break;
		case 7:
		T=UDR0;
 cc6:	80 91 c6 00 	lds	r24, 0x00C6
 cca:	80 93 9d 01 	sts	0x019D, r24
 cce:	18 c0       	rjmp	.+48     	; 0xd00 <__vector_18+0x178>
		break;
		case 8:
		chan=UDR0;
 cd0:	80 91 c6 00 	lds	r24, 0x00C6
 cd4:	80 93 4e 01 	sts	0x014E, r24
 cd8:	13 c0       	rjmp	.+38     	; 0xd00 <__vector_18+0x178>
		break;
		
		case 9:
			reverted[chan]=UDR0;
 cda:	80 91 c6 00 	lds	r24, 0x00C6
 cde:	e0 91 4e 01 	lds	r30, 0x014E
 ce2:	f0 e0       	ldi	r31, 0x00	; 0
 ce4:	ed 5a       	subi	r30, 0xAD	; 173
 ce6:	fe 4f       	sbci	r31, 0xFE	; 254
 ce8:	80 83       	st	Z, r24
		
			//event_cnt=0;			
			
			if(MD==GATHER_MULT)
 cea:	80 91 3a 01 	lds	r24, 0x013A
 cee:	83 30       	cpi	r24, 0x03	; 3
 cf0:	19 f4       	brne	.+6      	; 0xcf8 <__vector_18+0x170>
			{
			//	PORTD=0b00100000;
			//static int ff=1<<5;
			//if(x16>>4)
			gatherMult();
 cf2:	0e 94 8a 00 	call	0x114	; 0x114 <gatherMult>
 cf6:	04 c0       	rjmp	.+8      	; 0xd00 <__vector_18+0x178>
			//PORTD=(1<<5)^PORTD;
			//PORTD=ff;
			}
			else if(MD==SEPAR_MULT)	
 cf8:	84 30       	cpi	r24, 0x04	; 4
 cfa:	11 f4       	brne	.+4      	; 0xd00 <__vector_18+0x178>
			{
			usualMult();	
 cfc:	0e 94 de 00 	call	0x1bc	; 0x1bc <usualMult>
		break;
	}
	

	
	dTt2=dT+t2;
 d00:	80 91 32 01 	lds	r24, 0x0132
 d04:	90 91 99 01 	lds	r25, 0x0199
 d08:	89 0f       	add	r24, r25
 d0a:	80 93 33 01 	sts	0x0133, r24
	//UDR0=x16/16;
	ptr++;
	ptr%=10;
 d0e:	80 91 4c 01 	lds	r24, 0x014C
 d12:	8f 5f       	subi	r24, 0xFF	; 255
 d14:	6a e0       	ldi	r22, 0x0A	; 10
 d16:	0e 94 a0 06 	call	0xd40	; 0xd40 <__udivmodqi4>
 d1a:	90 93 4c 01 	sts	0x014C, r25
 d1e:	ff 91       	pop	r31
 d20:	ef 91       	pop	r30
 d22:	bf 91       	pop	r27
 d24:	af 91       	pop	r26
 d26:	9f 91       	pop	r25
 d28:	8f 91       	pop	r24
 d2a:	7f 91       	pop	r23
 d2c:	6f 91       	pop	r22
 d2e:	5f 91       	pop	r21
 d30:	4f 91       	pop	r20
 d32:	3f 91       	pop	r19
 d34:	2f 91       	pop	r18
 d36:	0f 90       	pop	r0
 d38:	0f be       	out	0x3f, r0	; 63
 d3a:	0f 90       	pop	r0
 d3c:	1f 90       	pop	r1
 d3e:	18 95       	reti

00000d40 <__udivmodqi4>:
 d40:	99 1b       	sub	r25, r25
 d42:	79 e0       	ldi	r23, 0x09	; 9
 d44:	04 c0       	rjmp	.+8      	; 0xd4e <__udivmodqi4_ep>

00000d46 <__udivmodqi4_loop>:
 d46:	99 1f       	adc	r25, r25
 d48:	96 17       	cp	r25, r22
 d4a:	08 f0       	brcs	.+2      	; 0xd4e <__udivmodqi4_ep>
 d4c:	96 1b       	sub	r25, r22

00000d4e <__udivmodqi4_ep>:
 d4e:	88 1f       	adc	r24, r24
 d50:	7a 95       	dec	r23
 d52:	c9 f7       	brne	.-14     	; 0xd46 <__udivmodqi4_loop>
 d54:	80 95       	com	r24
 d56:	08 95       	ret

00000d58 <__divmodqi4>:
 d58:	87 fb       	bst	r24, 7
 d5a:	08 2e       	mov	r0, r24
 d5c:	06 26       	eor	r0, r22
 d5e:	87 fd       	sbrc	r24, 7
 d60:	81 95       	neg	r24
 d62:	67 fd       	sbrc	r22, 7
 d64:	61 95       	neg	r22
 d66:	ec df       	rcall	.-40     	; 0xd40 <__udivmodqi4>
 d68:	0e f4       	brtc	.+2      	; 0xd6c <__divmodqi4_1>
 d6a:	91 95       	neg	r25

00000d6c <__divmodqi4_1>:
 d6c:	07 fc       	sbrc	r0, 7
 d6e:	81 95       	neg	r24

00000d70 <__divmodqi4_exit>:
 d70:	08 95       	ret

00000d72 <__udivmodhi4>:
 d72:	aa 1b       	sub	r26, r26
 d74:	bb 1b       	sub	r27, r27
 d76:	51 e1       	ldi	r21, 0x11	; 17
 d78:	07 c0       	rjmp	.+14     	; 0xd88 <__udivmodhi4_ep>

00000d7a <__udivmodhi4_loop>:
 d7a:	aa 1f       	adc	r26, r26
 d7c:	bb 1f       	adc	r27, r27
 d7e:	a6 17       	cp	r26, r22
 d80:	b7 07       	cpc	r27, r23
 d82:	10 f0       	brcs	.+4      	; 0xd88 <__udivmodhi4_ep>
 d84:	a6 1b       	sub	r26, r22
 d86:	b7 0b       	sbc	r27, r23

00000d88 <__udivmodhi4_ep>:
 d88:	88 1f       	adc	r24, r24
 d8a:	99 1f       	adc	r25, r25
 d8c:	5a 95       	dec	r21
 d8e:	a9 f7       	brne	.-22     	; 0xd7a <__udivmodhi4_loop>
 d90:	80 95       	com	r24
 d92:	90 95       	com	r25
 d94:	bc 01       	movw	r22, r24
 d96:	cd 01       	movw	r24, r26
 d98:	08 95       	ret

00000d9a <_exit>:
 d9a:	f8 94       	cli

00000d9c <__stop_program>:
 d9c:	ff cf       	rjmp	.-2      	; 0xd9c <__stop_program>
