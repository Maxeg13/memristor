
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000004  00800100  00000314  000003a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000314  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000f  00800104  00800104  000003ac  2**0
                  ALLOC
  3 .debug_aranges 00000020  00000000  00000000  000003ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 000000fb  00000000  00000000  000003cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000289  00000000  00000000  000004c7  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000011c  00000000  00000000  00000750  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002b1  00000000  00000000  0000086c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000090  00000000  00000000  00000b20  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000105  00000000  00000000  00000bb0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000040  00000000  00000000  00000cb5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 aa 00 	jmp	0x154	; 0x154 <__vector_9>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 22 01 	jmp	0x244	; 0x244 <__vector_18>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e4 e1       	ldi	r30, 0x14	; 20
  7c:	f3 e0       	ldi	r31, 0x03	; 3
  7e:	02 c0       	rjmp	.+4      	; 0x84 <.do_copy_data_start>

00000080 <.do_copy_data_loop>:
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0

00000084 <.do_copy_data_start>:
  84:	a4 30       	cpi	r26, 0x04	; 4
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <.do_copy_data_loop>

0000008a <__do_clear_bss>:
  8a:	11 e0       	ldi	r17, 0x01	; 1
  8c:	a4 e0       	ldi	r26, 0x04	; 4
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a3 31       	cpi	r26, 0x13	; 19
  96:	b1 07       	cpc	r27, r17
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 8b 00 	call	0x116	; 0x116 <main>
  9e:	0c 94 88 01 	jmp	0x310	; 0x310 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <timer_init>:
int time_step=4;
int eventN=100;

void timer_init()
{
    TCCR2A = 0;        // set entire TCCR1A register to 0
  a6:	10 92 b0 00 	sts	0x00B0, r1
    TCCR2B = 0;
  aa:	e1 eb       	ldi	r30, 0xB1	; 177
  ac:	f0 e0       	ldi	r31, 0x00	; 0
  ae:	10 82       	st	Z, r1
    //    TCCR2B |= (1<<CS22) | (1<<CS20); // PRESCALER 1024
    TCCR2B |= (1<<CS21) ;
  b0:	80 81       	ld	r24, Z
  b2:	82 60       	ori	r24, 0x02	; 2
  b4:	80 83       	st	Z, r24
    // enable Timer1 overflow interrupt:
    TIMSK2 = (1 << TOIE2);
  b6:	81 e0       	ldi	r24, 0x01	; 1
  b8:	80 93 70 00 	sts	0x0070, r24
}
  bc:	08 95       	ret

000000be <uart_init>:

void uart_init(unsigned int ubrr)
{
	
	UBRR0H = (unsigned char)(ubrr>>8);
  be:	90 93 c5 00 	sts	0x00C5, r25
	UBRR0L = (unsigned char)ubrr;
  c2:	80 93 c4 00 	sts	0x00C4, r24
	/*Enable receiver and transmitter */
	UCSR0B = (1<<RXCIE0)|(1<<RXEN0)|(1<<TXEN0);
  c6:	88 e9       	ldi	r24, 0x98	; 152
  c8:	80 93 c1 00 	sts	0x00C1, r24
	/* Set frame format: 8data, 2stop bit */
	UCSR0C = (1<<USBS0)|(3<<UCSZ00);
  cc:	8e e0       	ldi	r24, 0x0E	; 14
  ce:	80 93 c2 00 	sts	0x00C2, r24
}
  d2:	08 95       	ret

000000d4 <SPI_MasterInit>:

void SPI_MasterInit()
{
/* Set MOSI and SCK output, all others input */
	DDR_SPI = (1<<DD_MOSI)|(1<<DD_SCK)|(1<<SPI_SS);
  d4:	8c e2       	ldi	r24, 0x2C	; 44
  d6:	84 b9       	out	0x04, r24	; 4
/* Enable SPI, Master, set clock rate fck/16 */
	SPCR = (1<<SPE)|(0<<DORD)|(1<<MSTR)|(1<<CPOL)|(0<<CPHA)|(1<<SPR1)|(0<<SPR0);
  d8:	8a e5       	ldi	r24, 0x5A	; 90
  da:	8c bd       	out	0x2c, r24	; 44
	//SPSR = (0<<SPI2X);
}
  dc:	08 95       	ret

000000de <SPI_WriteByte>:


void SPI_WriteByte(uint8_t data)
{
   //PORTB &= ~(1<<SPI_SS);
   SPDR = data;
  de:	8e bd       	out	0x2e, r24	; 46
  while(!(SPSR & (1<<SPIF)));
  e0:	0d b4       	in	r0, 0x2d	; 45
  e2:	07 fe       	sbrs	r0, 7
  e4:	fd cf       	rjmp	.-6      	; 0xe0 <SPI_WriteByte+0x2>
   //PORTB |= (1<<SPI_SS); 
}
  e6:	08 95       	ret

000000e8 <OneSend>:
	SPCR = (1<<SPE)|(0<<DORD)|(1<<MSTR)|(1<<CPOL)|(0<<CPHA)|(1<<SPR1)|(0<<SPR0);
	//SPSR = (0<<SPI2X);
}
//(1<<RXCIE0)|
void OneSend(uint16_t x)
{
  e8:	0f 93       	push	r16
  ea:	1f 93       	push	r17
	x+=2048;
  ec:	8c 01       	movw	r16, r24
  ee:	00 50       	subi	r16, 0x00	; 0
  f0:	18 4f       	sbci	r17, 0xF8	; 248
	PORTD&=~(1<<SYNC);
  f2:	5b 98       	cbi	0x0b, 3	; 11
	//_delay_us(30);  
	send8 = (x >> 8);
	send8 &= 0b00001111;
  f4:	81 2f       	mov	r24, r17
  f6:	8f 70       	andi	r24, 0x0F	; 15
  f8:	80 93 0c 01 	sts	0x010C, r24
	SPI_WriteByte(send8);
  fc:	90 e0       	ldi	r25, 0x00	; 0
  fe:	0e 94 6f 00 	call	0xde	; 0xde <SPI_WriteByte>
	send8=x;
 102:	00 93 0c 01 	sts	0x010C, r16
	//send8&=0b11111111;
	SPI_WriteByte(send8);		
 106:	80 2f       	mov	r24, r16
 108:	90 e0       	ldi	r25, 0x00	; 0
 10a:	0e 94 6f 00 	call	0xde	; 0xde <SPI_WriteByte>
	PORTD|=(1<<SYNC);
 10e:	5b 9a       	sbi	0x0b, 3	; 11

}
 110:	1f 91       	pop	r17
 112:	0f 91       	pop	r16
 114:	08 95       	ret

00000116 <main>:
   //PORTB |= (1<<SPI_SS); 
}

void main(void)
{
	sei();
 116:	78 94       	sei
}

void SPI_MasterInit()
{
/* Set MOSI and SCK output, all others input */
	DDR_SPI = (1<<DD_MOSI)|(1<<DD_SCK)|(1<<SPI_SS);
 118:	8c e2       	ldi	r24, 0x2C	; 44
 11a:	84 b9       	out	0x04, r24	; 4
/* Enable SPI, Master, set clock rate fck/16 */
	SPCR = (1<<SPE)|(0<<DORD)|(1<<MSTR)|(1<<CPOL)|(0<<CPHA)|(1<<SPR1)|(0<<SPR0);
 11c:	8a e5       	ldi	r24, 0x5A	; 90
 11e:	8c bd       	out	0x2c, r24	; 44
int time_step=4;
int eventN=100;

void timer_init()
{
    TCCR2A = 0;        // set entire TCCR1A register to 0
 120:	10 92 b0 00 	sts	0x00B0, r1
    TCCR2B = 0;
 124:	10 92 b1 00 	sts	0x00B1, r1
    //    TCCR2B |= (1<<CS22) | (1<<CS20); // PRESCALER 1024
    TCCR2B |= (1<<CS21) ;
 128:	80 91 b1 00 	lds	r24, 0x00B1
 12c:	82 60       	ori	r24, 0x02	; 2
 12e:	80 93 b1 00 	sts	0x00B1, r24
    // enable Timer1 overflow interrupt:
    TIMSK2 = (1 << TOIE2);
 132:	81 e0       	ldi	r24, 0x01	; 1
 134:	80 93 70 00 	sts	0x0070, r24
void main(void)
{
	sei();
	SPI_MasterInit();
	timer_init();
    DDRD = 0b000001100;	
 138:	8c e0       	ldi	r24, 0x0C	; 12
 13a:	8a b9       	out	0x0a, r24	; 10
}

void uart_init(unsigned int ubrr)
{
	
	UBRR0H = (unsigned char)(ubrr>>8);
 13c:	10 92 c5 00 	sts	0x00C5, r1
	UBRR0L = (unsigned char)ubrr;
 140:	83 e3       	ldi	r24, 0x33	; 51
 142:	80 93 c4 00 	sts	0x00C4, r24
	/*Enable receiver and transmitter */
	UCSR0B = (1<<RXCIE0)|(1<<RXEN0)|(1<<TXEN0);
 146:	88 e9       	ldi	r24, 0x98	; 152
 148:	80 93 c1 00 	sts	0x00C1, r24
	/* Set frame format: 8data, 2stop bit */
	UCSR0C = (1<<USBS0)|(3<<UCSZ00);
 14c:	8e e0       	ldi	r24, 0x0E	; 14
 14e:	80 93 c2 00 	sts	0x00C2, r24
 152:	ff cf       	rjmp	.-2      	; 0x152 <main+0x3c>

00000154 <__vector_9>:
    }

}

ISR(TIMER2_OVF_vect)
{
 154:	1f 92       	push	r1
 156:	0f 92       	push	r0
 158:	0f b6       	in	r0, 0x3f	; 63
 15a:	0f 92       	push	r0
 15c:	11 24       	eor	r1, r1
 15e:	2f 93       	push	r18
 160:	3f 93       	push	r19
 162:	4f 93       	push	r20
 164:	5f 93       	push	r21
 166:	6f 93       	push	r22
 168:	7f 93       	push	r23
 16a:	8f 93       	push	r24
 16c:	9f 93       	push	r25
 16e:	af 93       	push	r26
 170:	bf 93       	push	r27
 172:	ef 93       	push	r30
 174:	ff 93       	push	r31

	if(ctr==time_step)
 176:	20 91 09 01 	lds	r18, 0x0109
 17a:	30 91 0a 01 	lds	r19, 0x010A
 17e:	80 91 00 01 	lds	r24, 0x0100
 182:	90 91 01 01 	lds	r25, 0x0101
 186:	28 17       	cp	r18, r24
 188:	39 07       	cpc	r19, r25
 18a:	09 f0       	breq	.+2      	; 0x18e <__vector_9+0x3a>
 18c:	41 c0       	rjmp	.+130    	; 0x210 <__vector_9+0xbc>
	{
		if(event_ctr==0)
 18e:	20 91 11 01 	lds	r18, 0x0111
 192:	30 91 12 01 	lds	r19, 0x0112
 196:	21 15       	cp	r18, r1
 198:	31 05       	cpc	r19, r1
 19a:	29 f4       	brne	.+10     	; 0x1a6 <__vector_9+0x52>
		{
		OneSend(x16);
 19c:	80 91 04 01 	lds	r24, 0x0104
 1a0:	90 91 05 01 	lds	r25, 0x0105
 1a4:	19 c0       	rjmp	.+50     	; 0x1d8 <__vector_9+0x84>
		PORTD&=~(1<<LDAC);
		PORTD|=(1<<LDAC);
		}
		else if(event_ctr==t1)
 1a6:	80 91 0f 01 	lds	r24, 0x010F
 1aa:	90 e0       	ldi	r25, 0x00	; 0
 1ac:	28 17       	cp	r18, r24
 1ae:	39 07       	cpc	r19, r25
 1b0:	89 f0       	breq	.+34     	; 0x1d4 <__vector_9+0x80>
		{
		OneSend(0);
		PORTD&=~(1<<LDAC);
		PORTD|=(1<<LDAC);
		}
		else if(event_ctr==T)
 1b2:	80 91 0d 01 	lds	r24, 0x010D
 1b6:	90 e0       	ldi	r25, 0x00	; 0
 1b8:	28 17       	cp	r18, r24
 1ba:	39 07       	cpc	r19, r25
 1bc:	29 f4       	brne	.+10     	; 0x1c8 <__vector_9+0x74>
		{
		OneSend(y16);
 1be:	80 91 06 01 	lds	r24, 0x0106
 1c2:	90 91 07 01 	lds	r25, 0x0107
 1c6:	08 c0       	rjmp	.+16     	; 0x1d8 <__vector_9+0x84>
		PORTD&=~(1<<LDAC);
		PORTD|=(1<<LDAC);
		}
		else if(event_ctr==Tt2)
 1c8:	80 91 10 01 	lds	r24, 0x0110
 1cc:	90 e0       	ldi	r25, 0x00	; 0
 1ce:	28 17       	cp	r18, r24
 1d0:	39 07       	cpc	r19, r25
 1d2:	31 f4       	brne	.+12     	; 0x1e0 <__vector_9+0x8c>
		{
		OneSend(0);
 1d4:	80 e0       	ldi	r24, 0x00	; 0
 1d6:	90 e0       	ldi	r25, 0x00	; 0
 1d8:	0e 94 74 00 	call	0xe8	; 0xe8 <OneSend>
		PORTD&=~(1<<LDAC);
 1dc:	5a 98       	cbi	0x0b, 2	; 11
		PORTD|=(1<<LDAC);
 1de:	5a 9a       	sbi	0x0b, 2	; 11
		}
	
		ctr=0;
 1e0:	10 92 0a 01 	sts	0x010A, r1
 1e4:	10 92 09 01 	sts	0x0109, r1
		event_ctr++;
 1e8:	80 91 11 01 	lds	r24, 0x0111
 1ec:	90 91 12 01 	lds	r25, 0x0112
 1f0:	01 96       	adiw	r24, 0x01	; 1
 1f2:	90 93 12 01 	sts	0x0112, r25
 1f6:	80 93 11 01 	sts	0x0111, r24
		if(event_ctr==eventN)
 1fa:	20 91 02 01 	lds	r18, 0x0102
 1fe:	30 91 03 01 	lds	r19, 0x0103
 202:	82 17       	cp	r24, r18
 204:	93 07       	cpc	r25, r19
 206:	21 f4       	brne	.+8      	; 0x210 <__vector_9+0xbc>
			event_ctr=0;
 208:	10 92 12 01 	sts	0x0112, r1
 20c:	10 92 11 01 	sts	0x0111, r1
	}
	ctr++;
 210:	80 91 09 01 	lds	r24, 0x0109
 214:	90 91 0a 01 	lds	r25, 0x010A
 218:	01 96       	adiw	r24, 0x01	; 1
 21a:	90 93 0a 01 	sts	0x010A, r25
 21e:	80 93 09 01 	sts	0x0109, r24
		OneSend(0);
		PORTD&=~(1<<LDAC);
		PORTD|=(1<<LDAC);
		_delay_ms(50);
		*/
}
 222:	ff 91       	pop	r31
 224:	ef 91       	pop	r30
 226:	bf 91       	pop	r27
 228:	af 91       	pop	r26
 22a:	9f 91       	pop	r25
 22c:	8f 91       	pop	r24
 22e:	7f 91       	pop	r23
 230:	6f 91       	pop	r22
 232:	5f 91       	pop	r21
 234:	4f 91       	pop	r20
 236:	3f 91       	pop	r19
 238:	2f 91       	pop	r18
 23a:	0f 90       	pop	r0
 23c:	0f be       	out	0x3f, r0	; 63
 23e:	0f 90       	pop	r0
 240:	1f 90       	pop	r1
 242:	18 95       	reti

00000244 <__vector_18>:

ISR(USART_RX_vect)
{
 244:	1f 92       	push	r1
 246:	0f 92       	push	r0
 248:	0f b6       	in	r0, 0x3f	; 63
 24a:	0f 92       	push	r0
 24c:	11 24       	eor	r1, r1
 24e:	2f 93       	push	r18
 250:	6f 93       	push	r22
 252:	7f 93       	push	r23
 254:	8f 93       	push	r24
 256:	9f 93       	push	r25
	switch(ptr)
 258:	20 91 08 01 	lds	r18, 0x0108
 25c:	22 30       	cpi	r18, 0x02	; 2
 25e:	31 f1       	breq	.+76     	; 0x2ac <__vector_18+0x68>
 260:	23 30       	cpi	r18, 0x03	; 3
 262:	28 f4       	brcc	.+10     	; 0x26e <__vector_18+0x2a>
 264:	22 23       	and	r18, r18
 266:	41 f0       	breq	.+16     	; 0x278 <__vector_18+0x34>
 268:	21 30       	cpi	r18, 0x01	; 1
 26a:	71 f5       	brne	.+92     	; 0x2c8 <__vector_18+0x84>
 26c:	12 c0       	rjmp	.+36     	; 0x292 <__vector_18+0x4e>
 26e:	23 30       	cpi	r18, 0x03	; 3
 270:	11 f1       	breq	.+68     	; 0x2b6 <__vector_18+0x72>
 272:	24 30       	cpi	r18, 0x04	; 4
 274:	49 f5       	brne	.+82     	; 0x2c8 <__vector_18+0x84>
 276:	24 c0       	rjmp	.+72     	; 0x2c0 <__vector_18+0x7c>
	{
		case 0:
		x16=UDR0*16;
 278:	80 91 c6 00 	lds	r24, 0x00C6
 27c:	90 e0       	ldi	r25, 0x00	; 0
 27e:	74 e0       	ldi	r23, 0x04	; 4
 280:	88 0f       	add	r24, r24
 282:	99 1f       	adc	r25, r25
 284:	7a 95       	dec	r23
 286:	e1 f7       	brne	.-8      	; 0x280 <__vector_18+0x3c>
 288:	90 93 05 01 	sts	0x0105, r25
 28c:	80 93 04 01 	sts	0x0104, r24
 290:	1b c0       	rjmp	.+54     	; 0x2c8 <__vector_18+0x84>
		break;
		case 1:	
		y16=UDR0*16;
 292:	80 91 c6 00 	lds	r24, 0x00C6
 296:	90 e0       	ldi	r25, 0x00	; 0
 298:	64 e0       	ldi	r22, 0x04	; 4
 29a:	88 0f       	add	r24, r24
 29c:	99 1f       	adc	r25, r25
 29e:	6a 95       	dec	r22
 2a0:	e1 f7       	brne	.-8      	; 0x29a <__vector_18+0x56>
 2a2:	90 93 07 01 	sts	0x0107, r25
 2a6:	80 93 06 01 	sts	0x0106, r24
 2aa:	0e c0       	rjmp	.+28     	; 0x2c8 <__vector_18+0x84>
		break;
		case 2:
		t1=UDR0;
 2ac:	80 91 c6 00 	lds	r24, 0x00C6
 2b0:	80 93 0f 01 	sts	0x010F, r24
 2b4:	09 c0       	rjmp	.+18     	; 0x2c8 <__vector_18+0x84>
		break;		
		case 3:
		t2=UDR0;
 2b6:	80 91 c6 00 	lds	r24, 0x00C6
 2ba:	80 93 0b 01 	sts	0x010B, r24
 2be:	04 c0       	rjmp	.+8      	; 0x2c8 <__vector_18+0x84>
		break;	
		case 4:
		T=UDR0;
 2c0:	80 91 c6 00 	lds	r24, 0x00C6
 2c4:	80 93 0d 01 	sts	0x010D, r24
		break;
	}
	Tt2=T+t2;
 2c8:	80 91 0b 01 	lds	r24, 0x010B
 2cc:	90 91 0d 01 	lds	r25, 0x010D
 2d0:	89 0f       	add	r24, r25
 2d2:	80 93 10 01 	sts	0x0110, r24
	//UDR0=x16/16;
	ptr++;
	ptr%=5;
 2d6:	82 2f       	mov	r24, r18
 2d8:	8f 5f       	subi	r24, 0xFF	; 255
 2da:	65 e0       	ldi	r22, 0x05	; 5
 2dc:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <__udivmodqi4>
 2e0:	90 93 08 01 	sts	0x0108, r25
 2e4:	9f 91       	pop	r25
 2e6:	8f 91       	pop	r24
 2e8:	7f 91       	pop	r23
 2ea:	6f 91       	pop	r22
 2ec:	2f 91       	pop	r18
 2ee:	0f 90       	pop	r0
 2f0:	0f be       	out	0x3f, r0	; 63
 2f2:	0f 90       	pop	r0
 2f4:	1f 90       	pop	r1
 2f6:	18 95       	reti

000002f8 <__udivmodqi4>:
 2f8:	99 1b       	sub	r25, r25
 2fa:	79 e0       	ldi	r23, 0x09	; 9
 2fc:	04 c0       	rjmp	.+8      	; 0x306 <__udivmodqi4_ep>

000002fe <__udivmodqi4_loop>:
 2fe:	99 1f       	adc	r25, r25
 300:	96 17       	cp	r25, r22
 302:	08 f0       	brcs	.+2      	; 0x306 <__udivmodqi4_ep>
 304:	96 1b       	sub	r25, r22

00000306 <__udivmodqi4_ep>:
 306:	88 1f       	adc	r24, r24
 308:	7a 95       	dec	r23
 30a:	c9 f7       	brne	.-14     	; 0x2fe <__udivmodqi4_loop>
 30c:	80 95       	com	r24
 30e:	08 95       	ret

00000310 <_exit>:
 310:	f8 94       	cli

00000312 <__stop_program>:
 312:	ff cf       	rjmp	.-2      	; 0x312 <__stop_program>
