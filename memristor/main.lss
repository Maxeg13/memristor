
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000010  00800100  000007a0  00000834  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000007a0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000032  00800110  00800110  00000844  2**0
                  ALLOC
  3 .debug_aranges 00000020  00000000  00000000  00000844  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000212  00000000  00000000  00000864  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000051b  00000000  00000000  00000a76  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000001b3  00000000  00000000  00000f91  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000006aa  00000000  00000000  00001144  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000b0  00000000  00000000  000017f0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000001d7  00000000  00000000  000018a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000005e  00000000  00000000  00001a77  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 2a 01 	jmp	0x254	; 0x254 <__vector_9>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 f5 02 	jmp	0x5ea	; 0x5ea <__vector_18>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e0 ea       	ldi	r30, 0xA0	; 160
  7c:	f7 e0       	ldi	r31, 0x07	; 7
  7e:	02 c0       	rjmp	.+4      	; 0x84 <.do_copy_data_start>

00000080 <.do_copy_data_loop>:
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0

00000084 <.do_copy_data_start>:
  84:	a0 31       	cpi	r26, 0x10	; 16
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <.do_copy_data_loop>

0000008a <__do_clear_bss>:
  8a:	11 e0       	ldi	r17, 0x01	; 1
  8c:	a0 e1       	ldi	r26, 0x10	; 16
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a2 34       	cpi	r26, 0x42	; 66
  96:	b1 07       	cpc	r27, r17
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <main>
  9e:	0c 94 ce 03 	jmp	0x79c	; 0x79c <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <ADC_Init>:
uint8_t accum_cnt;

//функция инициализаци АЦП
//АЦП используется для регистрации тока, проходящего через мемристор
void ADC_Init(){
 ADCSRA |= (1 << ADEN) // Включаем АЦП
  a6:	ea e7       	ldi	r30, 0x7A	; 122
  a8:	f0 e0       	ldi	r31, 0x00	; 0
  aa:	80 81       	ld	r24, Z
  ac:	83 68       	ori	r24, 0x83	; 131
  ae:	80 83       	st	Z, r24
 //ADCSRA&=~(1 << ADPS1)|(1 << ADPS0)|(1 << ADPS1);
 |(1 << ADPS1)|(1 << ADPS0)|(1 << ADPS1);    // устанавливаем предделитель преобразователя на 8
 ADMUX |= (0 << REFS1)|(1 << REFS0) //выставляем опорное напряжение, как внешний ИОН
  b0:	ec e7       	ldi	r30, 0x7C	; 124
  b2:	f0 e0       	ldi	r31, 0x00	; 0
  b4:	80 81       	ld	r24, Z
  b6:	80 64       	ori	r24, 0x40	; 64
  b8:	80 83       	st	Z, r24
 |(0 << MUX0)|(0 << MUX1)|(0 << MUX2)|(0 << MUX3); // снимать сигнал будем с  входа PC0 
}
  ba:	08 95       	ret

000000bc <timer_init>:

//функция инициализации таймера
// Таймер используется для формирования временной последовательности значений, формируемых с ЦАПа
void timer_init()
{
    TCCR2A = 0;        
  bc:	10 92 b0 00 	sts	0x00B0, r1
    TCCR2B = 0;
  c0:	e1 eb       	ldi	r30, 0xB1	; 177
  c2:	f0 e0       	ldi	r31, 0x00	; 0
  c4:	10 82       	st	Z, r1
    
    TCCR2B |= (1<<CS21) ;    
  c6:	80 81       	ld	r24, Z
  c8:	82 60       	ori	r24, 0x02	; 2
  ca:	80 83       	st	Z, r24
    TIMSK2 = (1 << TOIE2);
  cc:	81 e0       	ldi	r24, 0x01	; 1
  ce:	80 93 70 00 	sts	0x0070, r24
}
  d2:	08 95       	ret

000000d4 <uart_init>:

//функция инициализации UART-интерфейса
void uart_init(unsigned int ubrr)
{	
	UBRR0H = (unsigned char)(ubrr>>8);
  d4:	90 93 c5 00 	sts	0x00C5, r25
	UBRR0L = (unsigned char)ubrr;
  d8:	80 93 c4 00 	sts	0x00C4, r24
	UCSR0B = (1<<RXCIE0)|(1<<RXEN0)|(1<<TXEN0);
  dc:	88 e9       	ldi	r24, 0x98	; 152
  de:	80 93 c1 00 	sts	0x00C1, r24
	UCSR0C = (1<<USBS0)|(3<<UCSZ00);
  e2:	8e e0       	ldi	r24, 0x0E	; 14
  e4:	80 93 c2 00 	sts	0x00C2, r24
}
  e8:	08 95       	ret

000000ea <SPI_MasterInit>:

//функция инициализации SPI
void SPI_MasterInit()
{
	DDR_SPI = (1<<DD_MOSI)|(1<<DD_SCK)|(1<<SPI_SS);
  ea:	8c e2       	ldi	r24, 0x2C	; 44
  ec:	84 b9       	out	0x04, r24	; 4
	SPCR = (1<<SPE)|(0<<DORD)|(1<<MSTR)|(1<<CPOL)|(0<<CPHA)|(1<<SPR1)|(0<<SPR0);
  ee:	8a e5       	ldi	r24, 0x5A	; 90
  f0:	8c bd       	out	0x2c, r24	; 44
}
  f2:	08 95       	ret

000000f4 <SPI_WriteByte>:
}


void SPI_WriteByte(uint8_t data)
{
   SPDR = data;
  f4:	8e bd       	out	0x2e, r24	; 46
  while(!(SPSR & (1<<SPIF)));
  f6:	0d b4       	in	r0, 0x2d	; 45
  f8:	07 fe       	sbrs	r0, 7
  fa:	fd cf       	rjmp	.-6      	; 0xf6 <SPI_WriteByte+0x2>
}
  fc:	08 95       	ret

000000fe <setDAC>:

//функция управления ЦАПом 
// при этом, управление регистром LDAC должно использоваться 
//вне функции в перспепктиве создания многоканальной схемы
void setDAC(int16_t x,int8_t chan)//_____________bipolar!!! and <<4 larger
{
  fe:	0f 93       	push	r16
 100:	1f 93       	push	r17
 102:	e6 2f       	mov	r30, r22


	x=-x;
 104:	00 27       	eor	r16, r16
 106:	11 27       	eor	r17, r17
 108:	08 1b       	sub	r16, r24
 10a:	19 0b       	sbc	r17, r25
	x+=2048;
 10c:	00 50       	subi	r16, 0x00	; 0
 10e:	18 4f       	sbci	r17, 0xF8	; 248
	PORTD&=~(1<<SYNC);
 110:	5b 98       	cbi	0x0b, 3	; 11
	send8 = (x >> 8);
	send8 &= 0b00001111;
	send8|=(chan_addrs[chan]<<4);
 112:	ff 27       	eor	r31, r31
 114:	e7 fd       	sbrc	r30, 7
 116:	f0 95       	com	r31
 118:	e0 50       	subi	r30, 0x00	; 0
 11a:	ff 4f       	sbci	r31, 0xFF	; 255
 11c:	80 81       	ld	r24, Z
 11e:	82 95       	swap	r24
 120:	80 7f       	andi	r24, 0xF0	; 240
 122:	21 2f       	mov	r18, r17
 124:	33 27       	eor	r19, r19
 126:	27 fd       	sbrc	r18, 7
 128:	3a 95       	dec	r19
 12a:	2f 70       	andi	r18, 0x0F	; 15
 12c:	82 2b       	or	r24, r18
 12e:	80 93 34 01 	sts	0x0134, r24
	SPI_WriteByte(send8);
 132:	90 e0       	ldi	r25, 0x00	; 0
 134:	0e 94 7a 00 	call	0xf4	; 0xf4 <SPI_WriteByte>
	send8=x;
 138:	00 93 34 01 	sts	0x0134, r16
	SPI_WriteByte(send8);		
 13c:	80 2f       	mov	r24, r16
 13e:	90 e0       	ldi	r25, 0x00	; 0
 140:	0e 94 7a 00 	call	0xf4	; 0xf4 <SPI_WriteByte>
	PORTD|=(1<<SYNC);
 144:	5b 9a       	sbi	0x0b, 3	; 11

}
 146:	1f 91       	pop	r17
 148:	0f 91       	pop	r16
 14a:	08 95       	ret

0000014c <set_reverser>:
}

void set_reverser(uint8_t ind, uint8_t x)
{
	
	switch(ind)
 14c:	83 30       	cpi	r24, 0x03	; 3
 14e:	11 f1       	breq	.+68     	; 0x194 <set_reverser+0x48>
 150:	84 30       	cpi	r24, 0x04	; 4
 152:	28 f4       	brcc	.+10     	; 0x15e <set_reverser+0x12>
 154:	81 30       	cpi	r24, 0x01	; 1
 156:	91 f0       	breq	.+36     	; 0x17c <set_reverser+0x30>
 158:	82 30       	cpi	r24, 0x02	; 2
 15a:	b0 f4       	brcc	.+44     	; 0x188 <set_reverser+0x3c>
 15c:	09 c0       	rjmp	.+18     	; 0x170 <set_reverser+0x24>
 15e:	85 30       	cpi	r24, 0x05	; 5
 160:	29 f1       	breq	.+74     	; 0x1ac <set_reverser+0x60>
 162:	85 30       	cpi	r24, 0x05	; 5
 164:	e8 f0       	brcs	.+58     	; 0x1a0 <set_reverser+0x54>
 166:	86 30       	cpi	r24, 0x06	; 6
 168:	39 f1       	breq	.+78     	; 0x1b8 <set_reverser+0x6c>
 16a:	87 30       	cpi	r24, 0x07	; 7
 16c:	81 f5       	brne	.+96     	; 0x1ce <set_reverser+0x82>
 16e:	2a c0       	rjmp	.+84     	; 0x1c4 <set_reverser+0x78>
	{
		case 0:  
		if(x)
 170:	66 23       	and	r22, r22
 172:	11 f0       	breq	.+4      	; 0x178 <set_reverser+0x2c>
			PORTD|=(1<<5);
 174:	5d 9a       	sbi	0x0b, 5	; 11
 176:	08 95       	ret
		else
			PORTD&=~(1<<5);
 178:	5d 98       	cbi	0x0b, 5	; 11
 17a:	08 95       	ret
		break;
		
				case 1:  
		if(x)
 17c:	66 23       	and	r22, r22
 17e:	11 f0       	breq	.+4      	; 0x184 <set_reverser+0x38>
			PORTD|=(1<<6);
 180:	5e 9a       	sbi	0x0b, 6	; 11
 182:	08 95       	ret
		else
			PORTD&=~(1<<6);
 184:	5e 98       	cbi	0x0b, 6	; 11
 186:	08 95       	ret
		break;
		
				case 2:  
		if(x)
 188:	66 23       	and	r22, r22
 18a:	11 f0       	breq	.+4      	; 0x190 <set_reverser+0x44>
			PORTD|=(1<<7);
 18c:	5f 9a       	sbi	0x0b, 7	; 11
 18e:	08 95       	ret
		else
			PORTD&=~(1<<7);
 190:	5f 98       	cbi	0x0b, 7	; 11
 192:	08 95       	ret
		break;
		
				case 3:  
		if(x)
 194:	66 23       	and	r22, r22
 196:	11 f0       	breq	.+4      	; 0x19c <set_reverser+0x50>
			PORTB|=(1<<0);
 198:	28 9a       	sbi	0x05, 0	; 5
 19a:	08 95       	ret
		else
			PORTB&=~(1<<0);
 19c:	28 98       	cbi	0x05, 0	; 5
 19e:	08 95       	ret
		break;
		
				case 4:  
		if(x)
 1a0:	66 23       	and	r22, r22
 1a2:	11 f0       	breq	.+4      	; 0x1a8 <set_reverser+0x5c>
			PORTB|=(1<<1);
 1a4:	29 9a       	sbi	0x05, 1	; 5
 1a6:	08 95       	ret
		else
			PORTB&=~(1<<1);
 1a8:	29 98       	cbi	0x05, 1	; 5
 1aa:	08 95       	ret
		break;
		
				case 5:  
		if(x)
 1ac:	66 23       	and	r22, r22
 1ae:	11 f0       	breq	.+4      	; 0x1b4 <set_reverser+0x68>
			PORTB|=(1<<2);
 1b0:	2a 9a       	sbi	0x05, 2	; 5
 1b2:	08 95       	ret
		else
			PORTB&=~(1<<2);
 1b4:	2a 98       	cbi	0x05, 2	; 5
 1b6:	08 95       	ret
		break;
		
				case 6:  
		if(x)
 1b8:	66 23       	and	r22, r22
 1ba:	11 f0       	breq	.+4      	; 0x1c0 <set_reverser+0x74>
			PORTC|=(1<<2);
 1bc:	42 9a       	sbi	0x08, 2	; 8
 1be:	08 95       	ret
		else
			PORTC&=~(1<<2);
 1c0:	42 98       	cbi	0x08, 2	; 8
 1c2:	08 95       	ret
		break;
		
				case 7:  
		if(x)
 1c4:	66 23       	and	r22, r22
 1c6:	11 f0       	breq	.+4      	; 0x1cc <set_reverser+0x80>
			PORTB|=(1<<4);
 1c8:	2c 9a       	sbi	0x05, 4	; 5
 1ca:	08 95       	ret
		else
			PORTB&=~(1<<4);
 1cc:	2c 98       	cbi	0x05, 4	; 5
 1ce:	08 95       	ret

000001d0 <main>:
}



void main(void)
{
 1d0:	1f 93       	push	r17
	DDRC= 0b00011110;
 1d2:	8e e1       	ldi	r24, 0x1E	; 30
 1d4:	87 b9       	out	0x07, r24	; 7
	DDRD =0b11111100;	
 1d6:	8c ef       	ldi	r24, 0xFC	; 252
 1d8:	8a b9       	out	0x0a, r24	; 10
	DDRB= 0b00011111;
 1da:	8f e1       	ldi	r24, 0x1F	; 31
 1dc:	84 b9       	out	0x04, r24	; 4
	sei();
 1de:	78 94       	sei
}

//функция инициализации SPI
void SPI_MasterInit()
{
	DDR_SPI = (1<<DD_MOSI)|(1<<DD_SCK)|(1<<SPI_SS);
 1e0:	8c e2       	ldi	r24, 0x2C	; 44
 1e2:	84 b9       	out	0x04, r24	; 4
	SPCR = (1<<SPE)|(0<<DORD)|(1<<MSTR)|(1<<CPOL)|(0<<CPHA)|(1<<SPR1)|(0<<SPR0);
 1e4:	8a e5       	ldi	r24, 0x5A	; 90
 1e6:	8c bd       	out	0x2c, r24	; 44

//функция инициализации таймера
// Таймер используется для формирования временной последовательности значений, формируемых с ЦАПа
void timer_init()
{
    TCCR2A = 0;        
 1e8:	10 92 b0 00 	sts	0x00B0, r1
    TCCR2B = 0;
 1ec:	10 92 b1 00 	sts	0x00B1, r1
    
    TCCR2B |= (1<<CS21) ;    
 1f0:	80 91 b1 00 	lds	r24, 0x00B1
 1f4:	82 60       	ori	r24, 0x02	; 2
 1f6:	80 93 b1 00 	sts	0x00B1, r24
    TIMSK2 = (1 << TOIE2);
 1fa:	81 e0       	ldi	r24, 0x01	; 1
 1fc:	80 93 70 00 	sts	0x0070, r24
}

//функция инициализации UART-интерфейса
void uart_init(unsigned int ubrr)
{	
	UBRR0H = (unsigned char)(ubrr>>8);
 200:	10 92 c5 00 	sts	0x00C5, r1
	UBRR0L = (unsigned char)ubrr;
 204:	83 e3       	ldi	r24, 0x33	; 51
 206:	80 93 c4 00 	sts	0x00C4, r24
	UCSR0B = (1<<RXCIE0)|(1<<RXEN0)|(1<<TXEN0);
 20a:	88 e9       	ldi	r24, 0x98	; 152
 20c:	80 93 c1 00 	sts	0x00C1, r24
	UCSR0C = (1<<USBS0)|(3<<UCSZ00);
 210:	8e e0       	ldi	r24, 0x0E	; 14
 212:	80 93 c2 00 	sts	0x00C2, r24
uint8_t accum_cnt;

//функция инициализаци АЦП
//АЦП используется для регистрации тока, проходящего через мемристор
void ADC_Init(){
 ADCSRA |= (1 << ADEN) // Включаем АЦП
 216:	80 91 7a 00 	lds	r24, 0x007A
 21a:	83 68       	ori	r24, 0x83	; 131
 21c:	80 93 7a 00 	sts	0x007A, r24
 //ADCSRA&=~(1 << ADPS1)|(1 << ADPS0)|(1 << ADPS1);
 |(1 << ADPS1)|(1 << ADPS0)|(1 << ADPS1);    // устанавливаем предделитель преобразователя на 8
 ADMUX |= (0 << REFS1)|(1 << REFS0) //выставляем опорное напряжение, как внешний ИОН
 220:	80 91 7c 00 	lds	r24, 0x007C
 224:	80 64       	ori	r24, 0x40	; 64
 226:	80 93 7c 00 	sts	0x007C, r24
    //DDRD = 0b000001100;	
	
	uart_init(BAUDRATE);
	ADC_Init();
	
			ADCSRA |= (1 << ADSC); 
 22a:	80 91 7a 00 	lds	r24, 0x007A
 22e:	80 64       	ori	r24, 0x40	; 64
 230:	80 93 7a 00 	sts	0x007A, r24
	ADCL;
 234:	80 91 78 00 	lds	r24, 0x0078
	ADCL;
 238:	80 91 78 00 	lds	r24, 0x0078
 23c:	10 e0       	ldi	r17, 0x00	; 0
		//set_reverser(i,1);
	
	//set_reverser(0,0);
	for (int i=0;i<8;i++)
	{
		setDAC(0,i);
 23e:	80 e0       	ldi	r24, 0x00	; 0
 240:	90 e0       	ldi	r25, 0x00	; 0
 242:	61 2f       	mov	r22, r17
 244:	0e 94 7f 00 	call	0xfe	; 0xfe <setDAC>
 248:	1f 5f       	subi	r17, 0xFF	; 255

	//for(int i=0;i<8;i++)
		//set_reverser(i,1);
	
	//set_reverser(0,0);
	for (int i=0;i<8;i++)
 24a:	18 30       	cpi	r17, 0x08	; 8
 24c:	c1 f7       	brne	.-16     	; 0x23e <main+0x6e>
	{
		setDAC(0,i);
	}
	PORTD&=~(1<<LDAC);
 24e:	5a 98       	cbi	0x0b, 2	; 11
	PORTD|=(1<<LDAC);
 250:	5a 9a       	sbi	0x0b, 2	; 11
 252:	ff cf       	rjmp	.-2      	; 0x252 <main+0x82>

00000254 <__vector_9>:
//главный цикл работы контроллера
//Здесь устанавливаются значения ЦАП и передаются данные на компьютер
//через UART-интерфейс
//данный участок кода повторяется при переполнении TIMER2
ISR(TIMER2_OVF_vect)
{
 254:	1f 92       	push	r1
 256:	0f 92       	push	r0
 258:	0f b6       	in	r0, 0x3f	; 63
 25a:	0f 92       	push	r0
 25c:	11 24       	eor	r1, r1
 25e:	2f 93       	push	r18
 260:	3f 93       	push	r19
 262:	4f 93       	push	r20
 264:	5f 93       	push	r21
 266:	6f 93       	push	r22
 268:	7f 93       	push	r23
 26a:	8f 93       	push	r24
 26c:	9f 93       	push	r25
 26e:	af 93       	push	r26
 270:	bf 93       	push	r27
 272:	ef 93       	push	r30
 274:	ff 93       	push	r31
	if(ctr>time_step)
 276:	20 91 30 01 	lds	r18, 0x0130
 27a:	30 91 31 01 	lds	r19, 0x0131
 27e:	80 91 0c 01 	lds	r24, 0x010C
 282:	90 91 0d 01 	lds	r25, 0x010D
 286:	82 17       	cp	r24, r18
 288:	93 07       	cpc	r25, r19
 28a:	0c f0       	brlt	.+2      	; 0x28e <__vector_9+0x3a>
 28c:	94 c1       	rjmp	.+808    	; 0x5b6 <__vector_9+0x362>
	{
		if(MD==CUSTOM)
 28e:	60 91 10 01 	lds	r22, 0x0110
 292:	66 23       	and	r22, r22
 294:	09 f0       	breq	.+2      	; 0x298 <__vector_9+0x44>
 296:	48 c0       	rjmp	.+144    	; 0x328 <__vector_9+0xd4>
		{
			if(event_ctr==(1))
 298:	20 91 3f 01 	lds	r18, 0x013F
 29c:	30 91 40 01 	lds	r19, 0x0140
 2a0:	21 30       	cpi	r18, 0x01	; 1
 2a2:	31 05       	cpc	r19, r1
 2a4:	59 f4       	brne	.+22     	; 0x2bc <__vector_9+0x68>
			{	
			ADCL_=ADCL;
 2a6:	90 91 78 00 	lds	r25, 0x0078
 2aa:	90 93 36 01 	sts	0x0136, r25
			ADCH_=ADCH;
 2ae:	80 91 79 00 	lds	r24, 0x0079
 2b2:	80 93 38 01 	sts	0x0138, r24
			UDR0=ADCL_;			
 2b6:	90 93 c6 00 	sts	0x00C6, r25
 2ba:	13 c0       	rjmp	.+38     	; 0x2e2 <__vector_9+0x8e>
			}
			
			if(event_ctr==(2))
 2bc:	22 30       	cpi	r18, 0x02	; 2
 2be:	31 05       	cpc	r19, r1
 2c0:	29 f4       	brne	.+10     	; 0x2cc <__vector_9+0x78>
			{	
			UDR0=ADCH_;				
 2c2:	80 91 38 01 	lds	r24, 0x0138
 2c6:	80 93 c6 00 	sts	0x00C6, r24
 2ca:	0b c0       	rjmp	.+22     	; 0x2e2 <__vector_9+0x8e>
			}
			
			
			
			if(event_ctr==0)
 2cc:	21 15       	cp	r18, r1
 2ce:	31 05       	cpc	r19, r1
 2d0:	41 f4       	brne	.+16     	; 0x2e2 <__vector_9+0x8e>
			{
			UDR0=255;
 2d2:	8f ef       	ldi	r24, 0xFF	; 255
 2d4:	80 93 c6 00 	sts	0x00C6, r24
			setDAC(x16,chan);
 2d8:	80 91 19 01 	lds	r24, 0x0119
 2dc:	90 91 1a 01 	lds	r25, 0x011A
 2e0:	4c c1       	rjmp	.+664    	; 0x57a <__vector_9+0x326>
			PORTD&=~(1<<LDAC);
			PORTD|=(1<<LDAC);
			}
			
			else if(event_ctr==t1)
 2e2:	80 91 08 01 	lds	r24, 0x0108
 2e6:	90 e0       	ldi	r25, 0x00	; 0
 2e8:	28 17       	cp	r18, r24
 2ea:	39 07       	cpc	r19, r25
 2ec:	09 f4       	brne	.+2      	; 0x2f0 <__vector_9+0x9c>
 2ee:	43 c1       	rjmp	.+646    	; 0x576 <__vector_9+0x322>
				
			setDAC(0,chan);
			PORTD&=~(1<<LDAC);
			PORTD|=(1<<LDAC);
			}
			else if(event_ctr==dT)
 2f0:	80 91 2f 01 	lds	r24, 0x012F
 2f4:	90 e0       	ldi	r25, 0x00	; 0
 2f6:	28 17       	cp	r18, r24
 2f8:	39 07       	cpc	r19, r25
 2fa:	09 f4       	brne	.+2      	; 0x2fe <__vector_9+0xaa>
 2fc:	23 c1       	rjmp	.+582    	; 0x544 <__vector_9+0x2f0>
			setDAC(y16,chan);
			PORTD&=~(1<<LDAC);
			PORTD|=(1<<LDAC);
		
			}
			else if(event_ctr==(dT+1))
 2fe:	01 96       	adiw	r24, 0x01	; 1
 300:	28 17       	cp	r18, r24
 302:	39 07       	cpc	r19, r25
 304:	09 f4       	brne	.+2      	; 0x308 <__vector_9+0xb4>
 306:	26 c1       	rjmp	.+588    	; 0x554 <__vector_9+0x300>
				ADCSRA |= (1 << ADSC); 

			else if(event_ctr==dTt2)
 308:	80 91 0a 01 	lds	r24, 0x010A
 30c:	90 e0       	ldi	r25, 0x00	; 0
 30e:	28 17       	cp	r18, r24
 310:	39 07       	cpc	r19, r25
 312:	09 f0       	breq	.+2      	; 0x316 <__vector_9+0xc2>
 314:	38 c1       	rjmp	.+624    	; 0x586 <__vector_9+0x332>
			{
			if ( ( UCSR0A & (1<<UDRE0)) )			
 316:	80 91 c0 00 	lds	r24, 0x00C0
 31a:	85 ff       	sbrs	r24, 5
 31c:	24 c1       	rjmp	.+584    	; 0x566 <__vector_9+0x312>
				UDR0=_adc;	
 31e:	80 91 3b 01 	lds	r24, 0x013B
 322:	80 93 c6 00 	sts	0x00C6, r24
 326:	1f c1       	rjmp	.+574    	; 0x566 <__vector_9+0x312>
			PORTD|=(1<<LDAC);

			}		

		}
		else if(MD==VAC)
 328:	61 30       	cpi	r22, 0x01	; 1
 32a:	09 f0       	breq	.+2      	; 0x32e <__vector_9+0xda>
 32c:	7c c0       	rjmp	.+248    	; 0x426 <__vector_9+0x1d2>
		{			
			static int i=0;
			i++;						
 32e:	80 91 2b 01 	lds	r24, 0x012B
 332:	90 91 2c 01 	lds	r25, 0x012C
 336:	01 96       	adiw	r24, 0x01	; 1
 338:	90 93 2c 01 	sts	0x012C, r25
 33c:	80 93 2b 01 	sts	0x012B, r24
			
			switch(UDP_cnt)
 340:	80 91 41 01 	lds	r24, 0x0141
 344:	81 30       	cpi	r24, 0x01	; 1
 346:	79 f0       	breq	.+30     	; 0x366 <__vector_9+0x112>
 348:	81 30       	cpi	r24, 0x01	; 1
 34a:	30 f0       	brcs	.+12     	; 0x358 <__vector_9+0x104>
 34c:	82 30       	cpi	r24, 0x02	; 2
 34e:	f1 f0       	breq	.+60     	; 0x38c <__vector_9+0x138>
 350:	83 30       	cpi	r24, 0x03	; 3
 352:	09 f0       	breq	.+2      	; 0x356 <__vector_9+0x102>
 354:	61 c0       	rjmp	.+194    	; 0x418 <__vector_9+0x1c4>
 356:	1f c0       	rjmp	.+62     	; 0x396 <__vector_9+0x142>
			{
				case 0:					
				 ADCSRA |= (1 << ADSC); 
 358:	80 91 7a 00 	lds	r24, 0x007A
 35c:	80 64       	ori	r24, 0x40	; 64
 35e:	80 93 7a 00 	sts	0x007A, r24
				UDR0=255;
 362:	8f ef       	ldi	r24, 0xFF	; 255
 364:	15 c0       	rjmp	.+42     	; 0x390 <__vector_9+0x13c>
				break;
				
				
				
				case 1:	
				ADCL__=	ADCL_;
 366:	80 91 36 01 	lds	r24, 0x0136
 36a:	80 93 33 01 	sts	0x0133, r24
				ADCH__ = ADCH_;
 36e:	80 91 38 01 	lds	r24, 0x0138
 372:	80 93 2e 01 	sts	0x012E, r24
				ADCL_=ADCL;
 376:	90 91 78 00 	lds	r25, 0x0078
 37a:	90 93 36 01 	sts	0x0136, r25
				ADCH_=ADCH;
 37e:	80 91 79 00 	lds	r24, 0x0079
 382:	80 93 38 01 	sts	0x0138, r24
				
				UDR0=ADCL_;
 386:	90 93 c6 00 	sts	0x00C6, r25
 38a:	46 c0       	rjmp	.+140    	; 0x418 <__vector_9+0x1c4>
				break;
				
				case 2:
				UDR0=ADCH_;
 38c:	80 91 38 01 	lds	r24, 0x0138
 390:	80 93 c6 00 	sts	0x00C6, r24
 394:	41 c0       	rjmp	.+130    	; 0x418 <__vector_9+0x1c4>
				
				
				case 3:
								
				//VAC16_HH=VAC16_H;
				VAC16_H=VAC16;
 396:	20 91 11 01 	lds	r18, 0x0111
 39a:	30 91 12 01 	lds	r19, 0x0112
 39e:	30 93 14 01 	sts	0x0114, r19
 3a2:	20 93 13 01 	sts	0x0113, r18
				
				if(pos_phase)
 3a6:	80 91 0b 01 	lds	r24, 0x010B
 3aa:	88 23       	and	r24, r24
 3ac:	81 f0       	breq	.+32     	; 0x3ce <__vector_9+0x17a>
				{
							//PORTC=0b00000010;
		//PORTB=0b00011111;
		//PORTD=0b11101100;
					VAC16+=32;
 3ae:	20 5e       	subi	r18, 0xE0	; 224
 3b0:	3f 4f       	sbci	r19, 0xFF	; 255
 3b2:	30 93 12 01 	sts	0x0112, r19
 3b6:	20 93 11 01 	sts	0x0111, r18
					if(VAC16>(y16-1))
 3ba:	80 91 1b 01 	lds	r24, 0x011B
 3be:	90 91 1c 01 	lds	r25, 0x011C
 3c2:	28 17       	cp	r18, r24
 3c4:	39 07       	cpc	r19, r25
 3c6:	b4 f0       	brlt	.+44     	; 0x3f4 <__vector_9+0x1a0>
					{
					pos_phase=0;				
 3c8:	10 92 0b 01 	sts	0x010B, r1
 3cc:	13 c0       	rjmp	.+38     	; 0x3f4 <__vector_9+0x1a0>
				else
				{
					//PORTB=0;
		//PORTC=0;
		//PORTD=0;
					VAC16-=32;
 3ce:	c9 01       	movw	r24, r18
 3d0:	80 97       	sbiw	r24, 0x20	; 32
 3d2:	90 93 12 01 	sts	0x0112, r25
 3d6:	80 93 11 01 	sts	0x0111, r24
					if(VAC16<(-x16+1))
 3da:	21 e0       	ldi	r18, 0x01	; 1
 3dc:	30 e0       	ldi	r19, 0x00	; 0
 3de:	40 91 19 01 	lds	r20, 0x0119
 3e2:	50 91 1a 01 	lds	r21, 0x011A
 3e6:	24 1b       	sub	r18, r20
 3e8:	35 0b       	sbc	r19, r21
 3ea:	82 17       	cp	r24, r18
 3ec:	93 07       	cpc	r25, r19
 3ee:	14 f4       	brge	.+4      	; 0x3f4 <__vector_9+0x1a0>
					{
					pos_phase=1;									
 3f0:	60 93 0b 01 	sts	0x010B, r22
					}
				}	
				
				
				
				UDR0=VAC16>>4;
 3f4:	80 91 11 01 	lds	r24, 0x0111
 3f8:	90 91 12 01 	lds	r25, 0x0112
 3fc:	9c 01       	movw	r18, r24
 3fe:	74 e0       	ldi	r23, 0x04	; 4
 400:	35 95       	asr	r19
 402:	27 95       	ror	r18
 404:	7a 95       	dec	r23
 406:	e1 f7       	brne	.-8      	; 0x400 <__vector_9+0x1ac>
 408:	20 93 c6 00 	sts	0x00C6, r18
				setDAC(VAC16,chan);
 40c:	60 91 20 01 	lds	r22, 0x0120
 410:	0e 94 7f 00 	call	0xfe	; 0xfe <setDAC>
				//setDAC(VAC16,3);
				//setDAC(VAC16,4);
				//setDAC(VAC16,5);
				//setDAC(VAC16,6);
				//setDAC(VAC16,7);				
				PORTD&=~(1<<LDAC);
 414:	5a 98       	cbi	0x0b, 2	; 11
				PORTD|=(1<<LDAC);
 416:	5a 9a       	sbi	0x0b, 2	; 11
				
			}
						
			
			UDP_cnt++;
			UDP_cnt%=4;
 418:	80 91 41 01 	lds	r24, 0x0141
 41c:	8f 5f       	subi	r24, 0xFF	; 255
 41e:	83 70       	andi	r24, 0x03	; 3
 420:	80 93 41 01 	sts	0x0141, r24
 424:	b0 c0       	rjmp	.+352    	; 0x586 <__vector_9+0x332>

			
		}
		else if(MD==PROGRAM)
 426:	62 30       	cpi	r22, 0x02	; 2
 428:	09 f0       	breq	.+2      	; 0x42c <__vector_9+0x1d8>
 42a:	ad c0       	rjmp	.+346    	; 0x586 <__vector_9+0x332>
		{
			T=16;
 42c:	80 e1       	ldi	r24, 0x10	; 16
 42e:	80 93 35 01 	sts	0x0135, r24
			static uint16_t adc_h;
			
			if(event_ctr==(1))
 432:	40 91 3f 01 	lds	r20, 0x013F
 436:	50 91 40 01 	lds	r21, 0x0140
 43a:	41 30       	cpi	r20, 0x01	; 1
 43c:	51 05       	cpc	r21, r1
 43e:	29 f4       	brne	.+10     	; 0x44a <__vector_9+0x1f6>
			{	
				UDR0=PROGRAM_done;
 440:	80 91 1f 01 	lds	r24, 0x011F
 444:	80 93 c6 00 	sts	0x00C6, r24
 448:	77 c0       	rjmp	.+238    	; 0x538 <__vector_9+0x2e4>
			}

			if(event_ctr==(2))//ADC GET 
 44a:	42 30       	cpi	r20, 0x02	; 2
 44c:	51 05       	cpc	r21, r1
 44e:	59 f4       	brne	.+22     	; 0x466 <__vector_9+0x212>
			{	
				ADCL_=ADCL;	
 450:	90 91 78 00 	lds	r25, 0x0078
 454:	90 93 36 01 	sts	0x0136, r25
				ADCH_=ADCH;
 458:	80 91 79 00 	lds	r24, 0x0079
 45c:	80 93 38 01 	sts	0x0138, r24
				UDR0=ADCL_;
 460:	90 93 c6 00 	sts	0x00C6, r25
 464:	6c c0       	rjmp	.+216    	; 0x53e <__vector_9+0x2ea>
			}
			
			if(event_ctr==(3))//ADC GET CONTINUE
 466:	43 30       	cpi	r20, 0x03	; 3
 468:	51 05       	cpc	r21, r1
 46a:	31 f5       	brne	.+76     	; 0x4b8 <__vector_9+0x264>
			{	
				
				UDR0=ADCH_;
 46c:	80 91 38 01 	lds	r24, 0x0138
 470:	80 93 c6 00 	sts	0x00C6, r24
				
				_adc=(ADCL_|(ADCH_ <<8));
 474:	38 2f       	mov	r19, r24
 476:	20 e0       	ldi	r18, 0x00	; 0
 478:	80 91 36 01 	lds	r24, 0x0136
 47c:	90 e0       	ldi	r25, 0x00	; 0
 47e:	82 2b       	or	r24, r18
 480:	93 2b       	or	r25, r19
 482:	90 93 3c 01 	sts	0x013C, r25
 486:	80 93 3b 01 	sts	0x013B, r24
				adc_h=((uint16_t)(512)-_adc);
 48a:	20 e0       	ldi	r18, 0x00	; 0
 48c:	32 e0       	ldi	r19, 0x02	; 2
 48e:	28 1b       	sub	r18, r24
 490:	39 0b       	sbc	r19, r25
 492:	30 93 2a 01 	sts	0x012A, r19
 496:	20 93 29 01 	sts	0x0129, r18
				
				if((adc_h)==(uint16_t)(t1))
 49a:	80 91 08 01 	lds	r24, 0x0108
 49e:	90 e0       	ldi	r25, 0x00	; 0
 4a0:	28 17       	cp	r18, r24
 4a2:	39 07       	cpc	r19, r25
 4a4:	09 f0       	breq	.+2      	; 0x4a8 <__vector_9+0x254>
 4a6:	48 c0       	rjmp	.+144    	; 0x538 <__vector_9+0x2e4>
				{
					PROGRAM_done=1;
 4a8:	81 e0       	ldi	r24, 0x01	; 1
 4aa:	80 93 1f 01 	sts	0x011F, r24
					prog_val=0;
 4ae:	10 92 18 01 	sts	0x0118, r1
 4b2:	10 92 17 01 	sts	0x0117, r1
 4b6:	4b c0       	rjmp	.+150    	; 0x54e <__vector_9+0x2fa>
				}
			}
			
			if(event_ctr==0)
 4b8:	41 15       	cp	r20, r1
 4ba:	51 05       	cpc	r21, r1
 4bc:	e9 f5       	brne	.+122    	; 0x538 <__vector_9+0x2e4>
			{
				UDR0=255;
 4be:	8f ef       	ldi	r24, 0xFF	; 255
 4c0:	80 93 c6 00 	sts	0x00C6, r24
				
				
				prog_val+=32;
 4c4:	20 91 17 01 	lds	r18, 0x0117
 4c8:	30 91 18 01 	lds	r19, 0x0118
 4cc:	20 5e       	subi	r18, 0xE0	; 224
 4ce:	3f 4f       	sbci	r19, 0xFF	; 255
 4d0:	30 93 18 01 	sts	0x0118, r19
 4d4:	20 93 17 01 	sts	0x0117, r18
				
				if(prog_val==(-x16+32))
 4d8:	40 91 19 01 	lds	r20, 0x0119
 4dc:	50 91 1a 01 	lds	r21, 0x011A
 4e0:	80 e2       	ldi	r24, 0x20	; 32
 4e2:	90 e0       	ldi	r25, 0x00	; 0
 4e4:	84 1b       	sub	r24, r20
 4e6:	95 0b       	sbc	r25, r21
 4e8:	28 17       	cp	r18, r24
 4ea:	39 07       	cpc	r19, r25
 4ec:	29 f4       	brne	.+10     	; 0x4f8 <__vector_9+0x2a4>
					prog_val=0;
 4ee:	10 92 18 01 	sts	0x0118, r1
 4f2:	10 92 17 01 	sts	0x0117, r1
 4f6:	13 c0       	rjmp	.+38     	; 0x51e <__vector_9+0x2ca>
				else
				if(prog_val>(t2<<4))
 4f8:	80 91 09 01 	lds	r24, 0x0109
 4fc:	90 e0       	ldi	r25, 0x00	; 0
 4fe:	64 e0       	ldi	r22, 0x04	; 4
 500:	88 0f       	add	r24, r24
 502:	99 1f       	adc	r25, r25
 504:	6a 95       	dec	r22
 506:	e1 f7       	brne	.-8      	; 0x500 <__vector_9+0x2ac>
 508:	82 17       	cp	r24, r18
 50a:	93 07       	cpc	r25, r19
 50c:	44 f4       	brge	.+16     	; 0x51e <__vector_9+0x2ca>
					prog_val=-x16;
 50e:	88 27       	eor	r24, r24
 510:	99 27       	eor	r25, r25
 512:	84 1b       	sub	r24, r20
 514:	95 0b       	sbc	r25, r21
 516:	90 93 18 01 	sts	0x0118, r25
 51a:	80 93 17 01 	sts	0x0117, r24
				
				if(PROGRAM_done)
 51e:	80 91 1f 01 	lds	r24, 0x011F
 522:	88 23       	and	r24, r24
 524:	21 f0       	breq	.+8      	; 0x52e <__vector_9+0x2da>
					prog_val=0;
 526:	10 92 18 01 	sts	0x0118, r1
 52a:	10 92 17 01 	sts	0x0117, r1
				
				setDAC(prog_val,chan);
 52e:	80 91 17 01 	lds	r24, 0x0117
 532:	90 91 18 01 	lds	r25, 0x0118
 536:	21 c0       	rjmp	.+66     	; 0x57a <__vector_9+0x326>
				PORTD&=~(1<<LDAC);
				PORTD|=(1<<LDAC);
			}			
			else if(event_ctr==7)//t1
 538:	47 30       	cpi	r20, 0x07	; 7
 53a:	51 05       	cpc	r21, r1
 53c:	e1 f0       	breq	.+56     	; 0x576 <__vector_9+0x322>
			{
				setDAC(0,chan);
				PORTD&=~(1<<LDAC);
				PORTD|=(1<<LDAC);
			}
			else if(event_ctr==9)//dT
 53e:	49 30       	cpi	r20, 0x09	; 9
 540:	51 05       	cpc	r21, r1
 542:	29 f4       	brne	.+10     	; 0x54e <__vector_9+0x2fa>
			{		
				setDAC(y16,chan);
 544:	80 91 1b 01 	lds	r24, 0x011B
 548:	90 91 1c 01 	lds	r25, 0x011C
 54c:	16 c0       	rjmp	.+44     	; 0x57a <__vector_9+0x326>
				PORTD&=~(1<<LDAC);
				PORTD|=(1<<LDAC);
			}
			else if(event_ctr==(9+1))
 54e:	4a 30       	cpi	r20, 0x0A	; 10
 550:	51 05       	cpc	r21, r1
 552:	31 f4       	brne	.+12     	; 0x560 <__vector_9+0x30c>
				ADCSRA |= (1 << ADSC); 
 554:	80 91 7a 00 	lds	r24, 0x007A
 558:	80 64       	ori	r24, 0x40	; 64
 55a:	80 93 7a 00 	sts	0x007A, r24
 55e:	13 c0       	rjmp	.+38     	; 0x586 <__vector_9+0x332>

			else if(event_ctr==14)//
 560:	4e 30       	cpi	r20, 0x0E	; 14
 562:	51 05       	cpc	r21, r1
 564:	81 f4       	brne	.+32     	; 0x586 <__vector_9+0x332>
			{

			accum=0;
 566:	10 92 3a 01 	sts	0x013A, r1
 56a:	10 92 39 01 	sts	0x0139, r1
			ADC_on=0;
 56e:	10 92 2d 01 	sts	0x012D, r1
			accum_cnt=0;
 572:	10 92 32 01 	sts	0x0132, r1
			
			setDAC(0,chan);
 576:	80 e0       	ldi	r24, 0x00	; 0
 578:	90 e0       	ldi	r25, 0x00	; 0
 57a:	60 91 20 01 	lds	r22, 0x0120
 57e:	0e 94 7f 00 	call	0xfe	; 0xfe <setDAC>
			PORTD&=~(1<<LDAC);
 582:	5a 98       	cbi	0x0b, 2	; 11
			PORTD|=(1<<LDAC);
 584:	5a 9a       	sbi	0x0b, 2	; 11
		
		
		
		
		
		ctr=0;
 586:	10 92 31 01 	sts	0x0131, r1
 58a:	10 92 30 01 	sts	0x0130, r1
		event_ctr++;
 58e:	20 91 3f 01 	lds	r18, 0x013F
 592:	30 91 40 01 	lds	r19, 0x0140
 596:	2f 5f       	subi	r18, 0xFF	; 255
 598:	3f 4f       	sbci	r19, 0xFF	; 255
 59a:	30 93 40 01 	sts	0x0140, r19
 59e:	20 93 3f 01 	sts	0x013F, r18

		if(event_ctr>T)
 5a2:	80 91 35 01 	lds	r24, 0x0135
 5a6:	90 e0       	ldi	r25, 0x00	; 0
 5a8:	82 17       	cp	r24, r18
 5aa:	93 07       	cpc	r25, r19
 5ac:	24 f4       	brge	.+8      	; 0x5b6 <__vector_9+0x362>
			event_ctr=0;
 5ae:	10 92 40 01 	sts	0x0140, r1
 5b2:	10 92 3f 01 	sts	0x013F, r1
	}
	ctr++;
 5b6:	80 91 30 01 	lds	r24, 0x0130
 5ba:	90 91 31 01 	lds	r25, 0x0131
 5be:	01 96       	adiw	r24, 0x01	; 1
 5c0:	90 93 31 01 	sts	0x0131, r25
 5c4:	80 93 30 01 	sts	0x0130, r24
}
 5c8:	ff 91       	pop	r31
 5ca:	ef 91       	pop	r30
 5cc:	bf 91       	pop	r27
 5ce:	af 91       	pop	r26
 5d0:	9f 91       	pop	r25
 5d2:	8f 91       	pop	r24
 5d4:	7f 91       	pop	r23
 5d6:	6f 91       	pop	r22
 5d8:	5f 91       	pop	r21
 5da:	4f 91       	pop	r20
 5dc:	3f 91       	pop	r19
 5de:	2f 91       	pop	r18
 5e0:	0f 90       	pop	r0
 5e2:	0f be       	out	0x3f, r0	; 63
 5e4:	0f 90       	pop	r0
 5e6:	1f 90       	pop	r1
 5e8:	18 95       	reti

000005ea <__vector_18>:

//прием команд от компьютера по UART в зависимости от режима
ISR(USART_RX_vect)
{
 5ea:	1f 92       	push	r1
 5ec:	0f 92       	push	r0
 5ee:	0f b6       	in	r0, 0x3f	; 63
 5f0:	0f 92       	push	r0
 5f2:	11 24       	eor	r1, r1
 5f4:	2f 93       	push	r18
 5f6:	3f 93       	push	r19
 5f8:	4f 93       	push	r20
 5fa:	5f 93       	push	r21
 5fc:	6f 93       	push	r22
 5fe:	7f 93       	push	r23
 600:	8f 93       	push	r24
 602:	9f 93       	push	r25
 604:	af 93       	push	r26
 606:	bf 93       	push	r27
 608:	ef 93       	push	r30
 60a:	ff 93       	push	r31
	switch(ptr)
 60c:	80 91 1e 01 	lds	r24, 0x011E
 610:	84 30       	cpi	r24, 0x04	; 4
 612:	09 f4       	brne	.+2      	; 0x616 <__vector_18+0x2c>
 614:	65 c0       	rjmp	.+202    	; 0x6e0 <__vector_18+0xf6>
 616:	85 30       	cpi	r24, 0x05	; 5
 618:	58 f4       	brcc	.+22     	; 0x630 <__vector_18+0x46>
 61a:	81 30       	cpi	r24, 0x01	; 1
 61c:	51 f1       	breq	.+84     	; 0x672 <__vector_18+0x88>
 61e:	81 30       	cpi	r24, 0x01	; 1
 620:	d0 f0       	brcs	.+52     	; 0x656 <__vector_18+0x6c>
 622:	82 30       	cpi	r24, 0x02	; 2
 624:	09 f4       	brne	.+2      	; 0x628 <__vector_18+0x3e>
 626:	42 c0       	rjmp	.+132    	; 0x6ac <__vector_18+0xc2>
 628:	83 30       	cpi	r24, 0x03	; 3
 62a:	09 f0       	breq	.+2      	; 0x62e <__vector_18+0x44>
 62c:	7a c0       	rjmp	.+244    	; 0x722 <__vector_18+0x138>
 62e:	4b c0       	rjmp	.+150    	; 0x6c6 <__vector_18+0xdc>
 630:	87 30       	cpi	r24, 0x07	; 7
 632:	09 f4       	brne	.+2      	; 0x636 <__vector_18+0x4c>
 634:	64 c0       	rjmp	.+200    	; 0x6fe <__vector_18+0x114>
 636:	88 30       	cpi	r24, 0x08	; 8
 638:	38 f4       	brcc	.+14     	; 0x648 <__vector_18+0x5e>
 63a:	85 30       	cpi	r24, 0x05	; 5
 63c:	09 f4       	brne	.+2      	; 0x640 <__vector_18+0x56>
 63e:	55 c0       	rjmp	.+170    	; 0x6ea <__vector_18+0x100>
 640:	86 30       	cpi	r24, 0x06	; 6
 642:	09 f0       	breq	.+2      	; 0x646 <__vector_18+0x5c>
 644:	6e c0       	rjmp	.+220    	; 0x722 <__vector_18+0x138>
 646:	56 c0       	rjmp	.+172    	; 0x6f4 <__vector_18+0x10a>
 648:	88 30       	cpi	r24, 0x08	; 8
 64a:	09 f4       	brne	.+2      	; 0x64e <__vector_18+0x64>
 64c:	5d c0       	rjmp	.+186    	; 0x708 <__vector_18+0x11e>
 64e:	89 30       	cpi	r24, 0x09	; 9
 650:	09 f0       	breq	.+2      	; 0x654 <__vector_18+0x6a>
 652:	67 c0       	rjmp	.+206    	; 0x722 <__vector_18+0x138>
 654:	5e c0       	rjmp	.+188    	; 0x712 <__vector_18+0x128>
	{
		case 0:
		if(UDR0!=255)//байт 255 является синхронизирующим
 656:	80 91 c6 00 	lds	r24, 0x00C6
 65a:	8f 3f       	cpi	r24, 0xFF	; 255
 65c:	31 f0       	breq	.+12     	; 0x66a <__vector_18+0x80>
		{
			sync=0;
 65e:	10 92 1d 01 	sts	0x011D, r1
			ptr--;
			ptr%=7;
 662:	83 e0       	ldi	r24, 0x03	; 3
 664:	80 93 1e 01 	sts	0x011E, r24
 668:	5c c0       	rjmp	.+184    	; 0x722 <__vector_18+0x138>
		}
		else
			sync=1;
 66a:	81 e0       	ldi	r24, 0x01	; 1
 66c:	80 93 1d 01 	sts	0x011D, r24
 670:	58 c0       	rjmp	.+176    	; 0x722 <__vector_18+0x138>
		break;
		case 1:
		MD=UDR0;
 672:	20 91 c6 00 	lds	r18, 0x00C6
 676:	20 93 10 01 	sts	0x0110, r18
		if(MD==VAC)
 67a:	21 30       	cpi	r18, 0x01	; 1
 67c:	39 f4       	brne	.+14     	; 0x68c <__vector_18+0xa2>
			time_step=4;//5
 67e:	84 e0       	ldi	r24, 0x04	; 4
 680:	90 e0       	ldi	r25, 0x00	; 0
 682:	90 93 0d 01 	sts	0x010D, r25
 686:	80 93 0c 01 	sts	0x010C, r24
 68a:	4b c0       	rjmp	.+150    	; 0x722 <__vector_18+0x138>
		else
			time_step=6;//4
 68c:	86 e0       	ldi	r24, 0x06	; 6
 68e:	90 e0       	ldi	r25, 0x00	; 0
 690:	90 93 0d 01 	sts	0x010D, r25
 694:	80 93 0c 01 	sts	0x010C, r24
		
		if(MD==PROGRAM)
 698:	22 30       	cpi	r18, 0x02	; 2
 69a:	09 f0       	breq	.+2      	; 0x69e <__vector_18+0xb4>
 69c:	42 c0       	rjmp	.+132    	; 0x722 <__vector_18+0x138>
		{
			//PROGRAM_start=1;
			PROGRAM_done=0;
 69e:	10 92 1f 01 	sts	0x011F, r1
			prog_val=0;
 6a2:	10 92 18 01 	sts	0x0118, r1
 6a6:	10 92 17 01 	sts	0x0117, r1
 6aa:	3b c0       	rjmp	.+118    	; 0x722 <__vector_18+0x138>
		}
		break;
		case 2:
		x16=UDR0<<4;
 6ac:	80 91 c6 00 	lds	r24, 0x00C6
 6b0:	90 e0       	ldi	r25, 0x00	; 0
 6b2:	f4 e0       	ldi	r31, 0x04	; 4
 6b4:	88 0f       	add	r24, r24
 6b6:	99 1f       	adc	r25, r25
 6b8:	fa 95       	dec	r31
 6ba:	e1 f7       	brne	.-8      	; 0x6b4 <__vector_18+0xca>
 6bc:	90 93 1a 01 	sts	0x011A, r25
 6c0:	80 93 19 01 	sts	0x0119, r24
 6c4:	2e c0       	rjmp	.+92     	; 0x722 <__vector_18+0x138>
		break;
		case 3:	
		y16=UDR0<<4;
 6c6:	80 91 c6 00 	lds	r24, 0x00C6
 6ca:	90 e0       	ldi	r25, 0x00	; 0
 6cc:	e4 e0       	ldi	r30, 0x04	; 4
 6ce:	88 0f       	add	r24, r24
 6d0:	99 1f       	adc	r25, r25
 6d2:	ea 95       	dec	r30
 6d4:	e1 f7       	brne	.-8      	; 0x6ce <__vector_18+0xe4>
 6d6:	90 93 1c 01 	sts	0x011C, r25
 6da:	80 93 1b 01 	sts	0x011B, r24
 6de:	21 c0       	rjmp	.+66     	; 0x722 <__vector_18+0x138>
		break;
		case 4:
		t1=UDR0;
 6e0:	80 91 c6 00 	lds	r24, 0x00C6
 6e4:	80 93 08 01 	sts	0x0108, r24
 6e8:	1c c0       	rjmp	.+56     	; 0x722 <__vector_18+0x138>
		break;		
		case 5:
		t2=UDR0;
 6ea:	80 91 c6 00 	lds	r24, 0x00C6
 6ee:	80 93 09 01 	sts	0x0109, r24
 6f2:	17 c0       	rjmp	.+46     	; 0x722 <__vector_18+0x138>
		break;	
		case 6:
		dT=UDR0;
 6f4:	80 91 c6 00 	lds	r24, 0x00C6
 6f8:	80 93 2f 01 	sts	0x012F, r24
 6fc:	12 c0       	rjmp	.+36     	; 0x722 <__vector_18+0x138>
		break;
		case 7:
		T=UDR0;
 6fe:	80 91 c6 00 	lds	r24, 0x00C6
 702:	80 93 35 01 	sts	0x0135, r24
 706:	0d c0       	rjmp	.+26     	; 0x722 <__vector_18+0x138>
		break;
		case 8:
		chan=UDR0;
 708:	80 91 c6 00 	lds	r24, 0x00C6
 70c:	80 93 20 01 	sts	0x0120, r24
 710:	08 c0       	rjmp	.+16     	; 0x722 <__vector_18+0x138>
		break;
		
		case 9:
		reverted[chan]=UDR0;
 712:	80 91 c6 00 	lds	r24, 0x00C6
 716:	e0 91 20 01 	lds	r30, 0x0120
 71a:	f0 e0       	ldi	r31, 0x00	; 0
 71c:	ef 5d       	subi	r30, 0xDF	; 223
 71e:	fe 4f       	sbci	r31, 0xFE	; 254
 720:	80 83       	st	Z, r24
		break;
	}
	
	if(MD!=PROGRAM)
 722:	80 91 10 01 	lds	r24, 0x0110
 726:	82 30       	cpi	r24, 0x02	; 2
 728:	41 f0       	breq	.+16     	; 0x73a <__vector_18+0x150>
		set_reverser(chan, reverted[chan]);
 72a:	80 91 20 01 	lds	r24, 0x0120
 72e:	e8 2f       	mov	r30, r24
 730:	f0 e0       	ldi	r31, 0x00	; 0
 732:	ef 5d       	subi	r30, 0xDF	; 223
 734:	fe 4f       	sbci	r31, 0xFE	; 254
 736:	60 81       	ld	r22, Z
 738:	03 c0       	rjmp	.+6      	; 0x740 <__vector_18+0x156>
	else 
		set_reverser(chan, 0);
 73a:	80 91 20 01 	lds	r24, 0x0120
 73e:	60 e0       	ldi	r22, 0x00	; 0
 740:	0e 94 a6 00 	call	0x14c	; 0x14c <set_reverser>
	
	dTt2=dT+t2;
 744:	80 91 09 01 	lds	r24, 0x0109
 748:	90 91 2f 01 	lds	r25, 0x012F
 74c:	89 0f       	add	r24, r25
 74e:	80 93 0a 01 	sts	0x010A, r24
	//UDR0=x16/16;
	ptr++;
	ptr%=10;
 752:	80 91 1e 01 	lds	r24, 0x011E
 756:	8f 5f       	subi	r24, 0xFF	; 255
 758:	6a e0       	ldi	r22, 0x0A	; 10
 75a:	0e 94 c2 03 	call	0x784	; 0x784 <__udivmodqi4>
 75e:	90 93 1e 01 	sts	0x011E, r25
 762:	ff 91       	pop	r31
 764:	ef 91       	pop	r30
 766:	bf 91       	pop	r27
 768:	af 91       	pop	r26
 76a:	9f 91       	pop	r25
 76c:	8f 91       	pop	r24
 76e:	7f 91       	pop	r23
 770:	6f 91       	pop	r22
 772:	5f 91       	pop	r21
 774:	4f 91       	pop	r20
 776:	3f 91       	pop	r19
 778:	2f 91       	pop	r18
 77a:	0f 90       	pop	r0
 77c:	0f be       	out	0x3f, r0	; 63
 77e:	0f 90       	pop	r0
 780:	1f 90       	pop	r1
 782:	18 95       	reti

00000784 <__udivmodqi4>:
 784:	99 1b       	sub	r25, r25
 786:	79 e0       	ldi	r23, 0x09	; 9
 788:	04 c0       	rjmp	.+8      	; 0x792 <__udivmodqi4_ep>

0000078a <__udivmodqi4_loop>:
 78a:	99 1f       	adc	r25, r25
 78c:	96 17       	cp	r25, r22
 78e:	08 f0       	brcs	.+2      	; 0x792 <__udivmodqi4_ep>
 790:	96 1b       	sub	r25, r22

00000792 <__udivmodqi4_ep>:
 792:	88 1f       	adc	r24, r24
 794:	7a 95       	dec	r23
 796:	c9 f7       	brne	.-14     	; 0x78a <__udivmodqi4_loop>
 798:	80 95       	com	r24
 79a:	08 95       	ret

0000079c <_exit>:
 79c:	f8 94       	cli

0000079e <__stop_program>:
 79e:	ff cf       	rjmp	.-2      	; 0x79e <__stop_program>
