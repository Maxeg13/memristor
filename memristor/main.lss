
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000002a  00800100  00000bf2  00000c86  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000bf2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000071  0080012a  0080012a  00000cb0  2**0
                  ALLOC
  3 .debug_aranges 00000020  00000000  00000000  00000cb0  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 000002e1  00000000  00000000  00000cd0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000007de  00000000  00000000  00000fb1  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000001e6  00000000  00000000  0000178f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000a87  00000000  00000000  00001975  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000f0  00000000  00000000  000023fc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000002bf  00000000  00000000  000024ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000116  00000000  00000000  000027ab  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 80 01 	jmp	0x300	; 0x300 <__vector_9>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 ee 04 	jmp	0x9dc	; 0x9dc <__vector_18>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e2 ef       	ldi	r30, 0xF2	; 242
  7c:	fb e0       	ldi	r31, 0x0B	; 11
  7e:	02 c0       	rjmp	.+4      	; 0x84 <.do_copy_data_start>

00000080 <.do_copy_data_loop>:
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0

00000084 <.do_copy_data_start>:
  84:	aa 32       	cpi	r26, 0x2A	; 42
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <.do_copy_data_loop>

0000008a <__do_clear_bss>:
  8a:	11 e0       	ldi	r17, 0x01	; 1
  8c:	aa e2       	ldi	r26, 0x2A	; 42
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	ab 39       	cpi	r26, 0x9B	; 155
  96:	b1 07       	cpc	r27, r17
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 2a 01 	call	0x254	; 0x254 <main>
  9e:	0c 94 f7 05 	jmp	0xbee	; 0xbee <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <gatherMult>:
						

			
void gatherMult()
{
	reset_BYTE(PORTD, 6);
  a6:	5e 98       	cbi	0x0b, 6	; 11
	reset_BYTE(PORTD, 7);				
  a8:	5f 98       	cbi	0x0b, 7	; 11
	reset_BYTE(PORTD, 5);
  aa:	5d 98       	cbi	0x0b, 5	; 11
	reset_BYTE(PORTC, 4);
  ac:	44 98       	cbi	0x08, 4	; 8
	
	
	SET_BYTE(PORTC, 1);				
  ae:	41 9a       	sbi	0x08, 1	; 8
	SET_BYTE(PORTB, 2);
  b0:	2a 9a       	sbi	0x05, 2	; 5
	SET_BYTE(PORTB, 1);
  b2:	29 9a       	sbi	0x05, 1	; 5
	SET_BYTE(PORTB, 0);
  b4:	28 9a       	sbi	0x05, 0	; 5
}
  b6:	08 95       	ret

000000b8 <separMult>:
void separMult()
{
	//reset_BYTE(PORTB, 1);
	reset_BYTE(PORTB, 2);
  b8:	2a 98       	cbi	0x05, 2	; 5
	reset_BYTE(PORTC, 1);
  ba:	41 98       	cbi	0x08, 1	; 8
	
	SET_BYTE(PORTC, 4);						
  bc:	44 9a       	sbi	0x08, 4	; 8
	SET_BYTE(PORTD, 6);
  be:	5e 9a       	sbi	0x0b, 6	; 11
	SET_BYTE(PORTD, 7);
  c0:	5f 9a       	sbi	0x0b, 7	; 11
	SET_BYTE(PORTB, 0);
  c2:	28 9a       	sbi	0x05, 0	; 5
	SET_BYTE(PORTD, 5);
  c4:	5d 9a       	sbi	0x0b, 5	; 11
}
  c6:	08 95       	ret

000000c8 <set_reverser>:
		else
			PORTB&=~(1<<4);
		break;

	}
}
  c8:	08 95       	ret

000000ca <ADC_Init>:
}

//функция инициализаци АЦП
//АЦП используется для регистрации тока, проходящего через мемристор
void ADC_Init(){
 ADCSRA |= (1 << ADEN) // Включаем АЦП
  ca:	ea e7       	ldi	r30, 0x7A	; 122
  cc:	f0 e0       	ldi	r31, 0x00	; 0
  ce:	80 81       	ld	r24, Z
  d0:	83 68       	ori	r24, 0x83	; 131
  d2:	80 83       	st	Z, r24
 //ADCSRA&=~(1 << ADPS1)|(1 << ADPS0)|(1 << ADPS1);
 |(1 << ADPS1)|(1 << ADPS0)|(1 << ADPS1);    // устанавливаем предделитель преобразователя на 8
 ADMUX |= (0 << REFS1)|(1 << REFS0) //выставляем опорное напряжение, как внешний ИОН
  d4:	ec e7       	ldi	r30, 0x7C	; 124
  d6:	f0 e0       	ldi	r31, 0x00	; 0
  d8:	80 81       	ld	r24, Z
  da:	80 64       	ori	r24, 0x40	; 64
  dc:	80 83       	st	Z, r24
 |(0 << MUX0)|(0 << MUX1)|(0 << MUX2)|(0 << MUX3); // снимать сигнал будем с  входа PC0 
}
  de:	08 95       	ret

000000e0 <timer_init>:

//функция инициализации таймера
// Таймер используется для формирования временной последовательности значений, формируемых с ЦАПа
void timer_init()
{
    TCCR2A = 0;        
  e0:	10 92 b0 00 	sts	0x00B0, r1
    TCCR2B = 0;
  e4:	e1 eb       	ldi	r30, 0xB1	; 177
  e6:	f0 e0       	ldi	r31, 0x00	; 0
  e8:	10 82       	st	Z, r1
    
    TCCR2B |= (1<<CS21) ;    
  ea:	80 81       	ld	r24, Z
  ec:	82 60       	ori	r24, 0x02	; 2
  ee:	80 83       	st	Z, r24
    TIMSK2 = (1 << TOIE2);
  f0:	81 e0       	ldi	r24, 0x01	; 1
  f2:	80 93 70 00 	sts	0x0070, r24
}
  f6:	08 95       	ret

000000f8 <uart_init>:

//функция инициализации UART-интерфейса
void uart_init(unsigned int ubrr)
{	
	UBRR0H = (unsigned char)(ubrr>>8);
  f8:	90 93 c5 00 	sts	0x00C5, r25
	UBRR0L = (unsigned char)ubrr;
  fc:	80 93 c4 00 	sts	0x00C4, r24
	UCSR0B = (1<<RXCIE0)|(1<<RXEN0)|(1<<TXEN0);
 100:	88 e9       	ldi	r24, 0x98	; 152
 102:	80 93 c1 00 	sts	0x00C1, r24
	UCSR0C = (1<<USBS0)|(3<<UCSZ00);
 106:	8e e0       	ldi	r24, 0x0E	; 14
 108:	80 93 c2 00 	sts	0x00C2, r24
}
 10c:	08 95       	ret

0000010e <SPI_MasterInit>:

//функция инициализации SPI
void SPI_MasterInit()
{
	DDR_SPI |= (1<<DD_MOSI)|(1<<DD_SCK)|(1<<SPI_SS);
 10e:	84 b1       	in	r24, 0x04	; 4
 110:	8c 62       	ori	r24, 0x2C	; 44
 112:	84 b9       	out	0x04, r24	; 4
	SPCR = (1<<SPE)|(0<<DORD)|(1<<MSTR)|(1<<CPOL)|(0<<CPHA);//|(1<<SPR1)|(0<<SPR0);
 114:	88 e5       	ldi	r24, 0x58	; 88
 116:	8c bd       	out	0x2c, r24	; 44
}
 118:	08 95       	ret

0000011a <SPI_WriteByte>:



void SPI_WriteByte(uint8_t data)
{
   SPDR = data;
 11a:	8e bd       	out	0x2e, r24	; 46
  while(!(SPSR & (1<<SPIF)));
 11c:	0d b4       	in	r0, 0x2d	; 45
 11e:	07 fe       	sbrs	r0, 7
 120:	fd cf       	rjmp	.-6      	; 0x11c <SPI_WriteByte+0x2>
}
 122:	08 95       	ret

00000124 <prepareResetDAC>:




void prepareResetDAC(int8_t chan)//_____________bipolar!!! and <<4 larger
{
 124:	0f 93       	push	r16
 126:	1f 93       	push	r17
 128:	cf 93       	push	r28
 12a:	df 93       	push	r29
	PORTD&=~(1<<SYNC_PINS[chan>>3]);
 12c:	9b b1       	in	r25, 0x0b	; 11
 12e:	28 2f       	mov	r18, r24
 130:	25 95       	asr	r18
 132:	25 95       	asr	r18
 134:	25 95       	asr	r18
 136:	c2 2f       	mov	r28, r18
 138:	dd 27       	eor	r29, r29
 13a:	c7 fd       	sbrc	r28, 7
 13c:	d0 95       	com	r29
 13e:	c8 5e       	subi	r28, 0xE8	; 232
 140:	de 4f       	sbci	r29, 0xFE	; 254
 142:	01 e0       	ldi	r16, 0x01	; 1
 144:	10 e0       	ldi	r17, 0x00	; 0
 146:	98 01       	movw	r18, r16
 148:	08 80       	ld	r0, Y
 14a:	02 c0       	rjmp	.+4      	; 0x150 <prepareResetDAC+0x2c>
 14c:	22 0f       	add	r18, r18
 14e:	33 1f       	adc	r19, r19
 150:	0a 94       	dec	r0
 152:	e2 f7       	brpl	.-8      	; 0x14c <prepareResetDAC+0x28>
 154:	20 95       	com	r18
 156:	29 23       	and	r18, r25
 158:	2b b9       	out	0x0b, r18	; 11
	SPI_WriteByte(0b00001000|chan_addrs[chan%8]); // magic numbers, fuck
 15a:	68 e0       	ldi	r22, 0x08	; 8
 15c:	0e 94 d6 05 	call	0xbac	; 0xbac <__divmodqi4>
 160:	e9 2f       	mov	r30, r25
 162:	ff 27       	eor	r31, r31
 164:	e7 fd       	sbrc	r30, 7
 166:	f0 95       	com	r31
 168:	e0 50       	subi	r30, 0x00	; 0
 16a:	ff 4f       	sbci	r31, 0xFF	; 255
 16c:	80 81       	ld	r24, Z
 16e:	88 60       	ori	r24, 0x08	; 8
 170:	90 e0       	ldi	r25, 0x00	; 0
 172:	0e 94 8d 00 	call	0x11a	; 0x11a <SPI_WriteByte>
	SPI_WriteByte(0);		
 176:	80 e0       	ldi	r24, 0x00	; 0
 178:	90 e0       	ldi	r25, 0x00	; 0
 17a:	0e 94 8d 00 	call	0x11a	; 0x11a <SPI_WriteByte>
	PORTD|=(1<<SYNC_PINS[chan>>3]);
 17e:	8b b1       	in	r24, 0x0b	; 11
 180:	08 80       	ld	r0, Y
 182:	02 c0       	rjmp	.+4      	; 0x188 <prepareResetDAC+0x64>
 184:	00 0f       	add	r16, r16
 186:	11 1f       	adc	r17, r17
 188:	0a 94       	dec	r0
 18a:	e2 f7       	brpl	.-8      	; 0x184 <prepareResetDAC+0x60>
 18c:	80 2b       	or	r24, r16
 18e:	8b b9       	out	0x0b, r24	; 11
}
 190:	df 91       	pop	r29
 192:	cf 91       	pop	r28
 194:	1f 91       	pop	r17
 196:	0f 91       	pop	r16
 198:	08 95       	ret

0000019a <prepareSetDAC>:

//функция управления ЦАПом 
// при этом, управление регистром LDAC должно использоваться 
//вне функции в перспепктиве создания многоканальной схемы
void prepareSetDAC(int16_t x,uint8_t chan)//_____________bipolar!!! and <<4 larger
{
 19a:	cf 92       	push	r12
 19c:	df 92       	push	r13
 19e:	ef 92       	push	r14
 1a0:	ff 92       	push	r15
 1a2:	0f 93       	push	r16
 1a4:	1f 93       	push	r17
 1a6:	cf 93       	push	r28
 1a8:	df 93       	push	r29
 1aa:	e6 2f       	mov	r30, r22
	static uint8_t send8;
	
	x=-x;
 1ac:	00 27       	eor	r16, r16
 1ae:	11 27       	eor	r17, r17
 1b0:	08 1b       	sub	r16, r24
 1b2:	19 0b       	sbc	r17, r25
	x+=2048;
 1b4:	00 50       	subi	r16, 0x00	; 0
 1b6:	18 4f       	sbci	r17, 0xF8	; 248
	*(REGS_OUT[chan>>3])&=~(1<<SYNC_PINS[chan>>3]);
 1b8:	c6 2e       	mov	r12, r22
 1ba:	c6 94       	lsr	r12
 1bc:	c6 94       	lsr	r12
 1be:	c6 94       	lsr	r12
 1c0:	8c 2d       	mov	r24, r12
 1c2:	90 e0       	ldi	r25, 0x00	; 0
 1c4:	6c 01       	movw	r12, r24
 1c6:	cc 0c       	add	r12, r12
 1c8:	dd 1c       	adc	r13, r13
 1ca:	28 e0       	ldi	r18, 0x08	; 8
 1cc:	31 e0       	ldi	r19, 0x01	; 1
 1ce:	c2 0e       	add	r12, r18
 1d0:	d3 1e       	adc	r13, r19
 1d2:	e6 01       	movw	r28, r12
 1d4:	a8 81       	ld	r26, Y
 1d6:	b9 81       	ldd	r27, Y+1	; 0x01
 1d8:	ec 01       	movw	r28, r24
 1da:	c8 5e       	subi	r28, 0xE8	; 232
 1dc:	de 4f       	sbci	r29, 0xFE	; 254
 1de:	91 e0       	ldi	r25, 0x01	; 1
 1e0:	e9 2e       	mov	r14, r25
 1e2:	f1 2c       	mov	r15, r1
 1e4:	c7 01       	movw	r24, r14
 1e6:	08 80       	ld	r0, Y
 1e8:	02 c0       	rjmp	.+4      	; 0x1ee <prepareSetDAC+0x54>
 1ea:	88 0f       	add	r24, r24
 1ec:	99 1f       	adc	r25, r25
 1ee:	0a 94       	dec	r0
 1f0:	e2 f7       	brpl	.-8      	; 0x1ea <prepareSetDAC+0x50>
 1f2:	80 95       	com	r24
 1f4:	2c 91       	ld	r18, X
 1f6:	28 23       	and	r18, r24
 1f8:	2c 93       	st	X, r18
	send8 = (x >> 8);
	send8 &= 0b00001111;
	send8|= (chan_addrs[chan%8]);
	SPI_WriteByte(send8);
 1fa:	81 2f       	mov	r24, r17
 1fc:	99 27       	eor	r25, r25
 1fe:	87 fd       	sbrc	r24, 7
 200:	9a 95       	dec	r25
 202:	8f 70       	andi	r24, 0x0F	; 15
 204:	f0 e0       	ldi	r31, 0x00	; 0
 206:	e7 70       	andi	r30, 0x07	; 7
 208:	f0 70       	andi	r31, 0x00	; 0
 20a:	e0 50       	subi	r30, 0x00	; 0
 20c:	ff 4f       	sbci	r31, 0xFF	; 255
 20e:	20 81       	ld	r18, Z
 210:	82 2b       	or	r24, r18
 212:	90 e0       	ldi	r25, 0x00	; 0
 214:	0e 94 8d 00 	call	0x11a	; 0x11a <SPI_WriteByte>
	send8=x;
 218:	00 93 85 01 	sts	0x0185, r16
	SPI_WriteByte(send8);		
 21c:	80 2f       	mov	r24, r16
 21e:	90 e0       	ldi	r25, 0x00	; 0
 220:	0e 94 8d 00 	call	0x11a	; 0x11a <SPI_WriteByte>
	*(REGS_OUT[chan>>3])|=(1<<SYNC_PINS[chan>>3]);
 224:	d6 01       	movw	r26, r12
 226:	ed 91       	ld	r30, X+
 228:	fc 91       	ld	r31, X
 22a:	08 80       	ld	r0, Y
 22c:	02 c0       	rjmp	.+4      	; 0x232 <prepareSetDAC+0x98>
 22e:	ee 0c       	add	r14, r14
 230:	ff 1c       	adc	r15, r15
 232:	0a 94       	dec	r0
 234:	e2 f7       	brpl	.-8      	; 0x22e <prepareSetDAC+0x94>
 236:	80 81       	ld	r24, Z
 238:	8e 29       	or	r24, r14
 23a:	80 83       	st	Z, r24
}
 23c:	df 91       	pop	r29
 23e:	cf 91       	pop	r28
 240:	1f 91       	pop	r17
 242:	0f 91       	pop	r16
 244:	ff 90       	pop	r15
 246:	ef 90       	pop	r14
 248:	df 90       	pop	r13
 24a:	cf 90       	pop	r12
 24c:	08 95       	ret

0000024e <setDAC>:
  while(!(SPSR & (1<<SPIF)));
}


void setDAC(){
	PORTD&=~(1<<LDAC);
 24e:	5a 98       	cbi	0x0b, 2	; 11
	PORTD|=(1<<LDAC);	
 250:	5a 9a       	sbi	0x0b, 2	; 11
}
 252:	08 95       	ret

00000254 <main>:


void main(void)
{
 254:	1f 93       	push	r17
	BIG_STAT_N = STAT_N*STAT_CYCLE;
 256:	80 91 21 01 	lds	r24, 0x0121
 25a:	90 91 20 01 	lds	r25, 0x0120
 25e:	89 9f       	mul	r24, r25
 260:	80 2d       	mov	r24, r0
 262:	11 24       	eor	r1, r1
 264:	80 93 93 01 	sts	0x0193, r24
 268:	e0 e0       	ldi	r30, 0x00	; 0
 26a:	f1 e0       	ldi	r31, 0x01	; 1
	
	for (uint8_t i=0; i< 8;i++)
		chan_addrs[i]=chan_addrs[i]<<4;
 26c:	80 81       	ld	r24, Z
 26e:	82 95       	swap	r24
 270:	80 7f       	andi	r24, 0xF0	; 240
 272:	81 93       	st	Z+, r24

void main(void)
{
	BIG_STAT_N = STAT_N*STAT_CYCLE;
	
	for (uint8_t i=0; i< 8;i++)
 274:	81 e0       	ldi	r24, 0x01	; 1
 276:	e8 30       	cpi	r30, 0x08	; 8
 278:	f8 07       	cpc	r31, r24
 27a:	c1 f7       	brne	.-16     	; 0x26c <main+0x18>
		chan_addrs[i]=chan_addrs[i]<<4;
	
	DDRC= 0b00011110;
 27c:	8e e1       	ldi	r24, 0x1E	; 30
 27e:	87 b9       	out	0x07, r24	; 7
	DDRD =0b11111111;	
 280:	8f ef       	ldi	r24, 0xFF	; 255
 282:	8a b9       	out	0x0a, r24	; 10
	DDRB= 0b00011111;
 284:	8f e1       	ldi	r24, 0x1F	; 31
 286:	84 b9       	out	0x04, r24	; 4
	sei();
 288:	78 94       	sei
}

//функция инициализации SPI
void SPI_MasterInit()
{
	DDR_SPI |= (1<<DD_MOSI)|(1<<DD_SCK)|(1<<SPI_SS);
 28a:	84 b1       	in	r24, 0x04	; 4
 28c:	8c 62       	ori	r24, 0x2C	; 44
 28e:	84 b9       	out	0x04, r24	; 4
	SPCR = (1<<SPE)|(0<<DORD)|(1<<MSTR)|(1<<CPOL)|(0<<CPHA);//|(1<<SPR1)|(0<<SPR0);
 290:	88 e5       	ldi	r24, 0x58	; 88
 292:	8c bd       	out	0x2c, r24	; 44

//функция инициализации таймера
// Таймер используется для формирования временной последовательности значений, формируемых с ЦАПа
void timer_init()
{
    TCCR2A = 0;        
 294:	10 92 b0 00 	sts	0x00B0, r1
    TCCR2B = 0;
 298:	10 92 b1 00 	sts	0x00B1, r1
    
    TCCR2B |= (1<<CS21) ;    
 29c:	80 91 b1 00 	lds	r24, 0x00B1
 2a0:	82 60       	ori	r24, 0x02	; 2
 2a2:	80 93 b1 00 	sts	0x00B1, r24
    TIMSK2 = (1 << TOIE2);
 2a6:	81 e0       	ldi	r24, 0x01	; 1
 2a8:	80 93 70 00 	sts	0x0070, r24
}

//функция инициализации UART-интерфейса
void uart_init(unsigned int ubrr)
{	
	UBRR0H = (unsigned char)(ubrr>>8);
 2ac:	10 92 c5 00 	sts	0x00C5, r1
	UBRR0L = (unsigned char)ubrr;
 2b0:	83 e3       	ldi	r24, 0x33	; 51
 2b2:	80 93 c4 00 	sts	0x00C4, r24
	UCSR0B = (1<<RXCIE0)|(1<<RXEN0)|(1<<TXEN0);
 2b6:	88 e9       	ldi	r24, 0x98	; 152
 2b8:	80 93 c1 00 	sts	0x00C1, r24
	UCSR0C = (1<<USBS0)|(3<<UCSZ00);
 2bc:	8e e0       	ldi	r24, 0x0E	; 14
 2be:	80 93 c2 00 	sts	0x00C2, r24
}

//функция инициализаци АЦП
//АЦП используется для регистрации тока, проходящего через мемристор
void ADC_Init(){
 ADCSRA |= (1 << ADEN) // Включаем АЦП
 2c2:	80 91 7a 00 	lds	r24, 0x007A
 2c6:	83 68       	ori	r24, 0x83	; 131
 2c8:	80 93 7a 00 	sts	0x007A, r24
 //ADCSRA&=~(1 << ADPS1)|(1 << ADPS0)|(1 << ADPS1);
 |(1 << ADPS1)|(1 << ADPS0)|(1 << ADPS1);    // устанавливаем предделитель преобразователя на 8
 ADMUX |= (0 << REFS1)|(1 << REFS0) //выставляем опорное напряжение, как внешний ИОН
 2cc:	80 91 7c 00 	lds	r24, 0x007C
 2d0:	80 64       	ori	r24, 0x40	; 64
 2d2:	80 93 7c 00 	sts	0x007C, r24
	timer_init();
	
	uart_init(BAUDRATE);
	ADC_Init();
	
	ADCSRA |= (1 << ADSC); 
 2d6:	80 91 7a 00 	lds	r24, 0x007A
 2da:	80 64       	ori	r24, 0x40	; 64
 2dc:	80 93 7a 00 	sts	0x007A, r24
	ADCL;
 2e0:	80 91 78 00 	lds	r24, 0x0078
	ADCL;
 2e4:	80 91 78 00 	lds	r24, 0x0078
 2e8:	10 e0       	ldi	r17, 0x00	; 0
		//set_reverser(i,1);
	
	//set_reverser(0,0);
	for (int i=0;i<CHAN_N;i++)
	{
		prepareSetDAC(0,i);
 2ea:	80 e0       	ldi	r24, 0x00	; 0
 2ec:	90 e0       	ldi	r25, 0x00	; 0
 2ee:	61 2f       	mov	r22, r17
 2f0:	0e 94 cd 00 	call	0x19a	; 0x19a <prepareSetDAC>
 2f4:	1f 5f       	subi	r17, 0xFF	; 255

	//for(int i=0;i<8;i++)
		//set_reverser(i,1);
	
	//set_reverser(0,0);
	for (int i=0;i<CHAN_N;i++)
 2f6:	10 34       	cpi	r17, 0x40	; 64
 2f8:	c1 f7       	brne	.-16     	; 0x2ea <main+0x96>
  while(!(SPSR & (1<<SPIF)));
}


void setDAC(){
	PORTD&=~(1<<LDAC);
 2fa:	5a 98       	cbi	0x0b, 2	; 11
	PORTD|=(1<<LDAC);	
 2fc:	5a 9a       	sbi	0x0b, 2	; 11
 2fe:	ff cf       	rjmp	.-2      	; 0x2fe <main+0xaa>

00000300 <__vector_9>:
//главный цикл работы контроллера
//Здесь устанавливаются значения ЦАП и передаются данные на компьютер
//через UART-интерфейс
//данный участок кода повторяется при переполнении TIMER2
ISR(TIMER2_OVF_vect)
{
 300:	1f 92       	push	r1
 302:	0f 92       	push	r0
 304:	0f b6       	in	r0, 0x3f	; 63
 306:	0f 92       	push	r0
 308:	11 24       	eor	r1, r1
 30a:	2f 93       	push	r18
 30c:	3f 93       	push	r19
 30e:	4f 93       	push	r20
 310:	5f 93       	push	r21
 312:	6f 93       	push	r22
 314:	7f 93       	push	r23
 316:	8f 93       	push	r24
 318:	9f 93       	push	r25
 31a:	af 93       	push	r26
 31c:	bf 93       	push	r27
 31e:	ef 93       	push	r30
 320:	ff 93       	push	r31
	if(ctr>time_step)
 322:	20 91 8a 01 	lds	r18, 0x018A
 326:	30 91 8b 01 	lds	r19, 0x018B
 32a:	80 91 26 01 	lds	r24, 0x0126
 32e:	90 91 27 01 	lds	r25, 0x0127
 332:	82 17       	cp	r24, r18
 334:	93 07       	cpc	r25, r19
 336:	0c f0       	brlt	.+2      	; 0x33a <__vector_9+0x3a>
 338:	37 c3       	rjmp	.+1646   	; 0x9a8 <__stack+0xa9>
	{
		if(MD==CUSTOM)
 33a:	60 91 2a 01 	lds	r22, 0x012A
 33e:	66 23       	and	r22, r22
 340:	09 f0       	breq	.+2      	; 0x344 <__vector_9+0x44>
 342:	40 c0       	rjmp	.+128    	; 0x3c4 <__vector_9+0xc4>
		{
			if(event_cnt==(1))
 344:	20 91 86 01 	lds	r18, 0x0186
 348:	30 91 87 01 	lds	r19, 0x0187
 34c:	21 30       	cpi	r18, 0x01	; 1
 34e:	31 05       	cpc	r19, r1
 350:	59 f4       	brne	.+22     	; 0x368 <__vector_9+0x68>
			{	
			ADCL_=ADCL;
 352:	90 91 78 00 	lds	r25, 0x0078
 356:	90 93 8e 01 	sts	0x018E, r25
			ADCH_=ADCH;
 35a:	80 91 79 00 	lds	r24, 0x0079
 35e:	80 93 92 01 	sts	0x0192, r24
			UDR0=ADCL_;			
 362:	90 93 c6 00 	sts	0x00C6, r25
 366:	0d c0       	rjmp	.+26     	; 0x382 <__vector_9+0x82>
			}
			
			if(event_cnt==(2))
 368:	22 30       	cpi	r18, 0x02	; 2
 36a:	31 05       	cpc	r19, r1
 36c:	29 f4       	brne	.+10     	; 0x378 <__vector_9+0x78>
			{	
			UDR0=ADCH_;				
 36e:	80 91 92 01 	lds	r24, 0x0192
 372:	80 93 c6 00 	sts	0x00C6, r24
 376:	05 c0       	rjmp	.+10     	; 0x382 <__vector_9+0x82>
			}
			
			
			
			if(event_cnt==0)
 378:	21 15       	cp	r18, r1
 37a:	31 05       	cpc	r19, r1
 37c:	11 f4       	brne	.+4      	; 0x382 <__vector_9+0x82>
			{
			UDR0=255;
 37e:	8f ef       	ldi	r24, 0xFF	; 255
 380:	ad c2       	rjmp	.+1370   	; 0x8dc <__vector_9+0x5dc>
			prepareSetDAC(0,chan);
			//prepareSetDAC(x16,2);
			setDAC();
			}
			
			else if(event_cnt==t1)
 382:	80 91 22 01 	lds	r24, 0x0122
 386:	90 e0       	ldi	r25, 0x00	; 0
 388:	28 17       	cp	r18, r24
 38a:	39 07       	cpc	r19, r25
 38c:	09 f4       	brne	.+2      	; 0x390 <__vector_9+0x90>
 38e:	d8 c2       	rjmp	.+1456   	; 0x940 <__stack+0x41>
			{
				
			//prepareSetDAC(0,chan);
			//setDAC();
			}
			else if(event_cnt==dT)
 390:	80 91 89 01 	lds	r24, 0x0189
 394:	90 e0       	ldi	r25, 0x00	; 0
 396:	28 17       	cp	r18, r24
 398:	39 07       	cpc	r19, r25
 39a:	09 f4       	brne	.+2      	; 0x39e <__vector_9+0x9e>
 39c:	d1 c2       	rjmp	.+1442   	; 0x940 <__stack+0x41>
			{		
			//prepareSetDAC(0,chan);
			//setDAC();
		
			}
			else if(event_cnt==(dT+1))
 39e:	01 96       	adiw	r24, 0x01	; 1
 3a0:	28 17       	cp	r18, r24
 3a2:	39 07       	cpc	r19, r25
 3a4:	09 f4       	brne	.+2      	; 0x3a8 <__vector_9+0xa8>
 3a6:	aa c2       	rjmp	.+1364   	; 0x8fc <__vector_9+0x5fc>
				ADCSRA |= (1 << ADSC); 

			else if(event_cnt==dTt2)
 3a8:	80 91 24 01 	lds	r24, 0x0124
 3ac:	90 e0       	ldi	r25, 0x00	; 0
 3ae:	28 17       	cp	r18, r24
 3b0:	39 07       	cpc	r19, r25
 3b2:	09 f0       	breq	.+2      	; 0x3b6 <__vector_9+0xb6>
 3b4:	c5 c2       	rjmp	.+1418   	; 0x940 <__stack+0x41>
			{
			if ( ( UCSR0A & (1<<UDRE0)) )			
 3b6:	80 91 c0 00 	lds	r24, 0x00C0
 3ba:	85 ff       	sbrs	r24, 5
 3bc:	c1 c2       	rjmp	.+1410   	; 0x940 <__stack+0x41>
				UDR0=_adc;			
 3be:	80 91 94 01 	lds	r24, 0x0194
 3c2:	bc c2       	rjmp	.+1400   	; 0x93c <__stack+0x3d>
			//setDAC();

			}		

		}
		else if(MD == MODE_SET) {
 3c4:	67 30       	cpi	r22, 0x07	; 7
 3c6:	09 f4       	brne	.+2      	; 0x3ca <__vector_9+0xca>
 3c8:	bb c2       	rjmp	.+1398   	; 0x940 <__stack+0x41>
			
		}
		else if(MD==VAC)
 3ca:	61 30       	cpi	r22, 0x01	; 1
 3cc:	09 f0       	breq	.+2      	; 0x3d0 <__vector_9+0xd0>
 3ce:	7d c0       	rjmp	.+250    	; 0x4ca <__vector_9+0x1ca>
		{			
			//static int i=0;
			//i++;						
			
			switch(UDP_cnt)
 3d0:	80 91 9a 01 	lds	r24, 0x019A
 3d4:	82 30       	cpi	r24, 0x02	; 2
 3d6:	41 f1       	breq	.+80     	; 0x428 <__vector_9+0x128>
 3d8:	83 30       	cpi	r24, 0x03	; 3
 3da:	30 f4       	brcc	.+12     	; 0x3e8 <__vector_9+0xe8>
 3dc:	88 23       	and	r24, r24
 3de:	51 f0       	breq	.+20     	; 0x3f4 <__vector_9+0xf4>
 3e0:	81 30       	cpi	r24, 0x01	; 1
 3e2:	09 f0       	breq	.+2      	; 0x3e6 <__vector_9+0xe6>
 3e4:	69 c0       	rjmp	.+210    	; 0x4b8 <__vector_9+0x1b8>
 3e6:	0d c0       	rjmp	.+26     	; 0x402 <__vector_9+0x102>
 3e8:	83 30       	cpi	r24, 0x03	; 3
 3ea:	19 f1       	breq	.+70     	; 0x432 <__vector_9+0x132>
 3ec:	84 30       	cpi	r24, 0x04	; 4
 3ee:	09 f0       	breq	.+2      	; 0x3f2 <__vector_9+0xf2>
 3f0:	63 c0       	rjmp	.+198    	; 0x4b8 <__vector_9+0x1b8>
 3f2:	60 c0       	rjmp	.+192    	; 0x4b4 <__vector_9+0x1b4>
			{
				case 0:					
				 ADCSRA |= (1 << ADSC); 
 3f4:	80 91 7a 00 	lds	r24, 0x007A
 3f8:	80 64       	ori	r24, 0x40	; 64
 3fa:	80 93 7a 00 	sts	0x007A, r24
				UDR0=255;
 3fe:	8f ef       	ldi	r24, 0xFF	; 255
 400:	15 c0       	rjmp	.+42     	; 0x42c <__vector_9+0x12c>
				break;
				
				
				
				case 1:	
				ADCL__=	ADCL_;
 402:	80 91 8e 01 	lds	r24, 0x018E
 406:	80 93 8c 01 	sts	0x018C, r24
				ADCH__ = ADCH_;
 40a:	80 91 92 01 	lds	r24, 0x0192
 40e:	80 93 88 01 	sts	0x0188, r24
				ADCL_=ADCL;
 412:	90 91 78 00 	lds	r25, 0x0078
 416:	90 93 8e 01 	sts	0x018E, r25
				ADCH_=ADCH;
 41a:	80 91 79 00 	lds	r24, 0x0079
 41e:	80 93 92 01 	sts	0x0192, r24
				
				UDR0=ADCL_;
 422:	90 93 c6 00 	sts	0x00C6, r25
 426:	48 c0       	rjmp	.+144    	; 0x4b8 <__vector_9+0x1b8>
				break;
				
				case 2:
				UDR0=ADCH_;				
 428:	80 91 92 01 	lds	r24, 0x0192
 42c:	80 93 c6 00 	sts	0x00C6, r24
 430:	43 c0       	rjmp	.+134    	; 0x4b8 <__vector_9+0x1b8>
				break;				
				
				case 3:								
					
					voltage16_h=voltage16;
 432:	20 91 2b 01 	lds	r18, 0x012B
 436:	30 91 2c 01 	lds	r19, 0x012C
 43a:	30 93 2e 01 	sts	0x012E, r19
 43e:	20 93 2d 01 	sts	0x012D, r18
					
					if(pos_phase)
 442:	80 91 25 01 	lds	r24, 0x0125
 446:	88 23       	and	r24, r24
 448:	81 f0       	breq	.+32     	; 0x46a <__vector_9+0x16a>
					{
								//PORTC=0b00000010;
			//PORTB=0b00011111;
			//PORTD=0b11101100;
						voltage16+=32;
 44a:	20 5e       	subi	r18, 0xE0	; 224
 44c:	3f 4f       	sbci	r19, 0xFF	; 255
 44e:	30 93 2c 01 	sts	0x012C, r19
 452:	20 93 2b 01 	sts	0x012B, r18
						if(voltage16>(ref16-1))
 456:	80 91 35 01 	lds	r24, 0x0135
 45a:	90 91 36 01 	lds	r25, 0x0136
 45e:	28 17       	cp	r18, r24
 460:	39 07       	cpc	r19, r25
 462:	b4 f0       	brlt	.+44     	; 0x490 <__vector_9+0x190>
						{
						pos_phase=0;				
 464:	10 92 25 01 	sts	0x0125, r1
 468:	13 c0       	rjmp	.+38     	; 0x490 <__vector_9+0x190>
					else
					{
						//PORTB=0;
			//PORTC=0;
			//PORTD=0;
						voltage16-=32;
 46a:	c9 01       	movw	r24, r18
 46c:	80 97       	sbiw	r24, 0x20	; 32
 46e:	90 93 2c 01 	sts	0x012C, r25
 472:	80 93 2b 01 	sts	0x012B, r24
						if(voltage16<(-x16+1))
 476:	21 e0       	ldi	r18, 0x01	; 1
 478:	30 e0       	ldi	r19, 0x00	; 0
 47a:	40 91 33 01 	lds	r20, 0x0133
 47e:	50 91 34 01 	lds	r21, 0x0134
 482:	24 1b       	sub	r18, r20
 484:	35 0b       	sbc	r19, r21
 486:	82 17       	cp	r24, r18
 488:	93 07       	cpc	r25, r19
 48a:	14 f4       	brge	.+4      	; 0x490 <__vector_9+0x190>
						{
						pos_phase=1;									
 48c:	60 93 25 01 	sts	0x0125, r22
						}
					}	
					
					
					
					UDR0=voltage16>>4;
 490:	80 91 2b 01 	lds	r24, 0x012B
 494:	90 91 2c 01 	lds	r25, 0x012C
 498:	9c 01       	movw	r18, r24
 49a:	b4 e0       	ldi	r27, 0x04	; 4
 49c:	35 95       	asr	r19
 49e:	27 95       	ror	r18
 4a0:	ba 95       	dec	r27
 4a2:	e1 f7       	brne	.-8      	; 0x49c <__vector_9+0x19c>
 4a4:	20 93 c6 00 	sts	0x00C6, r18
					prepareSetDAC(voltage16,chan);
 4a8:	60 91 3e 01 	lds	r22, 0x013E
 4ac:	0e 94 cd 00 	call	0x19a	; 0x19a <prepareSetDAC>
  while(!(SPSR & (1<<SPIF)));
}


void setDAC(){
	PORTD&=~(1<<LDAC);
 4b0:	5a 98       	cbi	0x0b, 2	; 11
	PORTD|=(1<<LDAC);	
 4b2:	5a 9a       	sbi	0x0b, 2	; 11
					//prepareSetDAC(voltage16,5);
					//prepareSetDAC(voltage16,6);
					//prepareSetDAC(voltage16,7);				
					setDAC();
				case 4:
					UDR0=DUMMY_BYTE;	
 4b4:	10 92 c6 00 	sts	0x00C6, r1
				
			}
						
			
			UDP_cnt++;
			UDP_cnt%=5;
 4b8:	80 91 9a 01 	lds	r24, 0x019A
 4bc:	8f 5f       	subi	r24, 0xFF	; 255
 4be:	65 e0       	ldi	r22, 0x05	; 5
 4c0:	0e 94 ca 05 	call	0xb94	; 0xb94 <__udivmodqi4>
 4c4:	90 93 9a 01 	sts	0x019A, r25
 4c8:	3b c2       	rjmp	.+1142   	; 0x940 <__stack+0x41>
		}
		else if(MD==PROGRAM)
 4ca:	62 30       	cpi	r22, 0x02	; 2
 4cc:	09 f0       	breq	.+2      	; 0x4d0 <__vector_9+0x1d0>
 4ce:	a0 c0       	rjmp	.+320    	; 0x610 <__vector_9+0x310>
		{
			T=16;
 4d0:	80 e1       	ldi	r24, 0x10	; 16
 4d2:	80 93 8d 01 	sts	0x018D, r24
			static uint16_t adc_h;
			

			if(event_cnt==0)//dT
 4d6:	80 91 86 01 	lds	r24, 0x0186
 4da:	90 91 87 01 	lds	r25, 0x0187
 4de:	00 97       	sbiw	r24, 0x00	; 0
 4e0:	21 f4       	brne	.+8      	; 0x4ea <__vector_9+0x1ea>
			{		
				UDR0=255;
 4e2:	8f ef       	ldi	r24, 0xFF	; 255
 4e4:	80 93 c6 00 	sts	0x00C6, r24
 4e8:	ff c1       	rjmp	.+1022   	; 0x8e8 <__vector_9+0x5e8>
			
				prepareSetDAC(ref16,chan);
				setDAC();
				ADCSRA |= (1 << ADSC); 
			}
			else if(event_cnt == 1)
 4ea:	81 30       	cpi	r24, 0x01	; 1
 4ec:	91 05       	cpc	r25, r1
 4ee:	19 f4       	brne	.+6      	; 0x4f6 <__vector_9+0x1f6>
			{
				UDR0 =PROGRAM_done;
 4f0:	80 91 3d 01 	lds	r24, 0x013D
 4f4:	23 c2       	rjmp	.+1094   	; 0x93c <__stack+0x3d>
			}	

			else
			if(event_cnt==2)//ADC GET 
 4f6:	82 30       	cpi	r24, 0x02	; 2
 4f8:	91 05       	cpc	r25, r1
 4fa:	09 f4       	brne	.+2      	; 0x4fe <__vector_9+0x1fe>
 4fc:	10 c2       	rjmp	.+1056   	; 0x91e <__stack+0x1f>
			}
			
			//ADC make CONTINUE
			//make decision
			else
			if(event_cnt==3)
 4fe:	83 30       	cpi	r24, 0x03	; 3
 500:	91 05       	cpc	r25, r1
 502:	e9 f5       	brne	.+122    	; 0x57e <__vector_9+0x27e>
			{	
				
				UDR0=ADCH_; //3
 504:	80 91 92 01 	lds	r24, 0x0192
 508:	80 93 c6 00 	sts	0x00C6, r24
				
				_adc=(ADCL_|(ADCH_ <<8));
 50c:	38 2f       	mov	r19, r24
 50e:	20 e0       	ldi	r18, 0x00	; 0
 510:	80 91 8e 01 	lds	r24, 0x018E
 514:	90 e0       	ldi	r25, 0x00	; 0
 516:	82 2b       	or	r24, r18
 518:	93 2b       	or	r25, r19
 51a:	90 93 95 01 	sts	0x0195, r25
 51e:	80 93 94 01 	sts	0x0194, r24
				adc_h=((uint16_t)(512)-_adc);
 522:	20 e0       	ldi	r18, 0x00	; 0
 524:	32 e0       	ldi	r19, 0x02	; 2
 526:	28 1b       	sub	r18, r24
 528:	39 0b       	sbc	r19, r25
 52a:	30 93 84 01 	sts	0x0184, r19
 52e:	20 93 83 01 	sts	0x0183, r18
				
				//optimization
				//put some window val here maybe?
				//be  carefull with -
				if((adc_h)<(uint16_t)(t1))
 532:	40 91 22 01 	lds	r20, 0x0122
 536:	84 2f       	mov	r24, r20
 538:	90 e0       	ldi	r25, 0x00	; 0
 53a:	28 17       	cp	r18, r24
 53c:	39 07       	cpc	r19, r25
 53e:	60 f4       	brcc	.+24     	; 0x558 <__vector_9+0x258>
				{
					proging_val = -x16;  //set!
 540:	80 91 33 01 	lds	r24, 0x0133
 544:	90 91 34 01 	lds	r25, 0x0134
 548:	90 95       	com	r25
 54a:	81 95       	neg	r24
 54c:	9f 4f       	sbci	r25, 0xFF	; 255
 54e:	90 93 32 01 	sts	0x0132, r25
 552:	80 93 31 01 	sts	0x0131, r24
 556:	f4 c1       	rjmp	.+1000   	; 0x940 <__stack+0x41>
				}
				else if((adc_h)<(uint16_t)(t1+1)) //done!
 558:	84 2f       	mov	r24, r20
 55a:	90 e0       	ldi	r25, 0x00	; 0
 55c:	01 96       	adiw	r24, 0x01	; 1
 55e:	28 17       	cp	r18, r24
 560:	39 07       	cpc	r19, r25
 562:	08 f0       	brcs	.+2      	; 0x566 <__vector_9+0x266>
 564:	ed c1       	rjmp	.+986    	; 0x940 <__stack+0x41>
				{

					PROGRAM_done=1;
 566:	81 e0       	ldi	r24, 0x01	; 1
 568:	80 93 3d 01 	sts	0x013D, r24
					proging_val=0;
 56c:	10 92 32 01 	sts	0x0132, r1
 570:	10 92 31 01 	sts	0x0131, r1
					prepareSetDAC(ref16,chan);
 574:	80 91 35 01 	lds	r24, 0x0135
 578:	90 91 36 01 	lds	r25, 0x0136
 57c:	db c0       	rjmp	.+438    	; 0x734 <__vector_9+0x434>
					setDAC();
				}
				
			}
			//DACset proging val
			else if(event_cnt==4)
 57e:	84 30       	cpi	r24, 0x04	; 4
 580:	91 05       	cpc	r25, r1
 582:	09 f0       	breq	.+2      	; 0x586 <__vector_9+0x286>
 584:	3f c0       	rjmp	.+126    	; 0x604 <__vector_9+0x304>
			{
				UDR0 =DUMMY_BYTE;		
 586:	10 92 c6 00 	sts	0x00C6, r1
				if(PROGRAM_done)
 58a:	80 91 3d 01 	lds	r24, 0x013D
 58e:	88 23       	and	r24, r24
 590:	21 f0       	breq	.+8      	; 0x59a <__vector_9+0x29a>
					proging_val=0;	
 592:	10 92 32 01 	sts	0x0132, r1
 596:	10 92 31 01 	sts	0x0131, r1
				
				prepareSetDAC(proging_val,chan);
 59a:	80 91 31 01 	lds	r24, 0x0131
 59e:	90 91 32 01 	lds	r25, 0x0132
 5a2:	60 91 3e 01 	lds	r22, 0x013E
 5a6:	0e 94 cd 00 	call	0x19a	; 0x19a <prepareSetDAC>
  while(!(SPSR & (1<<SPIF)));
}


void setDAC(){
	PORTD&=~(1<<LDAC);
 5aa:	5a 98       	cbi	0x0b, 2	; 11
	PORTD|=(1<<LDAC);	
 5ac:	5a 9a       	sbi	0x0b, 2	; 11
					proging_val=0;	
				
				prepareSetDAC(proging_val,chan);
				setDAC();
							
				if(proging_val == -x16)
 5ae:	20 91 31 01 	lds	r18, 0x0131
 5b2:	30 91 32 01 	lds	r19, 0x0132
 5b6:	80 91 33 01 	lds	r24, 0x0133
 5ba:	90 91 34 01 	lds	r25, 0x0134
 5be:	44 27       	eor	r20, r20
 5c0:	55 27       	eor	r21, r21
 5c2:	48 1b       	sub	r20, r24
 5c4:	59 0b       	sbc	r21, r25
 5c6:	24 17       	cp	r18, r20
 5c8:	35 07       	cpc	r19, r21
 5ca:	29 f4       	brne	.+10     	; 0x5d6 <__vector_9+0x2d6>
				{
					proging_val=0;
 5cc:	10 92 32 01 	sts	0x0132, r1
 5d0:	10 92 31 01 	sts	0x0131, r1
 5d4:	b5 c1       	rjmp	.+874    	; 0x940 <__stack+0x41>
				}					
				else
				if(proging_val>(t2<<4))
 5d6:	80 91 23 01 	lds	r24, 0x0123
 5da:	90 e0       	ldi	r25, 0x00	; 0
 5dc:	a4 e0       	ldi	r26, 0x04	; 4
 5de:	88 0f       	add	r24, r24
 5e0:	99 1f       	adc	r25, r25
 5e2:	aa 95       	dec	r26
 5e4:	e1 f7       	brne	.-8      	; 0x5de <__vector_9+0x2de>
 5e6:	82 17       	cp	r24, r18
 5e8:	93 07       	cpc	r25, r19
 5ea:	2c f4       	brge	.+10     	; 0x5f6 <__vector_9+0x2f6>
				{
					proging_val= -x16;
 5ec:	50 93 32 01 	sts	0x0132, r21
 5f0:	40 93 31 01 	sts	0x0131, r20
 5f4:	a5 c1       	rjmp	.+842    	; 0x940 <__stack+0x41>
				}	
				else
				{
					proging_val+=32;
 5f6:	20 5e       	subi	r18, 0xE0	; 224
 5f8:	3f 4f       	sbci	r19, 0xFF	; 255
 5fa:	30 93 32 01 	sts	0x0132, r19
 5fe:	20 93 31 01 	sts	0x0131, r18
 602:	9e c1       	rjmp	.+828    	; 0x940 <__stack+0x41>
				}	
			}
			else if(event_cnt==5)//
 604:	05 97       	sbiw	r24, 0x05	; 5
 606:	09 f0       	breq	.+2      	; 0x60a <__vector_9+0x30a>
 608:	9b c1       	rjmp	.+822    	; 0x940 <__stack+0x41>
			{	
				UDR0 =DUMMY_BYTE;			
 60a:	10 92 c6 00 	sts	0x00C6, r1
 60e:	90 c0       	rjmp	.+288    	; 0x730 <__vector_9+0x430>
			}
			
			

		}
		else if(MD == ONE_SHOT)
 610:	65 30       	cpi	r22, 0x05	; 5
 612:	09 f0       	breq	.+2      	; 0x616 <__vector_9+0x316>
 614:	75 c0       	rjmp	.+234    	; 0x700 <__vector_9+0x400>
		{
			//готовим reset
				if(event_cnt==1){
 616:	80 91 86 01 	lds	r24, 0x0186
 61a:	90 91 87 01 	lds	r25, 0x0187
 61e:	81 30       	cpi	r24, 0x01	; 1
 620:	91 05       	cpc	r25, r1
 622:	b1 f1       	breq	.+108    	; 0x690 <__vector_9+0x390>
				separMult();
			}//reseting
			else if(event_cnt==2)
 624:	82 30       	cpi	r24, 0x02	; 2
 626:	91 05       	cpc	r25, r1
 628:	61 f4       	brne	.+24     	; 0x642 <__vector_9+0x342>
			{
				prepareSetDAC(reset16,CHAN_4);
 62a:	80 91 37 01 	lds	r24, 0x0137
 62e:	90 91 38 01 	lds	r25, 0x0138
 632:	63 e0       	ldi	r22, 0x03	; 3
 634:	0e 94 cd 00 	call	0x19a	; 0x19a <prepareSetDAC>
				prepareSetDAC(reset16,CHAN_3);
 638:	80 91 37 01 	lds	r24, 0x0137
 63c:	90 91 38 01 	lds	r25, 0x0138
 640:	0a c0       	rjmp	.+20     	; 0x656 <__vector_9+0x356>
				setDAC();
			}
			else if(event_cnt==3)
 642:	83 30       	cpi	r24, 0x03	; 3
 644:	91 05       	cpc	r25, r1
 646:	49 f4       	brne	.+18     	; 0x65a <__vector_9+0x35a>
			{
				prepareSetDAC(0,CHAN_4);
 648:	80 e0       	ldi	r24, 0x00	; 0
 64a:	90 e0       	ldi	r25, 0x00	; 0
 64c:	63 e0       	ldi	r22, 0x03	; 3
 64e:	0e 94 cd 00 	call	0x19a	; 0x19a <prepareSetDAC>
				prepareSetDAC(0,CHAN_3);
 652:	80 e0       	ldi	r24, 0x00	; 0
 654:	90 e0       	ldi	r25, 0x00	; 0
 656:	62 e0       	ldi	r22, 0x02	; 2
 658:	6f c0       	rjmp	.+222    	; 0x738 <__vector_9+0x438>
				setDAC();
			}		//is reset		
			else if(event_cnt==4)
 65a:	84 30       	cpi	r24, 0x04	; 4
 65c:	91 05       	cpc	r25, r1
 65e:	19 f4       	brne	.+6      	; 0x666 <__vector_9+0x366>
			{
				gatherMult();
 660:	0e 94 53 00 	call	0xa6	; 0xa6 <gatherMult>
 664:	6d c1       	rjmp	.+730    	; 0x940 <__stack+0x41>
			}
			else if(event_cnt==5)
 666:	85 30       	cpi	r24, 0x05	; 5
 668:	91 05       	cpc	r25, r1
 66a:	29 f4       	brne	.+10     	; 0x676 <__vector_9+0x376>
			{
				prepareSetDAC(x16,CHAN_4);				
 66c:	80 91 33 01 	lds	r24, 0x0133
 670:	90 91 34 01 	lds	r25, 0x0134
 674:	05 c0       	rjmp	.+10     	; 0x680 <__vector_9+0x380>
				setDAC();
			}		
			else if(event_cnt==6)
 676:	86 30       	cpi	r24, 0x06	; 6
 678:	91 05       	cpc	r25, r1
 67a:	21 f4       	brne	.+8      	; 0x684 <__vector_9+0x384>
			{
				prepareSetDAC(0,CHAN_4);				
 67c:	80 e0       	ldi	r24, 0x00	; 0
 67e:	90 e0       	ldi	r25, 0x00	; 0
 680:	63 e0       	ldi	r22, 0x03	; 3
 682:	5a c0       	rjmp	.+180    	; 0x738 <__vector_9+0x438>
				setDAC();
			}	
			
			//пнули		
			//посмотрим, что вышло
			else if(event_cnt==7)
 684:	87 30       	cpi	r24, 0x07	; 7
 686:	91 05       	cpc	r25, r1
 688:	31 f4       	brne	.+12     	; 0x696 <__vector_9+0x396>
			{
				UDR0=255;//1
 68a:	8f ef       	ldi	r24, 0xFF	; 255
 68c:	80 93 c6 00 	sts	0x00C6, r24
				separMult();				
 690:	0e 94 5c 00 	call	0xb8	; 0xb8 <separMult>
 694:	55 c1       	rjmp	.+682    	; 0x940 <__stack+0x41>
			}			
			else if(event_cnt==8)
 696:	88 30       	cpi	r24, 0x08	; 8
 698:	91 05       	cpc	r25, r1
 69a:	31 f4       	brne	.+12     	; 0x6a8 <__vector_9+0x3a8>
			{
				prepareSetDAC(ref16,CHAN_4);
 69c:	80 91 35 01 	lds	r24, 0x0135
 6a0:	90 91 36 01 	lds	r25, 0x0136
 6a4:	63 e0       	ldi	r22, 0x03	; 3
 6a6:	26 c1       	rjmp	.+588    	; 0x8f4 <__vector_9+0x5f4>
				setDAC();				
				ADCSRA |= (1 << ADSC); 
			}	
			else if(event_cnt==9)
 6a8:	89 30       	cpi	r24, 0x09	; 9
 6aa:	91 05       	cpc	r25, r1
 6ac:	09 f4       	brne	.+2      	; 0x6b0 <__vector_9+0x3b0>
 6ae:	37 c1       	rjmp	.+622    	; 0x91e <__stack+0x1f>
				//prepareSetDAC(ref16,3);
				ADCL_=ADCL;	
				ADCH_=ADCH;
				UDR0=ADCL_;//2
			}
			else if(event_cnt==10)
 6b0:	8a 30       	cpi	r24, 0x0A	; 10
 6b2:	91 05       	cpc	r25, r1
 6b4:	29 f4       	brne	.+10     	; 0x6c0 <__vector_9+0x3c0>
			{
				UDR0=ADCH_; //3 1st chan
 6b6:	80 91 92 01 	lds	r24, 0x0192
 6ba:	80 93 c6 00 	sts	0x00C6, r24
 6be:	de cf       	rjmp	.-68     	; 0x67c <__vector_9+0x37c>
				
				prepareSetDAC(0,CHAN_4);
				setDAC();
			}		
			//4й просмотрен
			else if(event_cnt==11)
 6c0:	8b 30       	cpi	r24, 0x0B	; 11
 6c2:	91 05       	cpc	r25, r1
 6c4:	31 f4       	brne	.+12     	; 0x6d2 <__vector_9+0x3d2>
			{				 
				prepareSetDAC(ref16,CHAN_3);
 6c6:	80 91 35 01 	lds	r24, 0x0135
 6ca:	90 91 36 01 	lds	r25, 0x0136
 6ce:	62 e0       	ldi	r22, 0x02	; 2
 6d0:	11 c1       	rjmp	.+546    	; 0x8f4 <__vector_9+0x5f4>
				setDAC();
				
				ADCSRA |= (1 << ADSC); 
			}
			else if(event_cnt==12)
 6d2:	8c 30       	cpi	r24, 0x0C	; 12
 6d4:	91 05       	cpc	r25, r1
 6d6:	09 f4       	brne	.+2      	; 0x6da <__vector_9+0x3da>
 6d8:	22 c1       	rjmp	.+580    	; 0x91e <__stack+0x1f>
			{		
				ADCL_=ADCL;	
				ADCH_=ADCH;
				UDR0=ADCL_; //4
			}
			else if(event_cnt == 13)
 6da:	0d 97       	sbiw	r24, 0x0d	; 13
 6dc:	09 f0       	breq	.+2      	; 0x6e0 <__vector_9+0x3e0>
 6de:	30 c1       	rjmp	.+608    	; 0x940 <__stack+0x41>
			{
				UDR0=ADCH_; // 5
 6e0:	80 91 92 01 	lds	r24, 0x0192
 6e4:	80 93 c6 00 	sts	0x00C6, r24
				
				prepareSetDAC(0,CHAN_3);
 6e8:	80 e0       	ldi	r24, 0x00	; 0
 6ea:	90 e0       	ldi	r25, 0x00	; 0
 6ec:	62 e0       	ldi	r22, 0x02	; 2
 6ee:	0e 94 cd 00 	call	0x19a	; 0x19a <prepareSetDAC>
  while(!(SPSR & (1<<SPIF)));
}


void setDAC(){
	PORTD&=~(1<<LDAC);
 6f2:	5a 98       	cbi	0x0b, 2	; 11
	PORTD|=(1<<LDAC);	
 6f4:	5a 9a       	sbi	0x0b, 2	; 11
			{
				UDR0=ADCH_; // 5
				
				prepareSetDAC(0,CHAN_3);
				setDAC();
				event_cnt=0;	
 6f6:	10 92 87 01 	sts	0x0187, r1
 6fa:	10 92 86 01 	sts	0x0186, r1
 6fe:	20 c1       	rjmp	.+576    	; 0x940 <__stack+0x41>
			}
			
		}
		
		
		else if(MD == ANALYZE)//5 by 5
 700:	66 30       	cpi	r22, 0x06	; 6
 702:	09 f0       	breq	.+2      	; 0x706 <__vector_9+0x406>
 704:	1d c1       	rjmp	.+570    	; 0x940 <__stack+0x41>
		{
			//reset
			if(event_cnt==0)
 706:	80 91 86 01 	lds	r24, 0x0186
 70a:	90 91 87 01 	lds	r25, 0x0187
 70e:	00 97       	sbiw	r24, 0x00	; 0
 710:	61 f4       	brne	.+24     	; 0x72a <__vector_9+0x42a>
			{
				prepareSetDAC(reset16, chan);
 712:	80 91 37 01 	lds	r24, 0x0137
 716:	90 91 38 01 	lds	r25, 0x0138
 71a:	60 91 3e 01 	lds	r22, 0x013E
 71e:	0e 94 cd 00 	call	0x19a	; 0x19a <prepareSetDAC>
  while(!(SPSR & (1<<SPIF)));
}


void setDAC(){
	PORTD&=~(1<<LDAC);
 722:	5a 98       	cbi	0x0b, 2	; 11
	PORTD|=(1<<LDAC);	
 724:	5a 9a       	sbi	0x0b, 2	; 11
			//reset
			if(event_cnt==0)
			{
				prepareSetDAC(reset16, chan);
				setDAC();
				UDR0=255;
 726:	8f ef       	ldi	r24, 0xFF	; 255
 728:	09 c1       	rjmp	.+530    	; 0x93c <__stack+0x3d>
			}
			else if(event_cnt==1)
 72a:	81 30       	cpi	r24, 0x01	; 1
 72c:	91 05       	cpc	r25, r1
 72e:	49 f4       	brne	.+18     	; 0x742 <__vector_9+0x442>
			{
				prepareSetDAC(0, chan);				
 730:	80 e0       	ldi	r24, 0x00	; 0
 732:	90 e0       	ldi	r25, 0x00	; 0
 734:	60 91 3e 01 	lds	r22, 0x013E
 738:	0e 94 cd 00 	call	0x19a	; 0x19a <prepareSetDAC>
  while(!(SPSR & (1<<SPIF)));
}


void setDAC(){
	PORTD&=~(1<<LDAC);
 73c:	5a 98       	cbi	0x0b, 2	; 11
	PORTD|=(1<<LDAC);	
 73e:	5a 9a       	sbi	0x0b, 2	; 11
 740:	ff c0       	rjmp	.+510    	; 0x940 <__stack+0x41>
			{
				prepareSetDAC(0, chan);				
				setDAC();
			}
			//create set impulse
			else if(event_cnt==3)
 742:	83 30       	cpi	r24, 0x03	; 3
 744:	91 05       	cpc	r25, r1
 746:	09 f0       	breq	.+2      	; 0x74a <__vector_9+0x44a>
 748:	c4 c0       	rjmp	.+392    	; 0x8d2 <__vector_9+0x5d2>
			{
				if(an_cnt<(BIG_STAT_N))
 74a:	40 91 3f 01 	lds	r20, 0x013F
 74e:	50 91 40 01 	lds	r21, 0x0140
 752:	80 91 93 01 	lds	r24, 0x0193
 756:	90 e0       	ldi	r25, 0x00	; 0
 758:	48 17       	cp	r20, r24
 75a:	59 07       	cpc	r21, r25
 75c:	18 f4       	brcc	.+6      	; 0x764 <__vector_9+0x464>
				{
					STAT_V_step=0;					 
 75e:	10 92 3b 01 	sts	0x013B, r1
 762:	21 c0       	rjmp	.+66     	; 0x7a6 <__vector_9+0x4a6>
				}
				else if(an_cnt<(BIG_STAT_N*2))
 764:	9c 01       	movw	r18, r24
 766:	22 0f       	add	r18, r18
 768:	33 1f       	adc	r19, r19
 76a:	42 17       	cp	r20, r18
 76c:	53 07       	cpc	r21, r19
 76e:	10 f4       	brcc	.+4      	; 0x774 <__vector_9+0x474>
				{
					STAT_V_step=1;
 770:	81 e0       	ldi	r24, 0x01	; 1
 772:	17 c0       	rjmp	.+46     	; 0x7a2 <__vector_9+0x4a2>
				}
				else if(an_cnt<(BIG_STAT_N*3))
 774:	28 0f       	add	r18, r24
 776:	39 1f       	adc	r19, r25
 778:	42 17       	cp	r20, r18
 77a:	53 07       	cpc	r21, r19
 77c:	10 f4       	brcc	.+4      	; 0x782 <__vector_9+0x482>
				{
					STAT_V_step=2;
 77e:	82 e0       	ldi	r24, 0x02	; 2
 780:	10 c0       	rjmp	.+32     	; 0x7a2 <__vector_9+0x4a2>
				}
				else if(an_cnt<(BIG_STAT_N*4))
 782:	9c 01       	movw	r18, r24
 784:	22 0f       	add	r18, r18
 786:	33 1f       	adc	r19, r19
 788:	22 0f       	add	r18, r18
 78a:	33 1f       	adc	r19, r19
 78c:	42 17       	cp	r20, r18
 78e:	53 07       	cpc	r21, r19
 790:	10 f4       	brcc	.+4      	; 0x796 <__vector_9+0x496>
				{
					STAT_V_step=3;
 792:	83 e0       	ldi	r24, 0x03	; 3
 794:	06 c0       	rjmp	.+12     	; 0x7a2 <__vector_9+0x4a2>
				}
				else if(an_cnt<(BIG_STAT_N*5))
 796:	28 0f       	add	r18, r24
 798:	39 1f       	adc	r19, r25
 79a:	42 17       	cp	r20, r18
 79c:	53 07       	cpc	r21, r19
 79e:	18 f4       	brcc	.+6      	; 0x7a6 <__vector_9+0x4a6>
				{
					STAT_V_step=4;
 7a0:	84 e0       	ldi	r24, 0x04	; 4
 7a2:	80 93 3b 01 	sts	0x013B, r24
				}////////////						
				//prepareSetDAC(x16, chan);
				UDR0=STAT_V_step;
 7a6:	80 91 3b 01 	lds	r24, 0x013B
 7aa:	80 93 c6 00 	sts	0x00C6, r24
				x16_grad = (-(STAT_V_step+1)*8 )<<4;//16
 7ae:	90 e0       	ldi	r25, 0x00	; 0
 7b0:	80 95       	com	r24
 7b2:	90 95       	com	r25
 7b4:	96 95       	lsr	r25
 7b6:	98 2f       	mov	r25, r24
 7b8:	88 27       	eor	r24, r24
 7ba:	97 95       	ror	r25
 7bc:	87 95       	ror	r24
 7be:	90 93 97 01 	sts	0x0197, r25
 7c2:	80 93 96 01 	sts	0x0196, r24
				prepareSetDAC(x16_grad, chan);
 7c6:	60 91 3e 01 	lds	r22, 0x013E
 7ca:	0e 94 cd 00 	call	0x19a	; 0x19a <prepareSetDAC>
  while(!(SPSR & (1<<SPIF)));
}


void setDAC(){
	PORTD&=~(1<<LDAC);
 7ce:	5a 98       	cbi	0x0b, 2	; 11
	PORTD|=(1<<LDAC);	
 7d0:	5a 9a       	sbi	0x0b, 2	; 11
				x16_grad = (-(STAT_V_step+1)*8 )<<4;//16
				prepareSetDAC(x16_grad, chan);
				setDAC();
				
				
				if(an_cnt_fast<(STAT_N))//20 us
 7d2:	40 91 41 01 	lds	r20, 0x0141
 7d6:	50 91 42 01 	lds	r21, 0x0142
 7da:	80 91 20 01 	lds	r24, 0x0120
 7de:	90 e0       	ldi	r25, 0x00	; 0
 7e0:	48 17       	cp	r20, r24
 7e2:	59 07       	cpc	r21, r25
 7e4:	18 f4       	brcc	.+6      	; 0x7ec <__vector_9+0x4ec>
				{
					STAT_dt_step=0;									
 7e6:	10 92 3a 01 	sts	0x013A, r1
 7ea:	49 c0       	rjmp	.+146    	; 0x87e <__vector_9+0x57e>
				}
				else if(an_cnt_fast<(STAT_N*2))//80 us
 7ec:	9c 01       	movw	r18, r24
 7ee:	22 0f       	add	r18, r18
 7f0:	33 1f       	adc	r19, r19
 7f2:	42 17       	cp	r20, r18
 7f4:	53 07       	cpc	r21, r19
 7f6:	60 f4       	brcc	.+24     	; 0x810 <__vector_9+0x510>
				{
					STAT_dt_step=1;
 7f8:	81 e0       	ldi	r24, 0x01	; 1
 7fa:	80 93 3a 01 	sts	0x013A, r24
 7fe:	80 e0       	ldi	r24, 0x00	; 0
 800:	90 e0       	ldi	r25, 0x00	; 0
  while(!(SPSR & (1<<SPIF)));
}


void setDAC(){
	PORTD&=~(1<<LDAC);
 802:	5a 98       	cbi	0x0b, 2	; 11
	PORTD|=(1<<LDAC);	
 804:	5a 9a       	sbi	0x0b, 2	; 11
					STAT_dt_step=0;									
				}
				else if(an_cnt_fast<(STAT_N*2))//80 us
				{
					STAT_dt_step=1;
					for(int i=0;i<40;i++)//28
 806:	01 96       	adiw	r24, 0x01	; 1
 808:	88 32       	cpi	r24, 0x28	; 40
 80a:	91 05       	cpc	r25, r1
 80c:	d1 f7       	brne	.-12     	; 0x802 <__vector_9+0x502>
 80e:	37 c0       	rjmp	.+110    	; 0x87e <__vector_9+0x57e>
					{
					setDAC();
					}
				}
				else if(an_cnt_fast<(STAT_N*3))//220 us
 810:	28 0f       	add	r18, r24
 812:	39 1f       	adc	r19, r25
 814:	42 17       	cp	r20, r18
 816:	53 07       	cpc	r21, r19
 818:	60 f4       	brcc	.+24     	; 0x832 <__vector_9+0x532>
				{
					STAT_dt_step=2;
 81a:	82 e0       	ldi	r24, 0x02	; 2
 81c:	80 93 3a 01 	sts	0x013A, r24
 820:	80 e0       	ldi	r24, 0x00	; 0
 822:	90 e0       	ldi	r25, 0x00	; 0
  while(!(SPSR & (1<<SPIF)));
}


void setDAC(){
	PORTD&=~(1<<LDAC);
 824:	5a 98       	cbi	0x0b, 2	; 11
	PORTD|=(1<<LDAC);	
 826:	5a 9a       	sbi	0x0b, 2	; 11
					}
				}
				else if(an_cnt_fast<(STAT_N*3))//220 us
				{
					STAT_dt_step=2;
					for(int i=0;i<160;i++)
 828:	01 96       	adiw	r24, 0x01	; 1
 82a:	80 3a       	cpi	r24, 0xA0	; 160
 82c:	91 05       	cpc	r25, r1
 82e:	d1 f7       	brne	.-12     	; 0x824 <__vector_9+0x524>
 830:	26 c0       	rjmp	.+76     	; 0x87e <__vector_9+0x57e>
					{
					setDAC();
					}
				}
				else if(an_cnt_fast<(STAT_N*4))//900 us
 832:	88 0f       	add	r24, r24
 834:	99 1f       	adc	r25, r25
 836:	88 0f       	add	r24, r24
 838:	99 1f       	adc	r25, r25
 83a:	48 17       	cp	r20, r24
 83c:	59 07       	cpc	r21, r25
 83e:	68 f4       	brcc	.+26     	; 0x85a <__vector_9+0x55a>
				{
					STAT_dt_step=3;
 840:	83 e0       	ldi	r24, 0x03	; 3
 842:	80 93 3a 01 	sts	0x013A, r24
 846:	80 e0       	ldi	r24, 0x00	; 0
 848:	90 e0       	ldi	r25, 0x00	; 0
  while(!(SPSR & (1<<SPIF)));
}


void setDAC(){
	PORTD&=~(1<<LDAC);
 84a:	5a 98       	cbi	0x0b, 2	; 11
	PORTD|=(1<<LDAC);	
 84c:	5a 9a       	sbi	0x0b, 2	; 11
					}
				}
				else if(an_cnt_fast<(STAT_N*4))//900 us
				{
					STAT_dt_step=3;
					for(int i=0;i<640;i++)
 84e:	01 96       	adiw	r24, 0x01	; 1
 850:	22 e0       	ldi	r18, 0x02	; 2
 852:	80 38       	cpi	r24, 0x80	; 128
 854:	92 07       	cpc	r25, r18
 856:	c9 f7       	brne	.-14     	; 0x84a <__vector_9+0x54a>
 858:	12 c0       	rjmp	.+36     	; 0x87e <__vector_9+0x57e>
					{
					setDAC();
					}
				}
				else if(an_cnt_fast<(BIG_STAT_N))//3.5 ms
 85a:	80 91 93 01 	lds	r24, 0x0193
 85e:	90 e0       	ldi	r25, 0x00	; 0
 860:	48 17       	cp	r20, r24
 862:	59 07       	cpc	r21, r25
 864:	60 f4       	brcc	.+24     	; 0x87e <__vector_9+0x57e>
				{
					STAT_dt_step=4;
 866:	84 e0       	ldi	r24, 0x04	; 4
 868:	80 93 3a 01 	sts	0x013A, r24
 86c:	80 e0       	ldi	r24, 0x00	; 0
 86e:	90 e0       	ldi	r25, 0x00	; 0
  while(!(SPSR & (1<<SPIF)));
}


void setDAC(){
	PORTD&=~(1<<LDAC);
 870:	5a 98       	cbi	0x0b, 2	; 11
	PORTD|=(1<<LDAC);	
 872:	5a 9a       	sbi	0x0b, 2	; 11
					}
				}
				else if(an_cnt_fast<(BIG_STAT_N))//3.5 ms
				{
					STAT_dt_step=4;
					for(int i=0;i<2560;i++)
 874:	01 96       	adiw	r24, 0x01	; 1
 876:	2a e0       	ldi	r18, 0x0A	; 10
 878:	80 30       	cpi	r24, 0x00	; 0
 87a:	92 07       	cpc	r25, r18
 87c:	c9 f7       	brne	.-14     	; 0x870 <__vector_9+0x570>
					setDAC();
					}
				}////////////////
									
				
				prepareResetDAC(chan);
 87e:	80 91 3e 01 	lds	r24, 0x013E
 882:	0e 94 92 00 	call	0x124	; 0x124 <prepareResetDAC>
  while(!(SPSR & (1<<SPIF)));
}


void setDAC(){
	PORTD&=~(1<<LDAC);
 886:	5a 98       	cbi	0x0b, 2	; 11
	PORTD|=(1<<LDAC);	
 888:	5a 9a       	sbi	0x0b, 2	; 11
									
				
				prepareResetDAC(chan);
				setDAC();			
				
				an_cnt++; // upper				
 88a:	80 91 3f 01 	lds	r24, 0x013F
 88e:	90 91 40 01 	lds	r25, 0x0140
 892:	01 96       	adiw	r24, 0x01	; 1
 894:	90 93 40 01 	sts	0x0140, r25
 898:	80 93 3f 01 	sts	0x013F, r24
				if(an_cnt>(BIG_STAT_N*5)) an_cnt=0; // lower
 89c:	20 91 93 01 	lds	r18, 0x0193
 8a0:	45 e0       	ldi	r20, 0x05	; 5
 8a2:	24 9f       	mul	r18, r20
 8a4:	90 01       	movw	r18, r0
 8a6:	11 24       	eor	r1, r1
 8a8:	28 17       	cp	r18, r24
 8aa:	39 07       	cpc	r19, r25
 8ac:	20 f4       	brcc	.+8      	; 0x8b6 <__vector_9+0x5b6>
 8ae:	10 92 40 01 	sts	0x0140, r1
 8b2:	10 92 3f 01 	sts	0x013F, r1
				
				an_cnt_fast = an_cnt%BIG_STAT_N;
 8b6:	60 91 93 01 	lds	r22, 0x0193
 8ba:	80 91 3f 01 	lds	r24, 0x013F
 8be:	90 91 40 01 	lds	r25, 0x0140
 8c2:	70 e0       	ldi	r23, 0x00	; 0
 8c4:	0e 94 e3 05 	call	0xbc6	; 0xbc6 <__udivmodhi4>
 8c8:	90 93 42 01 	sts	0x0142, r25
 8cc:	80 93 41 01 	sts	0x0141, r24
 8d0:	37 c0       	rjmp	.+110    	; 0x940 <__stack+0x41>
			}
			else if(event_cnt==4)
 8d2:	84 30       	cpi	r24, 0x04	; 4
 8d4:	91 05       	cpc	r25, r1
 8d6:	29 f4       	brne	.+10     	; 0x8e2 <__vector_9+0x5e2>
			{
				UDR0=STAT_dt_step;
 8d8:	80 91 3a 01 	lds	r24, 0x013A
 8dc:	80 93 c6 00 	sts	0x00C6, r24
 8e0:	27 cf       	rjmp	.-434    	; 0x730 <__vector_9+0x430>
				prepareSetDAC(0, chan);
				setDAC();
			}
			else if(event_cnt==6)//start measure
 8e2:	86 30       	cpi	r24, 0x06	; 6
 8e4:	91 05       	cpc	r25, r1
 8e6:	81 f4       	brne	.+32     	; 0x908 <__stack+0x9>
			{
				prepareSetDAC(ref16, chan);
 8e8:	80 91 35 01 	lds	r24, 0x0135
 8ec:	90 91 36 01 	lds	r25, 0x0136
 8f0:	60 91 3e 01 	lds	r22, 0x013E
 8f4:	0e 94 cd 00 	call	0x19a	; 0x19a <prepareSetDAC>
  while(!(SPSR & (1<<SPIF)));
}


void setDAC(){
	PORTD&=~(1<<LDAC);
 8f8:	5a 98       	cbi	0x0b, 2	; 11
	PORTD|=(1<<LDAC);	
 8fa:	5a 9a       	sbi	0x0b, 2	; 11
			}
			else if(event_cnt==6)//start measure
			{
				prepareSetDAC(ref16, chan);
				setDAC();
				ADCSRA |= (1 << ADSC); 
 8fc:	80 91 7a 00 	lds	r24, 0x007A
 900:	80 64       	ori	r24, 0x40	; 64
 902:	80 93 7a 00 	sts	0x007A, r24
 906:	1c c0       	rjmp	.+56     	; 0x940 <__stack+0x41>
				
			}
			else if(event_cnt==7)
 908:	87 30       	cpi	r24, 0x07	; 7
 90a:	91 05       	cpc	r25, r1
 90c:	99 f4       	brne	.+38     	; 0x934 <__stack+0x35>
			{
				prepareSetDAC(0, chan);
 90e:	80 e0       	ldi	r24, 0x00	; 0
 910:	90 e0       	ldi	r25, 0x00	; 0
 912:	60 91 3e 01 	lds	r22, 0x013E
 916:	0e 94 cd 00 	call	0x19a	; 0x19a <prepareSetDAC>
  while(!(SPSR & (1<<SPIF)));
}


void setDAC(){
	PORTD&=~(1<<LDAC);
 91a:	5a 98       	cbi	0x0b, 2	; 11
	PORTD|=(1<<LDAC);	
 91c:	5a 9a       	sbi	0x0b, 2	; 11
			else if(event_cnt==7)
			{
				prepareSetDAC(0, chan);
				setDAC();
				
				ADCL_=ADCL;	
 91e:	90 91 78 00 	lds	r25, 0x0078
 922:	90 93 8e 01 	sts	0x018E, r25
				ADCH_=ADCH;
 926:	80 91 79 00 	lds	r24, 0x0079
 92a:	80 93 92 01 	sts	0x0192, r24
				UDR0=ADCL_;
 92e:	90 93 c6 00 	sts	0x00C6, r25
 932:	06 c0       	rjmp	.+12     	; 0x940 <__stack+0x41>
			}
			else if(event_cnt==8)
 934:	08 97       	sbiw	r24, 0x08	; 8
 936:	21 f4       	brne	.+8      	; 0x940 <__stack+0x41>
			{
				UDR0=ADCH_;
 938:	80 91 92 01 	lds	r24, 0x0192
 93c:	80 93 c6 00 	sts	0x00C6, r24
		}
		
		
		
		
		ctr=0;
 940:	10 92 8b 01 	sts	0x018B, r1
 944:	10 92 8a 01 	sts	0x018A, r1
		
		
		if(MD == ONE_SHOT)
 948:	80 91 2a 01 	lds	r24, 0x012A
 94c:	85 30       	cpi	r24, 0x05	; 5
 94e:	69 f4       	brne	.+26     	; 0x96a <__stack+0x6b>
		{
			if(event_cnt<16)
 950:	80 91 86 01 	lds	r24, 0x0186
 954:	90 91 87 01 	lds	r25, 0x0187
 958:	80 31       	cpi	r24, 0x10	; 16
 95a:	91 05       	cpc	r25, r1
 95c:	2c f5       	brge	.+74     	; 0x9a8 <__stack+0xa9>
				event_cnt++;
 95e:	01 96       	adiw	r24, 0x01	; 1
 960:	90 93 87 01 	sts	0x0187, r25
 964:	80 93 86 01 	sts	0x0186, r24
 968:	1f c0       	rjmp	.+62     	; 0x9a8 <__stack+0xa9>
 96a:	20 91 86 01 	lds	r18, 0x0186
 96e:	30 91 87 01 	lds	r19, 0x0187
		}
		else if(MD == PROGRAM)
 972:	82 30       	cpi	r24, 0x02	; 2
 974:	49 f4       	brne	.+18     	; 0x988 <__stack+0x89>
		{
			event_cnt++;
 976:	c9 01       	movw	r24, r18
 978:	01 96       	adiw	r24, 0x01	; 1
 97a:	90 93 87 01 	sts	0x0187, r25
 97e:	80 93 86 01 	sts	0x0186, r24
			if(event_cnt>8)
 982:	09 97       	sbiw	r24, 0x09	; 9
 984:	8c f0       	brlt	.+34     	; 0x9a8 <__stack+0xa9>
 986:	0c c0       	rjmp	.+24     	; 0x9a0 <__stack+0xa1>
				event_cnt = 0;
		}
		else{
			event_cnt++;
 988:	2f 5f       	subi	r18, 0xFF	; 255
 98a:	3f 4f       	sbci	r19, 0xFF	; 255
 98c:	30 93 87 01 	sts	0x0187, r19
 990:	20 93 86 01 	sts	0x0186, r18
			if(event_cnt>T)
 994:	80 91 8d 01 	lds	r24, 0x018D
 998:	90 e0       	ldi	r25, 0x00	; 0
 99a:	82 17       	cp	r24, r18
 99c:	93 07       	cpc	r25, r19
 99e:	24 f4       	brge	.+8      	; 0x9a8 <__stack+0xa9>
				event_cnt=0;
 9a0:	10 92 87 01 	sts	0x0187, r1
 9a4:	10 92 86 01 	sts	0x0186, r1
		//{
		//	if(event_cnt<16)
		//		event_cnt++;			
		//}
	}
	ctr++;
 9a8:	80 91 8a 01 	lds	r24, 0x018A
 9ac:	90 91 8b 01 	lds	r25, 0x018B
 9b0:	01 96       	adiw	r24, 0x01	; 1
 9b2:	90 93 8b 01 	sts	0x018B, r25
 9b6:	80 93 8a 01 	sts	0x018A, r24
}
 9ba:	ff 91       	pop	r31
 9bc:	ef 91       	pop	r30
 9be:	bf 91       	pop	r27
 9c0:	af 91       	pop	r26
 9c2:	9f 91       	pop	r25
 9c4:	8f 91       	pop	r24
 9c6:	7f 91       	pop	r23
 9c8:	6f 91       	pop	r22
 9ca:	5f 91       	pop	r21
 9cc:	4f 91       	pop	r20
 9ce:	3f 91       	pop	r19
 9d0:	2f 91       	pop	r18
 9d2:	0f 90       	pop	r0
 9d4:	0f be       	out	0x3f, r0	; 63
 9d6:	0f 90       	pop	r0
 9d8:	1f 90       	pop	r1
 9da:	18 95       	reti

000009dc <__vector_18>:

//прием команд от компьютера по UART в зависимости от режима
ISR(USART_RX_vect)
{
 9dc:	1f 92       	push	r1
 9de:	0f 92       	push	r0
 9e0:	0f b6       	in	r0, 0x3f	; 63
 9e2:	0f 92       	push	r0
 9e4:	11 24       	eor	r1, r1
 9e6:	2f 93       	push	r18
 9e8:	3f 93       	push	r19
 9ea:	4f 93       	push	r20
 9ec:	5f 93       	push	r21
 9ee:	6f 93       	push	r22
 9f0:	7f 93       	push	r23
 9f2:	8f 93       	push	r24
 9f4:	9f 93       	push	r25
 9f6:	af 93       	push	r26
 9f8:	bf 93       	push	r27
 9fa:	ef 93       	push	r30
 9fc:	ff 93       	push	r31
	switch(ptr)
 9fe:	80 91 3c 01 	lds	r24, 0x013C
 a02:	84 30       	cpi	r24, 0x04	; 4
 a04:	09 f4       	brne	.+2      	; 0xa08 <__vector_18+0x2c>
 a06:	69 c0       	rjmp	.+210    	; 0xada <__vector_18+0xfe>
 a08:	85 30       	cpi	r24, 0x05	; 5
 a0a:	58 f4       	brcc	.+22     	; 0xa22 <__vector_18+0x46>
 a0c:	81 30       	cpi	r24, 0x01	; 1
 a0e:	51 f1       	breq	.+84     	; 0xa64 <__vector_18+0x88>
 a10:	81 30       	cpi	r24, 0x01	; 1
 a12:	d0 f0       	brcs	.+52     	; 0xa48 <__vector_18+0x6c>
 a14:	82 30       	cpi	r24, 0x02	; 2
 a16:	09 f4       	brne	.+2      	; 0xa1a <__vector_18+0x3e>
 a18:	42 c0       	rjmp	.+132    	; 0xa9e <__vector_18+0xc2>
 a1a:	83 30       	cpi	r24, 0x03	; 3
 a1c:	09 f0       	breq	.+2      	; 0xa20 <__vector_18+0x44>
 a1e:	9a c0       	rjmp	.+308    	; 0xb54 <__vector_18+0x178>
 a20:	4f c0       	rjmp	.+158    	; 0xac0 <__vector_18+0xe4>
 a22:	87 30       	cpi	r24, 0x07	; 7
 a24:	09 f4       	brne	.+2      	; 0xa28 <__vector_18+0x4c>
 a26:	79 c0       	rjmp	.+242    	; 0xb1a <__vector_18+0x13e>
 a28:	88 30       	cpi	r24, 0x08	; 8
 a2a:	38 f4       	brcc	.+14     	; 0xa3a <__vector_18+0x5e>
 a2c:	85 30       	cpi	r24, 0x05	; 5
 a2e:	09 f4       	brne	.+2      	; 0xa32 <__vector_18+0x56>
 a30:	6a c0       	rjmp	.+212    	; 0xb06 <__vector_18+0x12a>
 a32:	86 30       	cpi	r24, 0x06	; 6
 a34:	09 f0       	breq	.+2      	; 0xa38 <__vector_18+0x5c>
 a36:	8e c0       	rjmp	.+284    	; 0xb54 <__vector_18+0x178>
 a38:	6b c0       	rjmp	.+214    	; 0xb10 <__vector_18+0x134>
 a3a:	88 30       	cpi	r24, 0x08	; 8
 a3c:	09 f4       	brne	.+2      	; 0xa40 <__vector_18+0x64>
 a3e:	72 c0       	rjmp	.+228    	; 0xb24 <__vector_18+0x148>
 a40:	89 30       	cpi	r24, 0x09	; 9
 a42:	09 f0       	breq	.+2      	; 0xa46 <__vector_18+0x6a>
 a44:	87 c0       	rjmp	.+270    	; 0xb54 <__vector_18+0x178>
 a46:	73 c0       	rjmp	.+230    	; 0xb2e <__vector_18+0x152>
	{
		case 0:
		if(UDR0!=255)//байт 255 является синхронизирующим
 a48:	80 91 c6 00 	lds	r24, 0x00C6
 a4c:	8f 3f       	cpi	r24, 0xFF	; 255
 a4e:	31 f0       	breq	.+12     	; 0xa5c <__vector_18+0x80>
		{
			sync=0;
 a50:	10 92 39 01 	sts	0x0139, r1
			ptr--;
			ptr%=7;
 a54:	83 e0       	ldi	r24, 0x03	; 3
 a56:	80 93 3c 01 	sts	0x013C, r24
 a5a:	7c c0       	rjmp	.+248    	; 0xb54 <__vector_18+0x178>
		}
		else
			sync=1;
 a5c:	81 e0       	ldi	r24, 0x01	; 1
 a5e:	80 93 39 01 	sts	0x0139, r24
 a62:	78 c0       	rjmp	.+240    	; 0xb54 <__vector_18+0x178>
		break;
		
		
		case 1:
		MD=UDR0;
 a64:	20 91 c6 00 	lds	r18, 0x00C6
 a68:	20 93 2a 01 	sts	0x012A, r18
		if(MD==VAC)
 a6c:	21 30       	cpi	r18, 0x01	; 1
 a6e:	39 f4       	brne	.+14     	; 0xa7e <__vector_18+0xa2>
			time_step=4;//5
 a70:	84 e0       	ldi	r24, 0x04	; 4
 a72:	90 e0       	ldi	r25, 0x00	; 0
 a74:	90 93 27 01 	sts	0x0127, r25
 a78:	80 93 26 01 	sts	0x0126, r24
 a7c:	6b c0       	rjmp	.+214    	; 0xb54 <__vector_18+0x178>
		else
			time_step=6;//4		
 a7e:	86 e0       	ldi	r24, 0x06	; 6
 a80:	90 e0       	ldi	r25, 0x00	; 0
 a82:	90 93 27 01 	sts	0x0127, r25
 a86:	80 93 26 01 	sts	0x0126, r24
		if(MD==PROGRAM)
 a8a:	22 30       	cpi	r18, 0x02	; 2
 a8c:	09 f0       	breq	.+2      	; 0xa90 <__vector_18+0xb4>
 a8e:	62 c0       	rjmp	.+196    	; 0xb54 <__vector_18+0x178>
		{
			//PROGRAM_start=1;
			PROGRAM_done=0;
 a90:	10 92 3d 01 	sts	0x013D, r1
			proging_val=0;
 a94:	10 92 32 01 	sts	0x0132, r1
 a98:	10 92 31 01 	sts	0x0131, r1
 a9c:	5b c0       	rjmp	.+182    	; 0xb54 <__vector_18+0x178>
		}
		break;
		
		
		case 2:		
		x16_simple = UDR0;
 a9e:	80 91 c6 00 	lds	r24, 0x00C6
 aa2:	90 e0       	ldi	r25, 0x00	; 0
 aa4:	90 93 90 01 	sts	0x0190, r25
 aa8:	80 93 8f 01 	sts	0x018F, r24
		x16 = x16_simple<<4;
 aac:	44 e0       	ldi	r20, 0x04	; 4
 aae:	88 0f       	add	r24, r24
 ab0:	99 1f       	adc	r25, r25
 ab2:	4a 95       	dec	r20
 ab4:	e1 f7       	brne	.-8      	; 0xaae <__vector_18+0xd2>
 ab6:	90 93 34 01 	sts	0x0134, r25
 aba:	80 93 33 01 	sts	0x0133, r24
 abe:	4a c0       	rjmp	.+148    	; 0xb54 <__vector_18+0x178>
		break;
		case 3:	
		ref16=UDR0<<4;
 ac0:	80 91 c6 00 	lds	r24, 0x00C6
 ac4:	90 e0       	ldi	r25, 0x00	; 0
 ac6:	34 e0       	ldi	r19, 0x04	; 4
 ac8:	88 0f       	add	r24, r24
 aca:	99 1f       	adc	r25, r25
 acc:	3a 95       	dec	r19
 ace:	e1 f7       	brne	.-8      	; 0xac8 <__vector_18+0xec>
 ad0:	90 93 36 01 	sts	0x0136, r25
 ad4:	80 93 35 01 	sts	0x0135, r24
 ad8:	3d c0       	rjmp	.+122    	; 0xb54 <__vector_18+0x178>
		break;
		case 4:
		if(MD==PROGRAM)
 ada:	80 91 2a 01 	lds	r24, 0x012A
 ade:	82 30       	cpi	r24, 0x02	; 2
 ae0:	29 f4       	brne	.+10     	; 0xaec <__vector_18+0x110>
			t1=UDR0;
 ae2:	80 91 c6 00 	lds	r24, 0x00C6
 ae6:	80 93 22 01 	sts	0x0122, r24
 aea:	34 c0       	rjmp	.+104    	; 0xb54 <__vector_18+0x178>
		else
			reset16=UDR0<<4;
 aec:	80 91 c6 00 	lds	r24, 0x00C6
 af0:	90 e0       	ldi	r25, 0x00	; 0
 af2:	24 e0       	ldi	r18, 0x04	; 4
 af4:	88 0f       	add	r24, r24
 af6:	99 1f       	adc	r25, r25
 af8:	2a 95       	dec	r18
 afa:	e1 f7       	brne	.-8      	; 0xaf4 <__vector_18+0x118>
 afc:	90 93 38 01 	sts	0x0138, r25
 b00:	80 93 37 01 	sts	0x0137, r24
 b04:	27 c0       	rjmp	.+78     	; 0xb54 <__vector_18+0x178>
		break;		
		case 5:
		
		t2=UDR0;
 b06:	80 91 c6 00 	lds	r24, 0x00C6
 b0a:	80 93 23 01 	sts	0x0123, r24
 b0e:	22 c0       	rjmp	.+68     	; 0xb54 <__vector_18+0x178>
	
		
		break;	
		case 6:
		dT=UDR0;
 b10:	80 91 c6 00 	lds	r24, 0x00C6
 b14:	80 93 89 01 	sts	0x0189, r24
 b18:	1d c0       	rjmp	.+58     	; 0xb54 <__vector_18+0x178>
		break;
		case 7:
		T=UDR0;
 b1a:	80 91 c6 00 	lds	r24, 0x00C6
 b1e:	80 93 8d 01 	sts	0x018D, r24
 b22:	18 c0       	rjmp	.+48     	; 0xb54 <__vector_18+0x178>
		break;
		case 8:
		chan=UDR0;
 b24:	80 91 c6 00 	lds	r24, 0x00C6
 b28:	80 93 3e 01 	sts	0x013E, r24
 b2c:	13 c0       	rjmp	.+38     	; 0xb54 <__vector_18+0x178>
		break;
		
		case 9:
			reverted[chan]=UDR0;
 b2e:	80 91 c6 00 	lds	r24, 0x00C6
 b32:	e0 91 3e 01 	lds	r30, 0x013E
 b36:	f0 e0       	ldi	r31, 0x00	; 0
 b38:	ed 5b       	subi	r30, 0xBD	; 189
 b3a:	fe 4f       	sbci	r31, 0xFE	; 254
 b3c:	80 83       	st	Z, r24
		
			//event_cnt=0;			
			
			if(MD==GATHER_MULT)
 b3e:	80 91 2a 01 	lds	r24, 0x012A
 b42:	83 30       	cpi	r24, 0x03	; 3
 b44:	19 f4       	brne	.+6      	; 0xb4c <__vector_18+0x170>
			{
			//	PORTD=0b00100000;
			//static int ff=1<<5;
			//if(x16>>4)
			gatherMult();
 b46:	0e 94 53 00 	call	0xa6	; 0xa6 <gatherMult>
 b4a:	04 c0       	rjmp	.+8      	; 0xb54 <__vector_18+0x178>
			//PORTD=(1<<5)^PORTD;
			//PORTD=ff;
			}
			else if(MD==SEPAR_MULT)	
 b4c:	84 30       	cpi	r24, 0x04	; 4
 b4e:	11 f4       	brne	.+4      	; 0xb54 <__vector_18+0x178>
			{
			separMult();	
 b50:	0e 94 5c 00 	call	0xb8	; 0xb8 <separMult>
		break;
	}
	

	
	dTt2=dT+t2;
 b54:	80 91 23 01 	lds	r24, 0x0123
 b58:	90 91 89 01 	lds	r25, 0x0189
 b5c:	89 0f       	add	r24, r25
 b5e:	80 93 24 01 	sts	0x0124, r24
	//UDR0=x16/16;
	ptr++;
	ptr%=10;
 b62:	80 91 3c 01 	lds	r24, 0x013C
 b66:	8f 5f       	subi	r24, 0xFF	; 255
 b68:	6a e0       	ldi	r22, 0x0A	; 10
 b6a:	0e 94 ca 05 	call	0xb94	; 0xb94 <__udivmodqi4>
 b6e:	90 93 3c 01 	sts	0x013C, r25
 b72:	ff 91       	pop	r31
 b74:	ef 91       	pop	r30
 b76:	bf 91       	pop	r27
 b78:	af 91       	pop	r26
 b7a:	9f 91       	pop	r25
 b7c:	8f 91       	pop	r24
 b7e:	7f 91       	pop	r23
 b80:	6f 91       	pop	r22
 b82:	5f 91       	pop	r21
 b84:	4f 91       	pop	r20
 b86:	3f 91       	pop	r19
 b88:	2f 91       	pop	r18
 b8a:	0f 90       	pop	r0
 b8c:	0f be       	out	0x3f, r0	; 63
 b8e:	0f 90       	pop	r0
 b90:	1f 90       	pop	r1
 b92:	18 95       	reti

00000b94 <__udivmodqi4>:
 b94:	99 1b       	sub	r25, r25
 b96:	79 e0       	ldi	r23, 0x09	; 9
 b98:	04 c0       	rjmp	.+8      	; 0xba2 <__udivmodqi4_ep>

00000b9a <__udivmodqi4_loop>:
 b9a:	99 1f       	adc	r25, r25
 b9c:	96 17       	cp	r25, r22
 b9e:	08 f0       	brcs	.+2      	; 0xba2 <__udivmodqi4_ep>
 ba0:	96 1b       	sub	r25, r22

00000ba2 <__udivmodqi4_ep>:
 ba2:	88 1f       	adc	r24, r24
 ba4:	7a 95       	dec	r23
 ba6:	c9 f7       	brne	.-14     	; 0xb9a <__udivmodqi4_loop>
 ba8:	80 95       	com	r24
 baa:	08 95       	ret

00000bac <__divmodqi4>:
 bac:	87 fb       	bst	r24, 7
 bae:	08 2e       	mov	r0, r24
 bb0:	06 26       	eor	r0, r22
 bb2:	87 fd       	sbrc	r24, 7
 bb4:	81 95       	neg	r24
 bb6:	67 fd       	sbrc	r22, 7
 bb8:	61 95       	neg	r22
 bba:	ec df       	rcall	.-40     	; 0xb94 <__udivmodqi4>
 bbc:	0e f4       	brtc	.+2      	; 0xbc0 <__divmodqi4_1>
 bbe:	91 95       	neg	r25

00000bc0 <__divmodqi4_1>:
 bc0:	07 fc       	sbrc	r0, 7
 bc2:	81 95       	neg	r24

00000bc4 <__divmodqi4_exit>:
 bc4:	08 95       	ret

00000bc6 <__udivmodhi4>:
 bc6:	aa 1b       	sub	r26, r26
 bc8:	bb 1b       	sub	r27, r27
 bca:	51 e1       	ldi	r21, 0x11	; 17
 bcc:	07 c0       	rjmp	.+14     	; 0xbdc <__udivmodhi4_ep>

00000bce <__udivmodhi4_loop>:
 bce:	aa 1f       	adc	r26, r26
 bd0:	bb 1f       	adc	r27, r27
 bd2:	a6 17       	cp	r26, r22
 bd4:	b7 07       	cpc	r27, r23
 bd6:	10 f0       	brcs	.+4      	; 0xbdc <__udivmodhi4_ep>
 bd8:	a6 1b       	sub	r26, r22
 bda:	b7 0b       	sbc	r27, r23

00000bdc <__udivmodhi4_ep>:
 bdc:	88 1f       	adc	r24, r24
 bde:	99 1f       	adc	r25, r25
 be0:	5a 95       	dec	r21
 be2:	a9 f7       	brne	.-22     	; 0xbce <__udivmodhi4_loop>
 be4:	80 95       	com	r24
 be6:	90 95       	com	r25
 be8:	bc 01       	movw	r22, r24
 bea:	cd 01       	movw	r24, r26
 bec:	08 95       	ret

00000bee <_exit>:
 bee:	f8 94       	cli

00000bf0 <__stop_program>:
 bf0:	ff cf       	rjmp	.-2      	; 0xbf0 <__stop_program>
