
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000010  00800100  000009f4  00000a88  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000009f4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000037  00800110  00800110  00000a98  2**0
                  ALLOC
  3 .debug_aranges 00000020  00000000  00000000  00000a98  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 0000025d  00000000  00000000  00000ab8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000628  00000000  00000000  00000d15  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000204  00000000  00000000  0000133d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000009a4  00000000  00000000  00001541  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000e0  00000000  00000000  00001ee8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000227  00000000  00000000  00001fc8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000e4  00000000  00000000  000021ef  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 19 01 	jmp	0x232	; 0x232 <__vector_9>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 19 04 	jmp	0x832	; 0x832 <__vector_18>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e4 ef       	ldi	r30, 0xF4	; 244
  7c:	f9 e0       	ldi	r31, 0x09	; 9
  7e:	02 c0       	rjmp	.+4      	; 0x84 <.do_copy_data_start>

00000080 <.do_copy_data_loop>:
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0

00000084 <.do_copy_data_start>:
  84:	a0 31       	cpi	r26, 0x10	; 16
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <.do_copy_data_loop>

0000008a <__do_clear_bss>:
  8a:	11 e0       	ldi	r17, 0x01	; 1
  8c:	a0 e1       	ldi	r26, 0x10	; 16
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a7 34       	cpi	r26, 0x47	; 71
  96:	b1 07       	cpc	r27, r17
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 c9 00 	call	0x192	; 0x192 <main>
  9e:	0c 94 f8 04 	jmp	0x9f0	; 0x9f0 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <ADC_Init>:
uint8_t accum_cnt;

//функция инициализаци АЦП
//АЦП используется для регистрации тока, проходящего через мемристор
void ADC_Init(){
 ADCSRA |= (1 << ADEN) // Включаем АЦП
  a6:	ea e7       	ldi	r30, 0x7A	; 122
  a8:	f0 e0       	ldi	r31, 0x00	; 0
  aa:	80 81       	ld	r24, Z
  ac:	83 68       	ori	r24, 0x83	; 131
  ae:	80 83       	st	Z, r24
 //ADCSRA&=~(1 << ADPS1)|(1 << ADPS0)|(1 << ADPS1);
 |(1 << ADPS1)|(1 << ADPS0)|(1 << ADPS1);    // устанавливаем предделитель преобразователя на 8
 ADMUX |= (0 << REFS1)|(1 << REFS0) //выставляем опорное напряжение, как внешний ИОН
  b0:	ec e7       	ldi	r30, 0x7C	; 124
  b2:	f0 e0       	ldi	r31, 0x00	; 0
  b4:	80 81       	ld	r24, Z
  b6:	80 64       	ori	r24, 0x40	; 64
  b8:	80 83       	st	Z, r24
 |(0 << MUX0)|(0 << MUX1)|(0 << MUX2)|(0 << MUX3); // снимать сигнал будем с  входа PC0 
}
  ba:	08 95       	ret

000000bc <timer_init>:

//функция инициализации таймера
// Таймер используется для формирования временной последовательности значений, формируемых с ЦАПа
void timer_init()
{
    TCCR2A = 0;        
  bc:	10 92 b0 00 	sts	0x00B0, r1
    TCCR2B = 0;
  c0:	e1 eb       	ldi	r30, 0xB1	; 177
  c2:	f0 e0       	ldi	r31, 0x00	; 0
  c4:	10 82       	st	Z, r1
    
    TCCR2B |= (1<<CS21) ;    
  c6:	80 81       	ld	r24, Z
  c8:	82 60       	ori	r24, 0x02	; 2
  ca:	80 83       	st	Z, r24
    TIMSK2 = (1 << TOIE2);
  cc:	81 e0       	ldi	r24, 0x01	; 1
  ce:	80 93 70 00 	sts	0x0070, r24
}
  d2:	08 95       	ret

000000d4 <uart_init>:

//функция инициализации UART-интерфейса
void uart_init(unsigned int ubrr)
{	
	UBRR0H = (unsigned char)(ubrr>>8);
  d4:	90 93 c5 00 	sts	0x00C5, r25
	UBRR0L = (unsigned char)ubrr;
  d8:	80 93 c4 00 	sts	0x00C4, r24
	UCSR0B = (1<<RXCIE0)|(1<<RXEN0)|(1<<TXEN0);
  dc:	88 e9       	ldi	r24, 0x98	; 152
  de:	80 93 c1 00 	sts	0x00C1, r24
	UCSR0C = (1<<USBS0)|(3<<UCSZ00);
  e2:	8e e0       	ldi	r24, 0x0E	; 14
  e4:	80 93 c2 00 	sts	0x00C2, r24
}
  e8:	08 95       	ret

000000ea <SPI_MasterInit>:

//функция инициализации SPI
void SPI_MasterInit()
{
	DDR_SPI = (1<<DD_MOSI)|(1<<DD_SCK)|(1<<SPI_SS);
  ea:	8c e2       	ldi	r24, 0x2C	; 44
  ec:	84 b9       	out	0x04, r24	; 4
	SPCR = (1<<SPE)|(0<<DORD)|(1<<MSTR)|(1<<CPOL)|(0<<CPHA);//|(1<<SPR1)|(0<<SPR0);
  ee:	88 e5       	ldi	r24, 0x58	; 88
  f0:	8c bd       	out	0x2c, r24	; 44
}
  f2:	08 95       	ret

000000f4 <gatherMult>:
}

			
void gatherMult()
{
	UNSET_BYTE(PORTD, 6);
  f4:	5e 98       	cbi	0x0b, 6	; 11
	UNSET_BYTE(PORTD, 7);				
  f6:	5f 98       	cbi	0x0b, 7	; 11
	UNSET_BYTE(PORTD, 5);
  f8:	5d 98       	cbi	0x0b, 5	; 11
	UNSET_BYTE(PORTC, 4);
  fa:	44 98       	cbi	0x08, 4	; 8
	
	
	SET_BYTE(PORTC, 1);				
  fc:	41 9a       	sbi	0x08, 1	; 8
	SET_BYTE(PORTB, 2);
  fe:	2a 9a       	sbi	0x05, 2	; 5
	SET_BYTE(PORTB, 1);
 100:	29 9a       	sbi	0x05, 1	; 5
	SET_BYTE(PORTB, 0);
 102:	28 9a       	sbi	0x05, 0	; 5
}
 104:	08 95       	ret

00000106 <separMult>:
void separMult()
{
	UNSET_BYTE(PORTB, 1);
 106:	29 98       	cbi	0x05, 1	; 5
	UNSET_BYTE(PORTB, 2);
 108:	2a 98       	cbi	0x05, 2	; 5
	UNSET_BYTE(PORTC, 1);
 10a:	41 98       	cbi	0x08, 1	; 8
	
	SET_BYTE(PORTC, 4);						
 10c:	44 9a       	sbi	0x08, 4	; 8
	SET_BYTE(PORTD, 6);
 10e:	5e 9a       	sbi	0x0b, 6	; 11
	SET_BYTE(PORTD, 7);
 110:	5f 9a       	sbi	0x0b, 7	; 11
	SET_BYTE(PORTB, 0);
 112:	28 9a       	sbi	0x05, 0	; 5
	SET_BYTE(PORTD, 5);
 114:	5d 9a       	sbi	0x0b, 5	; 11
}
 116:	08 95       	ret

00000118 <SPI_WriteByte>:



void SPI_WriteByte(uint8_t data)
{
   SPDR = data;
 118:	8e bd       	out	0x2e, r24	; 46
  while(!(SPSR & (1<<SPIF)));
 11a:	0d b4       	in	r0, 0x2d	; 45
 11c:	07 fe       	sbrs	r0, 7
 11e:	fd cf       	rjmp	.-6      	; 0x11a <SPI_WriteByte+0x2>
}
 120:	08 95       	ret

00000122 <resetDAC>:

void resetDAC(int8_t chan)//_____________bipolar!!! and <<4 larger
{
    // static int16_t x;
	//x+=2048;
	PORTD&=~(1<<SYNC);
 122:	5b 98       	cbi	0x0b, 3	; 11
	//send8 = (x >> 8);
	// send8 = 0b00001000;
	// send8|=(chan_addrs[chan]);
	SPI_WriteByte(0b00001000|chan_addrs[chan]);
 124:	e8 2f       	mov	r30, r24
 126:	ff 27       	eor	r31, r31
 128:	e7 fd       	sbrc	r30, 7
 12a:	f0 95       	com	r31
 12c:	e0 50       	subi	r30, 0x00	; 0
 12e:	ff 4f       	sbci	r31, 0xFF	; 255
 130:	80 81       	ld	r24, Z
 132:	88 60       	ori	r24, 0x08	; 8
 134:	90 e0       	ldi	r25, 0x00	; 0
 136:	0e 94 8c 00 	call	0x118	; 0x118 <SPI_WriteByte>
	// send8=x;
	SPI_WriteByte(0);		
 13a:	80 e0       	ldi	r24, 0x00	; 0
 13c:	90 e0       	ldi	r25, 0x00	; 0
 13e:	0e 94 8c 00 	call	0x118	; 0x118 <SPI_WriteByte>
	PORTD|=(1<<SYNC);
 142:	5b 9a       	sbi	0x0b, 3	; 11
}
 144:	08 95       	ret

00000146 <setDAC>:

//функция управления ЦАПом 
// при этом, управление регистром LDAC должно использоваться 
//вне функции в перспепктиве создания многоканальной схемы
void setDAC(int16_t x,int8_t chan)//_____________bipolar!!! and <<4 larger
{
 146:	0f 93       	push	r16
 148:	1f 93       	push	r17
 14a:	e6 2f       	mov	r30, r22


	x=-x;
 14c:	00 27       	eor	r16, r16
 14e:	11 27       	eor	r17, r17
 150:	08 1b       	sub	r16, r24
 152:	19 0b       	sbc	r17, r25
	x+=2048;
 154:	00 50       	subi	r16, 0x00	; 0
 156:	18 4f       	sbci	r17, 0xF8	; 248
	PORTD&=~(1<<SYNC);
 158:	5b 98       	cbi	0x0b, 3	; 11
	send8 = (x >> 8);
	send8 &= 0b00001111;
	send8|=(chan_addrs[chan]);
 15a:	81 2f       	mov	r24, r17
 15c:	99 27       	eor	r25, r25
 15e:	87 fd       	sbrc	r24, 7
 160:	9a 95       	dec	r25
 162:	8f 70       	andi	r24, 0x0F	; 15
 164:	ff 27       	eor	r31, r31
 166:	e7 fd       	sbrc	r30, 7
 168:	f0 95       	com	r31
 16a:	e0 50       	subi	r30, 0x00	; 0
 16c:	ff 4f       	sbci	r31, 0xFF	; 255
 16e:	20 81       	ld	r18, Z
 170:	82 2b       	or	r24, r18
 172:	80 93 3b 01 	sts	0x013B, r24
	SPI_WriteByte(send8);
 176:	90 e0       	ldi	r25, 0x00	; 0
 178:	0e 94 8c 00 	call	0x118	; 0x118 <SPI_WriteByte>
	send8=x;
 17c:	00 93 3b 01 	sts	0x013B, r16
	SPI_WriteByte(send8);		
 180:	80 2f       	mov	r24, r16
 182:	90 e0       	ldi	r25, 0x00	; 0
 184:	0e 94 8c 00 	call	0x118	; 0x118 <SPI_WriteByte>
	PORTD|=(1<<SYNC);
 188:	5b 9a       	sbi	0x0b, 3	; 11

}
 18a:	1f 91       	pop	r17
 18c:	0f 91       	pop	r16
 18e:	08 95       	ret

00000190 <set_reverser>:
		else
			PORTB&=~(1<<4);
		break;

	}
}
 190:	08 95       	ret

00000192 <main>:



void main(void)
{
 192:	1f 93       	push	r17
 194:	e0 e0       	ldi	r30, 0x00	; 0
 196:	f1 e0       	ldi	r31, 0x01	; 1
	for (uint8_t i=0; i<8;i++)
		chan_addrs[i]=chan_addrs[i]<<4;
 198:	80 81       	ld	r24, Z
 19a:	82 95       	swap	r24
 19c:	80 7f       	andi	r24, 0xF0	; 240
 19e:	81 93       	st	Z+, r24



void main(void)
{
	for (uint8_t i=0; i<8;i++)
 1a0:	81 e0       	ldi	r24, 0x01	; 1
 1a2:	e8 30       	cpi	r30, 0x08	; 8
 1a4:	f8 07       	cpc	r31, r24
 1a6:	c1 f7       	brne	.-16     	; 0x198 <main+0x6>
		chan_addrs[i]=chan_addrs[i]<<4;
	
	PORTC|=0b00000000;
 1a8:	88 b1       	in	r24, 0x08	; 8
 1aa:	88 b9       	out	0x08, r24	; 8
	DDRC= 0b00011110;
 1ac:	8e e1       	ldi	r24, 0x1E	; 30
 1ae:	87 b9       	out	0x07, r24	; 7
	DDRD =0b11111110;
 1b0:	8e ef       	ldi	r24, 0xFE	; 254
 1b2:	8a b9       	out	0x0a, r24	; 10
	//PORTD|=0b00100000;	
	DDRB= 0b00011111;
 1b4:	8f e1       	ldi	r24, 0x1F	; 31
 1b6:	84 b9       	out	0x04, r24	; 4
	sei();
 1b8:	78 94       	sei
}

//функция инициализации SPI
void SPI_MasterInit()
{
	DDR_SPI = (1<<DD_MOSI)|(1<<DD_SCK)|(1<<SPI_SS);
 1ba:	8c e2       	ldi	r24, 0x2C	; 44
 1bc:	84 b9       	out	0x04, r24	; 4
	SPCR = (1<<SPE)|(0<<DORD)|(1<<MSTR)|(1<<CPOL)|(0<<CPHA);//|(1<<SPR1)|(0<<SPR0);
 1be:	88 e5       	ldi	r24, 0x58	; 88
 1c0:	8c bd       	out	0x2c, r24	; 44

//функция инициализации таймера
// Таймер используется для формирования временной последовательности значений, формируемых с ЦАПа
void timer_init()
{
    TCCR2A = 0;        
 1c2:	10 92 b0 00 	sts	0x00B0, r1
    TCCR2B = 0;
 1c6:	10 92 b1 00 	sts	0x00B1, r1
    
    TCCR2B |= (1<<CS21) ;    
 1ca:	80 91 b1 00 	lds	r24, 0x00B1
 1ce:	82 60       	ori	r24, 0x02	; 2
 1d0:	80 93 b1 00 	sts	0x00B1, r24
    TIMSK2 = (1 << TOIE2);
 1d4:	81 e0       	ldi	r24, 0x01	; 1
 1d6:	80 93 70 00 	sts	0x0070, r24
}

//функция инициализации UART-интерфейса
void uart_init(unsigned int ubrr)
{	
	UBRR0H = (unsigned char)(ubrr>>8);
 1da:	10 92 c5 00 	sts	0x00C5, r1
	UBRR0L = (unsigned char)ubrr;
 1de:	83 e3       	ldi	r24, 0x33	; 51
 1e0:	80 93 c4 00 	sts	0x00C4, r24
	UCSR0B = (1<<RXCIE0)|(1<<RXEN0)|(1<<TXEN0);
 1e4:	88 e9       	ldi	r24, 0x98	; 152
 1e6:	80 93 c1 00 	sts	0x00C1, r24
	UCSR0C = (1<<USBS0)|(3<<UCSZ00);
 1ea:	8e e0       	ldi	r24, 0x0E	; 14
 1ec:	80 93 c2 00 	sts	0x00C2, r24
uint8_t accum_cnt;

//функция инициализаци АЦП
//АЦП используется для регистрации тока, проходящего через мемристор
void ADC_Init(){
 ADCSRA |= (1 << ADEN) // Включаем АЦП
 1f0:	80 91 7a 00 	lds	r24, 0x007A
 1f4:	83 68       	ori	r24, 0x83	; 131
 1f6:	80 93 7a 00 	sts	0x007A, r24
 //ADCSRA&=~(1 << ADPS1)|(1 << ADPS0)|(1 << ADPS1);
 |(1 << ADPS1)|(1 << ADPS0)|(1 << ADPS1);    // устанавливаем предделитель преобразователя на 8
 ADMUX |= (0 << REFS1)|(1 << REFS0) //выставляем опорное напряжение, как внешний ИОН
 1fa:	80 91 7c 00 	lds	r24, 0x007C
 1fe:	80 64       	ori	r24, 0x40	; 64
 200:	80 93 7c 00 	sts	0x007C, r24
    //DDRD = 0b000001100;	
	
	uart_init(BAUDRATE);
	ADC_Init();
	
	ADCSRA |= (1 << ADSC); 
 204:	80 91 7a 00 	lds	r24, 0x007A
 208:	80 64       	ori	r24, 0x40	; 64
 20a:	80 93 7a 00 	sts	0x007A, r24
	ADCL;
 20e:	80 91 78 00 	lds	r24, 0x0078
	ADCL;
 212:	80 91 78 00 	lds	r24, 0x0078
 216:	10 e0       	ldi	r17, 0x00	; 0
		//set_reverser(i,1);
	
	//set_reverser(0,0);
	for (int i=0;i<8;i++)
	{
		setDAC(0,i);
 218:	80 e0       	ldi	r24, 0x00	; 0
 21a:	90 e0       	ldi	r25, 0x00	; 0
 21c:	61 2f       	mov	r22, r17
 21e:	0e 94 a3 00 	call	0x146	; 0x146 <setDAC>
 222:	1f 5f       	subi	r17, 0xFF	; 255

	//for(int i=0;i<8;i++)
		//set_reverser(i,1);
	
	//set_reverser(0,0);
	for (int i=0;i<8;i++)
 224:	18 30       	cpi	r17, 0x08	; 8
 226:	c1 f7       	brne	.-16     	; 0x218 <main+0x86>
	{
		setDAC(0,i);
	}
	PORTD&=~(1<<LDAC);
 228:	5a 98       	cbi	0x0b, 2	; 11
	PORTD|=(1<<LDAC);
 22a:	5a 9a       	sbi	0x0b, 2	; 11
	
	separMult();
 22c:	0e 94 83 00 	call	0x106	; 0x106 <separMult>
 230:	ff cf       	rjmp	.-2      	; 0x230 <main+0x9e>

00000232 <__vector_9>:
//главный цикл работы контроллера
//Здесь устанавливаются значения ЦАП и передаются данные на компьютер
//через UART-интерфейс
//данный участок кода повторяется при переполнении TIMER2
ISR(TIMER2_OVF_vect)
{
 232:	1f 92       	push	r1
 234:	0f 92       	push	r0
 236:	0f b6       	in	r0, 0x3f	; 63
 238:	0f 92       	push	r0
 23a:	11 24       	eor	r1, r1
 23c:	2f 93       	push	r18
 23e:	3f 93       	push	r19
 240:	4f 93       	push	r20
 242:	5f 93       	push	r21
 244:	6f 93       	push	r22
 246:	7f 93       	push	r23
 248:	8f 93       	push	r24
 24a:	9f 93       	push	r25
 24c:	af 93       	push	r26
 24e:	bf 93       	push	r27
 250:	ef 93       	push	r30
 252:	ff 93       	push	r31
	if(ctr>time_step)
 254:	20 91 37 01 	lds	r18, 0x0137
 258:	30 91 38 01 	lds	r19, 0x0138
 25c:	80 91 0c 01 	lds	r24, 0x010C
 260:	90 91 0d 01 	lds	r25, 0x010D
 264:	82 17       	cp	r24, r18
 266:	93 07       	cpc	r25, r19
 268:	0c f0       	brlt	.+2      	; 0x26c <__vector_9+0x3a>
 26a:	c9 c2       	rjmp	.+1426   	; 0x7fe <__vector_9+0x5cc>
	{
		if(MD==CUSTOM)
 26c:	60 91 10 01 	lds	r22, 0x0110
 270:	66 23       	and	r22, r22
 272:	09 f0       	breq	.+2      	; 0x276 <__vector_9+0x44>
 274:	65 c0       	rjmp	.+202    	; 0x340 <__vector_9+0x10e>
		{
			if(event_cnt==(1))
 276:	20 91 33 01 	lds	r18, 0x0133
 27a:	30 91 34 01 	lds	r19, 0x0134
 27e:	21 30       	cpi	r18, 0x01	; 1
 280:	31 05       	cpc	r19, r1
 282:	59 f4       	brne	.+22     	; 0x29a <__vector_9+0x68>
			{	
			ADCL_=ADCL;
 284:	90 91 78 00 	lds	r25, 0x0078
 288:	90 93 3d 01 	sts	0x013D, r25
			ADCH_=ADCH;
 28c:	80 91 79 00 	lds	r24, 0x0079
 290:	80 93 3f 01 	sts	0x013F, r24
			UDR0=ADCL_;			
 294:	90 93 c6 00 	sts	0x00C6, r25
 298:	1b c0       	rjmp	.+54     	; 0x2d0 <__vector_9+0x9e>
			}
			
			if(event_cnt==(2))
 29a:	22 30       	cpi	r18, 0x02	; 2
 29c:	31 05       	cpc	r19, r1
 29e:	29 f4       	brne	.+10     	; 0x2aa <__vector_9+0x78>
			{	
			UDR0=ADCH_;				
 2a0:	80 91 3f 01 	lds	r24, 0x013F
 2a4:	80 93 c6 00 	sts	0x00C6, r24
 2a8:	13 c0       	rjmp	.+38     	; 0x2d0 <__vector_9+0x9e>
			}
			
			
			
			if(event_cnt==0)
 2aa:	21 15       	cp	r18, r1
 2ac:	31 05       	cpc	r19, r1
 2ae:	81 f4       	brne	.+32     	; 0x2d0 <__vector_9+0x9e>
			{
			UDR0=255;
 2b0:	8f ef       	ldi	r24, 0xFF	; 255
 2b2:	80 93 c6 00 	sts	0x00C6, r24
			setDAC(x16,chan);
 2b6:	80 91 19 01 	lds	r24, 0x0119
 2ba:	90 91 1a 01 	lds	r25, 0x011A
 2be:	60 91 23 01 	lds	r22, 0x0123
 2c2:	0e 94 a3 00 	call	0x146	; 0x146 <setDAC>
			setDAC(x16,2);
 2c6:	80 91 19 01 	lds	r24, 0x0119
 2ca:	90 91 1a 01 	lds	r25, 0x011A
 2ce:	32 c0       	rjmp	.+100    	; 0x334 <__vector_9+0x102>
			PORTD&=~(1<<LDAC);
			PORTD|=(1<<LDAC);
			}
			
			else if(event_cnt==t1)
 2d0:	80 91 08 01 	lds	r24, 0x0108
 2d4:	90 e0       	ldi	r25, 0x00	; 0
 2d6:	28 17       	cp	r18, r24
 2d8:	39 07       	cpc	r19, r25
 2da:	09 f4       	brne	.+2      	; 0x2de <__vector_9+0xac>
 2dc:	54 c1       	rjmp	.+680    	; 0x586 <__vector_9+0x354>
				
			setDAC(0,chan);
			PORTD&=~(1<<LDAC);
			PORTD|=(1<<LDAC);
			}
			else if(event_cnt==dT)
 2de:	80 91 36 01 	lds	r24, 0x0136
 2e2:	90 e0       	ldi	r25, 0x00	; 0
 2e4:	28 17       	cp	r18, r24
 2e6:	39 07       	cpc	r19, r25
 2e8:	09 f4       	brne	.+2      	; 0x2ec <__vector_9+0xba>
 2ea:	38 c1       	rjmp	.+624    	; 0x55c <__vector_9+0x32a>
			setDAC(y16,chan);
			PORTD&=~(1<<LDAC);
			PORTD|=(1<<LDAC);
		
			}
			else if(event_cnt==(dT+1))
 2ec:	01 96       	adiw	r24, 0x01	; 1
 2ee:	28 17       	cp	r18, r24
 2f0:	39 07       	cpc	r19, r25
 2f2:	09 f4       	brne	.+2      	; 0x2f6 <__vector_9+0xc4>
 2f4:	3c c2       	rjmp	.+1144   	; 0x76e <__vector_9+0x53c>
				ADCSRA |= (1 << ADSC); 

			else if(event_cnt==dTt2)
 2f6:	80 91 0a 01 	lds	r24, 0x010A
 2fa:	90 e0       	ldi	r25, 0x00	; 0
 2fc:	28 17       	cp	r18, r24
 2fe:	39 07       	cpc	r19, r25
 300:	09 f0       	breq	.+2      	; 0x304 <__vector_9+0xd2>
 302:	57 c2       	rjmp	.+1198   	; 0x7b2 <__vector_9+0x580>
			{
			if ( ( UCSR0A & (1<<UDRE0)) )			
 304:	80 91 c0 00 	lds	r24, 0x00C0
 308:	85 ff       	sbrs	r24, 5
 30a:	04 c0       	rjmp	.+8      	; 0x314 <__vector_9+0xe2>
				UDR0=_adc;	
 30c:	80 91 42 01 	lds	r24, 0x0142
 310:	80 93 c6 00 	sts	0x00C6, r24
			accum=0;
 314:	10 92 41 01 	sts	0x0141, r1
 318:	10 92 40 01 	sts	0x0140, r1
			ADC_on=0;
 31c:	10 92 32 01 	sts	0x0132, r1
			accum_cnt=0;			
 320:	10 92 39 01 	sts	0x0139, r1
			setDAC(0,chan);
 324:	80 e0       	ldi	r24, 0x00	; 0
 326:	90 e0       	ldi	r25, 0x00	; 0
 328:	60 91 23 01 	lds	r22, 0x0123
 32c:	0e 94 a3 00 	call	0x146	; 0x146 <setDAC>
			setDAC(0,2);
 330:	80 e0       	ldi	r24, 0x00	; 0
 332:	90 e0       	ldi	r25, 0x00	; 0
 334:	62 e0       	ldi	r22, 0x02	; 2
 336:	0e 94 a3 00 	call	0x146	; 0x146 <setDAC>
			PORTD&=~(1<<LDAC);
 33a:	5a 98       	cbi	0x0b, 2	; 11
			PORTD|=(1<<LDAC);
 33c:	5a 9a       	sbi	0x0b, 2	; 11
 33e:	39 c2       	rjmp	.+1138   	; 0x7b2 <__vector_9+0x580>

			}		

		}
		else if(MD==VAC)
 340:	61 30       	cpi	r22, 0x01	; 1
 342:	09 f0       	breq	.+2      	; 0x346 <__vector_9+0x114>
 344:	7c c0       	rjmp	.+248    	; 0x43e <__vector_9+0x20c>
		{			
			static int i=0;
			i++;						
 346:	80 91 30 01 	lds	r24, 0x0130
 34a:	90 91 31 01 	lds	r25, 0x0131
 34e:	01 96       	adiw	r24, 0x01	; 1
 350:	90 93 31 01 	sts	0x0131, r25
 354:	80 93 30 01 	sts	0x0130, r24
			
			switch(UDP_cnt)
 358:	80 91 46 01 	lds	r24, 0x0146
 35c:	81 30       	cpi	r24, 0x01	; 1
 35e:	79 f0       	breq	.+30     	; 0x37e <__vector_9+0x14c>
 360:	81 30       	cpi	r24, 0x01	; 1
 362:	30 f0       	brcs	.+12     	; 0x370 <__vector_9+0x13e>
 364:	82 30       	cpi	r24, 0x02	; 2
 366:	f1 f0       	breq	.+60     	; 0x3a4 <__vector_9+0x172>
 368:	83 30       	cpi	r24, 0x03	; 3
 36a:	09 f0       	breq	.+2      	; 0x36e <__vector_9+0x13c>
 36c:	61 c0       	rjmp	.+194    	; 0x430 <__vector_9+0x1fe>
 36e:	1f c0       	rjmp	.+62     	; 0x3ae <__vector_9+0x17c>
			{
				case 0:					
				 ADCSRA |= (1 << ADSC); 
 370:	80 91 7a 00 	lds	r24, 0x007A
 374:	80 64       	ori	r24, 0x40	; 64
 376:	80 93 7a 00 	sts	0x007A, r24
				UDR0=255;
 37a:	8f ef       	ldi	r24, 0xFF	; 255
 37c:	15 c0       	rjmp	.+42     	; 0x3a8 <__vector_9+0x176>
				break;
				
				
				
				case 1:	
				ADCL__=	ADCL_;
 37e:	80 91 3d 01 	lds	r24, 0x013D
 382:	80 93 3a 01 	sts	0x013A, r24
				ADCH__ = ADCH_;
 386:	80 91 3f 01 	lds	r24, 0x013F
 38a:	80 93 35 01 	sts	0x0135, r24
				ADCL_=ADCL;
 38e:	90 91 78 00 	lds	r25, 0x0078
 392:	90 93 3d 01 	sts	0x013D, r25
				ADCH_=ADCH;
 396:	80 91 79 00 	lds	r24, 0x0079
 39a:	80 93 3f 01 	sts	0x013F, r24
				
				UDR0=ADCL_;
 39e:	90 93 c6 00 	sts	0x00C6, r25
 3a2:	46 c0       	rjmp	.+140    	; 0x430 <__vector_9+0x1fe>
				break;
				
				case 2:
				UDR0=ADCH_;
 3a4:	80 91 3f 01 	lds	r24, 0x013F
 3a8:	80 93 c6 00 	sts	0x00C6, r24
 3ac:	41 c0       	rjmp	.+130    	; 0x430 <__vector_9+0x1fe>
				
				
				case 3:
								
				//VAC16_HH=VAC16_H;
				VAC16_H=VAC16;
 3ae:	20 91 11 01 	lds	r18, 0x0111
 3b2:	30 91 12 01 	lds	r19, 0x0112
 3b6:	30 93 14 01 	sts	0x0114, r19
 3ba:	20 93 13 01 	sts	0x0113, r18
				
				if(pos_phase)
 3be:	80 91 0b 01 	lds	r24, 0x010B
 3c2:	88 23       	and	r24, r24
 3c4:	81 f0       	breq	.+32     	; 0x3e6 <__vector_9+0x1b4>
				{
							//PORTC=0b00000010;
		//PORTB=0b00011111;
		//PORTD=0b11101100;
					VAC16+=32;
 3c6:	20 5e       	subi	r18, 0xE0	; 224
 3c8:	3f 4f       	sbci	r19, 0xFF	; 255
 3ca:	30 93 12 01 	sts	0x0112, r19
 3ce:	20 93 11 01 	sts	0x0111, r18
					if(VAC16>(y16-1))
 3d2:	80 91 1b 01 	lds	r24, 0x011B
 3d6:	90 91 1c 01 	lds	r25, 0x011C
 3da:	28 17       	cp	r18, r24
 3dc:	39 07       	cpc	r19, r25
 3de:	b4 f0       	brlt	.+44     	; 0x40c <__vector_9+0x1da>
					{
					pos_phase=0;				
 3e0:	10 92 0b 01 	sts	0x010B, r1
 3e4:	13 c0       	rjmp	.+38     	; 0x40c <__vector_9+0x1da>
				else
				{
					//PORTB=0;
		//PORTC=0;
		//PORTD=0;
					VAC16-=32;
 3e6:	c9 01       	movw	r24, r18
 3e8:	80 97       	sbiw	r24, 0x20	; 32
 3ea:	90 93 12 01 	sts	0x0112, r25
 3ee:	80 93 11 01 	sts	0x0111, r24
					if(VAC16<(-x16+1))
 3f2:	21 e0       	ldi	r18, 0x01	; 1
 3f4:	30 e0       	ldi	r19, 0x00	; 0
 3f6:	40 91 19 01 	lds	r20, 0x0119
 3fa:	50 91 1a 01 	lds	r21, 0x011A
 3fe:	24 1b       	sub	r18, r20
 400:	35 0b       	sbc	r19, r21
 402:	82 17       	cp	r24, r18
 404:	93 07       	cpc	r25, r19
 406:	14 f4       	brge	.+4      	; 0x40c <__vector_9+0x1da>
					{
					pos_phase=1;									
 408:	60 93 0b 01 	sts	0x010B, r22
					}
				}	
				
				
				
				UDR0=VAC16>>4;
 40c:	80 91 11 01 	lds	r24, 0x0111
 410:	90 91 12 01 	lds	r25, 0x0112
 414:	9c 01       	movw	r18, r24
 416:	74 e0       	ldi	r23, 0x04	; 4
 418:	35 95       	asr	r19
 41a:	27 95       	ror	r18
 41c:	7a 95       	dec	r23
 41e:	e1 f7       	brne	.-8      	; 0x418 <__vector_9+0x1e6>
 420:	20 93 c6 00 	sts	0x00C6, r18
				setDAC(VAC16,chan);
 424:	60 91 23 01 	lds	r22, 0x0123
 428:	0e 94 a3 00 	call	0x146	; 0x146 <setDAC>
				//setDAC(VAC16,3);
				//setDAC(VAC16,4);
				//setDAC(VAC16,5);
				//setDAC(VAC16,6);
				//setDAC(VAC16,7);				
				PORTD&=~(1<<LDAC);
 42c:	5a 98       	cbi	0x0b, 2	; 11
				PORTD|=(1<<LDAC);
 42e:	5a 9a       	sbi	0x0b, 2	; 11
				
			}
						
			
			UDP_cnt++;
			UDP_cnt%=4;
 430:	80 91 46 01 	lds	r24, 0x0146
 434:	8f 5f       	subi	r24, 0xFF	; 255
 436:	83 70       	andi	r24, 0x03	; 3
 438:	80 93 46 01 	sts	0x0146, r24
 43c:	ba c1       	rjmp	.+884    	; 0x7b2 <__vector_9+0x580>

			
		}
		else if(MD==PROGRAM)
 43e:	62 30       	cpi	r22, 0x02	; 2
 440:	09 f0       	breq	.+2      	; 0x444 <__vector_9+0x212>
 442:	a6 c0       	rjmp	.+332    	; 0x590 <__vector_9+0x35e>
		{
			T=16;
 444:	80 e1       	ldi	r24, 0x10	; 16
 446:	80 93 3c 01 	sts	0x013C, r24
			static uint16_t adc_h;
			
			if(event_cnt==(1))
 44a:	40 91 33 01 	lds	r20, 0x0133
 44e:	50 91 34 01 	lds	r21, 0x0134
 452:	41 30       	cpi	r20, 0x01	; 1
 454:	51 05       	cpc	r21, r1
 456:	29 f4       	brne	.+10     	; 0x462 <__vector_9+0x230>
			{	
				UDR0=PROGRAM_done;
 458:	80 91 22 01 	lds	r24, 0x0122
 45c:	80 93 c6 00 	sts	0x00C6, r24
 460:	77 c0       	rjmp	.+238    	; 0x550 <__vector_9+0x31e>
			}

			if(event_cnt==(2))//ADC GET 
 462:	42 30       	cpi	r20, 0x02	; 2
 464:	51 05       	cpc	r21, r1
 466:	59 f4       	brne	.+22     	; 0x47e <__vector_9+0x24c>
			{	
				ADCL_=ADCL;	
 468:	90 91 78 00 	lds	r25, 0x0078
 46c:	90 93 3d 01 	sts	0x013D, r25
				ADCH_=ADCH;
 470:	80 91 79 00 	lds	r24, 0x0079
 474:	80 93 3f 01 	sts	0x013F, r24
				UDR0=ADCL_;
 478:	90 93 c6 00 	sts	0x00C6, r25
 47c:	6c c0       	rjmp	.+216    	; 0x556 <__vector_9+0x324>
			}
			
			if(event_cnt==(3))//ADC GET CONTINUE
 47e:	43 30       	cpi	r20, 0x03	; 3
 480:	51 05       	cpc	r21, r1
 482:	31 f5       	brne	.+76     	; 0x4d0 <__vector_9+0x29e>
			{	
				
				UDR0=ADCH_;
 484:	80 91 3f 01 	lds	r24, 0x013F
 488:	80 93 c6 00 	sts	0x00C6, r24
				
				_adc=(ADCL_|(ADCH_ <<8));
 48c:	38 2f       	mov	r19, r24
 48e:	20 e0       	ldi	r18, 0x00	; 0
 490:	80 91 3d 01 	lds	r24, 0x013D
 494:	90 e0       	ldi	r25, 0x00	; 0
 496:	82 2b       	or	r24, r18
 498:	93 2b       	or	r25, r19
 49a:	90 93 43 01 	sts	0x0143, r25
 49e:	80 93 42 01 	sts	0x0142, r24
				adc_h=((uint16_t)(512)-_adc);
 4a2:	20 e0       	ldi	r18, 0x00	; 0
 4a4:	32 e0       	ldi	r19, 0x02	; 2
 4a6:	28 1b       	sub	r18, r24
 4a8:	39 0b       	sbc	r19, r25
 4aa:	30 93 2f 01 	sts	0x012F, r19
 4ae:	20 93 2e 01 	sts	0x012E, r18
				
				if((adc_h)==(uint16_t)(t1))
 4b2:	80 91 08 01 	lds	r24, 0x0108
 4b6:	90 e0       	ldi	r25, 0x00	; 0
 4b8:	28 17       	cp	r18, r24
 4ba:	39 07       	cpc	r19, r25
 4bc:	09 f0       	breq	.+2      	; 0x4c0 <__vector_9+0x28e>
 4be:	48 c0       	rjmp	.+144    	; 0x550 <__vector_9+0x31e>
				{
					PROGRAM_done=1;
 4c0:	81 e0       	ldi	r24, 0x01	; 1
 4c2:	80 93 22 01 	sts	0x0122, r24
					prog_val=0;
 4c6:	10 92 18 01 	sts	0x0118, r1
 4ca:	10 92 17 01 	sts	0x0117, r1
 4ce:	4b c0       	rjmp	.+150    	; 0x566 <__vector_9+0x334>
				}
			}
			
			if(event_cnt==0)
 4d0:	41 15       	cp	r20, r1
 4d2:	51 05       	cpc	r21, r1
 4d4:	e9 f5       	brne	.+122    	; 0x550 <__vector_9+0x31e>
			{
				UDR0=255;
 4d6:	8f ef       	ldi	r24, 0xFF	; 255
 4d8:	80 93 c6 00 	sts	0x00C6, r24
				
				
				prog_val+=32;
 4dc:	20 91 17 01 	lds	r18, 0x0117
 4e0:	30 91 18 01 	lds	r19, 0x0118
 4e4:	20 5e       	subi	r18, 0xE0	; 224
 4e6:	3f 4f       	sbci	r19, 0xFF	; 255
 4e8:	30 93 18 01 	sts	0x0118, r19
 4ec:	20 93 17 01 	sts	0x0117, r18
				
				if(prog_val==(-x16+32))
 4f0:	40 91 19 01 	lds	r20, 0x0119
 4f4:	50 91 1a 01 	lds	r21, 0x011A
 4f8:	80 e2       	ldi	r24, 0x20	; 32
 4fa:	90 e0       	ldi	r25, 0x00	; 0
 4fc:	84 1b       	sub	r24, r20
 4fe:	95 0b       	sbc	r25, r21
 500:	28 17       	cp	r18, r24
 502:	39 07       	cpc	r19, r25
 504:	29 f4       	brne	.+10     	; 0x510 <__vector_9+0x2de>
					prog_val=0;
 506:	10 92 18 01 	sts	0x0118, r1
 50a:	10 92 17 01 	sts	0x0117, r1
 50e:	13 c0       	rjmp	.+38     	; 0x536 <__vector_9+0x304>
				else
				if(prog_val>(t2<<4))
 510:	80 91 09 01 	lds	r24, 0x0109
 514:	90 e0       	ldi	r25, 0x00	; 0
 516:	64 e0       	ldi	r22, 0x04	; 4
 518:	88 0f       	add	r24, r24
 51a:	99 1f       	adc	r25, r25
 51c:	6a 95       	dec	r22
 51e:	e1 f7       	brne	.-8      	; 0x518 <__vector_9+0x2e6>
 520:	82 17       	cp	r24, r18
 522:	93 07       	cpc	r25, r19
 524:	44 f4       	brge	.+16     	; 0x536 <__vector_9+0x304>
					prog_val=-x16;
 526:	88 27       	eor	r24, r24
 528:	99 27       	eor	r25, r25
 52a:	84 1b       	sub	r24, r20
 52c:	95 0b       	sbc	r25, r21
 52e:	90 93 18 01 	sts	0x0118, r25
 532:	80 93 17 01 	sts	0x0117, r24
				
				if(PROGRAM_done)
 536:	80 91 22 01 	lds	r24, 0x0122
 53a:	88 23       	and	r24, r24
 53c:	21 f0       	breq	.+8      	; 0x546 <__vector_9+0x314>
					prog_val=0;
 53e:	10 92 18 01 	sts	0x0118, r1
 542:	10 92 17 01 	sts	0x0117, r1
				
				setDAC(prog_val,chan);
 546:	80 91 17 01 	lds	r24, 0x0117
 54a:	90 91 18 01 	lds	r25, 0x0118
 54e:	1d c0       	rjmp	.+58     	; 0x58a <__vector_9+0x358>
				PORTD&=~(1<<LDAC);
				PORTD|=(1<<LDAC);
			}			
			else if(event_cnt==7)//t1
 550:	47 30       	cpi	r20, 0x07	; 7
 552:	51 05       	cpc	r21, r1
 554:	c1 f0       	breq	.+48     	; 0x586 <__vector_9+0x354>
			{
				setDAC(0,chan);
				PORTD&=~(1<<LDAC);
				PORTD|=(1<<LDAC);
			}
			else if(event_cnt==9)//dT
 556:	49 30       	cpi	r20, 0x09	; 9
 558:	51 05       	cpc	r21, r1
 55a:	29 f4       	brne	.+10     	; 0x566 <__vector_9+0x334>
			{		
				setDAC(y16,chan);
 55c:	80 91 1b 01 	lds	r24, 0x011B
 560:	90 91 1c 01 	lds	r25, 0x011C
 564:	12 c0       	rjmp	.+36     	; 0x58a <__vector_9+0x358>
				PORTD&=~(1<<LDAC);
				PORTD|=(1<<LDAC);
			}
			else if(event_cnt==(9+1))
 566:	4a 30       	cpi	r20, 0x0A	; 10
 568:	51 05       	cpc	r21, r1
 56a:	09 f4       	brne	.+2      	; 0x56e <__vector_9+0x33c>
 56c:	00 c1       	rjmp	.+512    	; 0x76e <__vector_9+0x53c>
				ADCSRA |= (1 << ADSC); 

			else if(event_cnt==14)//
 56e:	4e 30       	cpi	r20, 0x0E	; 14
 570:	51 05       	cpc	r21, r1
 572:	09 f0       	breq	.+2      	; 0x576 <__vector_9+0x344>
 574:	1e c1       	rjmp	.+572    	; 0x7b2 <__vector_9+0x580>
			{

			accum=0;
 576:	10 92 41 01 	sts	0x0141, r1
 57a:	10 92 40 01 	sts	0x0140, r1
			ADC_on=0;
 57e:	10 92 32 01 	sts	0x0132, r1
			accum_cnt=0;
 582:	10 92 39 01 	sts	0x0139, r1
			
			setDAC(0,chan);
 586:	80 e0       	ldi	r24, 0x00	; 0
 588:	90 e0       	ldi	r25, 0x00	; 0
 58a:	60 91 23 01 	lds	r22, 0x0123
 58e:	d3 ce       	rjmp	.-602    	; 0x336 <__vector_9+0x104>
			PORTD&=~(1<<LDAC);
			PORTD|=(1<<LDAC);
			}
		}
		else if(MD == ONE_SHOT)
 590:	65 30       	cpi	r22, 0x05	; 5
 592:	09 f0       	breq	.+2      	; 0x596 <__vector_9+0x364>
 594:	5f c0       	rjmp	.+190    	; 0x654 <__vector_9+0x422>
		{
			//готовим сброс
			if(event_cnt==0)
 596:	80 91 33 01 	lds	r24, 0x0133
 59a:	90 91 34 01 	lds	r25, 0x0134
 59e:	00 97       	sbiw	r24, 0x00	; 0
 5a0:	49 f1       	breq	.+82     	; 0x5f4 <__vector_9+0x3c2>
			{
				separMult();
			}//сброс
			else if(event_cnt==1)
 5a2:	81 30       	cpi	r24, 0x01	; 1
 5a4:	91 05       	cpc	r25, r1
 5a6:	41 f4       	brne	.+16     	; 0x5b8 <__vector_9+0x386>
			{
				setDAC(120<<4,3);
 5a8:	80 e8       	ldi	r24, 0x80	; 128
 5aa:	97 e0       	ldi	r25, 0x07	; 7
 5ac:	63 e0       	ldi	r22, 0x03	; 3
 5ae:	0e 94 a3 00 	call	0x146	; 0x146 <setDAC>
				setDAC(120<<4,2);
 5b2:	80 e8       	ldi	r24, 0x80	; 128
 5b4:	97 e0       	ldi	r25, 0x07	; 7
 5b6:	be ce       	rjmp	.-644    	; 0x334 <__vector_9+0x102>
				PORTD&=~(1<<LDAC);
				PORTD|=(1<<LDAC);
			}
			else if(event_cnt==2)
 5b8:	82 30       	cpi	r24, 0x02	; 2
 5ba:	91 05       	cpc	r25, r1
 5bc:	21 f4       	brne	.+8      	; 0x5c6 <__vector_9+0x394>
			{
				setDAC(0,3);
 5be:	80 e0       	ldi	r24, 0x00	; 0
 5c0:	90 e0       	ldi	r25, 0x00	; 0
 5c2:	63 e0       	ldi	r22, 0x03	; 3
 5c4:	b3 ce       	rjmp	.-666    	; 0x32c <__vector_9+0xfa>
				setDAC(0,2);
				PORTD&=~(1<<LDAC);
				PORTD|=(1<<LDAC);
			}		//reseted		
			else if(event_cnt==3)
 5c6:	83 30       	cpi	r24, 0x03	; 3
 5c8:	91 05       	cpc	r25, r1
 5ca:	19 f4       	brne	.+6      	; 0x5d2 <__vector_9+0x3a0>
			{
				gatherMult();
 5cc:	0e 94 7a 00 	call	0xf4	; 0xf4 <gatherMult>
 5d0:	f0 c0       	rjmp	.+480    	; 0x7b2 <__vector_9+0x580>
			}
			else if(event_cnt==4)
 5d2:	84 30       	cpi	r24, 0x04	; 4
 5d4:	91 05       	cpc	r25, r1
 5d6:	29 f4       	brne	.+10     	; 0x5e2 <__vector_9+0x3b0>
			{
				setDAC(x16,3);				
 5d8:	80 91 19 01 	lds	r24, 0x0119
 5dc:	90 91 1a 01 	lds	r25, 0x011A
 5e0:	22 c0       	rjmp	.+68     	; 0x626 <__vector_9+0x3f4>
				PORTD&=~(1<<LDAC);
				PORTD|=(1<<LDAC);
			}		
			else if(event_cnt==5)
 5e2:	85 30       	cpi	r24, 0x05	; 5
 5e4:	91 05       	cpc	r25, r1
 5e6:	e9 f0       	breq	.+58     	; 0x622 <__vector_9+0x3f0>
				setDAC(0,3);				
				PORTD&=~(1<<LDAC);
				PORTD|=(1<<LDAC);
			}	//пнули		
				//посмотрим, что вышло
			else if(event_cnt==6)
 5e8:	86 30       	cpi	r24, 0x06	; 6
 5ea:	91 05       	cpc	r25, r1
 5ec:	31 f4       	brne	.+12     	; 0x5fa <__vector_9+0x3c8>
			{
				UDR0=255;
 5ee:	8f ef       	ldi	r24, 0xFF	; 255
 5f0:	80 93 c6 00 	sts	0x00C6, r24
				separMult();				
 5f4:	0e 94 83 00 	call	0x106	; 0x106 <separMult>
 5f8:	dc c0       	rjmp	.+440    	; 0x7b2 <__vector_9+0x580>
			}			
			else if(event_cnt==7)
 5fa:	87 30       	cpi	r24, 0x07	; 7
 5fc:	91 05       	cpc	r25, r1
 5fe:	31 f4       	brne	.+12     	; 0x60c <__vector_9+0x3da>
			{
				setDAC(y16,3);
 600:	80 91 1b 01 	lds	r24, 0x011B
 604:	90 91 1c 01 	lds	r25, 0x011C
 608:	63 e0       	ldi	r22, 0x03	; 3
 60a:	ad c0       	rjmp	.+346    	; 0x766 <__vector_9+0x534>
				PORTD&=~(1<<LDAC);
				PORTD|=(1<<LDAC);
				
				ADCSRA |= (1 << ADSC); 
			}	
			else if(event_cnt==9)
 60c:	89 30       	cpi	r24, 0x09	; 9
 60e:	91 05       	cpc	r25, r1
 610:	09 f4       	brne	.+2      	; 0x614 <__vector_9+0x3e2>
 612:	be c0       	rjmp	.+380    	; 0x790 <__vector_9+0x55e>
				//setDAC(y16,3);
				ADCL_=ADCL;	
				ADCH_=ADCH;
				UDR0=ADCL_;
			}
			else if(event_cnt==10)
 614:	8a 30       	cpi	r24, 0x0A	; 10
 616:	91 05       	cpc	r25, r1
 618:	41 f4       	brne	.+16     	; 0x62a <__vector_9+0x3f8>
			{
				UDR0=ADCH_; 
 61a:	80 91 3f 01 	lds	r24, 0x013F
 61e:	80 93 c6 00 	sts	0x00C6, r24
				
				setDAC(0,3);
 622:	80 e0       	ldi	r24, 0x00	; 0
 624:	90 e0       	ldi	r25, 0x00	; 0
 626:	63 e0       	ldi	r22, 0x03	; 3
 628:	86 ce       	rjmp	.-756    	; 0x336 <__vector_9+0x104>
				PORTD&=~(1<<LDAC);
				PORTD|=(1<<LDAC);
			}		
			//3й просмотрен
			else if(event_cnt==11)
 62a:	8b 30       	cpi	r24, 0x0B	; 11
 62c:	91 05       	cpc	r25, r1
 62e:	31 f4       	brne	.+12     	; 0x63c <__vector_9+0x40a>
			{				 
				setDAC(y16,2);
 630:	80 91 1b 01 	lds	r24, 0x011B
 634:	90 91 1c 01 	lds	r25, 0x011C
 638:	62 e0       	ldi	r22, 0x02	; 2
 63a:	95 c0       	rjmp	.+298    	; 0x766 <__vector_9+0x534>
				PORTD&=~(1<<LDAC);
				PORTD|=(1<<LDAC);
				
				ADCSRA |= (1 << ADSC); 
			}
			else if(event_cnt==13)
 63c:	8d 30       	cpi	r24, 0x0D	; 13
 63e:	91 05       	cpc	r25, r1
 640:	09 f4       	brne	.+2      	; 0x644 <__vector_9+0x412>
 642:	a6 c0       	rjmp	.+332    	; 0x790 <__vector_9+0x55e>
			{		
				ADCL_=ADCL;	
				ADCH_=ADCH;
				UDR0=ADCL_;
			}
			else if(event_cnt == 14)
 644:	0e 97       	sbiw	r24, 0x0e	; 14
 646:	09 f0       	breq	.+2      	; 0x64a <__vector_9+0x418>
 648:	b4 c0       	rjmp	.+360    	; 0x7b2 <__vector_9+0x580>
			{
				UDR0=ADCH_; 
 64a:	80 91 3f 01 	lds	r24, 0x013F
 64e:	80 93 c6 00 	sts	0x00C6, r24
 652:	6e ce       	rjmp	.-804    	; 0x330 <__vector_9+0xfe>
			}
			
		}
		
		
		else if(MD == ANALYZE)
 654:	66 30       	cpi	r22, 0x06	; 6
 656:	09 f0       	breq	.+2      	; 0x65a <__vector_9+0x428>
 658:	ac c0       	rjmp	.+344    	; 0x7b2 <__vector_9+0x580>
		{
			//unset
			if(event_cnt==0)
 65a:	80 91 33 01 	lds	r24, 0x0133
 65e:	90 91 34 01 	lds	r25, 0x0134
 662:	00 97       	sbiw	r24, 0x00	; 0
 664:	61 f4       	brne	.+24     	; 0x67e <__vector_9+0x44c>
			{
				setDAC(z16, chan);
 666:	80 91 1d 01 	lds	r24, 0x011D
 66a:	90 91 1e 01 	lds	r25, 0x011E
 66e:	60 91 23 01 	lds	r22, 0x0123
 672:	0e 94 a3 00 	call	0x146	; 0x146 <setDAC>
				PORTD&=~(1<<LDAC);
 676:	5a 98       	cbi	0x0b, 2	; 11
				PORTD|=(1<<LDAC);
 678:	5a 9a       	sbi	0x0b, 2	; 11
				UDR0=255;
 67a:	8f ef       	ldi	r24, 0xFF	; 255
 67c:	98 c0       	rjmp	.+304    	; 0x7ae <__vector_9+0x57c>
			}
			else if(event_cnt==1)
 67e:	81 30       	cpi	r24, 0x01	; 1
 680:	91 05       	cpc	r25, r1
 682:	09 f4       	brne	.+2      	; 0x686 <__vector_9+0x454>
 684:	80 cf       	rjmp	.-256    	; 0x586 <__vector_9+0x354>
				setDAC(0, chan);				
				PORTD&=~(1<<LDAC);
				PORTD|=(1<<LDAC);
			}
			//create analyze series
			else if(event_cnt==3)
 686:	83 30       	cpi	r24, 0x03	; 3
 688:	91 05       	cpc	r25, r1
 68a:	09 f0       	breq	.+2      	; 0x68e <__vector_9+0x45c>
 68c:	5f c0       	rjmp	.+190    	; 0x74c <__vector_9+0x51a>
			{
				setDAC(x16, chan);
 68e:	80 91 19 01 	lds	r24, 0x0119
 692:	90 91 1a 01 	lds	r25, 0x011A
 696:	60 91 23 01 	lds	r22, 0x0123
 69a:	0e 94 a3 00 	call	0x146	; 0x146 <setDAC>
				PORTD&=~(1<<LDAC);
 69e:	5a 98       	cbi	0x0b, 2	; 11
				PORTD|=(1<<LDAC);
 6a0:	5a 9a       	sbi	0x0b, 2	; 11
				
				
				if(an_cnt<(STAT_N))
 6a2:	80 91 24 01 	lds	r24, 0x0124
 6a6:	90 91 25 01 	lds	r25, 0x0125
 6aa:	84 31       	cpi	r24, 0x14	; 20
 6ac:	91 05       	cpc	r25, r1
 6ae:	28 f4       	brcc	.+10     	; 0x6ba <__vector_9+0x488>
				{
					STAT_step=0;
 6b0:	10 92 20 01 	sts	0x0120, r1
					UDR0=STAT_step;					
 6b4:	10 92 c6 00 	sts	0x00C6, r1
 6b8:	32 c0       	rjmp	.+100    	; 0x71e <__vector_9+0x4ec>
				}
				else if(an_cnt<(STAT_N*2))
 6ba:	88 32       	cpi	r24, 0x28	; 40
 6bc:	91 05       	cpc	r25, r1
 6be:	68 f4       	brcc	.+26     	; 0x6da <__vector_9+0x4a8>
				{
					STAT_step=0;
 6c0:	10 92 20 01 	sts	0x0120, r1
					UDR0=STAT_step;
 6c4:	10 92 c6 00 	sts	0x00C6, r1
 6c8:	80 e0       	ldi	r24, 0x00	; 0
 6ca:	90 e0       	ldi	r25, 0x00	; 0
					for(int i=0;i<14;i++)//28
					{
					PORTD&=~(1<<LDAC);
 6cc:	5a 98       	cbi	0x0b, 2	; 11
					PORTD|=(1<<LDAC);
 6ce:	5a 9a       	sbi	0x0b, 2	; 11
				}
				else if(an_cnt<(STAT_N*2))
				{
					STAT_step=0;
					UDR0=STAT_step;
					for(int i=0;i<14;i++)//28
 6d0:	01 96       	adiw	r24, 0x01	; 1
 6d2:	8e 30       	cpi	r24, 0x0E	; 14
 6d4:	91 05       	cpc	r25, r1
 6d6:	d1 f7       	brne	.-12     	; 0x6cc <__vector_9+0x49a>
 6d8:	22 c0       	rjmp	.+68     	; 0x71e <__vector_9+0x4ec>
					{
					PORTD&=~(1<<LDAC);
					PORTD|=(1<<LDAC);
					}
				}
				else if(an_cnt<(STAT_N*3))
 6da:	8c 33       	cpi	r24, 0x3C	; 60
 6dc:	91 05       	cpc	r25, r1
 6de:	70 f4       	brcc	.+28     	; 0x6fc <__vector_9+0x4ca>
				{
					STAT_step=1;
 6e0:	81 e0       	ldi	r24, 0x01	; 1
 6e2:	80 93 20 01 	sts	0x0120, r24
					UDR0=STAT_step;
 6e6:	80 93 c6 00 	sts	0x00C6, r24
 6ea:	80 e0       	ldi	r24, 0x00	; 0
 6ec:	90 e0       	ldi	r25, 0x00	; 0
					for(int i=0;i<81;i++)
					{
					PORTD&=~(1<<LDAC);
 6ee:	5a 98       	cbi	0x0b, 2	; 11
					PORTD|=(1<<LDAC);
 6f0:	5a 9a       	sbi	0x0b, 2	; 11
				}
				else if(an_cnt<(STAT_N*3))
				{
					STAT_step=1;
					UDR0=STAT_step;
					for(int i=0;i<81;i++)
 6f2:	01 96       	adiw	r24, 0x01	; 1
 6f4:	81 35       	cpi	r24, 0x51	; 81
 6f6:	91 05       	cpc	r25, r1
 6f8:	d1 f7       	brne	.-12     	; 0x6ee <__vector_9+0x4bc>
 6fa:	11 c0       	rjmp	.+34     	; 0x71e <__vector_9+0x4ec>
					{
					PORTD&=~(1<<LDAC);
					PORTD|=(1<<LDAC);
					}
				}
				else if(an_cnt<(STAT_N*4))
 6fc:	80 35       	cpi	r24, 0x50	; 80
 6fe:	91 05       	cpc	r25, r1
 700:	70 f4       	brcc	.+28     	; 0x71e <__vector_9+0x4ec>
				{
					STAT_step=2;
 702:	82 e0       	ldi	r24, 0x02	; 2
 704:	80 93 20 01 	sts	0x0120, r24
					UDR0=STAT_step;
 708:	80 93 c6 00 	sts	0x00C6, r24
 70c:	80 e0       	ldi	r24, 0x00	; 0
 70e:	90 e0       	ldi	r25, 0x00	; 0
					for(int i=0;i<320;i++)
					{
					PORTD&=~(1<<LDAC);
 710:	5a 98       	cbi	0x0b, 2	; 11
					PORTD|=(1<<LDAC);
 712:	5a 9a       	sbi	0x0b, 2	; 11
				}
				else if(an_cnt<(STAT_N*4))
				{
					STAT_step=2;
					UDR0=STAT_step;
					for(int i=0;i<320;i++)
 714:	01 96       	adiw	r24, 0x01	; 1
 716:	21 e0       	ldi	r18, 0x01	; 1
 718:	80 34       	cpi	r24, 0x40	; 64
 71a:	92 07       	cpc	r25, r18
 71c:	c9 f7       	brne	.-14     	; 0x710 <__vector_9+0x4de>
					PORTD&=~(1<<LDAC);
					PORTD|=(1<<LDAC);
					}
				}
				
				resetDAC(chan);
 71e:	80 91 23 01 	lds	r24, 0x0123
 722:	0e 94 91 00 	call	0x122	; 0x122 <resetDAC>
				PORTD&=~(1<<LDAC);
 726:	5a 98       	cbi	0x0b, 2	; 11
				PORTD|=(1<<LDAC);				
 728:	5a 9a       	sbi	0x0b, 2	; 11
				
				an_cnt++;
 72a:	80 91 24 01 	lds	r24, 0x0124
 72e:	90 91 25 01 	lds	r25, 0x0125
 732:	01 96       	adiw	r24, 0x01	; 1
 734:	90 93 25 01 	sts	0x0125, r25
 738:	80 93 24 01 	sts	0x0124, r24
				if(an_cnt==(STAT_N*4)) an_cnt=0;
 73c:	80 35       	cpi	r24, 0x50	; 80
 73e:	91 05       	cpc	r25, r1
 740:	c1 f5       	brne	.+112    	; 0x7b2 <__vector_9+0x580>
 742:	10 92 25 01 	sts	0x0125, r1
 746:	10 92 24 01 	sts	0x0124, r1
 74a:	33 c0       	rjmp	.+102    	; 0x7b2 <__vector_9+0x580>
			}
			else if(event_cnt==4)
 74c:	84 30       	cpi	r24, 0x04	; 4
 74e:	91 05       	cpc	r25, r1
 750:	09 f4       	brne	.+2      	; 0x754 <__vector_9+0x522>
 752:	19 cf       	rjmp	.-462    	; 0x586 <__vector_9+0x354>
			{
				setDAC(0, chan);
				PORTD&=~(1<<LDAC);
				PORTD|=(1<<LDAC);
			}
			else if(event_cnt==6)//measure
 754:	86 30       	cpi	r24, 0x06	; 6
 756:	91 05       	cpc	r25, r1
 758:	81 f4       	brne	.+32     	; 0x77a <__vector_9+0x548>
			{
				setDAC(y16, chan);
 75a:	80 91 1b 01 	lds	r24, 0x011B
 75e:	90 91 1c 01 	lds	r25, 0x011C
 762:	60 91 23 01 	lds	r22, 0x0123
 766:	0e 94 a3 00 	call	0x146	; 0x146 <setDAC>
				PORTD&=~(1<<LDAC);
 76a:	5a 98       	cbi	0x0b, 2	; 11
				PORTD|=(1<<LDAC);
 76c:	5a 9a       	sbi	0x0b, 2	; 11
				ADCSRA |= (1 << ADSC); 
 76e:	80 91 7a 00 	lds	r24, 0x007A
 772:	80 64       	ori	r24, 0x40	; 64
 774:	80 93 7a 00 	sts	0x007A, r24
 778:	1c c0       	rjmp	.+56     	; 0x7b2 <__vector_9+0x580>
				
			}
			else if(event_cnt==7)
 77a:	87 30       	cpi	r24, 0x07	; 7
 77c:	91 05       	cpc	r25, r1
 77e:	99 f4       	brne	.+38     	; 0x7a6 <__vector_9+0x574>
			{
				setDAC(0, chan);
 780:	80 e0       	ldi	r24, 0x00	; 0
 782:	90 e0       	ldi	r25, 0x00	; 0
 784:	60 91 23 01 	lds	r22, 0x0123
 788:	0e 94 a3 00 	call	0x146	; 0x146 <setDAC>
				PORTD&=~(1<<LDAC);
 78c:	5a 98       	cbi	0x0b, 2	; 11
				PORTD|=(1<<LDAC);
 78e:	5a 9a       	sbi	0x0b, 2	; 11
				
				ADCL_=ADCL;	
 790:	90 91 78 00 	lds	r25, 0x0078
 794:	90 93 3d 01 	sts	0x013D, r25
				ADCH_=ADCH;
 798:	80 91 79 00 	lds	r24, 0x0079
 79c:	80 93 3f 01 	sts	0x013F, r24
				UDR0=ADCL_;
 7a0:	90 93 c6 00 	sts	0x00C6, r25
 7a4:	06 c0       	rjmp	.+12     	; 0x7b2 <__vector_9+0x580>
			}
			else if(event_cnt==8)
 7a6:	08 97       	sbiw	r24, 0x08	; 8
 7a8:	21 f4       	brne	.+8      	; 0x7b2 <__vector_9+0x580>
			{
				UDR0=ADCH_;
 7aa:	80 91 3f 01 	lds	r24, 0x013F
 7ae:	80 93 c6 00 	sts	0x00C6, r24
		}
		
		
		
		
		ctr=0;
 7b2:	10 92 38 01 	sts	0x0138, r1
 7b6:	10 92 37 01 	sts	0x0137, r1
		
		
		if(MD!=ONE_SHOT)
 7ba:	80 91 10 01 	lds	r24, 0x0110
 7be:	20 91 33 01 	lds	r18, 0x0133
 7c2:	30 91 34 01 	lds	r19, 0x0134
 7c6:	85 30       	cpi	r24, 0x05	; 5
 7c8:	89 f0       	breq	.+34     	; 0x7ec <__vector_9+0x5ba>
		{
		event_cnt++;
 7ca:	2f 5f       	subi	r18, 0xFF	; 255
 7cc:	3f 4f       	sbci	r19, 0xFF	; 255
 7ce:	30 93 34 01 	sts	0x0134, r19
 7d2:	20 93 33 01 	sts	0x0133, r18
		if(event_cnt>T)
 7d6:	80 91 3c 01 	lds	r24, 0x013C
 7da:	90 e0       	ldi	r25, 0x00	; 0
 7dc:	82 17       	cp	r24, r18
 7de:	93 07       	cpc	r25, r19
 7e0:	74 f4       	brge	.+28     	; 0x7fe <__vector_9+0x5cc>
			event_cnt=0;
 7e2:	10 92 34 01 	sts	0x0134, r1
 7e6:	10 92 33 01 	sts	0x0133, r1
 7ea:	09 c0       	rjmp	.+18     	; 0x7fe <__vector_9+0x5cc>
		}
		else
		{
			if(event_cnt<30)
 7ec:	2e 31       	cpi	r18, 0x1E	; 30
 7ee:	31 05       	cpc	r19, r1
 7f0:	34 f4       	brge	.+12     	; 0x7fe <__vector_9+0x5cc>
				event_cnt++;			
 7f2:	2f 5f       	subi	r18, 0xFF	; 255
 7f4:	3f 4f       	sbci	r19, 0xFF	; 255
 7f6:	30 93 34 01 	sts	0x0134, r19
 7fa:	20 93 33 01 	sts	0x0133, r18
		}
	}
	ctr++;
 7fe:	80 91 37 01 	lds	r24, 0x0137
 802:	90 91 38 01 	lds	r25, 0x0138
 806:	01 96       	adiw	r24, 0x01	; 1
 808:	90 93 38 01 	sts	0x0138, r25
 80c:	80 93 37 01 	sts	0x0137, r24
}
 810:	ff 91       	pop	r31
 812:	ef 91       	pop	r30
 814:	bf 91       	pop	r27
 816:	af 91       	pop	r26
 818:	9f 91       	pop	r25
 81a:	8f 91       	pop	r24
 81c:	7f 91       	pop	r23
 81e:	6f 91       	pop	r22
 820:	5f 91       	pop	r21
 822:	4f 91       	pop	r20
 824:	3f 91       	pop	r19
 826:	2f 91       	pop	r18
 828:	0f 90       	pop	r0
 82a:	0f be       	out	0x3f, r0	; 63
 82c:	0f 90       	pop	r0
 82e:	1f 90       	pop	r1
 830:	18 95       	reti

00000832 <__vector_18>:

//прием команд от компьютера по UART в зависимости от режима
ISR(USART_RX_vect)
{
 832:	1f 92       	push	r1
 834:	0f 92       	push	r0
 836:	0f b6       	in	r0, 0x3f	; 63
 838:	0f 92       	push	r0
 83a:	11 24       	eor	r1, r1
 83c:	2f 93       	push	r18
 83e:	3f 93       	push	r19
 840:	4f 93       	push	r20
 842:	5f 93       	push	r21
 844:	6f 93       	push	r22
 846:	7f 93       	push	r23
 848:	8f 93       	push	r24
 84a:	9f 93       	push	r25
 84c:	af 93       	push	r26
 84e:	bf 93       	push	r27
 850:	ef 93       	push	r30
 852:	ff 93       	push	r31
	switch(ptr)
 854:	80 91 21 01 	lds	r24, 0x0121
 858:	84 30       	cpi	r24, 0x04	; 4
 85a:	09 f4       	brne	.+2      	; 0x85e <__vector_18+0x2c>
 85c:	65 c0       	rjmp	.+202    	; 0x928 <__stack+0x29>
 85e:	85 30       	cpi	r24, 0x05	; 5
 860:	58 f4       	brcc	.+22     	; 0x878 <__vector_18+0x46>
 862:	81 30       	cpi	r24, 0x01	; 1
 864:	51 f1       	breq	.+84     	; 0x8ba <__vector_18+0x88>
 866:	81 30       	cpi	r24, 0x01	; 1
 868:	d0 f0       	brcs	.+52     	; 0x89e <__vector_18+0x6c>
 86a:	82 30       	cpi	r24, 0x02	; 2
 86c:	09 f4       	brne	.+2      	; 0x870 <__vector_18+0x3e>
 86e:	42 c0       	rjmp	.+132    	; 0x8f4 <__vector_18+0xc2>
 870:	83 30       	cpi	r24, 0x03	; 3
 872:	09 f0       	breq	.+2      	; 0x876 <__vector_18+0x44>
 874:	91 c0       	rjmp	.+290    	; 0x998 <__stack+0x99>
 876:	4b c0       	rjmp	.+150    	; 0x90e <__stack+0xf>
 878:	87 30       	cpi	r24, 0x07	; 7
 87a:	09 f4       	brne	.+2      	; 0x87e <__vector_18+0x4c>
 87c:	6c c0       	rjmp	.+216    	; 0x956 <__stack+0x57>
 87e:	88 30       	cpi	r24, 0x08	; 8
 880:	38 f4       	brcc	.+14     	; 0x890 <__vector_18+0x5e>
 882:	85 30       	cpi	r24, 0x05	; 5
 884:	09 f4       	brne	.+2      	; 0x888 <__vector_18+0x56>
 886:	5d c0       	rjmp	.+186    	; 0x942 <__stack+0x43>
 888:	86 30       	cpi	r24, 0x06	; 6
 88a:	09 f0       	breq	.+2      	; 0x88e <__vector_18+0x5c>
 88c:	85 c0       	rjmp	.+266    	; 0x998 <__stack+0x99>
 88e:	5e c0       	rjmp	.+188    	; 0x94c <__stack+0x4d>
 890:	88 30       	cpi	r24, 0x08	; 8
 892:	09 f4       	brne	.+2      	; 0x896 <__vector_18+0x64>
 894:	65 c0       	rjmp	.+202    	; 0x960 <__stack+0x61>
 896:	89 30       	cpi	r24, 0x09	; 9
 898:	09 f0       	breq	.+2      	; 0x89c <__vector_18+0x6a>
 89a:	7e c0       	rjmp	.+252    	; 0x998 <__stack+0x99>
 89c:	66 c0       	rjmp	.+204    	; 0x96a <__stack+0x6b>
	{
		case 0:
		if(UDR0!=255)//байт 255 является синхронизирующим
 89e:	80 91 c6 00 	lds	r24, 0x00C6
 8a2:	8f 3f       	cpi	r24, 0xFF	; 255
 8a4:	31 f0       	breq	.+12     	; 0x8b2 <__vector_18+0x80>
		{
			sync=0;
 8a6:	10 92 1f 01 	sts	0x011F, r1
			ptr--;
			ptr%=7;
 8aa:	83 e0       	ldi	r24, 0x03	; 3
 8ac:	80 93 21 01 	sts	0x0121, r24
 8b0:	73 c0       	rjmp	.+230    	; 0x998 <__stack+0x99>
		}
		else
			sync=1;
 8b2:	81 e0       	ldi	r24, 0x01	; 1
 8b4:	80 93 1f 01 	sts	0x011F, r24
 8b8:	6f c0       	rjmp	.+222    	; 0x998 <__stack+0x99>
		break;
		case 1:
		MD=UDR0;
 8ba:	20 91 c6 00 	lds	r18, 0x00C6
 8be:	20 93 10 01 	sts	0x0110, r18
		if(MD==VAC)
 8c2:	21 30       	cpi	r18, 0x01	; 1
 8c4:	39 f4       	brne	.+14     	; 0x8d4 <__vector_18+0xa2>
			time_step=4;//5
 8c6:	84 e0       	ldi	r24, 0x04	; 4
 8c8:	90 e0       	ldi	r25, 0x00	; 0
 8ca:	90 93 0d 01 	sts	0x010D, r25
 8ce:	80 93 0c 01 	sts	0x010C, r24
 8d2:	62 c0       	rjmp	.+196    	; 0x998 <__stack+0x99>
		else
			time_step=6;//4
 8d4:	86 e0       	ldi	r24, 0x06	; 6
 8d6:	90 e0       	ldi	r25, 0x00	; 0
 8d8:	90 93 0d 01 	sts	0x010D, r25
 8dc:	80 93 0c 01 	sts	0x010C, r24
		
		if(MD==PROGRAM)
 8e0:	22 30       	cpi	r18, 0x02	; 2
 8e2:	09 f0       	breq	.+2      	; 0x8e6 <__vector_18+0xb4>
 8e4:	59 c0       	rjmp	.+178    	; 0x998 <__stack+0x99>
		{
			//PROGRAM_start=1;
			PROGRAM_done=0;
 8e6:	10 92 22 01 	sts	0x0122, r1
			prog_val=0;
 8ea:	10 92 18 01 	sts	0x0118, r1
 8ee:	10 92 17 01 	sts	0x0117, r1
 8f2:	52 c0       	rjmp	.+164    	; 0x998 <__stack+0x99>
		}
		break;
		case 2:
		x16=UDR0<<4;
 8f4:	80 91 c6 00 	lds	r24, 0x00C6
 8f8:	90 e0       	ldi	r25, 0x00	; 0
 8fa:	a4 e0       	ldi	r26, 0x04	; 4
 8fc:	88 0f       	add	r24, r24
 8fe:	99 1f       	adc	r25, r25
 900:	aa 95       	dec	r26
 902:	e1 f7       	brne	.-8      	; 0x8fc <__vector_18+0xca>
 904:	90 93 1a 01 	sts	0x011A, r25
 908:	80 93 19 01 	sts	0x0119, r24
 90c:	45 c0       	rjmp	.+138    	; 0x998 <__stack+0x99>
		break;
		case 3:	
		y16=UDR0<<4;
 90e:	80 91 c6 00 	lds	r24, 0x00C6
 912:	90 e0       	ldi	r25, 0x00	; 0
 914:	f4 e0       	ldi	r31, 0x04	; 4
 916:	88 0f       	add	r24, r24
 918:	99 1f       	adc	r25, r25
 91a:	fa 95       	dec	r31
 91c:	e1 f7       	brne	.-8      	; 0x916 <__stack+0x17>
 91e:	90 93 1c 01 	sts	0x011C, r25
 922:	80 93 1b 01 	sts	0x011B, r24
 926:	38 c0       	rjmp	.+112    	; 0x998 <__stack+0x99>
		break;
		case 4:
		z16=UDR0<<4;
 928:	80 91 c6 00 	lds	r24, 0x00C6
 92c:	90 e0       	ldi	r25, 0x00	; 0
 92e:	e4 e0       	ldi	r30, 0x04	; 4
 930:	88 0f       	add	r24, r24
 932:	99 1f       	adc	r25, r25
 934:	ea 95       	dec	r30
 936:	e1 f7       	brne	.-8      	; 0x930 <__stack+0x31>
 938:	90 93 1e 01 	sts	0x011E, r25
 93c:	80 93 1d 01 	sts	0x011D, r24
 940:	2b c0       	rjmp	.+86     	; 0x998 <__stack+0x99>
		break;		
		case 5:
		t2=UDR0;
 942:	80 91 c6 00 	lds	r24, 0x00C6
 946:	80 93 09 01 	sts	0x0109, r24
 94a:	26 c0       	rjmp	.+76     	; 0x998 <__stack+0x99>
		break;	
		case 6:
		dT=UDR0;
 94c:	80 91 c6 00 	lds	r24, 0x00C6
 950:	80 93 36 01 	sts	0x0136, r24
 954:	21 c0       	rjmp	.+66     	; 0x998 <__stack+0x99>
		break;
		case 7:
		T=UDR0;
 956:	80 91 c6 00 	lds	r24, 0x00C6
 95a:	80 93 3c 01 	sts	0x013C, r24
 95e:	1c c0       	rjmp	.+56     	; 0x998 <__stack+0x99>
		break;
		case 8:
		chan=UDR0;
 960:	80 91 c6 00 	lds	r24, 0x00C6
 964:	80 93 23 01 	sts	0x0123, r24
 968:	17 c0       	rjmp	.+46     	; 0x998 <__stack+0x99>
		break;
		
		case 9:
			reverted[chan]=UDR0;
 96a:	80 91 c6 00 	lds	r24, 0x00C6
 96e:	e0 91 23 01 	lds	r30, 0x0123
 972:	f0 e0       	ldi	r31, 0x00	; 0
 974:	ea 5d       	subi	r30, 0xDA	; 218
 976:	fe 4f       	sbci	r31, 0xFE	; 254
 978:	80 83       	st	Z, r24
		
			event_cnt=0;			
 97a:	10 92 34 01 	sts	0x0134, r1
 97e:	10 92 33 01 	sts	0x0133, r1
			
			if(MD==GATHER_MULT)
 982:	80 91 10 01 	lds	r24, 0x0110
 986:	83 30       	cpi	r24, 0x03	; 3
 988:	19 f4       	brne	.+6      	; 0x990 <__stack+0x91>
			{
			//	PORTD=0b00100000;
			//static int ff=1<<5;
			//if(x16>>4)
			gatherMult();
 98a:	0e 94 7a 00 	call	0xf4	; 0xf4 <gatherMult>
 98e:	04 c0       	rjmp	.+8      	; 0x998 <__stack+0x99>
			//PORTD=(1<<5)^PORTD;
			//PORTD=ff;
			}
			else if(MD==SEPAR_MULT)	
 990:	84 30       	cpi	r24, 0x04	; 4
 992:	11 f4       	brne	.+4      	; 0x998 <__stack+0x99>
			{
			separMult();	
 994:	0e 94 83 00 	call	0x106	; 0x106 <separMult>
		break;
	}
	

	
	dTt2=dT+t2;
 998:	80 91 09 01 	lds	r24, 0x0109
 99c:	90 91 36 01 	lds	r25, 0x0136
 9a0:	89 0f       	add	r24, r25
 9a2:	80 93 0a 01 	sts	0x010A, r24
	//UDR0=x16/16;
	ptr++;
	ptr%=10;
 9a6:	80 91 21 01 	lds	r24, 0x0121
 9aa:	8f 5f       	subi	r24, 0xFF	; 255
 9ac:	6a e0       	ldi	r22, 0x0A	; 10
 9ae:	0e 94 ec 04 	call	0x9d8	; 0x9d8 <__udivmodqi4>
 9b2:	90 93 21 01 	sts	0x0121, r25
 9b6:	ff 91       	pop	r31
 9b8:	ef 91       	pop	r30
 9ba:	bf 91       	pop	r27
 9bc:	af 91       	pop	r26
 9be:	9f 91       	pop	r25
 9c0:	8f 91       	pop	r24
 9c2:	7f 91       	pop	r23
 9c4:	6f 91       	pop	r22
 9c6:	5f 91       	pop	r21
 9c8:	4f 91       	pop	r20
 9ca:	3f 91       	pop	r19
 9cc:	2f 91       	pop	r18
 9ce:	0f 90       	pop	r0
 9d0:	0f be       	out	0x3f, r0	; 63
 9d2:	0f 90       	pop	r0
 9d4:	1f 90       	pop	r1
 9d6:	18 95       	reti

000009d8 <__udivmodqi4>:
 9d8:	99 1b       	sub	r25, r25
 9da:	79 e0       	ldi	r23, 0x09	; 9
 9dc:	04 c0       	rjmp	.+8      	; 0x9e6 <__udivmodqi4_ep>

000009de <__udivmodqi4_loop>:
 9de:	99 1f       	adc	r25, r25
 9e0:	96 17       	cp	r25, r22
 9e2:	08 f0       	brcs	.+2      	; 0x9e6 <__udivmodqi4_ep>
 9e4:	96 1b       	sub	r25, r22

000009e6 <__udivmodqi4_ep>:
 9e6:	88 1f       	adc	r24, r24
 9e8:	7a 95       	dec	r23
 9ea:	c9 f7       	brne	.-14     	; 0x9de <__udivmodqi4_loop>
 9ec:	80 95       	com	r24
 9ee:	08 95       	ret

000009f0 <_exit>:
 9f0:	f8 94       	cli

000009f2 <__stop_program>:
 9f2:	ff cf       	rjmp	.-2      	; 0x9f2 <__stop_program>
